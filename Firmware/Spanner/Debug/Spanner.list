
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c540  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800c6cc  0800c6cc  0001c6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c770  0800c770  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c778  0800c778  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800c784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000190  0800c914  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e8  0800c914  000215e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002347c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005383  00000000  00000000  0004363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  000489c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cb1  00000000  00000000  0004c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023201  00000000  00000000  0006fd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c42d0  00000000  00000000  00092f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015724a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007790  00000000  00000000  0015729c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c6b4 	.word	0x0800c6b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800c6b4 	.word	0x0800c6b4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	709a      	strb	r2, [r3, #2]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	70da      	strb	r2, [r3, #3]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	711a      	strb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	715a      	strb	r2, [r3, #5]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	71da      	strb	r2, [r3, #7]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	721a      	strb	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	725a      	strb	r2, [r3, #9]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2201      	movs	r2, #1
 8000518:	729a      	strb	r2, [r3, #10]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	72da      	strb	r2, [r3, #11]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2220      	movs	r2, #32
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	805a      	strh	r2, [r3, #2]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	809a      	strh	r2, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	80da      	strh	r2, [r3, #6]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	811a      	strh	r2, [r3, #8]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f44f 7216 	mov.w	r2, #600	; 0x258
 800055a:	815a      	strh	r2, [r3, #10]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2214      	movs	r2, #20
 8000560:	819a      	strh	r2, [r3, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2264      	movs	r2, #100	; 0x64
 8000566:	81da      	strh	r2, [r3, #14]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800056e:	821a      	strh	r2, [r3, #16]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000576:	825a      	strh	r2, [r3, #18]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2232      	movs	r2, #50	; 0x32
 800057c:	829a      	strh	r2, [r3, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000584:	82da      	strh	r2, [r3, #22]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <_ZN7AppMainC1Ev>:
#include "AppMain.h"

extern TIM_HandleTypeDef htim16;


AppMain::AppMain()
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	819a      	strh	r2, [r3, #12]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff90 	bl	80004d0 <_ZN11TaskHandlerC1Ev>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	739a      	strb	r2, [r3, #14]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3310      	adds	r3, #16
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fa4c 	bl	8000a58 <_ZN10RFM95_LoRaC1Ev>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3330      	adds	r3, #48	; 0x30
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3330      	adds	r3, #48	; 0x30
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffa9 	bl	800052e <_ZN13DriveSettingsC1Ev>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3348      	adds	r3, #72	; 0x48
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3310      	adds	r3, #16
 80005fc:	f000 f90b 	bl	8000816 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRa>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3348      	adds	r3, #72	; 0x48
 8000610:	461a      	mov	r2, r3
 8000612:	f000 f886 	bl	8000722 <_ZN5DriveC1EP13DriveSettingsP11DriveStatus>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800061c:	2300      	movs	r3, #0
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	4903      	ldr	r1, [pc, #12]	; (8000630 <_ZN7AppMainC1Ev+0x9c>)
 8000622:	f000 f8dd 	bl	80007e0 <_ZN3LEDC1EP12GPIO_TypeDeftb>
{

}
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000400 	.word	0x48000400

08000634 <_ZN7AppMain7StartupEv>:


void AppMain::Startup()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	HAL_SPI_MspInit(&hspi1);
 800063c:	4817      	ldr	r0, [pc, #92]	; (800069c <_ZN7AppMain7StartupEv+0x68>)
 800063e:	f001 f989 	bl	8001954 <HAL_SPI_MspInit>
	//HAL_TIM_Base_Start_IT(&htim16);

	HAL_Delay(100);
 8000642:	2064      	movs	r0, #100	; 0x64
 8000644:	f001 fd4e 	bl	80020e4 <HAL_Delay>

	if(!rfm95.InitRFM()){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3310      	adds	r3, #16
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fdc5 	bl	80011dc <_ZN10RFM95_LoRa7InitRFMEv>
 8000652:	4603      	mov	r3, r0
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00a      	beq.n	8000674 <_ZN7AppMain7StartupEv+0x40>
			error.setError(Error::COM_ERROR);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	330e      	adds	r3, #14
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f87c 	bl	8000762 <_ZN5Error8setErrorENS_11EERROR_CODEE>
			taskHandler.setDriveTaskEnable(false);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff06 	bl	8001480 <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3310      	adds	r3, #16
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fbeb 	bl	8000e56 <_ZN10RFM95_LoRa7receiveEi>

	  HAL_TIM_Base_MspInit(&htim16);
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <_ZN7AppMain7StartupEv+0x6c>)
 8000682:	f001 fbf3 	bl	8001e6c <HAL_TIM_Base_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <_ZN7AppMain7StartupEv+0x6c>)
 8000688:	f006 fb56 	bl	8006d38 <HAL_TIM_Base_Start_IT>
	Main();
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f809 	bl	80006a4 <_ZN7AppMain4MainEv>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000290 	.word	0x20000290
 80006a0:	200003d8 	.word	0x200003d8

080006a4 <_ZN7AppMain4MainEv>:
	taskHandler.setIoUpdateTaskEnable(true);
}


void AppMain::Main()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]


	while(1)
	{

		if(taskHandler.isADCUpdateTask()){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 feb4 	bl	800141c <_ZN11TaskHandler15isADCUpdateTaskEv>
			//read from ADC DMA register
		}

		if(taskHandler.isComTask()){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe4c 	bl	8001354 <_ZN11TaskHandler9isComTaskEv>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <_ZN7AppMain4MainEv+0x28>
			com.ReadData();
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3350      	adds	r3, #80	; 0x50
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8c2 	bl	8000850 <_ZN13Communication8ReadDataEv>
		}

		if(taskHandler.isDriveTask()){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fe59 	bl	8001386 <_ZN11TaskHandler11isDriveTaskEv>

		}

		if(taskHandler.isErrorTask()){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe6e 	bl	80013b8 <_ZN11TaskHandler11isErrorTaskEv>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d016      	beq.n	8000710 <_ZN7AppMain4MainEv+0x6c>
			error.error2LED();
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	330e      	adds	r3, #14
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f856 	bl	8000798 <_ZN5Error9error2LEDEv>
			if(error.getError() != Error::NO_ERROR){
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	330e      	adds	r3, #14
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f845 	bl	8000780 <_ZN5Error8getErrorEv>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <_ZN7AppMain4MainEv+0x6c>
				drive.Stop();
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3368      	adds	r3, #104	; 0x68
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f81f 	bl	800074e <_ZN5Drive4StopEv>
			}
		}

		if(taskHandler.isIoUpdateTask()){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fe69 	bl	80013ea <_ZN11TaskHandler14isIoUpdateTaskEv>

		}

		if(taskHandler.isLEDTask()){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe97 	bl	800144e <_ZN11TaskHandler9isLEDTaskEv>
		if(taskHandler.isADCUpdateTask()){
 8000720:	e7c4      	b.n	80006ac <_ZN7AppMain4MainEv+0x8>

08000722 <_ZN5DriveC1EP13DriveSettingsP11DriveStatus>:


#include "Drive.h"
#include "../IO/IO.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus){
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	725a      	strb	r2, [r3, #9]

	this->driveSettings  = driveSettings;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]

}
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <_ZN5Drive4StopEv>:

void Drive::OpMode() {

}

void Drive::Stop() {
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <_ZN5Error8setErrorENS_11EERROR_CODEE>:
#include "Error.h"
#include "main.h"
#include "gpio.h"


void Error::setError(EERROR_CODE error) {
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	70fb      	strb	r3, [r7, #3]
	this->errorCode = error;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	701a      	strb	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <_ZN5Error8getErrorEv>:

Error::EERROR_CODE Error::getError() {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	return this->errorCode;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_ZN5Error9error2LEDEv>:
void Error::resetError() {
	this->errorCode = EERROR_CODE::NO_ERROR;
}


void Error::error2LED() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms
	static uint8_t errorCounter = 0;
	static bool risingEdge = 0;

	if(errorCode != NO_ERROR ){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d010      	beq.n	80007ca <_ZN5Error9error2LEDEv+0x32>

		if(risingEdge){
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <_ZN5Error9error2LEDEv+0x40>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00c      	beq.n	80007ca <_ZN5Error9error2LEDEv+0x32>
			}else{
				//reset LED Error
			}

			//increment error counter by 1
			errorCounter++;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <_ZN5Error9error2LEDEv+0x44>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_ZN5Error9error2LEDEv+0x44>)
 80007ba:	701a      	strb	r2, [r3, #0]


			if(errorCounter > 7){
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <_ZN5Error9error2LEDEv+0x44>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d902      	bls.n	80007ca <_ZN5Error9error2LEDEv+0x32>
				errorCounter = 0;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <_ZN5Error9error2LEDEv+0x44>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
			}

		}
	}
	risingEdge != risingEdge;
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	200001ad 	.word	0x200001ad
 80007dc:	200001ac 	.word	0x200001ac

080007e0 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4611      	mov	r1, r2
 80007ec:	461a      	mov	r2, r3
 80007ee:	460b      	mov	r3, r1
 80007f0:	80fb      	strh	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	797a      	ldrb	r2, [r7, #5]
 8000806:	719a      	strb	r2, [r3, #6]
}
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRa>:
 */

#include "Communication.h"
#include "../AppMain/Defines.h"

Communication::Communication(DriveStatus *driveStatus, DriveSettings *driveSettings, RFM95_LoRa *rfm95)
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	330c      	adds	r3, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	609a      	str	r2, [r3, #8]
}
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZN13Communication8ReadDataEv>:
}



void Communication::ReadData()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint8_t packetSize = rfm95->parsePacket();
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f9e1 	bl	8000c26 <_ZN10RFM95_LoRa11parsePacketEi>
 8000864:	4603      	mov	r3, r0
 8000866:	73bb      	strb	r3, [r7, #14]
	if (packetSize != 0)
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 80b5 	beq.w	80009da <_ZN13Communication8ReadDataEv+0x18a>
	{
		uint8_t counter = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
		while (rfm95->available())
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3308      	adds	r3, #8
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4610      	mov	r0, r2
 8000884:	4798      	blx	r3
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d017      	beq.n	80008c6 <_ZN13Communication8ReadDataEv+0x76>
		{
			rxData[counter] = rfm95->read();
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	330c      	adds	r3, #12
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4610      	mov	r0, r2
 80008a6:	4798      	blx	r3
 80008a8:	4602      	mov	r2, r0
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	b2d1      	uxtb	r1, r2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	460a      	mov	r2, r1
 80008b4:	731a      	strb	r2, [r3, #12]
			if (counter > MAX_PACKET_2_RECEIVE)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	f200 8087 	bhi.w	80009cc <_ZN13Communication8ReadDataEv+0x17c>
			{
				return;
			}
			counter++;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	3301      	adds	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
		while (rfm95->available())
 80008c4:	e7d6      	b.n	8000874 <_ZN13Communication8ReadDataEv+0x24>
		}

		uint8_t addr = rxData[0];
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	737b      	strb	r3, [r7, #13]

		if(addr != this->driveSettings->getDeviceAddress()){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fcb5 	bl	8001240 <_ZNK13DriveSettings16getDeviceAddressEv>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	4293      	cmp	r3, r2
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d172      	bne.n	80009d0 <_ZN13Communication8ReadDataEv+0x180>
			return;
		}



		uint8_t command = rxData[2];
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7b9b      	ldrb	r3, [r3, #14]
 80008ee:	733b      	strb	r3, [r7, #12]
		//data = rxData[2...(counter-1)]
		//uint8_t size = rxData[counter-1];
		uint8_t crc8 = rxData[counter];
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	7b1b      	ldrb	r3, [r3, #12]
 80008f8:	72fb      	strb	r3, [r7, #11]

		if (CRC8(rxData, counter - 1) != crc8)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f103 010c 	add.w	r1, r3, #12
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	3b01      	subs	r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f86b 	bl	80009e4 <_ZN13Communication4CRC8EPhh>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	4293      	cmp	r3, r2
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d158      	bne.n	80009d4 <_ZN13Communication8ReadDataEv+0x184>
			//error crc error //ToDO
			return;
		}


		if(command == 0x1A){
 8000922:	7b3b      	ldrb	r3, [r7, #12]
 8000924:	2b1a      	cmp	r3, #26
 8000926:	d104      	bne.n	8000932 <_ZN13Communication8ReadDataEv+0xe2>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	482c      	ldr	r0, [pc, #176]	; (80009e0 <_ZN13Communication8ReadDataEv+0x190>)
 800092e:	f002 fe37 	bl	80035a0 <HAL_GPIO_WritePin>
		}

		switch (command)
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	2b20      	cmp	r3, #32
 8000936:	dc47      	bgt.n	80009c8 <_ZN13Communication8ReadDataEv+0x178>
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd4d      	ble.n	80009d8 <_ZN13Communication8ReadDataEv+0x188>
 800093c:	3b01      	subs	r3, #1
 800093e:	2b1f      	cmp	r3, #31
 8000940:	d84a      	bhi.n	80009d8 <_ZN13Communication8ReadDataEv+0x188>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <_ZN13Communication8ReadDataEv+0xf8>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	080009d9 	.word	0x080009d9
 800094c:	080009d9 	.word	0x080009d9
 8000950:	080009d9 	.word	0x080009d9
 8000954:	080009d9 	.word	0x080009d9
 8000958:	080009d9 	.word	0x080009d9
 800095c:	080009d9 	.word	0x080009d9
 8000960:	080009d9 	.word	0x080009d9
 8000964:	080009d9 	.word	0x080009d9
 8000968:	080009d9 	.word	0x080009d9
 800096c:	080009d9 	.word	0x080009d9
 8000970:	080009d9 	.word	0x080009d9
 8000974:	080009d9 	.word	0x080009d9
 8000978:	080009d9 	.word	0x080009d9
 800097c:	080009d9 	.word	0x080009d9
 8000980:	080009d9 	.word	0x080009d9
 8000984:	080009d9 	.word	0x080009d9
 8000988:	080009d9 	.word	0x080009d9
 800098c:	080009d9 	.word	0x080009d9
 8000990:	080009d9 	.word	0x080009d9
 8000994:	080009d9 	.word	0x080009d9
 8000998:	080009d9 	.word	0x080009d9
 800099c:	080009d9 	.word	0x080009d9
 80009a0:	080009d9 	.word	0x080009d9
 80009a4:	080009d9 	.word	0x080009d9
 80009a8:	080009d9 	.word	0x080009d9
 80009ac:	080009d9 	.word	0x080009d9
 80009b0:	080009d9 	.word	0x080009d9
 80009b4:	080009d9 	.word	0x080009d9
 80009b8:	080009d9 	.word	0x080009d9
 80009bc:	080009d9 	.word	0x080009d9
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009d9 	.word	0x080009d9
 80009c8:	2baa      	cmp	r3, #170	; 0xaa
			case DEVICE_ADDRESS_ADDR:
				break;

			default:
				//error no supported command //ToDO
				break;
 80009ca:	e005      	b.n	80009d8 <_ZN13Communication8ReadDataEv+0x188>
				return;
 80009cc:	bf00      	nop
 80009ce:	e004      	b.n	80009da <_ZN13Communication8ReadDataEv+0x18a>
			return;
 80009d0:	bf00      	nop
 80009d2:	e002      	b.n	80009da <_ZN13Communication8ReadDataEv+0x18a>
			return;
 80009d4:	bf00      	nop
 80009d6:	e000      	b.n	80009da <_ZN13Communication8ReadDataEv+0x18a>
				break;
 80009d8:	bf00      	nop
		}
	}
}
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	48000400 	.word	0x48000400

080009e4 <_ZN13Communication4CRC8EPhh>:

}


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4613      	mov	r3, r2
 80009f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80009f2:	23ff      	movs	r3, #255	; 0xff
 80009f4:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d222      	bcs.n	8000a48 <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4413      	add	r3, r2
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d812      	bhi.n	8000a40 <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8000a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da07      	bge.n	8000a32 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	77fb      	strb	r3, [r7, #31]
 8000a30:	e002      	b.n	8000a38 <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e7e9      	b.n	8000a14 <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	3301      	adds	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	e7d8      	b.n	80009fa <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
{

}
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	0800c71c 	.word	0x0800c71c

08000a90 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f002 fd7e 	bl	80035a0 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f002 fd70 	bl	80035a0 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f002 fd62 	bl	80035a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f001 fb01 	bl	80020e4 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f002 fd59 	bl	80035a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f001 faf8 	bl	80020e4 <HAL_Delay>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	733b      	strb	r3, [r7, #12]
 8000b16:	78bb      	ldrb	r3, [r7, #2]
 8000b18:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb8 	bl	8000a90 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8000b20:	f107 010c 	add.w	r1, r7, #12
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	2202      	movs	r2, #2
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8000b2a:	f005 fbc8 	bl	80062be <HAL_SPI_Transmit>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb4 	bl	8000aac <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e003      	b.n	8000b50 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ffaf 	bl	8000aac <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000290 	.word	0x20000290

08000b5c <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff8d 	bl	8000a90 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	f107 0108 	add.w	r1, r7, #8
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2302      	movs	r3, #2
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8000b86:	f005 fd08 	bl	800659a <HAL_SPI_TransmitReceive>
	deselectRFM();
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff8e 	bl	8000aac <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000290 	.word	0x20000290

08000ba0 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
 resetRFM();
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff8c 	bl	8000ac8 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8000bb0:	2142      	movs	r1, #66	; 0x42
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffd2 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d001      	beq.n	8000bc6 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e02b      	b.n	8000c1e <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f971 	bl	8000eae <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f9b8 	bl	8000f44 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	210e      	movs	r1, #14
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff8f 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	210f      	movs	r1, #15
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff8a 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8000be8:	210c      	movs	r1, #12
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb6 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f043 0303 	orr.w	r3, r3, #3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	210c      	movs	r1, #12
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff7d 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8000c02:	2204      	movs	r2, #4
 8000c04:	2126      	movs	r1, #38	; 0x26
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff78 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2114      	movs	r1, #20
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f959 	bl	8000ec8 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f93c 	bl	8000e94 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8000c34:	2112      	movs	r1, #18
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff90 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dd0a      	ble.n	8000c5c <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 faaf 	bl	80011aa <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	2122      	movs	r1, #34	; 0x22
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff51 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8000c5a:	e002      	b.n	8000c62 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 fa8c 	bl	800117a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	2112      	movs	r1, #18
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff46 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d026      	beq.n	8000cc8 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d121      	bne.n	8000cc8 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8000c92:	2122      	movs	r1, #34	; 0x22
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff61 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e005      	b.n	8000cac <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8000ca0:	2113      	movs	r1, #19
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff5a 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8000cac:	2110      	movs	r1, #16
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff54 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	210d      	movs	r1, #13
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff1e 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f8e7 	bl	8000e94 <_ZN10RFM95_LoRa4idleEv>
 8000cc6:	e015      	b.n	8000cf4 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff46 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b86      	cmp	r3, #134	; 0x86
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	210d      	movs	r1, #13
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff09 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8000cea:	2286      	movs	r2, #134	; 0x86
 8000cec:	2101      	movs	r1, #1
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff04 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3304      	adds	r3, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	1cf9      	adds	r1, r7, #3
 8000d14:	2201      	movs	r2, #1
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
 8000d1a:	4603      	mov	r3, r0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8000d30:	2122      	movs	r1, #34	; 0x22
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f7ff ff12 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d903      	bls.n	8000d4e <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000d4c:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d20c      	bcs.n	8000d74 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fec8 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e7ee      	b.n	8000d52 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	2122      	movs	r1, #34	; 0x22
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff feb9 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8000d9c:	2113      	movs	r1, #19
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fedc 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	1ad3      	subs	r3, r2, r3
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8000dea:	2100      	movs	r1, #0
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff feb5 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000df2:	4603      	mov	r3, r0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3308      	adds	r3, #8
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	4798      	blx	r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf0c      	ite	eq
 8000e16:	2301      	moveq	r3, #1
 8000e18:	2300      	movne	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	e013      	b.n	8000e4e <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8000e26:	210d      	movs	r1, #13
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fe97 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8000e32:	2100      	movs	r1, #0
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fe91 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	210d      	movs	r1, #13
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fe58 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd0a      	ble.n	8000e7c <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f99f 	bl	80011aa <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	2122      	movs	r1, #34	; 0x22
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fe41 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8000e7a:	e002      	b.n	8000e82 <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f97c 	bl	800117a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000e82:	2285      	movs	r2, #133	; 0x85
 8000e84:	2101      	movs	r1, #1
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fe38 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e9c:	2281      	movs	r2, #129	; 0x81
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fe2b 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN10RFM95_LoRa5sleepEv>:
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	2101      	movs	r1, #1
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fe1e 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da02      	bge.n	8000ee6 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	e004      	b.n	8000ef0 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b0e      	cmp	r3, #14
 8000eea:	dd01      	ble.n	8000ef0 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8000eec:	230e      	movs	r3, #14
 8000eee:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2109      	movs	r1, #9
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fdfb 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8000f06:	e018      	b.n	8000f3a <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	dc02      	bgt.n	8000f14 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	e004      	b.n	8000f1e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b11      	cmp	r3, #17
 8000f18:	dd01      	ble.n	8000f1e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8000f1a:	2311      	movs	r3, #17
 8000f1c:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	3b02      	subs	r3, #2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	2109      	movs	r1, #9
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fde1 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	17c8      	asrs	r0, r1, #31
 8000f58:	460a      	mov	r2, r1
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	1355      	asrs	r5, r2, #13
 8000f5e:	04d4      	lsls	r4, r2, #19
 8000f60:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	4620      	mov	r0, r4
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f7ff f92f 	bl	80001cc <__aeabi_uldivmod>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	0c02      	lsrs	r2, r0, #16
 8000f84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f88:	0c0b      	lsrs	r3, r1, #16
 8000f8a:	b2d3      	uxtb	r3, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2106      	movs	r1, #6
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fdb3 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	0a02      	lsrs	r2, r0, #8
 8000fa4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fa8:	0a0b      	lsrs	r3, r1, #8
 8000faa:	b2d3      	uxtb	r3, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	2107      	movs	r1, #7
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fda3 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000fb6:	7a3b      	ldrb	r3, [r7, #8]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2108      	movs	r1, #8
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fd9d 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	01e84800 	.word	0x01e84800

08000fd0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	dc02      	bgt.n	8000fe6 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	e004      	b.n	8000ff0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	dd01      	ble.n	8000ff0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8000fec:	230c      	movs	r3, #12
 8000fee:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d10a      	bne.n	800100c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8000ff6:	22c5      	movs	r2, #197	; 0xc5
 8000ff8:	2131      	movs	r1, #49	; 0x31
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fd7e 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001000:	220c      	movs	r2, #12
 8001002:	2137      	movs	r1, #55	; 0x37
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fd79 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
 800100a:	e009      	b.n	8001020 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 800100c:	22c3      	movs	r2, #195	; 0xc3
 800100e:	2131      	movs	r1, #49	; 0x31
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fd73 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001016:	220a      	movs	r2, #10
 8001018:	2137      	movs	r1, #55	; 0x37
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fd6e 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001020:	211e      	movs	r1, #30
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fd9a 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001028:	4603      	mov	r3, r0
 800102a:	b25b      	sxtb	r3, r3
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	b25a      	sxtb	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	b25b      	sxtb	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	211e      	movs	r1, #30
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fd5a 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001060:	4293      	cmp	r3, r2
 8001062:	dc02      	bgt.n	800106a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	e03f      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001070:	4293      	cmp	r3, r2
 8001072:	dc02      	bgt.n	800107a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e037      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8001080:	4293      	cmp	r3, r2
 8001082:	dc02      	bgt.n	800108a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e02f      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f245 1240 	movw	r2, #20800	; 0x5140
 8001090:	4293      	cmp	r3, r2
 8001092:	dc02      	bgt.n	800109a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8001094:	2303      	movs	r3, #3
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e027      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f647 2212 	movw	r2, #31250	; 0x7a12
 80010a0:	4293      	cmp	r3, r2
 80010a2:	dc02      	bgt.n	80010aa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e01f      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80010b0:	4293      	cmp	r3, r2
 80010b2:	dc02      	bgt.n	80010ba <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80010b4:	2305      	movs	r3, #5
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e017      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f24f 4224 	movw	r2, #62500	; 0xf424
 80010c0:	4293      	cmp	r3, r2
 80010c2:	dc02      	bgt.n	80010ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 80010c4:	2306      	movs	r3, #6
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e00f      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	dc02      	bgt.n	80010d8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e008      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	dc02      	bgt.n	80010e6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 80010e0:	2308      	movs	r3, #8
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e001      	b.n	80010ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80010e6:	2309      	movs	r3, #9
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80010ea:	211d      	movs	r1, #29
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fd35 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	211d      	movs	r1, #29
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fcf5 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0001e848 	.word	0x0001e848
 8001120:	0003d090 	.word	0x0003d090

08001124 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b04      	cmp	r3, #4
 8001132:	dc02      	bgt.n	800113a <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001134:	2305      	movs	r3, #5
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	e004      	b.n	8001144 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b08      	cmp	r3, #8
 800113e:	dd01      	ble.n	8001144 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8001140:	2308      	movs	r3, #8
 8001142:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3b04      	subs	r3, #4
 8001148:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 800114a:	211d      	movs	r1, #29
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fd05 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001152:	4603      	mov	r3, r0
 8001154:	b25b      	sxtb	r3, r3
 8001156:	f023 030e 	bic.w	r3, r3, #14
 800115a:	b25a      	sxtb	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	211d      	movs	r1, #29
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fcc5 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8001188:	211d      	movs	r1, #29
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fce6 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001190:	4603      	mov	r3, r0
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	211d      	movs	r1, #29
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fcad 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80011b8:	211d      	movs	r1, #29
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fcce 	bl	8000b5c <_ZN10RFM95_LoRa12readRegisterEh>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	211d      	movs	r1, #29
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fc95 	bl	8000afc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 80011e4:	4914      	ldr	r1, [pc, #80]	; (8001238 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff feac 	bl	8000f44 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2111      	movs	r1, #17
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fe69 	bl	8000ec8 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 80011f6:	f647 2112 	movw	r1, #31250	; 0x7a12
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff28 	bl	8001050 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8001200:	210c      	movs	r1, #12
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fee4 	bl	8000fd0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8001208:	2105      	movs	r1, #5
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff8a 	bl	8001124 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8001210:	490a      	ldr	r1, [pc, #40]	; (800123c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fcc4 	bl	8000ba0 <_ZN10RFM95_LoRa5beginEl>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	33bca100 	.word	0x33bca100
 800123c:	339e1c80 	.word	0x339e1c80

08001240 <_ZNK13DriveSettings16getDeviceAddressEv>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
	this->clampingTorque = clampingTorque;
}

uint8_t DriveSettings::getDeviceAddress() const {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	899b      	ldrh	r3, [r3, #12]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	711a      	strb	r2, [r3, #4]
	}


	//15ms
	if(counter % 15 == 0){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	899a      	ldrh	r2, [r3, #12]
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 8001278:	fba3 1302 	umull	r1, r3, r3, r2
 800127c:	08d9      	lsrs	r1, r3, #3
 800127e:	460b      	mov	r3, r1
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	1a5b      	subs	r3, r3, r1
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	709a      	strb	r2, [r3, #2]
	}


	//50ms
	if(counter % 50 == 0){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	899b      	ldrh	r3, [r3, #12]
 800129c:	4a2b      	ldr	r2, [pc, #172]	; (800134c <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800129e:	fba2 1203 	umull	r1, r2, r2, r3
 80012a2:	0912      	lsrs	r2, r2, #4
 80012a4:	2132      	movs	r1, #50	; 0x32
 80012a6:	fb01 f202 	mul.w	r2, r1, r2
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <_ZN11TaskHandler11UpdateTasksEv+0x60>
		comTask = true;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	705a      	strb	r2, [r3, #1]
	}



	//100ms
	if(counter % 100 == 0){
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	899b      	ldrh	r3, [r3, #12]
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 80012be:	fba2 1203 	umull	r1, r2, r2, r3
 80012c2:	0952      	lsrs	r2, r2, #5
 80012c4:	2164      	movs	r1, #100	; 0x64
 80012c6:	fb01 f202 	mul.w	r2, r1, r2
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <_ZN11TaskHandler11UpdateTasksEv+0x80>
		errorTask = true;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
	}


	if(counter % 250 == 0){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	899b      	ldrh	r3, [r3, #12]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 80012de:	fba2 1203 	umull	r1, r2, r2, r3
 80012e2:	0912      	lsrs	r2, r2, #4
 80012e4:	21fa      	movs	r1, #250	; 0xfa
 80012e6:	fb01 f202 	mul.w	r2, r1, r2
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <_ZN11TaskHandler11UpdateTasksEv+0xa0>
		comTask = true;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	899b      	ldrh	r3, [r3, #12]
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 80012fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001302:	0952      	lsrs	r2, r2, #5
 8001304:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		ledTask = true;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	899b      	ldrh	r3, [r3, #12]
 800131e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001322:	4293      	cmp	r3, r2
 8001324:	d903      	bls.n	800132e <_ZN11TaskHandler11UpdateTasksEv+0xd6>
		counter = 1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 800132c:	e005      	b.n	800133a <_ZN11TaskHandler11UpdateTasksEv+0xe2>
		counter++;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	899b      	ldrh	r3, [r3, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	819a      	strh	r2, [r3, #12]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	88888889 	.word	0x88888889
 800134c:	51eb851f 	.word	0x51eb851f
 8001350:	10624dd3 	.word	0x10624dd3

08001354 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf14      	ite	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	2300      	moveq	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	799b      	ldrb	r3, [r3, #6]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	78db      	ldrb	r3, [r3, #3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7a5b      	ldrb	r3, [r3, #9]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	70da      	strb	r2, [r3, #3]
	return ioUpdateTaskTemp;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_ZN11TaskHandler15isADCUpdateTaskEv>:


bool TaskHandler::isADCUpdateTask() {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7a9b      	ldrb	r3, [r3, #10]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
	adcUpdateTask = false;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	711a      	strb	r2, [r3, #4]
	return adcUpdateTaskTemp;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN11TaskHandler9isLEDTaskEv>:

bool TaskHandler::isLEDTask(){
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7adb      	ldrb	r3, [r3, #11]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf14      	ite	ne
 8001466:	2301      	movne	r3, #1
 8001468:	2300      	moveq	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZN11TaskHandler18setDriveTaskEnableEb>:
void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
	this->comTaskEnable = comTaskEnable;
}


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	721a      	strb	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014c4:	4a30      	ldr	r2, [pc, #192]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_ADC1_Init+0xe4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_ADC1_Init+0xe4>)
 8001502:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_ADC1_Init+0xe4>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_ADC1_Init+0xe4>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_ADC1_Init+0xe4>)
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_ADC1_Init+0xe4>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001526:	4817      	ldr	r0, [pc, #92]	; (8001584 <MX_ADC1_Init+0xe4>)
 8001528:	f000 ffa0 	bl	800246c <HAL_ADC_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001532:	f000 f9ad 	bl	8001890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <MX_ADC1_Init+0xe4>)
 8001542:	f001 fd05 	bl	8002f50 <HAL_ADCEx_MultiModeConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800154c:	f000 f9a0 	bl	8001890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_ADC1_Init+0xec>)
 8001552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001554:	2306      	movs	r3, #6
 8001556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155c:	237f      	movs	r3, #127	; 0x7f
 800155e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001560:	2304      	movs	r3, #4
 8001562:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_ADC1_Init+0xe4>)
 800156e:	f001 f8cd 	bl	800270c <HAL_ADC_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001578:	f000 f98a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200001b0 	.word	0x200001b0
 8001588:	50040000 	.word	0x50040000
 800158c:	19200040 	.word	0x19200040

08001590 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <HAL_ADC_MspInit+0x74>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d124      	bne.n	80015fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_ADC_MspInit+0x78>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 80015e2:	2306      	movs	r3, #6
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e6:	230b      	movs	r3, #11
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f001 fe60 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	50040000 	.word	0x50040000
 8001608:	40021000 	.word	0x40021000

0800160c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <MX_GPIO_Init+0x14c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a46      	ldr	r2, [pc, #280]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a40      	ldr	r2, [pc, #256]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <MX_GPIO_Init+0x14c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_GPIO_Init+0x14c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2119      	movs	r1, #25
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f001 ff89 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2190      	movs	r1, #144	; 0x90
 8001692:	4832      	ldr	r0, [pc, #200]	; (800175c <MX_GPIO_Init+0x150>)
 8001694:	f001 ff84 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 8001698:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	482c      	ldr	r0, [pc, #176]	; (8001760 <MX_GPIO_Init+0x154>)
 80016ae:	f001 fe05 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 80016b2:	2319      	movs	r3, #25
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f001 fdf6 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 80016d0:	2329      	movs	r3, #41	; 0x29
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	481e      	ldr	r0, [pc, #120]	; (800175c <MX_GPIO_Init+0x150>)
 80016e4:	f001 fdea 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 fddc 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 8001704:	2390      	movs	r3, #144	; 0x90
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4810      	ldr	r0, [pc, #64]	; (800175c <MX_GPIO_Init+0x150>)
 800171c:	f001 fdce 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001724:	2303      	movs	r3, #3
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_GPIO_Init+0x150>)
 8001734:	f001 fdc2 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001738:	2308      	movs	r3, #8
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173c:	2303      	movs	r3, #3
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_GPIO_Init+0x158>)
 800174c:	f001 fdb6 	bl	80032bc <HAL_GPIO_Init>

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48001c00 	.word	0x48001c00

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f000 fc45 	bl	8001ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f816 	bl	80017a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f7ff ff4a 	bl	800160c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001778:	f7ff fe92 	bl	80014a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800177c:	f000 f8ac 	bl	80018d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001780:	f000 f9ac 	bl	8001adc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001784:	f000 fa5e 	bl	8001c44 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001788:	f00a f9b8 	bl	800bafc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800178c:	f000 fab4 	bl	8001cf8 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001790:	f000 fae8 	bl	8001d64 <MX_TIM16_Init>


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8001794:	4801      	ldr	r0, [pc, #4]	; (800179c <main+0x34>)
 8001796:	f7fe ff4d 	bl	8000634 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800179a:	e7fe      	b.n	800179a <main+0x32>
 800179c:	20000214 	.word	0x20000214

080017a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2244      	movs	r2, #68	; 0x44
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00a ff78 	bl	800c6a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c6:	f003 fc9d 	bl	8005104 <HAL_PWREx_ControlVoltageScaling>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80017da:	f000 f859 	bl	8001890 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80017de:	2312      	movs	r3, #18
 80017e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017f4:	23b0      	movs	r3, #176	; 0xb0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f8:	2302      	movs	r3, #2
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001804:	2308      	movs	r3, #8
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fcdb 	bl	80051d0 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800182a:	f000 f831 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2303      	movs	r3, #3
 8001834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001842:	463b      	mov	r3, r7
 8001844:	2103      	movs	r1, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f004 f924 	bl	8005a94 <HAL_RCC_ClockConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800185c:	f000 f818 	bl	8001890 <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	3758      	adds	r7, #88	; 0x58
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d102      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800187c:	f7ff fcec 	bl	8001258 <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40014400 	.word	0x40014400
 800188c:	20000214 	.word	0x20000214

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d102      	bne.n	80018bc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80018b8:	f7fe fe6c 	bl	8000594 <_ZN7AppMainC1Ev>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000214 	.word	0x20000214

080018c8 <_GLOBAL__sub_I_appMain>:
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff ffe3 	bl	800189c <_Z41__static_initialization_and_destruction_0ii>
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_SPI1_Init+0x74>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <MX_SPI1_Init+0x78>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_SPI1_Init+0x74>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_SPI1_Init+0x74>)
 80018f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_SPI1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_SPI1_Init+0x74>)
 8001906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_SPI1_Init+0x74>)
 800190e:	2220      	movs	r2, #32
 8001910:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_SPI1_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_SPI1_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_SPI1_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_SPI1_Init+0x74>)
 8001926:	2207      	movs	r2, #7
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_SPI1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_SPI1_Init+0x74>)
 8001938:	f004 fc1e 	bl	8006178 <HAL_SPI_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001942:	f7ff ffa5 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000290 	.word	0x20000290
 8001950:	40013000 	.word	0x40013000

08001954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_SPI_MspInit+0x7c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d128      	bne.n	80019c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 800197c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_SPI_MspInit+0x80>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019a6:	23e0      	movs	r3, #224	; 0xe0
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b6:	2305      	movs	r3, #5
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f001 fc7a 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40013000 	.word	0x40013000
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 fb1a 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001a7a:	f005 fab8 	bl	8006fee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001a80:	f005 fab5 	bl	8006fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200002f4 	.word	0x200002f4
 8001a8c:	200003d8 	.word	0x200003d8

08001a90 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM6_IRQHandler+0x10>)
 8001a96:	f005 faaa 	bl	8006fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000038c 	.word	0x2000038c

08001aa4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <USB_IRQHandler+0x10>)
 8001aaa:	f001 feca 	bl	8003842 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200010cc 	.word	0x200010cc

08001ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00a fdda 	bl	800c6a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	222c      	movs	r2, #44	; 0x2c
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a fdc4 	bl	800c6a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b1e:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <MX_TIM1_Init+0x164>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b24:	2228      	movs	r2, #40	; 0x28
 8001b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b30:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b48:	483c      	ldr	r0, [pc, #240]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b4a:	f005 f949 	bl	8006de0 <HAL_TIM_PWM_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b54:	f7ff fe9c 	bl	8001890 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b60:	2301      	movs	r3, #1
 8001b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC1Filter = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	667b      	str	r3, [r7, #100]	; 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	66bb      	str	r3, [r7, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b70:	2301      	movs	r3, #1
 8001b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	673b      	str	r3, [r7, #112]	; 0x70
  sConfig.IC2Filter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b80:	4619      	mov	r1, r3
 8001b82:	482e      	ldr	r0, [pc, #184]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001b84:	f005 f983 	bl	8006e8e <HAL_TIM_Encoder_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001b8e:	f7ff fe7f 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4825      	ldr	r0, [pc, #148]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001ba6:	f005 ff5f 	bl	8007a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001bb0:	f7ff fe6e 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4818      	ldr	r0, [pc, #96]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001bda:	f005 fb27 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001be4:	f7ff fe54 	bl	8001890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4807      	ldr	r0, [pc, #28]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001c1e:	f005 ff89 	bl	8007b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001c28:	f7ff fe32 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <MX_TIM1_Init+0x160>)
 8001c2e:	f000 f95f 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001c32:	bf00      	nop
 8001c34:	3778      	adds	r7, #120	; 0x78
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002f4 	.word	0x200002f4
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40;
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c72:	2228      	movs	r2, #40	; 0x28
 8001c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c7e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c90:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001c92:	f005 f8a5 	bl	8006de0 <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c9c:	f7ff fdf8 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001cb0:	f005 feda 	bl	8007a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cba:	f7ff fde9 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001cd6:	f005 faa9 	bl	800722c <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ce0:	f7ff fdd6 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <MX_TIM2_Init+0xb0>)
 8001ce6:	f000 f903 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000340 	.word	0x20000340

08001cf8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_TIM6_Init+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23999;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d1c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001d20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d2a:	f004 ffad 	bl	8006c88 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d34:	f7ff fdac 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d46:	f005 fe8f 	bl	8007a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d50:	f7ff fd9e 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000038c 	.word	0x2000038c
 8001d60:	40001000 	.word	0x40001000

08001d64 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <MX_TIM16_Init+0x48>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 35999;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d7c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001d80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_TIM16_Init+0x44>)
 8001d96:	f004 ff77 	bl	8006c88 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001da0:	f7ff fd76 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200003d8 	.word	0x200003d8
 8001dac:	40014400 	.word	0x40014400

08001db0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <HAL_TIM_PWM_MspInit+0xb4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d132      	bne.n	8001e38 <HAL_TIM_PWM_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TTL_B_Pin|TTL_A_Pin;
 8001e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 fa4b 	bl	80032bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f001 fa0f 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f001 fa28 	bl	8003286 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e36:	e010      	b.n	8001e5a <HAL_TIM_PWM_MspInit+0xaa>
  else if(tim_pwmHandle->Instance==TIM2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d10b      	bne.n	8001e5a <HAL_TIM_PWM_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_TIM_PWM_MspInit+0xb8>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_TIM_Base_MspInit+0x78>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d114      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2036      	movs	r0, #54	; 0x36
 8001e9c:	f001 f9d7 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001ea0:	2036      	movs	r0, #54	; 0x36
 8001ea2:	f001 f9f0 	bl	8003286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001ea6:	e018      	b.n	8001eda <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_TIM_Base_MspInit+0x80>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d113      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_TIM_Base_MspInit+0x7c>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2019      	movs	r0, #25
 8001ed0:	f001 f9bd 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ed4:	2019      	movs	r0, #25
 8001ed6:	f001 f9d6 	bl	8003286 <HAL_NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40001000 	.word	0x40001000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40014400 	.word	0x40014400

08001ef0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <HAL_TIM_MspPostInit+0xac>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11c      	bne.n	8001f4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_2_Pin;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4817      	ldr	r0, [pc, #92]	; (8001fa4 <HAL_TIM_MspPostInit+0xb4>)
 8001f46:	f001 f9b9 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f4a:	e022      	b.n	8001f92 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d11d      	bne.n	8001f92 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_TIM_MspPostInit+0xb0>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8001f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f80:	2301      	movs	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f001 f995 	bl	80032bc <HAL_GPIO_Init>
}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	; 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000400 	.word	0x48000400

08001fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fac:	f7ff fd84 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <LoopForever+0xe>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <LoopForever+0x16>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f00a fb41 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fda:	f7ff fbc5 	bl	8001768 <main>

08001fde <LoopForever>:

LoopForever:
    b LoopForever
 8001fde:	e7fe      	b.n	8001fde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001fec:	0800c784 	.word	0x0800c784
  ldr r2, =_sbss
 8001ff0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001ff4:	200015e8 	.word	0x200015e8

08001ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC1_2_IRQHandler>

08001ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f001 f917 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f80e 	bl	800202c <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	e001      	b.n	8002020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800201c:	f7ff fcdc 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002020:	79fb      	ldrb	r3, [r7, #7]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_InitTick+0x6c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_InitTick+0x70>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_InitTick+0x6c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f923 	bl	80032a2 <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d809      	bhi.n	800207c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f001 f8ed 	bl	800324e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_InitTick+0x74>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e007      	b.n	800208c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e004      	b.n	800208c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e001      	b.n	800208c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008
 80020c8:	20000424 	.word	0x20000424

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000424 	.word	0x20000424

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffee 	bl	80020cc <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffde 	bl	80020cc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008

0800212c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <LL_ADC_SetOffset+0x44>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	03fff000 	.word	0x03fff000

080021dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	461a      	mov	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3330      	adds	r3, #48	; 0x30
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	211f      	movs	r1, #31
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 011f 	and.w	r1, r3, #31
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	431a      	orrs	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3314      	adds	r3, #20
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	0e5b      	lsrs	r3, r3, #25
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	0d1b      	lsrs	r3, r3, #20
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2107      	movs	r1, #7
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	401a      	ands	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0d1b      	lsrs	r3, r3, #20
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0318 	and.w	r3, r3, #24
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002338:	40d9      	lsrs	r1, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	400b      	ands	r3, r1
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	431a      	orrs	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	0007ffff 	.word	0x0007ffff

0800235c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800236c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6093      	str	r3, [r2, #8]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002394:	d101      	bne.n	800239a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e4:	d101      	bne.n	80023ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <LL_ADC_IsEnabled+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_ADC_IsEnabled+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d101      	bne.n	8002436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d101      	bne.n	800245c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e131      	b.n	80026ea <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff f87b 	bl	8001590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff67 	bl	8002380 <LL_ADC_IsDeepPowerDownEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff4d 	bl	800235c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff82 	bl	80023d0 <LL_ADC_IsInternalRegulatorEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff66 	bl	80023a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024dc:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_ADC_Init+0x288>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	4a85      	ldr	r2, [pc, #532]	; (80026f8 <HAL_ADC_Init+0x28c>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f9      	bne.n	80024f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff64 	bl	80023d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff75 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 8002534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80ca 	bne.w	80026d8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80c6 	bne.w	80026d8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002554:	f043 0202 	orr.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff49 	bl	80023f8 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d110      	bne.n	800258e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256c:	4863      	ldr	r0, [pc, #396]	; (80026fc <HAL_ADC_Init+0x290>)
 800256e:	f7ff ff43 	bl	80023f8 <LL_ADC_IsEnabled>
 8002572:	4604      	mov	r4, r0
 8002574:	4862      	ldr	r0, [pc, #392]	; (8002700 <HAL_ADC_Init+0x294>)
 8002576:	f7ff ff3f 	bl	80023f8 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	4323      	orrs	r3, r4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4619      	mov	r1, r3
 8002588:	485e      	ldr	r0, [pc, #376]	; (8002704 <HAL_ADC_Init+0x298>)
 800258a:	f7ff fdcf 	bl	800212c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7e5b      	ldrb	r3, [r3, #25]
 8002592:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002598:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800259e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025a4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ac:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	3b01      	subs	r3, #1
 80025c2:	045b      	lsls	r3, r3, #17
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_ADC_Init+0x29c>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	69b9      	ldr	r1, [r7, #24]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff0d 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 8002604:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff1a 	bl	8002444 <LL_ADC_INJ_IsConversionOngoing>
 8002610:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d13d      	bne.n	8002694 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d13a      	bne.n	8002694 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002622:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800262a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263a:	f023 0302 	bic.w	r3, r3, #2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	69b9      	ldr	r1, [r7, #24]
 8002644:	430b      	orrs	r3, r1
 8002646:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264e:	2b01      	cmp	r3, #1
 8002650:	d118      	bne.n	8002684 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002674:	430a      	orrs	r2, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	611a      	str	r2, [r3, #16]
 8002682:	e007      	b.n	8002694 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d10c      	bne.n	80026b6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f023 010f 	bic.w	r1, r3, #15
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	1e5a      	subs	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
 80026b4:	e007      	b.n	80026c6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 020f 	bic.w	r2, r2, #15
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
 80026d6:	e007      	b.n	80026e8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000000 	.word	0x20000000
 80026f8:	053e2d63 	.word	0x053e2d63
 80026fc:	50040000 	.word	0x50040000
 8002700:	50040100 	.word	0x50040100
 8002704:	50040300 	.word	0x50040300
 8002708:	fff0c007 	.word	0xfff0c007

0800270c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b0b6      	sub	sp, #216	; 0xd8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x22>
 800272a:	2302      	movs	r3, #2
 800272c:	e3d5      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7ce>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fe6f 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 83ba 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d824      	bhi.n	800279a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	3b02      	subs	r3, #2
 8002756:	2b03      	cmp	r3, #3
 8002758:	d81b      	bhi.n	8002792 <HAL_ADC_ConfigChannel+0x86>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_ADC_ConfigChannel+0x54>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002771 	.word	0x08002771
 8002764:	08002779 	.word	0x08002779
 8002768:	08002781 	.word	0x08002781
 800276c:	08002789 	.word	0x08002789
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	220c      	movs	r2, #12
 8002774:	605a      	str	r2, [r3, #4]
          break;
 8002776:	e011      	b.n	800279c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2212      	movs	r2, #18
 800277c:	605a      	str	r2, [r3, #4]
          break;
 800277e:	e00d      	b.n	800279c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2218      	movs	r2, #24
 8002784:	605a      	str	r2, [r3, #4]
          break;
 8002786:	e009      	b.n	800279c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278e:	605a      	str	r2, [r3, #4]
          break;
 8002790:	e004      	b.n	800279c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2206      	movs	r2, #6
 8002796:	605a      	str	r2, [r3, #4]
          break;
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800279a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f7ff fd5b 	bl	8002264 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fe33 	bl	800241e <LL_ADC_REG_IsConversionOngoing>
 80027b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe3f 	bl	8002444 <LL_ADC_INJ_IsConversionOngoing>
 80027c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 81c1 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 81bc 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e6:	d10f      	bne.n	8002808 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7ff fd62 	bl	80022bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fd1c 	bl	800223e <LL_ADC_SetSamplingTimeCommonConfig>
 8002806:	e00e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	461a      	mov	r2, r3
 8002816:	f7ff fd51 	bl	80022bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd0c 	bl	800223e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00a      	beq.n	800285e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6919      	ldr	r1, [r3, #16]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002858:	f7ff fc9c 	bl	8002194 <LL_ADC_SetOffset>
 800285c:	e17b      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fcb9 	bl	80021dc <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_ADC_ConfigChannel+0x17e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fcae 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	e01e      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x1bc>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fca3 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e004      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80028bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1d4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e9b      	lsrs	r3, r3, #26
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	e018      	b.n	8002912 <HAL_ADC_ConfigChannel+0x206>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e004      	b.n	8002912 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002912:	429a      	cmp	r2, r3
 8002914:	d106      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fc72 	bl	8002208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc56 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x244>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fc4b 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	e01e      	b.n	800298e <HAL_ADC_ConfigChannel+0x282>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc40 	bl	80021dc <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800296e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x29a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	e018      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x2cc>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e004      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80029ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fc0f 	bl	8002208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fbf3 	bl	80021dc <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x30a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fbe8 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	e01e      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x348>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fbdd 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e004      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x360>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	e016      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x38e>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e004      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d106      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fbae 	bl	8002208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb92 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x3cc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fb87 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	f003 021f 	and.w	r2, r3, #31
 8002ad6:	e017      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x3fc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2103      	movs	r1, #3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb7c 	bl	80021dc <LL_ADC_GetOffsetChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e003      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x414>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	e011      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x438>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e003      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2103      	movs	r1, #3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fb59 	bl	8002208 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fc4c 	bl	80023f8 <LL_ADC_IsEnabled>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 8140 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f7ff fbcd 	bl	8002314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a8f      	ldr	r2, [pc, #572]	; (8002dbc <HAL_ADC_ConfigChannel+0x6b0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f040 8131 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x4a2>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	bf94      	ite	ls
 8002ba6:	2301      	movls	r3, #1
 8002ba8:	2300      	movhi	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e019      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x4d6>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bbe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	bf94      	ite	ls
 8002bdc:	2301      	movls	r3, #1
 8002bde:	2300      	movhi	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d079      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x4f6>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c00:	e015      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x522>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e003      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	069b      	lsls	r3, r3, #26
 8002c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x542>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	e017      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x572>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002c66:	2320      	movs	r3, #32
 8002c68:	e003      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	ea42 0103 	orr.w	r1, r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x598>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 021f 	and.w	r2, r3, #31
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	051b      	lsls	r3, r3, #20
 8002ca2:	e018      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ca>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	e081      	b.n	8002dde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x5ea>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	3301      	adds	r3, #1
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf4:	e015      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x616>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e003      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	069b      	lsls	r3, r3, #26
 8002d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x636>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	e017      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x666>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	ea42 0103 	orr.w	r1, r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x692>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	051b      	lsls	r3, r3, #20
 8002d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	e01e      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x6d0>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	613b      	str	r3, [r7, #16]
  return result;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e006      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x6bc>
 8002dba:	bf00      	nop
 8002dbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b1e      	subs	r3, #30
 8002dd6:	051b      	lsls	r3, r3, #20
 8002dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	6892      	ldr	r2, [r2, #8]
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7ff fa6a 	bl	80022bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d06c      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df4:	483c      	ldr	r0, [pc, #240]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002df6:	f7ff f9bf 	bl	8002178 <LL_ADC_GetCommonPathInternalCh>
 8002dfa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <HAL_ADC_ConfigChannel+0x7e0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d127      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a35      	ldr	r2, [pc, #212]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d157      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e26:	4619      	mov	r1, r3
 8002e28:	482f      	ldr	r0, [pc, #188]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e2a:	f7ff f992 	bl	8002152 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e48:	e002      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e56:	e03a      	b.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_ADC_ConfigChannel+0x7f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x77e>
 8002e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d12a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e80:	4619      	mov	r1, r3
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e84:	f7ff f965 	bl	8002152 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e88:	e021      	b.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d11c      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d111      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002eb6:	f7ff f94c 	bl	8002152 <LL_ADC_SetCommonPathInternalCh>
 8002eba:	e008      	b.n	8002ece <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	37d8      	adds	r7, #216	; 0xd8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	80080000 	.word	0x80080000
 8002ee8:	50040300 	.word	0x50040300
 8002eec:	c7520000 	.word	0xc7520000
 8002ef0:	50040000 	.word	0x50040000
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	cb840000 	.word	0xcb840000
 8002f00:	80000001 	.word	0x80000001

08002f04 <LL_ADC_IsEnabled>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_IsEnabled+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_IsEnabled+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b09f      	sub	sp, #124	; 0x7c
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e089      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f76:	2300      	movs	r3, #0
 8002f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d102      	bne.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e001      	b.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e068      	b.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffb9 	bl	8002f2a <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ffb3 	bl	8002f2a <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14a      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d147      	bne.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002fd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d027      	beq.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fee:	035b      	lsls	r3, r3, #13
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff8:	4824      	ldr	r0, [pc, #144]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002ffa:	f7ff ff83 	bl	8002f04 <LL_ADC_IsEnabled>
 8002ffe:	4604      	mov	r4, r0
 8003000:	4823      	ldr	r0, [pc, #140]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003002:	f7ff ff7f 	bl	8002f04 <LL_ADC_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	4323      	orrs	r3, r4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d132      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6811      	ldr	r1, [r2, #0]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302a:	e023      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003036:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003038:	4814      	ldr	r0, [pc, #80]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800303a:	f7ff ff63 	bl	8002f04 <LL_ADC_IsEnabled>
 800303e:	4604      	mov	r4, r0
 8003040:	4813      	ldr	r0, [pc, #76]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003042:	f7ff ff5f 	bl	8002f04 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	4323      	orrs	r3, r4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d112      	bne.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003056:	f023 030f 	bic.w	r3, r3, #15
 800305a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305e:	e009      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003072:	e000      	b.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003074:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800307e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003082:	4618      	mov	r0, r3
 8003084:	377c      	adds	r7, #124	; 0x7c
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	50040000 	.word	0x50040000
 8003090:	50040100 	.word	0x50040100
 8003094:	50040300 	.word	0x50040300

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db0b      	blt.n	8003126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4907      	ldr	r1, [pc, #28]	; (8003134 <__NVIC_EnableIRQ+0x38>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2001      	movs	r0, #1
 800311e:	fa00 f202 	lsl.w	r2, r0, r2
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff29 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff3e 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff31 	bl	80030fc <__NVIC_EnableIRQ>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffa2 	bl	80031f4 <SysTick_Config>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ca:	e14e      	b.n	800356a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8140 	beq.w	8003564 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d005      	beq.n	80032fc <HAL_GPIO_Init+0x40>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d017      	beq.n	800339a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d123      	bne.n	80033ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	6939      	ldr	r1, [r7, #16]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 809a 	beq.w	8003564 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003430:	4b55      	ldr	r3, [pc, #340]	; (8003588 <HAL_GPIO_Init+0x2cc>)
 8003432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003434:	4a54      	ldr	r2, [pc, #336]	; (8003588 <HAL_GPIO_Init+0x2cc>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6613      	str	r3, [r2, #96]	; 0x60
 800343c:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_GPIO_Init+0x2cc>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003448:	4a50      	ldr	r2, [pc, #320]	; (800358c <HAL_GPIO_Init+0x2d0>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003472:	d013      	beq.n	800349c <HAL_GPIO_Init+0x1e0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_GPIO_Init+0x2d4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00d      	beq.n	8003498 <HAL_GPIO_Init+0x1dc>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_GPIO_Init+0x2d8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x1d8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a44      	ldr	r2, [pc, #272]	; (8003598 <HAL_GPIO_Init+0x2dc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_GPIO_Init+0x1d4>
 800348c:	2303      	movs	r3, #3
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x1e2>
 8003490:	2307      	movs	r3, #7
 8003492:	e004      	b.n	800349e <HAL_GPIO_Init+0x1e2>
 8003494:	2302      	movs	r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_Init+0x1e2>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_GPIO_Init+0x1e2>
 800349c:	2300      	movs	r3, #0
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	f002 0203 	and.w	r2, r2, #3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4093      	lsls	r3, r2
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ae:	4937      	ldr	r1, [pc, #220]	; (800358c <HAL_GPIO_Init+0x2d0>)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034e0:	4a2e      	ldr	r2, [pc, #184]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_GPIO_Init+0x2e0>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800350a:	4a24      	ldr	r2, [pc, #144]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_GPIO_Init+0x2e0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_GPIO_Init+0x2e0>)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f aea9 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40021000 	.word	0x40021000
 800358c:	40010000 	.word	0x40010000
 8003590:	48000400 	.word	0x48000400
 8003594:	48000800 	.word	0x48000800
 8003598:	48000c00 	.word	0x48000c00
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
 80035ac:	4613      	mov	r3, r2
 80035ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b0:	787b      	ldrb	r3, [r7, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	af06      	add	r7, sp, #24
 80035d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e109      	b.n	80037f6 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f008 fc72 	bl	800bee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f004 fb51 	bl	8007cb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	687e      	ldr	r6, [r7, #4]
 8003616:	466d      	mov	r5, sp
 8003618:	f106 0410 	add.w	r4, r6, #16
 800361c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003624:	e885 0003 	stmia.w	r5, {r0, r1}
 8003628:	1d33      	adds	r3, r6, #4
 800362a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f004 fb17 	bl	8007c60 <USB_CoreInit>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d8      	b.n	80037f6 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fb4b 	bl	8007ce6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e04d      	b.n	80036f2 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3305      	adds	r3, #5
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	3304      	adds	r3, #4
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	b298      	uxth	r0, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	333a      	adds	r3, #58	; 0x3a
 8003696:	4602      	mov	r2, r0
 8003698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	3307      	adds	r3, #7
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	3340      	adds	r3, #64	; 0x40
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3344      	adds	r3, #68	; 0x44
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3ac      	bcc.n	8003656 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e044      	b.n	800378c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3301      	adds	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b5      	bcc.n	8003702 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	687e      	ldr	r6, [r7, #4]
 800379e:	466d      	mov	r5, sp
 80037a0:	f106 0410 	add.w	r4, r6, #16
 80037a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b0:	1d33      	adds	r3, r6, #4
 80037b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b4:	6838      	ldr	r0, [r7, #0]
 80037b6:	f004 faa3 	bl	8007d00 <USB_DevInit>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e014      	b.n	80037f6 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 fc55 	bl	8005094 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f006 fcaf 	bl	800a152 <USB_DevDisconnect>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_PCD_Start+0x16>
 8003810:	2302      	movs	r3, #2
 8003812:	e012      	b.n	800383a <HAL_PCD_Start+0x3c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fa2e 	bl	8007c82 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f006 fc7a 	bl	800a124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f006 fc94 	bl	800a17c <USB_ReadInterrupts>
 8003854:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fb3e 	bl	8003ee2 <PCD_EP_ISR_Handler>

    return;
 8003866:	e110      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003884:	b292      	uxth	r2, r2
 8003886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f008 fbdf 	bl	800c04e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003890:	2100      	movs	r1, #0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8fc 	bl	8003a90 <HAL_PCD_SetAddress>

    return;
 8003898:	e0f7      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b6:	b292      	uxth	r2, r2
 80038b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038bc:	e0e5      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00c      	beq.n	80038e2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038da:	b292      	uxth	r2, r2
 80038dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038e0:	e0d3      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d034      	beq.n	8003956 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	b292      	uxth	r2, r2
 8003900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0208 	bic.w	r2, r2, #8
 8003916:	b292      	uxth	r2, r2
 8003918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800392e:	2100      	movs	r1, #0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f008 fe3d 	bl	800c5b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f008 fbc2 	bl	800c0c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	b292      	uxth	r2, r2
 8003950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003954:	e099      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395c:	2b00      	cmp	r3, #0
 800395e:	d027      	beq.n	80039b0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	b292      	uxth	r2, r2
 8003974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398a:	b292      	uxth	r2, r2
 800398c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0204 	orr.w	r2, r2, #4
 80039a2:	b292      	uxth	r2, r2
 80039a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f008 fb6f 	bl	800c08c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039ae:	e06c      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d040      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039cc:	b292      	uxth	r2, r2
 80039ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d12b      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0204 	orr.w	r2, r2, #4
 80039ee:	b292      	uxth	r2, r2
 80039f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0208 	orr.w	r2, r2, #8
 8003a06:	b292      	uxth	r2, r2
 8003a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f008 fdbf 	bl	800c5b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003a32:	e02a      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f008 fb29 	bl	800c08c <HAL_PCD_SuspendCallback>
    return;
 8003a3a:	e026      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00f      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a58:	b292      	uxth	r2, r2
 8003a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f008 fae7 	bl	800c032 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a64:	e011      	b.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00c      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a82:	b292      	uxth	r2, r2
 8003a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a88:	bf00      	nop
  }
}
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_SetAddress+0x1a>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e013      	b.n	8003ad2 <HAL_PCD_SetAddress+0x42>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f006 fb1a 	bl	800a0fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	70fb      	strb	r3, [r7, #3]
 8003aec:	460b      	mov	r3, r1
 8003aee:	803b      	strh	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da0f      	bge.n	8003b20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	705a      	strb	r2, [r3, #1]
 8003b1e:	e00f      	b.n	8003b40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b4c:	883a      	ldrh	r2, [r7, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	78ba      	ldrb	r2, [r7, #2]
 8003b56:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b6a:	78bb      	ldrb	r3, [r7, #2]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_PCD_EP_Open+0xaa>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e00e      	b.n	8003ba2 <HAL_PCD_EP_Open+0xc8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f8d6 	bl	8007d44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0f      	bge.n	8003bde <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	705a      	strb	r2, [r3, #1]
 8003bdc:	e00f      	b.n	8003bfe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 0207 	and.w	r2, r3, #7
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_PCD_EP_Close+0x6e>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e00e      	b.n	8003c36 <HAL_PCD_EP_Close+0x8c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fc46 	bl	80084b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f003 0207 	and.w	r2, r3, #7
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	3304      	adds	r3, #4
 8003c66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6979      	ldr	r1, [r7, #20]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f004 fdf8 	bl	8008892 <USB_EPStartXfer>
 8003ca2:	e005      	b.n	8003cb0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6979      	ldr	r1, [r7, #20]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fdf1 	bl	8008892 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	f003 0207 	and.w	r2, r3, #7
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003cdc:	681b      	ldr	r3, [r3, #0]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3304      	adds	r3, #4
 8003d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2201      	movs	r2, #1
 8003d36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d44:	7afb      	ldrb	r3, [r7, #11]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6979      	ldr	r1, [r7, #20]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 fd9c 	bl	8008892 <USB_EPStartXfer>
 8003d5a:	e005      	b.n	8003d68 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 fd95 	bl	8008892 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 0207 	and.w	r2, r3, #7
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d901      	bls.n	8003d90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04e      	b.n	8003e2e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da0f      	bge.n	8003db8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	705a      	strb	r2, [r3, #1]
 8003db6:	e00d      	b.n	8003dd4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_PCD_EP_SetStall+0x82>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e01c      	b.n	8003e2e <HAL_PCD_EP_SetStall+0xbc>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 f87b 	bl	8009efe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d108      	bne.n	8003e24 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f006 f9bc 	bl	800a19c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d901      	bls.n	8003e54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e042      	b.n	8003eda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da0f      	bge.n	8003e7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	705a      	strb	r2, [r3, #1]
 8003e7a:	e00f      	b.n	8003e9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 0207 	and.w	r2, r3, #7
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_PCD_EP_ClrStall+0x86>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e00e      	b.n	8003eda <HAL_PCD_EP_ClrStall+0xa4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f006 f868 	bl	8009fa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b096      	sub	sp, #88	; 0x58
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003eea:	e3a9      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ef4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ef8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003f06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 8169 	bne.w	80041e2 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d150      	bne.n	8003fbe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	81fb      	strh	r3, [r7, #14]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	89fb      	ldrh	r3, [r7, #14]
 8003f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	332c      	adds	r3, #44	; 0x2c
 8003f44:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	441a      	add	r2, r3
 8003f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f008 f83d 	bl	800bffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8357 	beq.w	8004640 <PCD_EP_ISR_Handler+0x75e>
 8003f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 8352 	bne.w	8004640 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	b292      	uxth	r2, r2
 8003fb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003fbc:	e340      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003fd0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d032      	beq.n	8004042 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004002:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004010:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004016:	b29b      	uxth	r3, r3
 8004018:	f006 f90e 	bl	800a238 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004028:	4013      	ands	r3, r2
 800402a:	823b      	strh	r3, [r7, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	8a3a      	ldrh	r2, [r7, #16]
 8004032:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f007 ffb2 	bl	800bfa4 <HAL_PCD_SetupStageCallback>
 8004040:	e2fe      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004042:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004046:	2b00      	cmp	r3, #0
 8004048:	f280 82fa 	bge.w	8004640 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004058:	4013      	ands	r3, r2
 800405a:	83fb      	strh	r3, [r7, #30]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	8bfa      	ldrh	r2, [r7, #30]
 8004062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800408e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <PCD_EP_ISR_Handler+0x1ec>
 800409a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f006 f8c0 	bl	800a238 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	441a      	add	r2, r3
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f007 ff7d 	bl	800bfc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80040d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 82ad 	bne.w	8004640 <PCD_EP_ISR_Handler+0x75e>
 80040e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80040ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f2:	f000 82a5 	beq.w	8004640 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	4413      	add	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b3e      	cmp	r3, #62	; 0x3e
 800411c:	d918      	bls.n	8004150 <PCD_EP_ISR_Handler+0x26e>
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <PCD_EP_ISR_Handler+0x256>
 8004132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004134:	3b01      	subs	r3, #1
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
 8004138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413a:	b29b      	uxth	r3, r3
 800413c:	029b      	lsls	r3, r3, #10
 800413e:	b29b      	uxth	r3, r3
 8004140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004148:	b29a      	uxth	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e029      	b.n	80041a4 <PCD_EP_ISR_Handler+0x2c2>
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d112      	bne.n	800417e <PCD_EP_ISR_Handler+0x29c>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004162:	b29a      	uxth	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004176:	b29a      	uxth	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	e012      	b.n	80041a4 <PCD_EP_ISR_Handler+0x2c2>
 800417e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <PCD_EP_ISR_Handler+0x2b6>
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	3301      	adds	r3, #1
 8004196:	647b      	str	r3, [r7, #68]	; 0x44
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	b29b      	uxth	r3, r3
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	b29a      	uxth	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b4:	827b      	strh	r3, [r7, #18]
 80041b6:	8a7b      	ldrh	r3, [r7, #18]
 80041b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041bc:	827b      	strh	r3, [r7, #18]
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041c4:	827b      	strh	r3, [r7, #18]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	8a7b      	ldrh	r3, [r7, #18]
 80041cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8013      	strh	r3, [r2, #0]
 80041e0:	e22e      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80041f6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f280 80f7 	bge.w	80043ee <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29a      	uxth	r2, r3
 8004212:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004216:	4013      	ands	r3, r2
 8004218:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800422e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004232:	b292      	uxth	r2, r2
 8004234:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004236:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	7b1b      	ldrb	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d123      	bne.n	800429e <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4413      	add	r3, r2
 8004270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800427e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 808e 	beq.w	80043a4 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	6959      	ldr	r1, [r3, #20]
 8004290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004292:	88da      	ldrh	r2, [r3, #6]
 8004294:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004298:	f005 ffce 	bl	800a238 <USB_ReadPMA>
 800429c:	e082      	b.n	80043a4 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d10a      	bne.n	80042bc <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80042a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042aa:	461a      	mov	r2, r3
 80042ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9d4 	bl	800465c <HAL_PCD_EP_DB_Receive>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042ba:	e073      	b.n	80043a4 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d022      	beq.n	8004360 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	4413      	add	r3, r2
 8004334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004342:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02c      	beq.n	80043a4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	6959      	ldr	r1, [r3, #20]
 8004352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004354:	891a      	ldrh	r2, [r3, #8]
 8004356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800435a:	f005 ff6d 	bl	800a238 <USB_ReadPMA>
 800435e:	e021      	b.n	80043a4 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	4413      	add	r3, r2
 800437a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004384:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004388:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004396:	6959      	ldr	r1, [r3, #20]
 8004398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439a:	895a      	ldrh	r2, [r3, #10]
 800439c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043a0:	f005 ff4a 	bl	800a238 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ac:	441a      	add	r2, r3
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ba:	441a      	add	r2, r3
 80043bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80043c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <PCD_EP_ISR_Handler+0x4f2>
 80043c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d206      	bcs.n	80043e2 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80043d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f007 fdf4 	bl	800bfc8 <HAL_PCD_DataOutStageCallback>
 80043e0:	e005      	b.n	80043ee <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fa52 	bl	8008892 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8122 	beq.w	8004640 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80043fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	78db      	ldrb	r3, [r3, #3]
 8004452:	2b01      	cmp	r3, #1
 8004454:	f040 80a2 	bne.w	800459c <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8004458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445a:	2200      	movs	r2, #0
 800445c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004460:	7b1b      	ldrb	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8093 	beq.w	800458e <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004468:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d046      	beq.n	8004502 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d126      	bne.n	80044ca <PCD_EP_ISR_Handler+0x5e8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	4413      	add	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	00da      	lsls	r2, r3, #3
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	4413      	add	r3, r2
 800449e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	e061      	b.n	800458e <PCD_EP_ISR_Handler+0x6ac>
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d15d      	bne.n	800458e <PCD_EP_ISR_Handler+0x6ac>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	4413      	add	r3, r2
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	00da      	lsls	r2, r3, #3
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	4413      	add	r3, r2
 80044f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	2200      	movs	r2, #0
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e045      	b.n	800458e <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d126      	bne.n	800455e <PCD_EP_ISR_Handler+0x67c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	4413      	add	r3, r2
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	4413      	add	r3, r2
 8004532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004542:	b29a      	uxth	r2, r3
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e017      	b.n	800458e <PCD_EP_ISR_Handler+0x6ac>
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d113      	bne.n	800458e <PCD_EP_ISR_Handler+0x6ac>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	4413      	add	r3, r2
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	00da      	lsls	r2, r3, #3
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	4413      	add	r3, r2
 8004582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2200      	movs	r2, #0
 800458c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f007 fd32 	bl	800bffe <HAL_PCD_DataInStageCallback>
 800459a:	e051      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800459c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d144      	bne.n	8004632 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80045d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045d8:	429a      	cmp	r2, r3
 80045da:	d907      	bls.n	80045ec <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80045dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045e4:	1ad2      	subs	r2, r2, r3
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	619a      	str	r2, [r3, #24]
 80045ea:	e002      	b.n	80045f2 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	2200      	movs	r2, #0
 80045f0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f007 fcfc 	bl	800bffe <HAL_PCD_DataInStageCallback>
 8004606:	e01b      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004610:	441a      	add	r2, r3
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800461e:	441a      	add	r2, r3
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800462a:	4618      	mov	r0, r3
 800462c:	f004 f931 	bl	8008892 <USB_EPStartXfer>
 8004630:	e006      	b.n	8004640 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004632:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004636:	461a      	mov	r2, r3
 8004638:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f917 	bl	800486e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004648:	b29b      	uxth	r3, r3
 800464a:	b21b      	sxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f6ff ac4d 	blt.w	8003eec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3758      	adds	r7, #88	; 0x58
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d07c      	beq.n	800476e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	4413      	add	r3, r2
 800468e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004698:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	8b7b      	ldrh	r3, [r7, #26]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d306      	bcc.n	80046b2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	619a      	str	r2, [r3, #24]
 80046b0:	e002      	b.n	80046b8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d123      	bne.n	8004708 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	833b      	strh	r3, [r7, #24]
 80046dc:	8b3b      	ldrh	r3, [r7, #24]
 80046de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046e2:	833b      	strh	r3, [r7, #24]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	8b3b      	ldrh	r3, [r7, #24]
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01f      	beq.n	8004752 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	82fb      	strh	r3, [r7, #22]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8afb      	ldrh	r3, [r7, #22]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004752:	8b7b      	ldrh	r3, [r7, #26]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8085 	beq.w	8004864 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	891a      	ldrh	r2, [r3, #8]
 8004766:	8b7b      	ldrh	r3, [r7, #26]
 8004768:	f005 fd66 	bl	800a238 <USB_ReadPMA>
 800476c:	e07a      	b.n	8004864 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	4413      	add	r3, r2
 8004788:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	8b7b      	ldrh	r3, [r7, #26]
 800479a:	429a      	cmp	r2, r3
 800479c:	d306      	bcc.n	80047ac <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	8b7b      	ldrh	r3, [r7, #26]
 80047a4:	1ad2      	subs	r2, r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	619a      	str	r2, [r3, #24]
 80047aa:	e002      	b.n	80047b2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d123      	bne.n	8004802 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	83fb      	strh	r3, [r7, #30]
 80047d6:	8bfb      	ldrh	r3, [r7, #30]
 80047d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047dc:	83fb      	strh	r3, [r7, #30]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11f      	bne.n	800484c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	83bb      	strh	r3, [r7, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	8bbb      	ldrh	r3, [r7, #28]
 8004838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004844:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004848:	b29b      	uxth	r3, r3
 800484a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800484c:	8b7b      	ldrh	r3, [r7, #26]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6959      	ldr	r1, [r3, #20]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	895a      	ldrh	r2, [r3, #10]
 800485e:	8b7b      	ldrh	r3, [r7, #26]
 8004860:	f005 fcea 	bl	800a238 <USB_ReadPMA>
    }
  }

  return count;
 8004864:	8b7b      	ldrh	r3, [r7, #26]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b0a2      	sub	sp, #136	; 0x88
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 81c5 	beq.w	8004c12 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004890:	b29b      	uxth	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d907      	bls.n	80048cc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	619a      	str	r2, [r3, #24]
 80048ca:	e002      	b.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80b9 	bne.w	8004a4e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d126      	bne.n	8004932 <HAL_PCD_EP_DB_Transmit+0xc4>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	4413      	add	r3, r2
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	00da      	lsls	r2, r3, #3
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	4413      	add	r3, r2
 8004906:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004916:	b29a      	uxth	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492a:	b29a      	uxth	r2, r3
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	e01a      	b.n	8004968 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d116      	bne.n	8004968 <HAL_PCD_EP_DB_Transmit+0xfa>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004948:	b29b      	uxth	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	4413      	add	r3, r2
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	00da      	lsls	r2, r3, #3
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	4413      	add	r3, r2
 800495c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	2200      	movs	r2, #0
 8004966:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d126      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004984:	b29b      	uxth	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	00da      	lsls	r2, r3, #3
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	4413      	add	r3, r2
 8004998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29a      	uxth	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e017      	b.n	80049f4 <HAL_PCD_EP_DB_Transmit+0x186>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d113      	bne.n	80049f4 <HAL_PCD_EP_DB_Transmit+0x186>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	4413      	add	r3, r2
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2200      	movs	r2, #0
 80049f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f007 faff 	bl	800bffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 82d2 	beq.w	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	827b      	strh	r3, [r7, #18]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	8a7b      	ldrh	r3, [r7, #18]
 8004a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8013      	strh	r3, [r2, #0]
 8004a4c:	e2b0      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d021      	beq.n	8004a9c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 8284 	bne.w	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ab0:	441a      	add	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004abe:	441a      	add	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d309      	bcc.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	621a      	str	r2, [r3, #32]
 8004ae2:	e015      	b.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004afa:	e009      	b.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d155      	bne.n	8004bc4 <HAL_PCD_EP_DB_Transmit+0x356>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	4413      	add	r3, r2
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	00da      	lsls	r2, r3, #3
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d916      	bls.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x306>
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	e043      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x38e>
 8004b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d112      	bne.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	e02d      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x348>
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	e01b      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x38e>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d117      	bne.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x38e>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be0:	4413      	add	r3, r2
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	00da      	lsls	r2, r3, #3
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	4413      	add	r3, r2
 8004bee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6959      	ldr	r1, [r3, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	891a      	ldrh	r2, [r3, #8]
 8004c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f005 fad2 	bl	800a1b4 <USB_WritePMA>
 8004c10:	e1ce      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d307      	bcc.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e002      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80c4 	bne.w	8004dee <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d126      	bne.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x44e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c82:	4413      	add	r3, r2
 8004c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c94:	667b      	str	r3, [r7, #100]	; 0x64
 8004c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e01a      	b.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0x484>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d116      	bne.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0x484>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd8:	4413      	add	r3, r2
 8004cda:	673b      	str	r3, [r7, #112]	; 0x70
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	00da      	lsls	r2, r3, #3
 8004ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d12f      	bne.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d18:	4413      	add	r3, r2
 8004d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	00da      	lsls	r2, r3, #3
 8004d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d44:	801a      	strh	r2, [r3, #0]
 8004d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	e017      	b.n	8004d90 <HAL_PCD_EP_DB_Transmit+0x522>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d113      	bne.n	8004d90 <HAL_PCD_EP_DB_Transmit+0x522>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d76:	4413      	add	r3, r2
 8004d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	00da      	lsls	r2, r3, #3
 8004d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d82:	4413      	add	r3, r2
 8004d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f007 f931 	bl	800bffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 8104 	bne.w	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]
 8004dec:	e0e0      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d121      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	f040 80b4 	bne.w	8004fb0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e50:	441a      	add	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e5e:	441a      	add	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d309      	bcc.n	8004e84 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	621a      	str	r2, [r3, #32]
 8004e82:	e015      	b.n	8004eb0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e9a:	e009      	b.n	8004eb0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d155      	bne.n	8004f6a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed2:	4413      	add	r3, r2
 8004ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	00da      	lsls	r2, r3, #3
 8004edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eea:	d916      	bls.n	8004f1a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x694>
 8004efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efe:	3b01      	subs	r3, #1
 8004f00:	677b      	str	r3, [r7, #116]	; 0x74
 8004f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e040      	b.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x72e>
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d112      	bne.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e02a      	b.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x72e>
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	677b      	str	r3, [r7, #116]	; 0x74
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f58:	3301      	adds	r3, #1
 8004f5a:	677b      	str	r3, [r7, #116]	; 0x74
 8004f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e018      	b.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x72e>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d114      	bne.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x72e>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f80:	4413      	add	r3, r2
 8004f82:	663b      	str	r3, [r7, #96]	; 0x60
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	00da      	lsls	r2, r3, #3
 8004f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6959      	ldr	r1, [r3, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	895a      	ldrh	r2, [r3, #10]
 8004fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f005 f902 	bl	800a1b4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	823b      	strh	r3, [r7, #16]
 8004fcc:	8a3b      	ldrh	r3, [r7, #16]
 8004fce:	f083 0310 	eor.w	r3, r3, #16
 8004fd2:	823b      	strh	r3, [r7, #16]
 8004fd4:	8a3b      	ldrh	r3, [r7, #16]
 8004fd6:	f083 0320 	eor.w	r3, r3, #32
 8004fda:	823b      	strh	r3, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	8a3b      	ldrh	r3, [r7, #16]
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3788      	adds	r7, #136	; 0x88
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800500a:	b480      	push	{r7}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	817b      	strh	r3, [r7, #10]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800501c:	897b      	ldrh	r3, [r7, #10]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005028:	897b      	ldrh	r3, [r7, #10]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e00a      	b.n	8005058 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005042:	897a      	ldrh	r2, [r7, #10]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	b29a      	uxth	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	80da      	strh	r2, [r3, #6]
 800506c:	e00b      	b.n	8005086 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2201      	movs	r2, #1
 8005072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	b29a      	uxth	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	b29a      	uxth	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f043 0302 	orr.w	r3, r3, #2
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_PWREx_GetVoltageRange+0x18>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000

08005104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005112:	d130      	bne.n	8005176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d038      	beq.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800512c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2232      	movs	r2, #50	; 0x32
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0c9b      	lsrs	r3, r3, #18
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005148:	e002      	b.n	8005150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b01      	subs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d102      	bne.n	8005164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f2      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d110      	bne.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d007      	beq.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800518c:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40007000 	.word	0x40007000
 80051a8:	20000000 	.word	0x20000000
 80051ac:	431bde83 	.word	0x431bde83

080051b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a04      	ldr	r2, [pc, #16]	; (80051cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051be:	6053      	str	r3, [r2, #4]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40007000 	.word	0x40007000

080051d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f000 bc4f 	b.w	8005a82 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e4:	4b97      	ldr	r3, [pc, #604]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ee:	4b95      	ldr	r3, [pc, #596]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80e6 	beq.w	80053d2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_RCC_OscConfig+0x4c>
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	2b0c      	cmp	r3, #12
 8005210:	f040 808d 	bne.w	800532e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 8089 	bne.w	800532e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800521c:	4b89      	ldr	r3, [pc, #548]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <HAL_RCC_OscConfig+0x66>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f000 bc26 	b.w	8005a82 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523a:	4b82      	ldr	r3, [pc, #520]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <HAL_RCC_OscConfig+0x80>
 8005246:	4b7f      	ldr	r3, [pc, #508]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524e:	e005      	b.n	800525c <HAL_RCC_OscConfig+0x8c>
 8005250:	4b7c      	ldr	r3, [pc, #496]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525c:	4293      	cmp	r3, r2
 800525e:	d224      	bcs.n	80052aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fda1 	bl	8005dac <RCC_SetFlashLatencyFromMSIRange>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f000 bc06 	b.w	8005a82 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005276:	4b73      	ldr	r3, [pc, #460]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a72      	ldr	r2, [pc, #456]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800527c:	f043 0308 	orr.w	r3, r3, #8
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	496d      	ldr	r1, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005294:	4b6b      	ldr	r3, [pc, #428]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	4968      	ldr	r1, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	e025      	b.n	80052f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052aa:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052b0:	f043 0308 	orr.w	r3, r3, #8
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b63      	ldr	r3, [pc, #396]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	4960      	ldr	r1, [pc, #384]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c8:	4b5e      	ldr	r3, [pc, #376]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	495b      	ldr	r1, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd60 	bl	8005dac <RCC_SetFlashLatencyFromMSIRange>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e3c5      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f6:	f000 fccd 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b51      	ldr	r3, [pc, #324]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	4950      	ldr	r1, [pc, #320]	; (8005448 <HAL_RCC_OscConfig+0x278>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a4e      	ldr	r2, [pc, #312]	; (800544c <HAL_RCC_OscConfig+0x27c>)
 8005314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005316:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <HAL_RCC_OscConfig+0x280>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fc fe86 	bl	800202c <HAL_InitTick>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d052      	beq.n	80053d0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	e3a9      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d032      	beq.n	800539c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005336:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a42      	ldr	r2, [pc, #264]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005342:	f7fc fec3 	bl	80020cc <HAL_GetTick>
 8005346:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800534a:	f7fc febf 	bl	80020cc <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e392      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800535c:	4b39      	ldr	r3, [pc, #228]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005368:	4b36      	ldr	r3, [pc, #216]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800536e:	f043 0308 	orr.w	r3, r3, #8
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4b33      	ldr	r3, [pc, #204]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	4930      	ldr	r1, [pc, #192]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	492b      	ldr	r1, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
 800539a:	e01a      	b.n	80053d2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800539c:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053a8:	f7fc fe90 	bl	80020cc <HAL_GetTick>
 80053ac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b0:	f7fc fe8c 	bl	80020cc <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e35f      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1e0>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d073      	beq.n	80054c6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_OscConfig+0x220>
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d10e      	bne.n	8005408 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d10b      	bne.n	8005408 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d063      	beq.n	80054c4 <HAL_RCC_OscConfig+0x2f4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d15f      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e33c      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d106      	bne.n	8005420 <HAL_RCC_OscConfig+0x250>
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e025      	b.n	800546c <HAL_RCC_OscConfig+0x29c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005428:	d114      	bne.n	8005454 <HAL_RCC_OscConfig+0x284>
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a02      	ldr	r2, [pc, #8]	; (8005444 <HAL_RCC_OscConfig+0x274>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <HAL_RCC_OscConfig+0x29c>
 8005444:	40021000 	.word	0x40021000
 8005448:	0800c730 	.word	0x0800c730
 800544c:	20000000 	.word	0x20000000
 8005450:	20000004 	.word	0x20000004
 8005454:	4b8f      	ldr	r3, [pc, #572]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a8e      	ldr	r2, [pc, #568]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b8c      	ldr	r3, [pc, #560]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a8b      	ldr	r2, [pc, #556]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fc fe2a 	bl	80020cc <HAL_GetTick>
 8005478:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fc fe26 	bl	80020cc <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e2f9      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548e:	4b81      	ldr	r3, [pc, #516]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x2ac>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fe16 	bl	80020cc <HAL_GetTick>
 80054a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fc fe12 	bl	80020cc <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e2e5      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b6:	4b77      	ldr	r3, [pc, #476]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2d4>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d060      	beq.n	8005594 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_OscConfig+0x314>
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d119      	bne.n	8005512 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d116      	bne.n	8005512 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e4:	4b6b      	ldr	r3, [pc, #428]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_OscConfig+0x32c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e2c2      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b65      	ldr	r3, [pc, #404]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	4962      	ldr	r1, [pc, #392]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005510:	e040      	b.n	8005594 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d023      	beq.n	8005562 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551a:	4b5e      	ldr	r3, [pc, #376]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5d      	ldr	r2, [pc, #372]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc fdd1 	bl	80020cc <HAL_GetTick>
 800552a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552e:	f7fc fdcd 	bl	80020cc <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e2a0      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005540:	4b54      	ldr	r3, [pc, #336]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b51      	ldr	r3, [pc, #324]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	494e      	ldr	r1, [pc, #312]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	e018      	b.n	8005594 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005562:	4b4c      	ldr	r3, [pc, #304]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4b      	ldr	r2, [pc, #300]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fc fdad 	bl	80020cc <HAL_GetTick>
 8005572:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005576:	f7fc fda9 	bl	80020cc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e27c      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005588:	4b42      	ldr	r3, [pc, #264]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8082 	beq.w	80056a6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d05f      	beq.n	800566a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80055aa:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	429a      	cmp	r2, r3
 80055be:	d037      	beq.n	8005630 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e254      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01b      	beq.n	800561a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80055e2:	4b2c      	ldr	r3, [pc, #176]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055f2:	f7fc fd6b 	bl	80020cc <HAL_GetTick>
 80055f6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fc fd67 	bl	80020cc <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b11      	cmp	r3, #17
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e23a      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ef      	bne.n	80055fa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800561a:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800561c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005620:	f023 0210 	bic.w	r2, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	491a      	ldr	r1, [pc, #104]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005636:	4a17      	ldr	r2, [pc, #92]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005640:	f7fc fd44 	bl	80020cc <HAL_GetTick>
 8005644:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005648:	f7fc fd40 	bl	80020cc <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b11      	cmp	r3, #17
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e213      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ef      	beq.n	8005648 <HAL_RCC_OscConfig+0x478>
 8005668:	e01d      	b.n	80056a6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566a:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005670:	4a08      	ldr	r2, [pc, #32]	; (8005694 <HAL_RCC_OscConfig+0x4c4>)
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fc fd27 	bl	80020cc <HAL_GetTick>
 800567e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005682:	f7fc fd23 	bl	80020cc <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b11      	cmp	r3, #17
 800568e:	d903      	bls.n	8005698 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1f6      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
 8005694:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005698:	4ba9      	ldr	r3, [pc, #676]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1ed      	bne.n	8005682 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80bd 	beq.w	800582e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056ba:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10e      	bne.n	80056e4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	4b9e      	ldr	r3, [pc, #632]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	4a9d      	ldr	r2, [pc, #628]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	; 0x58
 80056d2:	4b9b      	ldr	r3, [pc, #620]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e4:	4b97      	ldr	r3, [pc, #604]	; (8005944 <HAL_RCC_OscConfig+0x774>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d118      	bne.n	8005722 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f0:	4b94      	ldr	r3, [pc, #592]	; (8005944 <HAL_RCC_OscConfig+0x774>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a93      	ldr	r2, [pc, #588]	; (8005944 <HAL_RCC_OscConfig+0x774>)
 80056f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fc:	f7fc fce6 	bl	80020cc <HAL_GetTick>
 8005700:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005704:	f7fc fce2 	bl	80020cc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e1b5      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <HAL_RCC_OscConfig+0x774>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02c      	beq.n	8005788 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800572e:	4b84      	ldr	r3, [pc, #528]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005734:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	497f      	ldr	r1, [pc, #508]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005754:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	4a79      	ldr	r2, [pc, #484]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800575c:	f043 0304 	orr.w	r3, r3, #4
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005764:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	4a75      	ldr	r2, [pc, #468]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005774:	e018      	b.n	80057a8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005776:	4b72      	ldr	r3, [pc, #456]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	4a70      	ldr	r2, [pc, #448]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005786:	e00f      	b.n	80057a8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005788:	4b6d      	ldr	r3, [pc, #436]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	4a6c      	ldr	r2, [pc, #432]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005798:	4b69      	ldr	r3, [pc, #420]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	4a68      	ldr	r2, [pc, #416]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d016      	beq.n	80057de <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fc fc8c 	bl	80020cc <HAL_GetTick>
 80057b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fc fc88 	bl	80020cc <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e159      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ce:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ed      	beq.n	80057b8 <HAL_RCC_OscConfig+0x5e8>
 80057dc:	e01d      	b.n	800581a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fc fc75 	bl	80020cc <HAL_GetTick>
 80057e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fc fc71 	bl	80020cc <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e142      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057fc:	4b50      	ldr	r3, [pc, #320]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ed      	bne.n	80057e6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800580a:	4b4d      	ldr	r3, [pc, #308]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	4a4b      	ldr	r2, [pc, #300]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800581a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005822:	4b47      	ldr	r3, [pc, #284]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	4a46      	ldr	r2, [pc, #280]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03c      	beq.n	80058b4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01c      	beq.n	800587c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005848:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fc fc3b 	bl	80020cc <HAL_GetTick>
 8005856:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800585a:	f7fc fc37 	bl	80020cc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e10a      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800586c:	4b34      	ldr	r3, [pc, #208]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800586e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ef      	beq.n	800585a <HAL_RCC_OscConfig+0x68a>
 800587a:	e01b      	b.n	80058b4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800587e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005882:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fc fc1e 	bl	80020cc <HAL_GetTick>
 8005890:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005894:	f7fc fc1a 	bl	80020cc <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0ed      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80058a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ef      	bne.n	8005894 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80e1 	beq.w	8005a80 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	f040 80b5 	bne.w	8005a32 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	429a      	cmp	r2, r3
 80058da:	d124      	bne.n	8005926 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	3b01      	subs	r3, #1
 80058e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d11b      	bne.n	8005926 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d113      	bne.n	8005926 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	3b01      	subs	r3, #1
 800590c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d109      	bne.n	8005926 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	3b01      	subs	r3, #1
 8005920:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d05f      	beq.n	80059e6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d05a      	beq.n	80059e2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a03      	ldr	r2, [pc, #12]	; (8005940 <HAL_RCC_OscConfig+0x770>)
 8005932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005936:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005938:	f7fc fbc8 	bl	80020cc <HAL_GetTick>
 800593c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593e:	e00c      	b.n	800595a <HAL_RCC_OscConfig+0x78a>
 8005940:	40021000 	.word	0x40021000
 8005944:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005948:	f7fc fbc0 	bl	80020cc <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e093      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800595a:	4b4c      	ldr	r3, [pc, #304]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005966:	4b49      	ldr	r3, [pc, #292]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <HAL_RCC_OscConfig+0x8c0>)
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005976:	3a01      	subs	r2, #1
 8005978:	0112      	lsls	r2, r2, #4
 800597a:	4311      	orrs	r1, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005980:	0212      	lsls	r2, r2, #8
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005988:	0852      	lsrs	r2, r2, #1
 800598a:	3a01      	subs	r2, #1
 800598c:	0552      	lsls	r2, r2, #21
 800598e:	4311      	orrs	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005994:	0852      	lsrs	r2, r2, #1
 8005996:	3a01      	subs	r2, #1
 8005998:	0652      	lsls	r2, r2, #25
 800599a:	430a      	orrs	r2, r1
 800599c:	493b      	ldr	r1, [pc, #236]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059a2:	4b3a      	ldr	r3, [pc, #232]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a39      	ldr	r2, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ac:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a36      	ldr	r2, [pc, #216]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ba:	f7fc fb87 	bl	80020cc <HAL_GetTick>
 80059be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fc fb83 	bl	80020cc <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e056      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e0:	e04e      	b.n	8005a80 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e04d      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d146      	bne.n	8005a80 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 80059f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059fc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059fe:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a08:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a0a:	f7fc fb5f 	bl	80020cc <HAL_GetTick>
 8005a0e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a12:	f7fc fb5b 	bl	80020cc <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e02e      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x842>
 8005a30:	e026      	b.n	8005a80 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d021      	beq.n	8005a7c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fc fb42 	bl	80020cc <HAL_GetTick>
 8005a48:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fc fb3e 	bl	80020cc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e011      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <HAL_RCC_OscConfig+0x8bc>)
 8005a70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	60d3      	str	r3, [r2, #12]
 8005a7a:	e001      	b.n	8005a80 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3728      	adds	r7, #40	; 0x28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	f99f808c 	.word	0xf99f808c

08005a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0e7      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b75      	ldr	r3, [pc, #468]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d910      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b72      	ldr	r3, [pc, #456]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 0207 	bic.w	r2, r3, #7
 8005abe:	4970      	ldr	r1, [pc, #448]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b6e      	ldr	r3, [pc, #440]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0cf      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	4b66      	ldr	r3, [pc, #408]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d908      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af4:	4b63      	ldr	r3, [pc, #396]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4960      	ldr	r1, [pc, #384]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04c      	beq.n	8005bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	4b5a      	ldr	r3, [pc, #360]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d121      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0a6      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b32:	4b54      	ldr	r3, [pc, #336]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d115      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e09a      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e08e      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e086      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b6a:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 0203 	bic.w	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4943      	ldr	r1, [pc, #268]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7c:	f7fc faa6 	bl	80020cc <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fc faa2 	bl	80020cc <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e06e      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 020c 	and.w	r2, r3, #12
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1eb      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d208      	bcs.n	8005bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc8:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	492b      	ldr	r1, [pc, #172]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d210      	bcs.n	8005c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 0207 	bic.w	r2, r3, #7
 8005bf0:	4923      	ldr	r1, [pc, #140]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d001      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e036      	b.n	8005c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4918      	ldr	r1, [pc, #96]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4910      	ldr	r1, [pc, #64]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c48:	f000 f824 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	490b      	ldr	r1, [pc, #44]	; (8005c88 <HAL_RCC_ClockConfig+0x1f4>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_ClockConfig+0x1fc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fc f9dd 	bl	800202c <HAL_InitTick>
 8005c72:	4603      	mov	r3, r0
 8005c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c76:	7afb      	ldrb	r3, [r7, #11]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40022000 	.word	0x40022000
 8005c84:	40021000 	.word	0x40021000
 8005c88:	0800c730 	.word	0x0800c730
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	20000004 	.word	0x20000004

08005c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	; 0x24
 8005c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cac:	4b3b      	ldr	r3, [pc, #236]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d121      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d11e      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cd4:	4b31      	ldr	r3, [pc, #196]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d04:	e00a      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d102      	bne.n	8005d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d0c:	4b25      	ldr	r3, [pc, #148]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e004      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d18:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b0c      	cmp	r3, #12
 8005d20:	d134      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d003      	beq.n	8005d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d003      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0xac>
 8005d38:	e005      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d3c:	617b      	str	r3, [r7, #20]
      break;
 8005d3e:	e005      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d42:	617b      	str	r3, [r7, #20]
      break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	617b      	str	r3, [r7, #20]
      break;
 8005d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	3301      	adds	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d5a:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	fb03 f202 	mul.w	r2, r3, r2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	0e5b      	lsrs	r3, r3, #25
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	0800c740 	.word	0x0800c740
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200

08005dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005db8:	4b2a      	ldr	r3, [pc, #168]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dc4:	f7ff f990 	bl	80050e8 <HAL_PWREx_GetVoltageRange>
 8005dc8:	6178      	str	r0, [r7, #20]
 8005dca:	e014      	b.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	4a24      	ldr	r2, [pc, #144]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd8:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005de4:	f7ff f980 	bl	80050e8 <HAL_PWREx_GetVoltageRange>
 8005de8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dea:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dee:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfc:	d10b      	bne.n	8005e16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d919      	bls.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2ba0      	cmp	r3, #160	; 0xa0
 8005e08:	d902      	bls.n	8005e10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e013      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e10:	2301      	movs	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	e010      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b80      	cmp	r3, #128	; 0x80
 8005e1a:	d902      	bls.n	8005e22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	e00a      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d102      	bne.n	8005e2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e28:	2302      	movs	r3, #2
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e004      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b70      	cmp	r3, #112	; 0x70
 8005e32:	d101      	bne.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 0207 	bic.w	r2, r3, #7
 8005e40:	4909      	ldr	r1, [pc, #36]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40022000 	.word	0x40022000

08005e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e74:	2300      	movs	r3, #0
 8005e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 809e 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e8e:	4b46      	ldr	r3, [pc, #280]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea4:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eae:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb0:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec0:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a39      	ldr	r2, [pc, #228]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ecc:	f7fc f8fe 	bl	80020cc <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ed2:	e009      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed4:	f7fc f8fa 	bl	80020cc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d902      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	74fb      	strb	r3, [r7, #19]
        break;
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ee8:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0ef      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d15a      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efa:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d019      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f22:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f42:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d016      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fc f8ba 	bl	80020cc <HAL_GetTick>
 8005f58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fc f8b6 	bl	80020cc <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d902      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	74fb      	strb	r3, [r7, #19]
            break;
 8005f72:	e006      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ec      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005f82:	7cfb      	ldrb	r3, [r7, #19]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4904      	ldr	r1, [pc, #16]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f9e:	e009      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	74bb      	strb	r3, [r7, #18]
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fb4:	7c7b      	ldrb	r3, [r7, #17]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4b6e      	ldr	r3, [pc, #440]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	4a6d      	ldr	r2, [pc, #436]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd2:	4b68      	ldr	r3, [pc, #416]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4964      	ldr	r1, [pc, #400]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff4:	4b5f      	ldr	r3, [pc, #380]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 020c 	bic.w	r2, r3, #12
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	495c      	ldr	r1, [pc, #368]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006016:	4b57      	ldr	r3, [pc, #348]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4953      	ldr	r1, [pc, #332]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006038:	4b4e      	ldr	r3, [pc, #312]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	494b      	ldr	r1, [pc, #300]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800605a:	4b46      	ldr	r3, [pc, #280]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	4942      	ldr	r1, [pc, #264]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800607c:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	493a      	ldr	r1, [pc, #232]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800609e:	4b35      	ldr	r3, [pc, #212]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	4931      	ldr	r1, [pc, #196]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	4929      	ldr	r1, [pc, #164]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4920      	ldr	r1, [pc, #128]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	4918      	ldr	r1, [pc, #96]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006124:	4b13      	ldr	r3, [pc, #76]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	490a      	ldr	r1, [pc, #40]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a04      	ldr	r2, [pc, #16]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006168:	7cbb      	ldrb	r3, [r7, #18]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40021000 	.word	0x40021000

08006178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e095      	b.n	80062b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	d108      	bne.n	80061a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619a:	d009      	beq.n	80061b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	e005      	b.n	80061b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fbc2 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f0:	d902      	bls.n	80061f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e002      	b.n	80061fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006206:	d007      	beq.n	8006218 <HAL_SPI_Init+0xa0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	ea42 0103 	orr.w	r1, r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	f003 0204 	and.w	r2, r3, #4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006294:	ea42 0103 	orr.w	r1, r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b088      	sub	sp, #32
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_SPI_Transmit+0x22>
 80062dc:	2302      	movs	r3, #2
 80062de:	e158      	b.n	8006592 <HAL_SPI_Transmit+0x2d4>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062e8:	f7fb fef0 	bl	80020cc <HAL_GetTick>
 80062ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d002      	beq.n	8006304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
 8006300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006302:	e13d      	b.n	8006580 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Transmit+0x52>
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006314:	e134      	b.n	8006580 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2203      	movs	r2, #3
 800631a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	d10f      	bne.n	8006382 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d007      	beq.n	80063a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a8:	d94b      	bls.n	8006442 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0xfa>
 80063b2:	8afb      	ldrh	r3, [r7, #22]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d13e      	bne.n	8006436 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	1c9a      	adds	r2, r3, #2
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063dc:	e02b      	b.n	8006436 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d112      	bne.n	8006412 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006410:	e011      	b.n	8006436 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006412:	f7fb fe5b 	bl	80020cc <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d803      	bhi.n	800642a <HAL_SPI_Transmit+0x16c>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Transmit+0x172>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006434:	e0a4      	b.n	8006580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ce      	bne.n	80063de <HAL_SPI_Transmit+0x120>
 8006440:	e07c      	b.n	800653c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Transmit+0x192>
 800644a:	8afb      	ldrh	r3, [r7, #22]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d170      	bne.n	8006532 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d912      	bls.n	8006480 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b02      	subs	r3, #2
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800647e:	e058      	b.n	8006532 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80064a6:	e044      	b.n	8006532 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d12b      	bne.n	800650e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d912      	bls.n	80064e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b02      	subs	r3, #2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e4:	e025      	b.n	8006532 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650c:	e011      	b.n	8006532 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fb fddd 	bl	80020cc <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Transmit+0x268>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x26e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006530:	e026      	b.n	8006580 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1b5      	bne.n	80064a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fb5b 	bl	8006bfc <SPI_EndRxTxTransaction>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e000      	b.n	8006580 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800657e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006590:	7ffb      	ldrb	r3, [r7, #31]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b08a      	sub	sp, #40	; 0x28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065a8:	2301      	movs	r3, #1
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x26>
 80065bc:	2302      	movs	r3, #2
 80065be:	e1fb      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x41e>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c8:	f7fb fd80 	bl	80020cc <HAL_GetTick>
 80065cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80065dc:	887b      	ldrh	r3, [r7, #2]
 80065de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065e4:	7efb      	ldrb	r3, [r7, #27]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d00e      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x6e>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f0:	d106      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x66>
 80065fa:	7efb      	ldrb	r3, [r7, #27]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d003      	beq.n	8006608 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006600:	2302      	movs	r3, #2
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006606:	e1cd      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_SPI_TransmitReceive+0x80>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_SPI_TransmitReceive+0x80>
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006620:	e1c0      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b04      	cmp	r3, #4
 800662c:	d003      	beq.n	8006636 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2205      	movs	r2, #5
 8006632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	887a      	ldrh	r2, [r7, #2]
 8006646:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	887a      	ldrh	r2, [r7, #2]
 800664e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	887a      	ldrh	r2, [r7, #2]
 8006662:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006678:	d802      	bhi.n	8006680 <HAL_SPI_TransmitReceive+0xe6>
 800667a:	8a3b      	ldrh	r3, [r7, #16]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d908      	bls.n	8006692 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	e007      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d007      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066c8:	d97c      	bls.n	80067c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x13e>
 80066d2:	8a7b      	ldrh	r3, [r7, #18]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d169      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	881a      	ldrh	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	1c9a      	adds	r2, r3, #2
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066fc:	e056      	b.n	80067ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b02      	cmp	r3, #2
 800670a:	d11b      	bne.n	8006744 <HAL_SPI_TransmitReceive+0x1aa>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d016      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x1aa>
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	2b01      	cmp	r3, #1
 800671a:	d113      	bne.n	8006744 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b01      	cmp	r3, #1
 8006750:	d11c      	bne.n	800678c <HAL_SPI_TransmitReceive+0x1f2>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	b292      	uxth	r2, r2
 800676a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	1c9a      	adds	r2, r3, #2
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006788:	2301      	movs	r3, #1
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800678c:	f7fb fc9e 	bl	80020cc <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006798:	429a      	cmp	r2, r3
 800679a:	d807      	bhi.n	80067ac <HAL_SPI_TransmitReceive+0x212>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d003      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067aa:	e0fb      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1a3      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x164>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d19d      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x164>
 80067c2:	e0df      	b.n	8006984 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_SPI_TransmitReceive+0x23a>
 80067cc:	8a7b      	ldrh	r3, [r7, #18]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	f040 80cb 	bne.w	800696a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d912      	bls.n	8006804 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	881a      	ldrh	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	1c9a      	adds	r2, r3, #2
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b02      	subs	r3, #2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006802:	e0b2      	b.n	800696a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682a:	e09e      	b.n	800696a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d134      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x30a>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02f      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x30a>
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	2b01      	cmp	r3, #1
 8006848:	d12c      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d912      	bls.n	800687a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	881a      	ldrh	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	1c9a      	adds	r2, r3, #2
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b02      	subs	r3, #2
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006878:	e012      	b.n	80068a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	330c      	adds	r3, #12
 8006884:	7812      	ldrb	r2, [r2, #0]
 8006886:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d148      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x3aa>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d042      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d923      	bls.n	8006912 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	b292      	uxth	r2, r2
 80068d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	1c9a      	adds	r2, r3, #2
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b02      	subs	r3, #2
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d81f      	bhi.n	8006940 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	e016      	b.n	8006940 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f103 020c 	add.w	r2, r3, #12
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006940:	2301      	movs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006944:	f7fb fbc2 	bl	80020cc <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006950:	429a      	cmp	r2, r3
 8006952:	d803      	bhi.n	800695c <HAL_SPI_TransmitReceive+0x3c2>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d102      	bne.n	8006962 <HAL_SPI_TransmitReceive+0x3c8>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006968:	e01c      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	f47f af5b 	bne.w	800682c <HAL_SPI_TransmitReceive+0x292>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	f47f af54 	bne.w	800682c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f937 	bl	8006bfc <SPI_EndRxTxTransaction>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	661a      	str	r2, [r3, #96]	; 0x60
 80069a0:	e000      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80069a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069d0:	f7fb fb7c 	bl	80020cc <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4413      	add	r3, r2
 80069de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069e0:	f7fb fb74 	bl	80020cc <HAL_GetTick>
 80069e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069e6:	4b39      	ldr	r3, [pc, #228]	; (8006acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	015b      	lsls	r3, r3, #5
 80069ec:	0d1b      	lsrs	r3, r3, #20
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	fb02 f303 	mul.w	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f6:	e054      	b.n	8006aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d050      	beq.n	8006aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a00:	f7fb fb64 	bl	80020cc <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d902      	bls.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d13d      	bne.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2e:	d111      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	d004      	beq.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a42:	d107      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5c:	d10f      	bne.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e017      	b.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	bf0c      	ite	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	2300      	movne	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d19b      	bne.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000000 	.word	0x20000000

08006ad0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	; 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ae2:	f7fb faf3 	bl	80020cc <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006af2:	f7fb faeb 	bl	80020cc <HAL_GetTick>
 8006af6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b00:	4b3d      	ldr	r3, [pc, #244]	; (8006bf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	00da      	lsls	r2, r3, #3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	0d1b      	lsrs	r3, r3, #20
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	fb02 f303 	mul.w	r3, r2, r3
 8006b16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b18:	e060      	b.n	8006bdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b20:	d107      	bne.n	8006b32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d050      	beq.n	8006bdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b3a:	f7fb fac7 	bl	80020cc <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d902      	bls.n	8006b50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d13d      	bne.n	8006bcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b68:	d111      	bne.n	8006b8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d004      	beq.n	8006b7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7c:	d107      	bne.n	8006b8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b96:	d10f      	bne.n	8006bb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e010      	b.n	8006bee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d196      	bne.n	8006b1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	; 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000000 	.word	0x20000000

08006bfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff ff5b 	bl	8006ad0 <SPI_WaitFifoStateUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e027      	b.n	8006c80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	2180      	movs	r1, #128	; 0x80
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fec0 	bl	80069c0 <SPI_WaitFlagStateUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4a:	f043 0220 	orr.w	r2, r3, #32
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e014      	b.n	8006c80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff ff34 	bl	8006ad0 <SPI_WaitFifoStateUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c72:	f043 0220 	orr.w	r2, r3, #32
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e000      	b.n	8006c80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e049      	b.n	8006d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fb f8dc 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f000 fbec 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d001      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e03b      	b.n	8006dc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x4e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_Base_Start_IT+0x4e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d115      	bne.n	8006db2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <HAL_TIM_Base_Start_IT+0xa4>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d015      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x8c>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d011      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	e008      	b.n	8006dc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	00010007 	.word	0x00010007

08006de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e049      	b.n	8006e86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fa ffd2 	bl	8001db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f000 fb40 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e097      	b.n	8006fd2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f88f 	bl	8006fda <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f000 fade 	bl	80074a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f10:	f023 0303 	bic.w	r3, r3, #3
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	4313      	orrs	r3, r2
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f2e:	f023 030c 	bic.w	r3, r3, #12
 8006f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	011a      	lsls	r2, r3, #4
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	031b      	lsls	r3, r3, #12
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f6c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f74:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	4313      	orrs	r3, r2
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d122      	bne.n	800704a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d11b      	bne.n	800704a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f06f 0202 	mvn.w	r2, #2
 800701a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa19 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 8007036:	e005      	b.n	8007044 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa0b 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa1c 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d122      	bne.n	800709e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b04      	cmp	r3, #4
 8007064:	d11b      	bne.n	800709e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f06f 0204 	mvn.w	r2, #4
 800706e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9ef 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 800708a:	e005      	b.n	8007098 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9e1 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9f2 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d122      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d11b      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f06f 0208 	mvn.w	r2, #8
 80070c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2204      	movs	r2, #4
 80070c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f9c5 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 80070de:	e005      	b.n	80070ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9b7 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9c8 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d122      	bne.n	8007146 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d11b      	bne.n	8007146 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f06f 0210 	mvn.w	r2, #16
 8007116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2208      	movs	r2, #8
 800711c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f99b 	bl	8007468 <HAL_TIM_IC_CaptureCallback>
 8007132:	e005      	b.n	8007140 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f98d 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f99e 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10e      	bne.n	8007172 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d107      	bne.n	8007172 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f06f 0201 	mvn.w	r2, #1
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fa fb7b 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d10e      	bne.n	800719e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b80      	cmp	r3, #128	; 0x80
 800718c:	d107      	bne.n	800719e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fd4d 	bl	8007c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ac:	d10e      	bne.n	80071cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	d107      	bne.n	80071cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fd40 	bl	8007c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d10e      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d107      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f94c 	bl	8007490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b20      	cmp	r3, #32
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b20      	cmp	r3, #32
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0220 	mvn.w	r2, #32
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fd00 	bl	8007c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007246:	2302      	movs	r3, #2
 8007248:	e0ff      	b.n	800744a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b14      	cmp	r3, #20
 8007256:	f200 80f0 	bhi.w	800743a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	080072b5 	.word	0x080072b5
 8007264:	0800743b 	.word	0x0800743b
 8007268:	0800743b 	.word	0x0800743b
 800726c:	0800743b 	.word	0x0800743b
 8007270:	080072f5 	.word	0x080072f5
 8007274:	0800743b 	.word	0x0800743b
 8007278:	0800743b 	.word	0x0800743b
 800727c:	0800743b 	.word	0x0800743b
 8007280:	08007337 	.word	0x08007337
 8007284:	0800743b 	.word	0x0800743b
 8007288:	0800743b 	.word	0x0800743b
 800728c:	0800743b 	.word	0x0800743b
 8007290:	08007377 	.word	0x08007377
 8007294:	0800743b 	.word	0x0800743b
 8007298:	0800743b 	.word	0x0800743b
 800729c:	0800743b 	.word	0x0800743b
 80072a0:	080073b9 	.word	0x080073b9
 80072a4:	0800743b 	.word	0x0800743b
 80072a8:	0800743b 	.word	0x0800743b
 80072ac:	0800743b 	.word	0x0800743b
 80072b0:	080073f9 	.word	0x080073f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f956 	bl	800756c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0208 	orr.w	r2, r2, #8
 80072ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0204 	bic.w	r2, r2, #4
 80072de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6999      	ldr	r1, [r3, #24]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	619a      	str	r2, [r3, #24]
      break;
 80072f2:	e0a5      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f9b2 	bl	8007664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6999      	ldr	r1, [r3, #24]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	021a      	lsls	r2, r3, #8
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	619a      	str	r2, [r3, #24]
      break;
 8007334:	e084      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fa0b 	bl	8007758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69da      	ldr	r2, [r3, #28]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0208 	orr.w	r2, r2, #8
 8007350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0204 	bic.w	r2, r2, #4
 8007360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69d9      	ldr	r1, [r3, #28]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	61da      	str	r2, [r3, #28]
      break;
 8007374:	e064      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fa63 	bl	8007848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69d9      	ldr	r1, [r3, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	021a      	lsls	r2, r3, #8
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	61da      	str	r2, [r3, #28]
      break;
 80073b6:	e043      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 faa0 	bl	8007904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0208 	orr.w	r2, r2, #8
 80073d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0204 	bic.w	r2, r2, #4
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073f6:	e023      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fad8 	bl	80079b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	021a      	lsls	r2, r3, #8
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007438:	e002      	b.n	8007440 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
      break;
 800743e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop

08007454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <TIM_Base_SetConfig+0xbc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_Base_SetConfig+0x20>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c2:	d108      	bne.n	80074d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a21      	ldr	r2, [pc, #132]	; (8007560 <TIM_Base_SetConfig+0xbc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00b      	beq.n	80074f6 <TIM_Base_SetConfig+0x52>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e4:	d007      	beq.n	80074f6 <TIM_Base_SetConfig+0x52>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <TIM_Base_SetConfig+0xc0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_Base_SetConfig+0x52>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <TIM_Base_SetConfig+0xc4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d108      	bne.n	8007508 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <TIM_Base_SetConfig+0xbc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <TIM_Base_SetConfig+0xa0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a0b      	ldr	r2, [pc, #44]	; (8007564 <TIM_Base_SetConfig+0xc0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_Base_SetConfig+0xa0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <TIM_Base_SetConfig+0xc4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d103      	bne.n	800754c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	615a      	str	r2, [r3, #20]
}
 8007552:	bf00      	nop
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400

0800756c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f023 0201 	bic.w	r2, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 0302 	bic.w	r3, r3, #2
 80075b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a24      	ldr	r2, [pc, #144]	; (8007658 <TIM_OC1_SetConfig+0xec>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <TIM_OC1_SetConfig+0x70>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a23      	ldr	r2, [pc, #140]	; (800765c <TIM_OC1_SetConfig+0xf0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_OC1_SetConfig+0x70>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a22      	ldr	r2, [pc, #136]	; (8007660 <TIM_OC1_SetConfig+0xf4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10c      	bne.n	80075f6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0308 	bic.w	r3, r3, #8
 80075e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a17      	ldr	r2, [pc, #92]	; (8007658 <TIM_OC1_SetConfig+0xec>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_OC1_SetConfig+0xa2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a16      	ldr	r2, [pc, #88]	; (800765c <TIM_OC1_SetConfig+0xf0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_OC1_SetConfig+0xa2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a15      	ldr	r2, [pc, #84]	; (8007660 <TIM_OC1_SetConfig+0xf4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d111      	bne.n	8007632 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800761c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	621a      	str	r2, [r3, #32]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	40012c00 	.word	0x40012c00
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400

08007664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	f023 0210 	bic.w	r2, r3, #16
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800769e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0320 	bic.w	r3, r3, #32
 80076b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a22      	ldr	r2, [pc, #136]	; (800774c <TIM_OC2_SetConfig+0xe8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d10d      	bne.n	80076e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a19      	ldr	r2, [pc, #100]	; (800774c <TIM_OC2_SetConfig+0xe8>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d007      	beq.n	80076fc <TIM_OC2_SetConfig+0x98>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a18      	ldr	r2, [pc, #96]	; (8007750 <TIM_OC2_SetConfig+0xec>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_OC2_SetConfig+0x98>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a17      	ldr	r2, [pc, #92]	; (8007754 <TIM_OC2_SetConfig+0xf0>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d113      	bne.n	8007724 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800770a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400

08007758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a21      	ldr	r2, [pc, #132]	; (800783c <TIM_OC3_SetConfig+0xe4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d10d      	bne.n	80077d6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a18      	ldr	r2, [pc, #96]	; (800783c <TIM_OC3_SetConfig+0xe4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d007      	beq.n	80077ee <TIM_OC3_SetConfig+0x96>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a17      	ldr	r2, [pc, #92]	; (8007840 <TIM_OC3_SetConfig+0xe8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d003      	beq.n	80077ee <TIM_OC3_SetConfig+0x96>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a16      	ldr	r2, [pc, #88]	; (8007844 <TIM_OC3_SetConfig+0xec>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d113      	bne.n	8007816 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	621a      	str	r2, [r3, #32]
}
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40014000 	.word	0x40014000
 8007844:	40014400 	.word	0x40014400

08007848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a14      	ldr	r2, [pc, #80]	; (80078f8 <TIM_OC4_SetConfig+0xb0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <TIM_OC4_SetConfig+0x74>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a13      	ldr	r2, [pc, #76]	; (80078fc <TIM_OC4_SetConfig+0xb4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_OC4_SetConfig+0x74>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a12      	ldr	r2, [pc, #72]	; (8007900 <TIM_OC4_SetConfig+0xb8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d109      	bne.n	80078d0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	019b      	lsls	r3, r3, #6
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40012c00 	.word	0x40012c00
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400

08007904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007948:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <TIM_OC5_SetConfig+0xa4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_OC5_SetConfig+0x6a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a12      	ldr	r2, [pc, #72]	; (80079ac <TIM_OC5_SetConfig+0xa8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC5_SetConfig+0x6a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a11      	ldr	r2, [pc, #68]	; (80079b0 <TIM_OC5_SetConfig+0xac>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d109      	bne.n	8007982 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	621a      	str	r2, [r3, #32]
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400

080079b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	051b      	lsls	r3, r3, #20
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a14      	ldr	r2, [pc, #80]	; (8007a5c <TIM_OC6_SetConfig+0xa8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_OC6_SetConfig+0x6c>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <TIM_OC6_SetConfig+0xac>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_OC6_SetConfig+0x6c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <TIM_OC6_SetConfig+0xb0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d109      	bne.n	8007a34 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	029b      	lsls	r3, r3, #10
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	621a      	str	r2, [r3, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40012c00 	.word	0x40012c00
 8007a60:	40014000 	.word	0x40014000
 8007a64:	40014400 	.word	0x40014400

08007a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e04f      	b.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d108      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ab0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10c      	bne.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40012c00 	.word	0x40012c00
 8007b30:	40014000 	.word	0x40014000

08007b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e060      	b.n	8007c12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	041b      	lsls	r3, r3, #16
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d115      	bne.n	8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	051b      	lsls	r3, r3, #20
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40012c00 	.word	0x40012c00

08007c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c60:	b084      	sub	sp, #16
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	f107 0014 	add.w	r0, r7, #20
 8007c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	b004      	add	sp, #16
 8007c80:	4770      	bx	lr

08007c82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c92:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cb8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007cbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	4013      	ands	r3, r2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d00:	b084      	sub	sp, #16
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	f107 0014 	add.w	r0, r7, #20
 8007d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	b004      	add	sp, #16
 8007d40:	4770      	bx	lr
	...

08007d44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b09d      	sub	sp, #116	; 0x74
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	78db      	ldrb	r3, [r3, #3]
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d81f      	bhi.n	8007db6 <USB_ActivateEndpoint+0x72>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USB_ActivateEndpoint+0x38>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	08007dbf 	.word	0x08007dbf
 8007d88:	08007d9b 	.word	0x08007d9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d98:	e012      	b.n	8007dc0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007da2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007da6:	e00b      	b.n	8007dc0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007da8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007db0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007db4:	e004      	b.n	8007dc0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007dbc:	e000      	b.n	8007dc0 <USB_ActivateEndpoint+0x7c>
      break;
 8007dbe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	441a      	add	r2, r3
 8007dca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	b21b      	sxth	r3, r3
 8007df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfa:	b21a      	sxth	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b21b      	sxth	r3, r3
 8007e06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	7b1b      	ldrb	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 816e 	bne.w	8008112 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8084 	beq.w	8007f48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	4413      	add	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	00da      	lsls	r2, r3, #3
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	88db      	ldrh	r3, [r3, #6]
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	827b      	strh	r3, [r7, #18]
 8007e82:	8a7b      	ldrh	r3, [r7, #18]
 8007e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01b      	beq.n	8007ec4 <USB_ActivateEndpoint+0x180>
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea2:	823b      	strh	r3, [r7, #16]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	441a      	add	r2, r3
 8007eae:	8a3b      	ldrh	r3, [r7, #16]
 8007eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	78db      	ldrb	r3, [r3, #3]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d020      	beq.n	8007f0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee2:	81bb      	strh	r3, [r7, #12]
 8007ee4:	89bb      	ldrh	r3, [r7, #12]
 8007ee6:	f083 0320 	eor.w	r3, r3, #32
 8007eea:	81bb      	strh	r3, [r7, #12]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	89bb      	ldrh	r3, [r7, #12]
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
 8007f0c:	e2cb      	b.n	80084a6 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f24:	81fb      	strh	r3, [r7, #14]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	89fb      	ldrh	r3, [r7, #14]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
 8007f46:	e2ae      	b.n	80084a6 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	4413      	add	r3, r2
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	00da      	lsls	r2, r3, #3
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	4413      	add	r3, r2
 8007f66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	88db      	ldrh	r3, [r3, #6]
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	4413      	add	r3, r2
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	00da      	lsls	r2, r3, #3
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	4413      	add	r3, r2
 8007f9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fa6:	d918      	bls.n	8007fda <USB_ActivateEndpoint+0x296>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <USB_ActivateEndpoint+0x27e>
 8007fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	029b      	lsls	r3, r3, #10
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	e029      	b.n	800802e <USB_ActivateEndpoint+0x2ea>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d112      	bne.n	8008008 <USB_ActivateEndpoint+0x2c4>
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	801a      	strh	r2, [r3, #0]
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e012      	b.n	800802e <USB_ActivateEndpoint+0x2ea>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <USB_ActivateEndpoint+0x2de>
 800801c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800801e:	3301      	adds	r3, #1
 8008020:	66bb      	str	r3, [r7, #104]	; 0x68
 8008022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008024:	b29b      	uxth	r3, r3
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	b29a      	uxth	r2, r3
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	847b      	strh	r3, [r7, #34]	; 0x22
 800803c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800803e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01b      	beq.n	800807e <USB_ActivateEndpoint+0x33a>
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805c:	843b      	strh	r3, [r7, #32]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	8c3b      	ldrh	r3, [r7, #32]
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d124      	bne.n	80080d0 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809c:	83bb      	strh	r3, [r7, #28]
 800809e:	8bbb      	ldrh	r3, [r7, #28]
 80080a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080a4:	83bb      	strh	r3, [r7, #28]
 80080a6:	8bbb      	ldrh	r3, [r7, #28]
 80080a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080ac:	83bb      	strh	r3, [r7, #28]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	8bbb      	ldrh	r3, [r7, #28]
 80080ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8013      	strh	r3, [r2, #0]
 80080ce:	e1ea      	b.n	80084a6 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	83fb      	strh	r3, [r7, #30]
 80080e8:	8bfb      	ldrh	r3, [r7, #30]
 80080ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080ee:	83fb      	strh	r3, [r7, #30]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	8bfb      	ldrh	r3, [r7, #30]
 80080fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810c:	b29b      	uxth	r3, r3
 800810e:	8013      	strh	r3, [r2, #0]
 8008110:	e1c9      	b.n	80084a6 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d11e      	bne.n	8008158 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]
 8008156:	e01d      	b.n	8008194 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008190:	b29b      	uxth	r3, r3
 8008192:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819e:	b29b      	uxth	r3, r3
 80081a0:	461a      	mov	r2, r3
 80081a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a4:	4413      	add	r3, r2
 80081a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	00da      	lsls	r2, r3, #3
 80081ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	891b      	ldrh	r3, [r3, #8]
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	b29b      	uxth	r3, r3
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	657b      	str	r3, [r7, #84]	; 0x54
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d8:	4413      	add	r3, r2
 80081da:	657b      	str	r3, [r7, #84]	; 0x54
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	00da      	lsls	r2, r3, #3
 80081e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e4:	4413      	add	r3, r2
 80081e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081ea:	653b      	str	r3, [r7, #80]	; 0x50
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	895b      	ldrh	r3, [r3, #10]
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 8093 	bne.w	800832c <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800821a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01b      	beq.n	800825a <USB_ActivateEndpoint+0x516>
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008238:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008268:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01b      	beq.n	80082aa <USB_ActivateEndpoint+0x566>
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	877b      	strh	r3, [r7, #58]	; 0x3a
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	441a      	add	r2, r3
 8008294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80082c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80082ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	86fb      	strh	r3, [r7, #54]	; 0x36
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]
 800832a:	e0bc      	b.n	80084a6 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800833c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01d      	beq.n	8008384 <USB_ActivateEndpoint+0x640>
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	441a      	add	r2, r3
 800836c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800837c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008380:	b29b      	uxth	r3, r3
 8008382:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01d      	beq.n	80083dc <USB_ActivateEndpoint+0x698>
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083d8:	b29b      	uxth	r3, r3
 80083da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	78db      	ldrb	r3, [r3, #3]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d024      	beq.n	800842e <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008402:	f083 0320 	eor.w	r3, r3, #32
 8008406:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]
 800842c:	e01d      	b.n	800846a <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800845e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008466:	b29b      	uxth	r3, r3
 8008468:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800847c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008480:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	441a      	add	r2, r3
 800848e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80084a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3774      	adds	r7, #116	; 0x74
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop

080084b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b08d      	sub	sp, #52	; 0x34
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	7b1b      	ldrb	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 808e 	bne.w	80085e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d044      	beq.n	800855e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	81bb      	strh	r3, [r7, #12]
 80084e2:	89bb      	ldrh	r3, [r7, #12]
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01b      	beq.n	8008524 <USB_DeactivateEndpoint+0x6c>
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008502:	817b      	strh	r3, [r7, #10]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	441a      	add	r2, r3
 800850e:	897b      	ldrh	r3, [r7, #10]
 8008510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008520:	b29b      	uxth	r3, r3
 8008522:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853a:	813b      	strh	r3, [r7, #8]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	441a      	add	r2, r3
 8008546:	893b      	ldrh	r3, [r7, #8]
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]
 800855c:	e192      	b.n	8008884 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	827b      	strh	r3, [r7, #18]
 800856c:	8a7b      	ldrh	r3, [r7, #18]
 800856e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01b      	beq.n	80085ae <USB_DeactivateEndpoint+0xf6>
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858c:	823b      	strh	r3, [r7, #16]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	8a3b      	ldrh	r3, [r7, #16]
 800859a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c4:	81fb      	strh	r3, [r7, #14]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	441a      	add	r2, r3
 80085d0:	89fb      	ldrh	r3, [r7, #14]
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]
 80085e6:	e14d      	b.n	8008884 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 80a5 	bne.w	800873c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	843b      	strh	r3, [r7, #32]
 8008600:	8c3b      	ldrh	r3, [r7, #32]
 8008602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01b      	beq.n	8008642 <USB_DeactivateEndpoint+0x18a>
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008620:	83fb      	strh	r3, [r7, #30]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	8bfb      	ldrh	r3, [r7, #30]
 800862e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800863a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863e:	b29b      	uxth	r3, r3
 8008640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	83bb      	strh	r3, [r7, #28]
 8008650:	8bbb      	ldrh	r3, [r7, #28]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01b      	beq.n	8008692 <USB_DeactivateEndpoint+0x1da>
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008670:	837b      	strh	r3, [r7, #26]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	8b7b      	ldrh	r3, [r7, #26]
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a8:	833b      	strh	r3, [r7, #24]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	441a      	add	r2, r3
 80086b4:	8b3b      	ldrh	r3, [r7, #24]
 80086b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e0:	82fb      	strh	r3, [r7, #22]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	441a      	add	r2, r3
 80086ec:	8afb      	ldrh	r3, [r7, #22]
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008718:	82bb      	strh	r3, [r7, #20]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	441a      	add	r2, r3
 8008724:	8abb      	ldrh	r3, [r7, #20]
 8008726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008736:	b29b      	uxth	r3, r3
 8008738:	8013      	strh	r3, [r2, #0]
 800873a:	e0a3      	b.n	8008884 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800874a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800874c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01b      	beq.n	800878c <USB_DeactivateEndpoint+0x2d4>
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	857b      	strh	r3, [r7, #42]	; 0x2a
 800879a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <USB_DeactivateEndpoint+0x324>
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	441a      	add	r2, r3
 80087c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087d8:	b29b      	uxth	r3, r3
 80087da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	441a      	add	r2, r3
 80087fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800880c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008810:	b29b      	uxth	r3, r3
 8008812:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	441a      	add	r2, r3
 8008836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800885e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008862:	847b      	strh	r3, [r7, #34]	; 0x22
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	441a      	add	r2, r3
 800886e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008880:	b29b      	uxth	r3, r3
 8008882:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3734      	adds	r7, #52	; 0x34
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b0c2      	sub	sp, #264	; 0x108
 8008896:	af00      	add	r7, sp, #0
 8008898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088a0:	6018      	str	r0, [r3, #0]
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088aa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 867b 	bne.w	80095b4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d908      	bls.n	80088ec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80088ea:	e007      	b.n	80088fc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80088fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	7b1b      	ldrb	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d13a      	bne.n	8008982 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800890c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6959      	ldr	r1, [r3, #20]
 8008918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	88da      	ldrh	r2, [r3, #6]
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008928:	b29b      	uxth	r3, r3
 800892a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800892e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008932:	6800      	ldr	r0, [r0, #0]
 8008934:	f001 fc3e 	bl	800a1b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	613b      	str	r3, [r7, #16]
 8008944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008952:	b29b      	uxth	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4413      	add	r3, r2
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	00da      	lsls	r2, r3, #3
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	4413      	add	r3, r2
 800896e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	f000 bde3 	b.w	8009548 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	2b02      	cmp	r3, #2
 8008990:	f040 843a 	bne.w	8009208 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	f240 83b7 	bls.w	8009120 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80089b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80089dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	441a      	add	r2, r3
 80089f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6a1a      	ldr	r2, [r3, #32]
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 81b3 	beq.w	8008dba <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d16d      	bne.n	8008b4c <USB_EPStartXfer+0x2ba>
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	4413      	add	r3, r2
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	00da      	lsls	r2, r3, #3
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ab2:	d91c      	bls.n	8008aee <USB_EPStartXfer+0x25c>
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac2:	f003 031f 	and.w	r3, r3, #31
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <USB_EPStartXfer+0x242>
 8008aca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	029b      	lsls	r3, r3, #10
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	e053      	b.n	8008b96 <USB_EPStartXfer+0x304>
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d112      	bne.n	8008b1c <USB_EPStartXfer+0x28a>
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e03c      	b.n	8008b96 <USB_EPStartXfer+0x304>
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <USB_EPStartXfer+0x2aa>
 8008b32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b36:	3301      	adds	r3, #1
 8008b38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e024      	b.n	8008b96 <USB_EPStartXfer+0x304>
 8008b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d11c      	bne.n	8008b96 <USB_EPStartXfer+0x304>
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	4413      	add	r3, r2
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
 8008b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	00da      	lsls	r2, r3, #3
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	895b      	ldrh	r3, [r3, #10]
 8008ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6959      	ldr	r1, [r3, #20]
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bc4:	6800      	ldr	r0, [r0, #0]
 8008bc6:	f001 faf5 	bl	800a1b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695a      	ldr	r2, [r3, #20]
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bda:	441a      	add	r2, r3
 8008bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6a1a      	ldr	r2, [r3, #32]
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d90f      	bls.n	8008c24 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	621a      	str	r2, [r3, #32]
 8008c22:	e00e      	b.n	8008c42 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d16d      	bne.n	8008d2e <USB_EPStartXfer+0x49c>
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	4413      	add	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	00da      	lsls	r2, r3, #3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c92:	2b3e      	cmp	r3, #62	; 0x3e
 8008c94:	d91c      	bls.n	8008cd0 <USB_EPStartXfer+0x43e>
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d104      	bne.n	8008cb6 <USB_EPStartXfer+0x424>
 8008cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	029b      	lsls	r3, r3, #10
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	e059      	b.n	8008d84 <USB_EPStartXfer+0x4f2>
 8008cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d112      	bne.n	8008cfe <USB_EPStartXfer+0x46c>
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	e042      	b.n	8008d84 <USB_EPStartXfer+0x4f2>
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <USB_EPStartXfer+0x48c>
 8008d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	801a      	strh	r2, [r3, #0]
 8008d2c:	e02a      	b.n	8008d84 <USB_EPStartXfer+0x4f2>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d122      	bne.n	8008d84 <USB_EPStartXfer+0x4f2>
 8008d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	623b      	str	r3, [r7, #32]
 8008d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	4413      	add	r3, r2
 8008d60:	623b      	str	r3, [r7, #32]
 8008d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	00da      	lsls	r2, r3, #3
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	4413      	add	r3, r2
 8008d74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d78:	61fb      	str	r3, [r7, #28]
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	891b      	ldrh	r3, [r3, #8]
 8008d90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6959      	ldr	r1, [r3, #20]
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008daa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	f001 f9fe 	bl	800a1b4 <USB_WritePMA>
 8008db8:	e3c6      	b.n	8009548 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d16d      	bne.n	8008ea6 <USB_EPStartXfer+0x614>
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	461a      	mov	r2, r3
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dea:	4413      	add	r3, r2
 8008dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	00da      	lsls	r2, r3, #3
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfe:	4413      	add	r3, r2
 8008e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e04:	647b      	str	r3, [r7, #68]	; 0x44
 8008e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e0c:	d91c      	bls.n	8008e48 <USB_EPStartXfer+0x5b6>
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e12:	095b      	lsrs	r3, r3, #5
 8008e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <USB_EPStartXfer+0x59c>
 8008e24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	029b      	lsls	r3, r3, #10
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e059      	b.n	8008efc <USB_EPStartXfer+0x66a>
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d112      	bne.n	8008e76 <USB_EPStartXfer+0x5e4>
 8008e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	e042      	b.n	8008efc <USB_EPStartXfer+0x66a>
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7a:	085b      	lsrs	r3, r3, #1
 8008e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <USB_EPStartXfer+0x604>
 8008e8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e90:	3301      	adds	r3, #1
 8008e92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	029b      	lsls	r3, r3, #10
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e02a      	b.n	8008efc <USB_EPStartXfer+0x66a>
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d122      	bne.n	8008efc <USB_EPStartXfer+0x66a>
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed6:	4413      	add	r3, r2
 8008ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8008eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	00da      	lsls	r2, r3, #3
 8008ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eea:	4413      	add	r3, r2
 8008eec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	891b      	ldrh	r3, [r3, #8]
 8008f08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6959      	ldr	r1, [r3, #20]
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	f001 f942 	bl	800a1b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f40:	441a      	add	r2, r3
 8008f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6a1a      	ldr	r2, [r3, #32]
 8008f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d90f      	bls.n	8008f8a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7a:	1ad2      	subs	r2, r2, r3
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	621a      	str	r2, [r3, #32]
 8008f88:	e00e      	b.n	8008fa8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d16d      	bne.n	80090a0 <USB_EPStartXfer+0x80e>
 8008fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	4413      	add	r3, r2
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	00da      	lsls	r2, r3, #3
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009004:	2b3e      	cmp	r3, #62	; 0x3e
 8009006:	d91c      	bls.n	8009042 <USB_EPStartXfer+0x7b0>
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009016:	f003 031f 	and.w	r3, r3, #31
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <USB_EPStartXfer+0x796>
 800901e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009022:	3b01      	subs	r3, #1
 8009024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902c:	b29b      	uxth	r3, r3
 800902e:	029b      	lsls	r3, r3, #10
 8009030:	b29b      	uxth	r3, r3
 8009032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903a:	b29a      	uxth	r2, r3
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	e053      	b.n	80090ea <USB_EPStartXfer+0x858>
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009046:	2b00      	cmp	r3, #0
 8009048:	d112      	bne.n	8009070 <USB_EPStartXfer+0x7de>
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009054:	b29a      	uxth	r2, r3
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	801a      	strh	r2, [r3, #0]
 800905a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009068:	b29a      	uxth	r2, r3
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	801a      	strh	r2, [r3, #0]
 800906e:	e03c      	b.n	80090ea <USB_EPStartXfer+0x858>
 8009070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009074:	085b      	lsrs	r3, r3, #1
 8009076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800907a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d004      	beq.n	8009090 <USB_EPStartXfer+0x7fe>
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908a:	3301      	adds	r3, #1
 800908c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009094:	b29b      	uxth	r3, r3
 8009096:	029b      	lsls	r3, r3, #10
 8009098:	b29a      	uxth	r2, r3
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	e024      	b.n	80090ea <USB_EPStartXfer+0x858>
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d11c      	bne.n	80090ea <USB_EPStartXfer+0x858>
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090be:	b29b      	uxth	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c4:	4413      	add	r3, r2
 80090c6:	643b      	str	r3, [r7, #64]	; 0x40
 80090c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	00da      	lsls	r2, r3, #3
 80090d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d8:	4413      	add	r3, r2
 80090da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	895b      	ldrh	r3, [r3, #10]
 80090f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6959      	ldr	r1, [r3, #20]
 8009106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800910a:	b29b      	uxth	r3, r3
 800910c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009110:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009114:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009118:	6800      	ldr	r0, [r0, #0]
 800911a:	f001 f84b 	bl	800a1b4 <USB_WritePMA>
 800911e:	e213      	b.n	8009548 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009156:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800915a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	441a      	add	r2, r3
 8009174:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009188:	b29b      	uxth	r3, r3
 800918a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800918c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	461a      	mov	r2, r3
 80091aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ac:	4413      	add	r3, r2
 80091ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	00da      	lsls	r2, r3, #3
 80091be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c0:	4413      	add	r3, r2
 80091c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	891b      	ldrh	r3, [r3, #8]
 80091de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6959      	ldr	r1, [r3, #20]
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80091fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009200:	6800      	ldr	r0, [r0, #0]
 8009202:	f000 ffd7 	bl	800a1b4 <USB_WritePMA>
 8009206:	e19f      	b.n	8009548 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6a1a      	ldr	r2, [r3, #32]
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009218:	1ad2      	subs	r2, r2, r3
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	b29b      	uxth	r3, r3
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 80bc 	beq.w	80093c6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800924e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	673b      	str	r3, [r7, #112]	; 0x70
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d16d      	bne.n	8009346 <USB_EPStartXfer+0xab4>
 800926a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	66bb      	str	r3, [r7, #104]	; 0x68
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928a:	4413      	add	r3, r2
 800928c:	66bb      	str	r3, [r7, #104]	; 0x68
 800928e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	00da      	lsls	r2, r3, #3
 800929c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800929e:	4413      	add	r3, r2
 80092a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092a4:	667b      	str	r3, [r7, #100]	; 0x64
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092aa:	2b3e      	cmp	r3, #62	; 0x3e
 80092ac:	d91c      	bls.n	80092e8 <USB_EPStartXfer+0xa56>
 80092ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <USB_EPStartXfer+0xa3c>
 80092c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092c8:	3b01      	subs	r3, #1
 80092ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e053      	b.n	8009390 <USB_EPStartXfer+0xafe>
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d112      	bne.n	8009316 <USB_EPStartXfer+0xa84>
 80092f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800930e:	b29a      	uxth	r2, r3
 8009310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	e03c      	b.n	8009390 <USB_EPStartXfer+0xafe>
 8009316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <USB_EPStartXfer+0xaa4>
 800932c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009330:	3301      	adds	r3, #1
 8009332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29a      	uxth	r2, r3
 8009340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	e024      	b.n	8009390 <USB_EPStartXfer+0xafe>
 8009346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d11c      	bne.n	8009390 <USB_EPStartXfer+0xafe>
 8009356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800936a:	4413      	add	r3, r2
 800936c:	673b      	str	r3, [r7, #112]	; 0x70
 800936e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	00da      	lsls	r2, r3, #3
 800937c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800937e:	4413      	add	r3, r2
 8009380:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938a:	b29a      	uxth	r2, r3
 800938c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	895b      	ldrh	r3, [r3, #10]
 800939c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6959      	ldr	r1, [r3, #20]
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	f000 fef8 	bl	800a1b4 <USB_WritePMA>
 80093c4:	e0c0      	b.n	8009548 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	785b      	ldrb	r3, [r3, #1]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d16d      	bne.n	80094b2 <USB_EPStartXfer+0xc20>
 80093d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093f6:	4413      	add	r3, r2
 80093f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	00da      	lsls	r2, r3, #3
 8009408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800940a:	4413      	add	r3, r2
 800940c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009410:	67bb      	str	r3, [r7, #120]	; 0x78
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009416:	2b3e      	cmp	r3, #62	; 0x3e
 8009418:	d91c      	bls.n	8009454 <USB_EPStartXfer+0xbc2>
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009428:	f003 031f 	and.w	r3, r3, #31
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <USB_EPStartXfer+0xba8>
 8009430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009434:	3b01      	subs	r3, #1
 8009436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800943a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800943e:	b29b      	uxth	r3, r3
 8009440:	029b      	lsls	r3, r3, #10
 8009442:	b29b      	uxth	r3, r3
 8009444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944c:	b29a      	uxth	r2, r3
 800944e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e05f      	b.n	8009514 <USB_EPStartXfer+0xc82>
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	2b00      	cmp	r3, #0
 800945a:	d112      	bne.n	8009482 <USB_EPStartXfer+0xbf0>
 800945c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009466:	b29a      	uxth	r2, r3
 8009468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947a:	b29a      	uxth	r2, r3
 800947c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947e:	801a      	strh	r2, [r3, #0]
 8009480:	e048      	b.n	8009514 <USB_EPStartXfer+0xc82>
 8009482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800948c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <USB_EPStartXfer+0xc10>
 8009498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800949c:	3301      	adds	r3, #1
 800949e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	029b      	lsls	r3, r3, #10
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	e030      	b.n	8009514 <USB_EPStartXfer+0xc82>
 80094b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d128      	bne.n	8009514 <USB_EPStartXfer+0xc82>
 80094c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094de:	b29b      	uxth	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e6:	4413      	add	r3, r2
 80094e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	00da      	lsls	r2, r3, #3
 80094fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094fe:	4413      	add	r3, r2
 8009500:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950c:	b29a      	uxth	r2, r3
 800950e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009512:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	891b      	ldrh	r3, [r3, #8]
 8009520:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6959      	ldr	r1, [r3, #20]
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009534:	b29b      	uxth	r3, r3
 8009536:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800953a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800953e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	f000 fe36 	bl	800a1b4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956e:	817b      	strh	r3, [r7, #10]
 8009570:	897b      	ldrh	r3, [r7, #10]
 8009572:	f083 0310 	eor.w	r3, r3, #16
 8009576:	817b      	strh	r3, [r7, #10]
 8009578:	897b      	ldrh	r3, [r7, #10]
 800957a:	f083 0320 	eor.w	r3, r3, #32
 800957e:	817b      	strh	r3, [r7, #10]
 8009580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	441a      	add	r2, r3
 800959a:	897b      	ldrh	r3, [r7, #10]
 800959c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	8013      	strh	r3, [r2, #0]
 80095b0:	f000 bc9f 	b.w	8009ef2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	7b1b      	ldrb	r3, [r3, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 80ae 	bne.w	8009722 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d917      	bls.n	8009612 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80095e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80095f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	619a      	str	r2, [r3, #24]
 8009610:	e00e      	b.n	8009630 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800963e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800964c:	b29b      	uxth	r3, r3
 800964e:	461a      	mov	r2, r3
 8009650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009654:	4413      	add	r3, r2
 8009656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800965a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	00da      	lsls	r2, r3, #3
 8009668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800966c:	4413      	add	r3, r2
 800966e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800967a:	2b3e      	cmp	r3, #62	; 0x3e
 800967c:	d91d      	bls.n	80096ba <USB_EPStartXfer+0xe28>
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	095b      	lsrs	r3, r3, #5
 8009684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968c:	f003 031f 	and.w	r3, r3, #31
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <USB_EPStartXfer+0xe0c>
 8009694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009698:	3b01      	subs	r3, #1
 800969a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800969e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	029b      	lsls	r3, r3, #10
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e3e1      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
 80096ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d116      	bne.n	80096f0 <USB_EPStartXfer+0xe5e>
 80096c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	e3c6      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <USB_EPStartXfer+0xe7e>
 8009706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800970a:	3301      	adds	r3, #1
 800970c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009714:	b29b      	uxth	r3, r3
 8009716:	029b      	lsls	r3, r3, #10
 8009718:	b29a      	uxth	r2, r3
 800971a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971e:	801a      	strh	r2, [r3, #0]
 8009720:	e3ad      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	78db      	ldrb	r3, [r3, #3]
 800972e:	2b02      	cmp	r3, #2
 8009730:	f040 8200 	bne.w	8009b34 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b00      	cmp	r3, #0
 8009742:	f040 8091 	bne.w	8009868 <USB_EPStartXfer+0xfd6>
 8009746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800976a:	4413      	add	r3, r2
 800976c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	00da      	lsls	r2, r3, #3
 800977e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009782:	4413      	add	r3, r2
 8009784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b3e      	cmp	r3, #62	; 0x3e
 800979a:	d925      	bls.n	80097e8 <USB_EPStartXfer+0xf56>
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	f003 031f 	and.w	r3, r3, #31
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <USB_EPStartXfer+0xf3a>
 80097c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c6:	3b01      	subs	r3, #1
 80097c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	029b      	lsls	r3, r3, #10
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097de:	b29a      	uxth	r2, r3
 80097e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097e4:	801a      	strh	r2, [r3, #0]
 80097e6:	e074      	b.n	80098d2 <USB_EPStartXfer+0x1040>
 80097e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d116      	bne.n	8009826 <USB_EPStartXfer+0xf94>
 80097f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009804:	b29a      	uxth	r2, r3
 8009806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e055      	b.n	80098d2 <USB_EPStartXfer+0x1040>
 8009826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <USB_EPStartXfer+0xfc4>
 800984c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009850:	3301      	adds	r3, #1
 8009852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985a:	b29b      	uxth	r3, r3
 800985c:	029b      	lsls	r3, r3, #10
 800985e:	b29a      	uxth	r2, r3
 8009860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009864:	801a      	strh	r2, [r3, #0]
 8009866:	e034      	b.n	80098d2 <USB_EPStartXfer+0x1040>
 8009868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d12c      	bne.n	80098d2 <USB_EPStartXfer+0x1040>
 8009878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009894:	b29b      	uxth	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800989c:	4413      	add	r3, r2
 800989e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	00da      	lsls	r2, r3, #3
 80098b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098b4:	4413      	add	r3, r2
 80098b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098d0:	801a      	strh	r2, [r3, #0]
 80098d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 8091 	bne.w	8009a14 <USB_EPStartXfer+0x1182>
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990e:	b29b      	uxth	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009916:	4413      	add	r3, r2
 8009918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800991c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	00da      	lsls	r2, r3, #3
 800992a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800992e:	4413      	add	r3, r2
 8009930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2b3e      	cmp	r3, #62	; 0x3e
 8009946:	d925      	bls.n	8009994 <USB_EPStartXfer+0x1102>
 8009948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	095b      	lsrs	r3, r3, #5
 8009956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800995a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <USB_EPStartXfer+0x10e6>
 800996e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009972:	3b01      	subs	r3, #1
 8009974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800997c:	b29b      	uxth	r3, r3
 800997e:	029b      	lsls	r3, r3, #10
 8009980:	b29b      	uxth	r3, r3
 8009982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998a:	b29a      	uxth	r2, r3
 800998c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	e06d      	b.n	8009a70 <USB_EPStartXfer+0x11de>
 8009994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d116      	bne.n	80099d2 <USB_EPStartXfer+0x1140>
 80099a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e04e      	b.n	8009a70 <USB_EPStartXfer+0x11de>
 80099d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <USB_EPStartXfer+0x1170>
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099fc:	3301      	adds	r3, #1
 80099fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	029b      	lsls	r3, r3, #10
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	e02d      	b.n	8009a70 <USB_EPStartXfer+0x11de>
 8009a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d125      	bne.n	8009a70 <USB_EPStartXfer+0x11de>
 8009a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	00da      	lsls	r2, r3, #3
 8009a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a52:	4413      	add	r3, r2
 8009a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a6e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 81fe 	beq.w	8009e7e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009aa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <USB_EPStartXfer+0x1228>
 8009aae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10d      	bne.n	8009ad6 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009aba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f040 81db 	bne.w	8009e7e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009ac8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f040 81d4 	bne.w	8009e7e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	441a      	add	r2, r3
 8009b1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	8013      	strh	r3, [r2, #0]
 8009b32:	e1a4      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	78db      	ldrb	r3, [r3, #3]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	f040 819a 	bne.w	8009e7a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d917      	bls.n	8009b92 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	619a      	str	r2, [r3, #24]
 8009b90:	e00e      	b.n	8009bb0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d178      	bne.n	8009cb2 <USB_EPStartXfer+0x1420>
 8009bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009be4:	4413      	add	r3, r2
 8009be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	00da      	lsls	r2, r3, #3
 8009bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c0c:	d91d      	bls.n	8009c4a <USB_EPStartXfer+0x13b8>
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <USB_EPStartXfer+0x139c>
 8009c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	029b      	lsls	r3, r3, #10
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c46:	801a      	strh	r2, [r3, #0]
 8009c48:	e064      	b.n	8009d14 <USB_EPStartXfer+0x1482>
 8009c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d116      	bne.n	8009c80 <USB_EPStartXfer+0x13ee>
 8009c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	e049      	b.n	8009d14 <USB_EPStartXfer+0x1482>
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c84:	085b      	lsrs	r3, r3, #1
 8009c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <USB_EPStartXfer+0x140e>
 8009c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	029b      	lsls	r3, r3, #10
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cae:	801a      	strh	r2, [r3, #0]
 8009cb0:	e030      	b.n	8009d14 <USB_EPStartXfer+0x1482>
 8009cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d128      	bne.n	8009d14 <USB_EPStartXfer+0x1482>
 8009cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	00da      	lsls	r2, r3, #3
 8009cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cfe:	4413      	add	r3, r2
 8009d00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d178      	bne.n	8009e24 <USB_EPStartXfer+0x1592>
 8009d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	461a      	mov	r2, r3
 8009d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d56:	4413      	add	r3, r2
 8009d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	00da      	lsls	r2, r3, #3
 8009d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d6e:	4413      	add	r3, r2
 8009d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d7e:	d91d      	bls.n	8009dbc <USB_EPStartXfer+0x152a>
 8009d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d84:	095b      	lsrs	r3, r3, #5
 8009d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d8e:	f003 031f 	and.w	r3, r3, #31
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d104      	bne.n	8009da0 <USB_EPStartXfer+0x150e>
 8009d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009db8:	801a      	strh	r2, [r3, #0]
 8009dba:	e060      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d116      	bne.n	8009df2 <USB_EPStartXfer+0x1560>
 8009dc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dd6:	801a      	strh	r2, [r3, #0]
 8009dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	e045      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df6:	085b      	lsrs	r3, r3, #1
 8009df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <USB_EPStartXfer+0x1580>
 8009e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	029b      	lsls	r3, r3, #10
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e20:	801a      	strh	r2, [r3, #0]
 8009e22:	e02c      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
 8009e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d124      	bne.n	8009e7e <USB_EPStartXfer+0x15ec>
 8009e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	00da      	lsls	r2, r3, #3
 8009e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e62:	4413      	add	r3, r2
 8009e64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e76:	801a      	strh	r2, [r3, #0]
 8009e78:	e001      	b.n	8009e7e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e03a      	b.n	8009ef4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ea8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009eb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009eb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ebc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	441a      	add	r2, r3
 8009eda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d020      	beq.n	8009f52 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f26:	81bb      	strh	r3, [r7, #12]
 8009f28:	89bb      	ldrh	r3, [r7, #12]
 8009f2a:	f083 0310 	eor.w	r3, r3, #16
 8009f2e:	81bb      	strh	r3, [r7, #12]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	441a      	add	r2, r3
 8009f3a:	89bb      	ldrh	r3, [r7, #12]
 8009f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	8013      	strh	r3, [r2, #0]
 8009f50:	e01f      	b.n	8009f92 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f68:	81fb      	strh	r3, [r7, #14]
 8009f6a:	89fb      	ldrh	r3, [r7, #14]
 8009f6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f70:	81fb      	strh	r3, [r7, #14]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	441a      	add	r2, r3
 8009f7c:	89fb      	ldrh	r3, [r7, #14]
 8009f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	7b1b      	ldrb	r3, [r3, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f040 809d 	bne.w	800a0ee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d04c      	beq.n	800a056 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	823b      	strh	r3, [r7, #16]
 8009fca:	8a3b      	ldrh	r3, [r7, #16]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01b      	beq.n	800a00c <USB_EPClearStall+0x6c>
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	81fb      	strh	r3, [r7, #14]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	441a      	add	r2, r3
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	78db      	ldrb	r3, [r3, #3]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d06c      	beq.n	800a0ee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a02a:	81bb      	strh	r3, [r7, #12]
 800a02c:	89bb      	ldrh	r3, [r7, #12]
 800a02e:	f083 0320 	eor.w	r3, r3, #32
 800a032:	81bb      	strh	r3, [r7, #12]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	441a      	add	r2, r3
 800a03e:	89bb      	ldrh	r3, [r7, #12]
 800a040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a050:	b29b      	uxth	r3, r3
 800a052:	8013      	strh	r3, [r2, #0]
 800a054:	e04b      	b.n	800a0ee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	82fb      	strh	r3, [r7, #22]
 800a064:	8afb      	ldrh	r3, [r7, #22]
 800a066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01b      	beq.n	800a0a6 <USB_EPClearStall+0x106>
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a084:	82bb      	strh	r3, [r7, #20]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	8abb      	ldrh	r3, [r7, #20]
 800a092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a09a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0bc:	827b      	strh	r3, [r7, #18]
 800a0be:	8a7b      	ldrh	r3, [r7, #18]
 800a0c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a0c4:	827b      	strh	r3, [r7, #18]
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0cc:	827b      	strh	r3, [r7, #18]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	441a      	add	r2, r3
 800a0d8:	8a7b      	ldrh	r3, [r7, #18]
 800a0da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2280      	movs	r2, #128	; 0x80
 800a112:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a132:	b29b      	uxth	r3, r3
 800a134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a160:	b29b      	uxth	r3, r3
 800a162:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b08b      	sub	sp, #44	; 0x2c
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a1ca:	88bb      	ldrh	r3, [r7, #4]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1da:	88fa      	ldrh	r2, [r7, #6]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ea:	e01b      	b.n	800a224 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	b21a      	sxth	r2, r3
 800a1fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a200:	4313      	orrs	r3, r2
 800a202:	b21b      	sxth	r3, r3
 800a204:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	8a7a      	ldrh	r2, [r7, #18]
 800a20a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	3302      	adds	r3, #2
 800a210:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	3301      	adds	r3, #1
 800a216:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3301      	adds	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	3b01      	subs	r3, #1
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e0      	bne.n	800a1ec <USB_WritePMA+0x38>
  }
}
 800a22a:	bf00      	nop
 800a22c:	bf00      	nop
 800a22e:	372c      	adds	r7, #44	; 0x2c
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a238:	b480      	push	{r7}
 800a23a:	b08b      	sub	sp, #44	; 0x2c
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4611      	mov	r1, r2
 800a244:	461a      	mov	r2, r3
 800a246:	460b      	mov	r3, r1
 800a248:	80fb      	strh	r3, [r7, #6]
 800a24a:	4613      	mov	r3, r2
 800a24c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a24e:	88bb      	ldrh	r3, [r7, #4]
 800a250:	085b      	lsrs	r3, r3, #1
 800a252:	b29b      	uxth	r3, r3
 800a254:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a25e:	88fa      	ldrh	r2, [r7, #6]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a268:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
 800a26e:	e018      	b.n	800a2a2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	3302      	adds	r3, #2
 800a27c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3301      	adds	r3, #1
 800a28a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	b2da      	uxtb	r2, r3
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	3301      	adds	r3, #1
 800a29a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1e3      	bne.n	800a270 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a2a8:	88bb      	ldrh	r3, [r7, #4]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d007      	beq.n	800a2c4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	701a      	strb	r2, [r3, #0]
  }
}
 800a2c4:	bf00      	nop
 800a2c6:	372c      	adds	r7, #44	; 0x2c
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2e0:	f002 f99c 	bl	800c61c <USBD_static_malloc>
 800a2e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e066      	b.n	800a3c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7c1b      	ldrb	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d119      	bne.n	800a33c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a30c:	2202      	movs	r2, #2
 800a30e:	2181      	movs	r1, #129	; 0x81
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 ff85 	bl	800c220 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a31c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a320:	2202      	movs	r2, #2
 800a322:	2101      	movs	r1, #1
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 ff7b 	bl	800c220 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2210      	movs	r2, #16
 800a336:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a33a:	e016      	b.n	800a36a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	2202      	movs	r2, #2
 800a340:	2181      	movs	r1, #129	; 0x81
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 ff6c 	bl	800c220 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a34e:	2340      	movs	r3, #64	; 0x40
 800a350:	2202      	movs	r2, #2
 800a352:	2101      	movs	r1, #1
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 ff63 	bl	800c220 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2210      	movs	r2, #16
 800a366:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a36a:	2308      	movs	r3, #8
 800a36c:	2203      	movs	r2, #3
 800a36e:	2182      	movs	r1, #130	; 0x82
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 ff55 	bl	800c220 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7c1b      	ldrb	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d109      	bne.n	800a3b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f002 f8b3 	bl	800c518 <USBD_LL_PrepareReceive>
 800a3b2:	e007      	b.n	800a3c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3ba:	2340      	movs	r3, #64	; 0x40
 800a3bc:	2101      	movs	r1, #1
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 f8aa 	bl	800c518 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a3da:	2181      	movs	r1, #129	; 0x81
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 ff5d 	bl	800c29c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 ff56 	bl	800c29c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3f8:	2182      	movs	r1, #130	; 0x82
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 ff4e 	bl	800c29c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42a:	4618      	mov	r0, r3
 800a42c:	f002 f904 	bl	800c638 <USBD_static_free>
    pdev->pClassData = NULL;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a454:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e0af      	b.n	800a5cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a474:	2b00      	cmp	r3, #0
 800a476:	d03f      	beq.n	800a4f8 <USBD_CDC_Setup+0xb4>
 800a478:	2b20      	cmp	r3, #32
 800a47a:	f040 809f 	bne.w	800a5bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	88db      	ldrh	r3, [r3, #6]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d02e      	beq.n	800a4e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da16      	bge.n	800a4be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a49c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	88d2      	ldrh	r2, [r2, #6]
 800a4a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	88db      	ldrh	r3, [r3, #6]
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	bf28      	it	cs
 800a4ac:	2307      	movcs	r3, #7
 800a4ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	89fa      	ldrh	r2, [r7, #14]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 fa9f 	bl	800b9fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a4bc:	e085      	b.n	800a5ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	785a      	ldrb	r2, [r3, #1]
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	88db      	ldrh	r3, [r3, #6]
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a4d4:	6939      	ldr	r1, [r7, #16]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	88db      	ldrh	r3, [r3, #6]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 fab8 	bl	800ba52 <USBD_CtlPrepareRx>
      break;
 800a4e2:	e072      	b.n	800a5ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	7850      	ldrb	r0, [r2, #1]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	4798      	blx	r3
      break;
 800a4f6:	e068      	b.n	800a5ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b0b      	cmp	r3, #11
 800a4fe:	d852      	bhi.n	800a5a6 <USBD_CDC_Setup+0x162>
 800a500:	a201      	add	r2, pc, #4	; (adr r2, 800a508 <USBD_CDC_Setup+0xc4>)
 800a502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a506:	bf00      	nop
 800a508:	0800a539 	.word	0x0800a539
 800a50c:	0800a5b5 	.word	0x0800a5b5
 800a510:	0800a5a7 	.word	0x0800a5a7
 800a514:	0800a5a7 	.word	0x0800a5a7
 800a518:	0800a5a7 	.word	0x0800a5a7
 800a51c:	0800a5a7 	.word	0x0800a5a7
 800a520:	0800a5a7 	.word	0x0800a5a7
 800a524:	0800a5a7 	.word	0x0800a5a7
 800a528:	0800a5a7 	.word	0x0800a5a7
 800a52c:	0800a5a7 	.word	0x0800a5a7
 800a530:	0800a563 	.word	0x0800a563
 800a534:	0800a58d 	.word	0x0800a58d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d107      	bne.n	800a554 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a544:	f107 030a 	add.w	r3, r7, #10
 800a548:	2202      	movs	r2, #2
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 fa54 	bl	800b9fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a552:	e032      	b.n	800a5ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 f9de 	bl	800b918 <USBD_CtlError>
            ret = USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	75fb      	strb	r3, [r7, #23]
          break;
 800a560:	e02b      	b.n	800a5ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d107      	bne.n	800a57e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a56e:	f107 030d 	add.w	r3, r7, #13
 800a572:	2201      	movs	r2, #1
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fa3f 	bl	800b9fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a57c:	e01d      	b.n	800a5ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f9c9 	bl	800b918 <USBD_CtlError>
            ret = USBD_FAIL;
 800a586:	2303      	movs	r3, #3
 800a588:	75fb      	strb	r3, [r7, #23]
          break;
 800a58a:	e016      	b.n	800a5ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b03      	cmp	r3, #3
 800a596:	d00f      	beq.n	800a5b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 f9bc 	bl	800b918 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5a4:	e008      	b.n	800a5b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 f9b5 	bl	800b918 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5b2:	e002      	b.n	800a5ba <USBD_CDC_Setup+0x176>
          break;
 800a5b4:	bf00      	nop
 800a5b6:	e008      	b.n	800a5ca <USBD_CDC_Setup+0x186>
          break;
 800a5b8:	bf00      	nop
      }
      break;
 800a5ba:	e006      	b.n	800a5ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f001 f9aa 	bl	800b918 <USBD_CtlError>
      ret = USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e04f      	b.n	800a696 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	3318      	adds	r3, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d029      	beq.n	800a668 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a614:	78fa      	ldrb	r2, [r7, #3]
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	3318      	adds	r3, #24
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	78f9      	ldrb	r1, [r7, #3]
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	460b      	mov	r3, r1
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	4403      	add	r3, r0
 800a634:	333c      	adds	r3, #60	; 0x3c
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	fbb2 f1f3 	udiv	r1, r2, r3
 800a63c:	fb01 f303 	mul.w	r3, r1, r3
 800a640:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a642:	2b00      	cmp	r3, #0
 800a644:	d110      	bne.n	800a668 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	3318      	adds	r3, #24
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a65a:	78f9      	ldrb	r1, [r7, #3]
 800a65c:	2300      	movs	r3, #0
 800a65e:	2200      	movs	r2, #0
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 ff21 	bl	800c4a8 <USBD_LL_Transmit>
 800a666:	e015      	b.n	800a694 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e015      	b.n	800a6ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f001 ff5f 	bl	800c588 <USBD_LL_GetRxDataSize>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a702:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e01b      	b.n	800a746 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d015      	beq.n	800a744 <USBD_CDC_EP0_RxReady+0x50>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a71e:	2bff      	cmp	r3, #255	; 0xff
 800a720:	d010      	beq.n	800a744 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a730:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a738:	b292      	uxth	r2, r2
 800a73a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	22ff      	movs	r2, #255	; 0xff
 800a740:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2243      	movs	r2, #67	; 0x43
 800a75c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a75e:	4b03      	ldr	r3, [pc, #12]	; (800a76c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000094 	.word	0x20000094

0800a770 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2243      	movs	r2, #67	; 0x43
 800a77c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a77e:	4b03      	ldr	r3, [pc, #12]	; (800a78c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20000050 	.word	0x20000050

0800a790 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2243      	movs	r2, #67	; 0x43
 800a79c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a79e:	4b03      	ldr	r3, [pc, #12]	; (800a7ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	200000d8 	.word	0x200000d8

0800a7b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	2000000c 	.word	0x2000000c

0800a7d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e004      	b.n	800a7ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b087      	sub	sp, #28
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a80c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	e008      	b.n	800a82a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a846:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a84e:	2303      	movs	r3, #3
 800a850:	e004      	b.n	800a85c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a882:	2303      	movs	r3, #3
 800a884:	e016      	b.n	800a8b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7c1b      	ldrb	r3, [r3, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a894:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a898:	2101      	movs	r1, #1
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fe3c 	bl	800c518 <USBD_LL_PrepareReceive>
 800a8a0:	e007      	b.n	800a8b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8a8:	2340      	movs	r3, #64	; 0x40
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f001 fe33 	bl	800c518 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e01f      	b.n	800a914 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	79fa      	ldrb	r2, [r7, #7]
 800a906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f001 fbf5 	bl	800c0f8 <USBD_LL_Init>
 800a90e:	4603      	mov	r3, r0
 800a910:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a912:	7dfb      	ldrb	r3, [r7, #23]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e016      	b.n	800a962 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	f107 020e 	add.w	r2, r7, #14
 800a954:	4610      	mov	r0, r2
 800a956:	4798      	blx	r3
 800a958:	4602      	mov	r2, r0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fc22 	bl	800c1bc <USBD_LL_Start>
 800a978:	4603      	mov	r3, r0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	78fa      	ldrb	r2, [r7, #3]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d007      	beq.n	800a9f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	78fa      	ldrb	r2, [r7, #3]
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4798      	blx	r3
  }

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 ff46 	bl	800b8a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa26:	461a      	mov	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa34:	f003 031f 	and.w	r3, r3, #31
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d01a      	beq.n	800aa72 <USBD_LL_SetupStage+0x72>
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d822      	bhi.n	800aa86 <USBD_LL_SetupStage+0x86>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <USBD_LL_SetupStage+0x4a>
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d00a      	beq.n	800aa5e <USBD_LL_SetupStage+0x5e>
 800aa48:	e01d      	b.n	800aa86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9ee 	bl	800ae34 <USBD_StdDevReq>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5c:	e020      	b.n	800aaa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fa52 	bl	800af10 <USBD_StdItfReq>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	e016      	b.n	800aaa0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa91 	bl	800afa2 <USBD_StdEPReq>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73fb      	strb	r3, [r7, #15]
      break;
 800aa84:	e00c      	b.n	800aaa0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fc37 	bl	800c308 <USBD_LL_StallEP>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9e:	bf00      	nop
  }

  return ret;
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b086      	sub	sp, #24
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	460b      	mov	r3, r1
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aab8:	7afb      	ldrb	r3, [r7, #11]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d138      	bne.n	800ab30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aac4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d14a      	bne.n	800ab66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d913      	bls.n	800ab04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	bf28      	it	cs
 800aaf6:	4613      	movcs	r3, r2
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 ffc5 	bl	800ba8c <USBD_CtlContinueRx>
 800ab02:	e030      	b.n	800ab66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d10b      	bne.n	800ab28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 ffc0 	bl	800baae <USBD_CtlSendStatus>
 800ab2e:	e01a      	b.n	800ab66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d114      	bne.n	800ab66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	7afa      	ldrb	r2, [r7, #11]
 800ab52:	4611      	mov	r1, r2
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	4798      	blx	r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	e000      	b.n	800ab68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab7e:	7afb      	ldrb	r3, [r7, #11]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d16b      	bne.n	800ac5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	3314      	adds	r3, #20
 800ab88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d156      	bne.n	800ac42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d914      	bls.n	800abca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	1ad2      	subs	r2, r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	461a      	mov	r2, r3
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 ff3a 	bl	800ba30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abbc:	2300      	movs	r3, #0
 800abbe:	2200      	movs	r2, #0
 800abc0:	2100      	movs	r1, #0
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f001 fca8 	bl	800c518 <USBD_LL_PrepareReceive>
 800abc8:	e03b      	b.n	800ac42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	68da      	ldr	r2, [r3, #12]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d11c      	bne.n	800ac10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abde:	429a      	cmp	r2, r3
 800abe0:	d316      	bcc.n	800ac10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abec:	429a      	cmp	r2, r3
 800abee:	d20f      	bcs.n	800ac10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 ff1b 	bl	800ba30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac02:	2300      	movs	r3, #0
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f001 fc85 	bl	800c518 <USBD_LL_PrepareReceive>
 800ac0e:	e018      	b.n	800ac42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d10b      	bne.n	800ac34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac34:	2180      	movs	r1, #128	; 0x80
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f001 fb66 	bl	800c308 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 ff49 	bl	800bad4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d122      	bne.n	800ac92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff fe98 	bl	800a982 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac5a:	e01a      	b.n	800ac92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d114      	bne.n	800ac92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00e      	beq.n	800ac92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	7afa      	ldrb	r2, [r7, #11]
 800ac7e:	4611      	mov	r1, r2
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	4798      	blx	r3
 800ac84:	4603      	mov	r3, r0
 800ac86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	e000      	b.n	800ac94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800accc:	2303      	movs	r3, #3
 800acce:	e02f      	b.n	800ad30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00f      	beq.n	800acfa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6852      	ldr	r2, [r2, #4]
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	4611      	mov	r1, r2
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 fa8d 	bl	800c220 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2240      	movs	r2, #64	; 0x40
 800ad12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 fa7f 	bl	800c220 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2240      	movs	r2, #64	; 0x40
 800ad2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	78fa      	ldrb	r2, [r7, #3]
 800ad48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2204      	movs	r2, #4
 800ad72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d106      	bne.n	800ada6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e012      	b.n	800adf0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b03      	cmp	r3, #3
 800add4:	d10b      	bne.n	800adee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae16:	8a3b      	ldrh	r3, [r7, #16]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	b21a      	sxth	r2, r3
 800ae1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	b21b      	sxth	r3, r3
 800ae24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae26:	89fb      	ldrh	r3, [r7, #14]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	371c      	adds	r7, #28
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae4a:	2b40      	cmp	r3, #64	; 0x40
 800ae4c:	d005      	beq.n	800ae5a <USBD_StdDevReq+0x26>
 800ae4e:	2b40      	cmp	r3, #64	; 0x40
 800ae50:	d853      	bhi.n	800aefa <USBD_StdDevReq+0xc6>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <USBD_StdDevReq+0x3a>
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d14f      	bne.n	800aefa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6c:	e04a      	b.n	800af04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b09      	cmp	r3, #9
 800ae74:	d83b      	bhi.n	800aeee <USBD_StdDevReq+0xba>
 800ae76:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <USBD_StdDevReq+0x48>)
 800ae78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7c:	0800aed1 	.word	0x0800aed1
 800ae80:	0800aee5 	.word	0x0800aee5
 800ae84:	0800aeef 	.word	0x0800aeef
 800ae88:	0800aedb 	.word	0x0800aedb
 800ae8c:	0800aeef 	.word	0x0800aeef
 800ae90:	0800aeaf 	.word	0x0800aeaf
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeef 	.word	0x0800aeef
 800ae9c:	0800aec7 	.word	0x0800aec7
 800aea0:	0800aeb9 	.word	0x0800aeb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9de 	bl	800b268 <USBD_GetDescriptor>
          break;
 800aeac:	e024      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fb6d 	bl	800b590 <USBD_SetAddress>
          break;
 800aeb6:	e01f      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fbac 	bl	800b618 <USBD_SetConfig>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
          break;
 800aec4:	e018      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fc4b 	bl	800b764 <USBD_GetConfig>
          break;
 800aece:	e013      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fc7c 	bl	800b7d0 <USBD_GetStatus>
          break;
 800aed8:	e00e      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fcab 	bl	800b838 <USBD_SetFeature>
          break;
 800aee2:	e009      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fcba 	bl	800b860 <USBD_ClrFeature>
          break;
 800aeec:	e004      	b.n	800aef8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fd11 	bl	800b918 <USBD_CtlError>
          break;
 800aef6:	bf00      	nop
      }
      break;
 800aef8:	e004      	b.n	800af04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fd0b 	bl	800b918 <USBD_CtlError>
      break;
 800af02:	bf00      	nop
  }

  return ret;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop

0800af10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af26:	2b40      	cmp	r3, #64	; 0x40
 800af28:	d005      	beq.n	800af36 <USBD_StdItfReq+0x26>
 800af2a:	2b40      	cmp	r3, #64	; 0x40
 800af2c:	d82f      	bhi.n	800af8e <USBD_StdItfReq+0x7e>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <USBD_StdItfReq+0x26>
 800af32:	2b20      	cmp	r3, #32
 800af34:	d12b      	bne.n	800af8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	2b02      	cmp	r3, #2
 800af42:	d81d      	bhi.n	800af80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	889b      	ldrh	r3, [r3, #4]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d813      	bhi.n	800af76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	88db      	ldrh	r3, [r3, #6]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d110      	bne.n	800af8a <USBD_StdItfReq+0x7a>
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10d      	bne.n	800af8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fd9d 	bl	800baae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af74:	e009      	b.n	800af8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fccd 	bl	800b918 <USBD_CtlError>
          break;
 800af7e:	e004      	b.n	800af8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fcc8 	bl	800b918 <USBD_CtlError>
          break;
 800af88:	e000      	b.n	800af8c <USBD_StdItfReq+0x7c>
          break;
 800af8a:	bf00      	nop
      }
      break;
 800af8c:	e004      	b.n	800af98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fcc1 	bl	800b918 <USBD_CtlError>
      break;
 800af96:	bf00      	nop
  }

  return ret;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	889b      	ldrh	r3, [r3, #4]
 800afb4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d007      	beq.n	800afd2 <USBD_StdEPReq+0x30>
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	f200 8145 	bhi.w	800b252 <USBD_StdEPReq+0x2b0>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00c      	beq.n	800afe6 <USBD_StdEPReq+0x44>
 800afcc:	2b20      	cmp	r3, #32
 800afce:	f040 8140 	bne.w	800b252 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	4798      	blx	r3
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
      break;
 800afe4:	e13a      	b.n	800b25c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	785b      	ldrb	r3, [r3, #1]
 800afea:	2b03      	cmp	r3, #3
 800afec:	d007      	beq.n	800affe <USBD_StdEPReq+0x5c>
 800afee:	2b03      	cmp	r3, #3
 800aff0:	f300 8129 	bgt.w	800b246 <USBD_StdEPReq+0x2a4>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d07f      	beq.n	800b0f8 <USBD_StdEPReq+0x156>
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d03c      	beq.n	800b076 <USBD_StdEPReq+0xd4>
 800affc:	e123      	b.n	800b246 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d002      	beq.n	800b010 <USBD_StdEPReq+0x6e>
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d016      	beq.n	800b03c <USBD_StdEPReq+0x9a>
 800b00e:	e02c      	b.n	800b06a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00d      	beq.n	800b032 <USBD_StdEPReq+0x90>
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b80      	cmp	r3, #128	; 0x80
 800b01a:	d00a      	beq.n	800b032 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 f971 	bl	800c308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b026:	2180      	movs	r1, #128	; 0x80
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f96d 	bl	800c308 <USBD_LL_StallEP>
 800b02e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b030:	e020      	b.n	800b074 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fc6f 	bl	800b918 <USBD_CtlError>
              break;
 800b03a:	e01b      	b.n	800b074 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	885b      	ldrh	r3, [r3, #2]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10e      	bne.n	800b062 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00b      	beq.n	800b062 <USBD_StdEPReq+0xc0>
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	2b80      	cmp	r3, #128	; 0x80
 800b04e:	d008      	beq.n	800b062 <USBD_StdEPReq+0xc0>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	88db      	ldrh	r3, [r3, #6]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 f953 	bl	800c308 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fd23 	bl	800baae <USBD_CtlSendStatus>

              break;
 800b068:	e004      	b.n	800b074 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fc53 	bl	800b918 <USBD_CtlError>
              break;
 800b072:	bf00      	nop
          }
          break;
 800b074:	e0ec      	b.n	800b250 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d002      	beq.n	800b088 <USBD_StdEPReq+0xe6>
 800b082:	2b03      	cmp	r3, #3
 800b084:	d016      	beq.n	800b0b4 <USBD_StdEPReq+0x112>
 800b086:	e030      	b.n	800b0ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00d      	beq.n	800b0aa <USBD_StdEPReq+0x108>
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	2b80      	cmp	r3, #128	; 0x80
 800b092:	d00a      	beq.n	800b0aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 f935 	bl	800c308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 f931 	bl	800c308 <USBD_LL_StallEP>
 800b0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0a8:	e025      	b.n	800b0f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fc33 	bl	800b918 <USBD_CtlError>
              break;
 800b0b2:	e020      	b.n	800b0f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	885b      	ldrh	r3, [r3, #2]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11b      	bne.n	800b0f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 f952 	bl	800c374 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fcec 	bl	800baae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b0e8:	e004      	b.n	800b0f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fc13 	bl	800b918 <USBD_CtlError>
              break;
 800b0f2:	e000      	b.n	800b0f6 <USBD_StdEPReq+0x154>
              break;
 800b0f4:	bf00      	nop
          }
          break;
 800b0f6:	e0ab      	b.n	800b250 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b02      	cmp	r3, #2
 800b102:	d002      	beq.n	800b10a <USBD_StdEPReq+0x168>
 800b104:	2b03      	cmp	r3, #3
 800b106:	d032      	beq.n	800b16e <USBD_StdEPReq+0x1cc>
 800b108:	e097      	b.n	800b23a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <USBD_StdEPReq+0x17e>
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	d004      	beq.n	800b120 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fbfd 	bl	800b918 <USBD_CtlError>
                break;
 800b11e:	e091      	b.n	800b244 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da0b      	bge.n	800b140 <USBD_StdEPReq+0x19e>
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	3310      	adds	r3, #16
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	4413      	add	r3, r2
 800b13c:	3304      	adds	r3, #4
 800b13e:	e00b      	b.n	800b158 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	4413      	add	r3, r2
 800b156:	3304      	adds	r3, #4
 800b158:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2202      	movs	r2, #2
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc47 	bl	800b9fa <USBD_CtlSendData>
              break;
 800b16c:	e06a      	b.n	800b244 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b172:	2b00      	cmp	r3, #0
 800b174:	da11      	bge.n	800b19a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	f003 020f 	and.w	r2, r3, #15
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	440b      	add	r3, r1
 800b188:	3324      	adds	r3, #36	; 0x24
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d117      	bne.n	800b1c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fbc0 	bl	800b918 <USBD_CtlError>
                  break;
 800b198:	e054      	b.n	800b244 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	f003 020f 	and.w	r2, r3, #15
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d104      	bne.n	800b1c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fbad 	bl	800b918 <USBD_CtlError>
                  break;
 800b1be:	e041      	b.n	800b244 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	da0b      	bge.n	800b1e0 <USBD_StdEPReq+0x23e>
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4413      	add	r3, r2
 800b1dc:	3304      	adds	r3, #4
 800b1de:	e00b      	b.n	800b1f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <USBD_StdEPReq+0x264>
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	2b80      	cmp	r3, #128	; 0x80
 800b204:	d103      	bne.n	800b20e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	e00e      	b.n	800b22c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 f8e4 	bl	800c3e0 <USBD_LL_IsStallEP>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2201      	movs	r2, #1
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e002      	b.n	800b22c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2202      	movs	r2, #2
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fbe1 	bl	800b9fa <USBD_CtlSendData>
              break;
 800b238:	e004      	b.n	800b244 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fb6b 	bl	800b918 <USBD_CtlError>
              break;
 800b242:	bf00      	nop
          }
          break;
 800b244:	e004      	b.n	800b250 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fb65 	bl	800b918 <USBD_CtlError>
          break;
 800b24e:	bf00      	nop
      }
      break;
 800b250:	e004      	b.n	800b25c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fb5f 	bl	800b918 <USBD_CtlError>
      break;
 800b25a:	bf00      	nop
  }

  return ret;
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	0a1b      	lsrs	r3, r3, #8
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	2b0e      	cmp	r3, #14
 800b28a:	f200 8152 	bhi.w	800b532 <USBD_GetDescriptor+0x2ca>
 800b28e:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <USBD_GetDescriptor+0x2c>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b305 	.word	0x0800b305
 800b298:	0800b31d 	.word	0x0800b31d
 800b29c:	0800b35d 	.word	0x0800b35d
 800b2a0:	0800b533 	.word	0x0800b533
 800b2a4:	0800b533 	.word	0x0800b533
 800b2a8:	0800b4d3 	.word	0x0800b4d3
 800b2ac:	0800b4ff 	.word	0x0800b4ff
 800b2b0:	0800b533 	.word	0x0800b533
 800b2b4:	0800b533 	.word	0x0800b533
 800b2b8:	0800b533 	.word	0x0800b533
 800b2bc:	0800b533 	.word	0x0800b533
 800b2c0:	0800b533 	.word	0x0800b533
 800b2c4:	0800b533 	.word	0x0800b533
 800b2c8:	0800b533 	.word	0x0800b533
 800b2cc:	0800b2d1 	.word	0x0800b2d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2f2:	e126      	b.n	800b542 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fb0e 	bl	800b918 <USBD_CtlError>
        err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
      break;
 800b302:	e11e      	b.n	800b542 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7c12      	ldrb	r2, [r2, #16]
 800b310:	f107 0108 	add.w	r1, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
      break;
 800b31a:	e112      	b.n	800b542 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	7c1b      	ldrb	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10d      	bne.n	800b340 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	f107 0208 	add.w	r2, r7, #8
 800b330:	4610      	mov	r0, r2
 800b332:	4798      	blx	r3
 800b334:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3301      	adds	r3, #1
 800b33a:	2202      	movs	r2, #2
 800b33c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b33e:	e100      	b.n	800b542 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	f107 0208 	add.w	r2, r7, #8
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
 800b350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3301      	adds	r3, #1
 800b356:	2202      	movs	r2, #2
 800b358:	701a      	strb	r2, [r3, #0]
      break;
 800b35a:	e0f2      	b.n	800b542 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	885b      	ldrh	r3, [r3, #2]
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b05      	cmp	r3, #5
 800b364:	f200 80ac 	bhi.w	800b4c0 <USBD_GetDescriptor+0x258>
 800b368:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <USBD_GetDescriptor+0x108>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b389 	.word	0x0800b389
 800b374:	0800b3bd 	.word	0x0800b3bd
 800b378:	0800b3f1 	.word	0x0800b3f1
 800b37c:	0800b425 	.word	0x0800b425
 800b380:	0800b459 	.word	0x0800b459
 800b384:	0800b48d 	.word	0x0800b48d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	7c12      	ldrb	r2, [r2, #16]
 800b3a0:	f107 0108 	add.w	r1, r7, #8
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4798      	blx	r3
 800b3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3aa:	e091      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fab2 	bl	800b918 <USBD_CtlError>
            err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ba:	e089      	b.n	800b4d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 0108 	add.w	r1, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3de:	e077      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa98 	bl	800b918 <USBD_CtlError>
            err++;
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ee:	e06f      	b.n	800b4d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	7c12      	ldrb	r2, [r2, #16]
 800b408:	f107 0108 	add.w	r1, r7, #8
 800b40c:	4610      	mov	r0, r2
 800b40e:	4798      	blx	r3
 800b410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b412:	e05d      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa7e 	bl	800b918 <USBD_CtlError>
            err++;
 800b41c:	7afb      	ldrb	r3, [r7, #11]
 800b41e:	3301      	adds	r3, #1
 800b420:	72fb      	strb	r3, [r7, #11]
          break;
 800b422:	e055      	b.n	800b4d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7c12      	ldrb	r2, [r2, #16]
 800b43c:	f107 0108 	add.w	r1, r7, #8
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b446:	e043      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fa64 	bl	800b918 <USBD_CtlError>
            err++;
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	3301      	adds	r3, #1
 800b454:	72fb      	strb	r3, [r7, #11]
          break;
 800b456:	e03b      	b.n	800b4d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	7c12      	ldrb	r2, [r2, #16]
 800b470:	f107 0108 	add.w	r1, r7, #8
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b47a:	e029      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa4a 	bl	800b918 <USBD_CtlError>
            err++;
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	3301      	adds	r3, #1
 800b488:	72fb      	strb	r3, [r7, #11]
          break;
 800b48a:	e021      	b.n	800b4d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	7c12      	ldrb	r2, [r2, #16]
 800b4a4:	f107 0108 	add.w	r1, r7, #8
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
 800b4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ae:	e00f      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa30 	bl	800b918 <USBD_CtlError>
            err++;
 800b4b8:	7afb      	ldrb	r3, [r7, #11]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4be:	e007      	b.n	800b4d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fa28 	bl	800b918 <USBD_CtlError>
          err++;
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b4ce:	bf00      	nop
      }
      break;
 800b4d0:	e037      	b.n	800b542 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7c1b      	ldrb	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d109      	bne.n	800b4ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	f107 0208 	add.w	r2, r7, #8
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	4798      	blx	r3
 800b4ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4ec:	e029      	b.n	800b542 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa11 	bl	800b918 <USBD_CtlError>
        err++;
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b4fc:	e021      	b.n	800b542 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	7c1b      	ldrb	r3, [r3, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10d      	bne.n	800b522 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	f107 0208 	add.w	r2, r7, #8
 800b512:	4610      	mov	r0, r2
 800b514:	4798      	blx	r3
 800b516:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3301      	adds	r3, #1
 800b51c:	2207      	movs	r2, #7
 800b51e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b520:	e00f      	b.n	800b542 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f9f7 	bl	800b918 <USBD_CtlError>
        err++;
 800b52a:	7afb      	ldrb	r3, [r7, #11]
 800b52c:	3301      	adds	r3, #1
 800b52e:	72fb      	strb	r3, [r7, #11]
      break;
 800b530:	e007      	b.n	800b542 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9ef 	bl	800b918 <USBD_CtlError>
      err++;
 800b53a:	7afb      	ldrb	r3, [r7, #11]
 800b53c:	3301      	adds	r3, #1
 800b53e:	72fb      	strb	r3, [r7, #11]
      break;
 800b540:	bf00      	nop
  }

  if (err != 0U)
 800b542:	7afb      	ldrb	r3, [r7, #11]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d11e      	bne.n	800b586 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	88db      	ldrh	r3, [r3, #6]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d016      	beq.n	800b57e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b550:	893b      	ldrh	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00e      	beq.n	800b574 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	88da      	ldrh	r2, [r3, #6]
 800b55a:	893b      	ldrh	r3, [r7, #8]
 800b55c:	4293      	cmp	r3, r2
 800b55e:	bf28      	it	cs
 800b560:	4613      	movcs	r3, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b566:	893b      	ldrh	r3, [r7, #8]
 800b568:	461a      	mov	r2, r3
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fa44 	bl	800b9fa <USBD_CtlSendData>
 800b572:	e009      	b.n	800b588 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f9ce 	bl	800b918 <USBD_CtlError>
 800b57c:	e004      	b.n	800b588 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fa95 	bl	800baae <USBD_CtlSendStatus>
 800b584:	e000      	b.n	800b588 <USBD_GetDescriptor+0x320>
    return;
 800b586:	bf00      	nop
  }
}
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop

0800b590 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	889b      	ldrh	r3, [r3, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d131      	bne.n	800b606 <USBD_SetAddress+0x76>
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	88db      	ldrh	r3, [r3, #6]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d12d      	bne.n	800b606 <USBD_SetAddress+0x76>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	885b      	ldrh	r3, [r3, #2]
 800b5ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b5b0:	d829      	bhi.n	800b606 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	885b      	ldrh	r3, [r3, #2]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d104      	bne.n	800b5d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f9a3 	bl	800b918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d2:	e01d      	b.n	800b610 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	7bfa      	ldrb	r2, [r7, #15]
 800b5d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 ff2b 	bl	800c43c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa61 	bl	800baae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d004      	beq.n	800b5fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5fa:	e009      	b.n	800b610 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b604:	e004      	b.n	800b610 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f985 	bl	800b918 <USBD_CtlError>
  }
}
 800b60e:	bf00      	nop
 800b610:	bf00      	nop
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	885b      	ldrh	r3, [r3, #2]
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	4b4c      	ldr	r3, [pc, #304]	; (800b760 <USBD_SetConfig+0x148>)
 800b62e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b630:	4b4b      	ldr	r3, [pc, #300]	; (800b760 <USBD_SetConfig+0x148>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d905      	bls.n	800b644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f96c 	bl	800b918 <USBD_CtlError>
    return USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	e088      	b.n	800b756 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d002      	beq.n	800b656 <USBD_SetConfig+0x3e>
 800b650:	2b03      	cmp	r3, #3
 800b652:	d025      	beq.n	800b6a0 <USBD_SetConfig+0x88>
 800b654:	e071      	b.n	800b73a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b656:	4b42      	ldr	r3, [pc, #264]	; (800b760 <USBD_SetConfig+0x148>)
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01c      	beq.n	800b698 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b65e:	4b40      	ldr	r3, [pc, #256]	; (800b760 <USBD_SetConfig+0x148>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	461a      	mov	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b668:	4b3d      	ldr	r3, [pc, #244]	; (800b760 <USBD_SetConfig+0x148>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff f992 	bl	800a998 <USBD_SetClassConfig>
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d004      	beq.n	800b688 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f949 	bl	800b918 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b686:	e065      	b.n	800b754 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa10 	bl	800baae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2203      	movs	r2, #3
 800b692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b696:	e05d      	b.n	800b754 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fa08 	bl	800baae <USBD_CtlSendStatus>
      break;
 800b69e:	e059      	b.n	800b754 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6a0:	4b2f      	ldr	r3, [pc, #188]	; (800b760 <USBD_SetConfig+0x148>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d112      	bne.n	800b6ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b6b0:	4b2b      	ldr	r3, [pc, #172]	; (800b760 <USBD_SetConfig+0x148>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6ba:	4b29      	ldr	r3, [pc, #164]	; (800b760 <USBD_SetConfig+0x148>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff f985 	bl	800a9d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f9f1 	bl	800baae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6cc:	e042      	b.n	800b754 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b6ce:	4b24      	ldr	r3, [pc, #144]	; (800b760 <USBD_SetConfig+0x148>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d02a      	beq.n	800b732 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff f973 	bl	800a9d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ea:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <USBD_SetConfig+0x148>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6f4:	4b1a      	ldr	r3, [pc, #104]	; (800b760 <USBD_SetConfig+0x148>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff f94c 	bl	800a998 <USBD_SetClassConfig>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00f      	beq.n	800b72a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f903 	bl	800b918 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff f958 	bl	800a9d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b728:	e014      	b.n	800b754 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f9bf 	bl	800baae <USBD_CtlSendStatus>
      break;
 800b730:	e010      	b.n	800b754 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f9bb 	bl	800baae <USBD_CtlSendStatus>
      break;
 800b738:	e00c      	b.n	800b754 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f8eb 	bl	800b918 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b742:	4b07      	ldr	r3, [pc, #28]	; (800b760 <USBD_SetConfig+0x148>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff f941 	bl	800a9d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b74e:	2303      	movs	r3, #3
 800b750:	73fb      	strb	r3, [r7, #15]
      break;
 800b752:	bf00      	nop
  }

  return ret;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000428 	.word	0x20000428

0800b764 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	88db      	ldrh	r3, [r3, #6]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d004      	beq.n	800b780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f8cd 	bl	800b918 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b77e:	e023      	b.n	800b7c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b02      	cmp	r3, #2
 800b78a:	dc02      	bgt.n	800b792 <USBD_GetConfig+0x2e>
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dc03      	bgt.n	800b798 <USBD_GetConfig+0x34>
 800b790:	e015      	b.n	800b7be <USBD_GetConfig+0x5a>
 800b792:	2b03      	cmp	r3, #3
 800b794:	d00b      	beq.n	800b7ae <USBD_GetConfig+0x4a>
 800b796:	e012      	b.n	800b7be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f927 	bl	800b9fa <USBD_CtlSendData>
        break;
 800b7ac:	e00c      	b.n	800b7c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f91f 	bl	800b9fa <USBD_CtlSendData>
        break;
 800b7bc:	e004      	b.n	800b7c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f8a9 	bl	800b918 <USBD_CtlError>
        break;
 800b7c6:	bf00      	nop
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d81e      	bhi.n	800b826 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	88db      	ldrh	r3, [r3, #6]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d004      	beq.n	800b7fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f890 	bl	800b918 <USBD_CtlError>
        break;
 800b7f8:	e01a      	b.n	800b830 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b806:	2b00      	cmp	r3, #0
 800b808:	d005      	beq.n	800b816 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	f043 0202 	orr.w	r2, r3, #2
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	330c      	adds	r3, #12
 800b81a:	2202      	movs	r2, #2
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f8eb 	bl	800b9fa <USBD_CtlSendData>
      break;
 800b824:	e004      	b.n	800b830 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f875 	bl	800b918 <USBD_CtlError>
      break;
 800b82e:	bf00      	nop
  }
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	885b      	ldrh	r3, [r3, #2]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d106      	bne.n	800b858 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f92b 	bl	800baae <USBD_CtlSendStatus>
  }
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	3b01      	subs	r3, #1
 800b874:	2b02      	cmp	r3, #2
 800b876:	d80b      	bhi.n	800b890 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	885b      	ldrh	r3, [r3, #2]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d10c      	bne.n	800b89a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f910 	bl	800baae <USBD_CtlSendStatus>
      }
      break;
 800b88e:	e004      	b.n	800b89a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f840 	bl	800b918 <USBD_CtlError>
      break;
 800b898:	e000      	b.n	800b89c <USBD_ClrFeature+0x3c>
      break;
 800b89a:	bf00      	nop
  }
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7ff fa92 	bl	800adf8 <SWAPBYTE>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fa85 	bl	800adf8 <SWAPBYTE>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fa78 	bl	800adf8 <SWAPBYTE>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	80da      	strh	r2, [r3, #6]
}
 800b910:	bf00      	nop
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b922:	2180      	movs	r1, #128	; 0x80
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fcef 	bl	800c308 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b92a:	2100      	movs	r1, #0
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fceb 	bl	800c308 <USBD_LL_StallEP>
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b086      	sub	sp, #24
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d036      	beq.n	800b9be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b954:	6938      	ldr	r0, [r7, #16]
 800b956:	f000 f836 	bl	800b9c6 <USBD_GetLen>
 800b95a:	4603      	mov	r3, r0
 800b95c:	3301      	adds	r3, #1
 800b95e:	b29b      	uxth	r3, r3
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	7812      	ldrb	r2, [r2, #0]
 800b972:	701a      	strb	r2, [r3, #0]
  idx++;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	3301      	adds	r3, #1
 800b978:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	4413      	add	r3, r2
 800b980:	2203      	movs	r2, #3
 800b982:	701a      	strb	r2, [r3, #0]
  idx++;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	3301      	adds	r3, #1
 800b988:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b98a:	e013      	b.n	800b9b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4413      	add	r3, r2
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	3301      	adds	r3, #1
 800b99c:	613b      	str	r3, [r7, #16]
    idx++;
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e7      	bne.n	800b98c <USBD_GetString+0x52>
 800b9bc:	e000      	b.n	800b9c0 <USBD_GetString+0x86>
    return;
 800b9be:	bf00      	nop
  }
}
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b085      	sub	sp, #20
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9d6:	e005      	b.n	800b9e4 <USBD_GetLen+0x1e>
  {
    len++;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1f5      	bne.n	800b9d8 <USBD_GetLen+0x12>
  }

  return len;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	2100      	movs	r1, #0
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 fd41 	bl	800c4a8 <USBD_LL_Transmit>

  return USBD_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	2100      	movs	r1, #0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 fd30 	bl	800c4a8 <USBD_LL_Transmit>

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2203      	movs	r2, #3
 800ba62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 fd4b 	bl	800c518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 fd3a 	bl	800c518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b082      	sub	sp, #8
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2204      	movs	r2, #4
 800baba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800babe:	2300      	movs	r3, #0
 800bac0:	2200      	movs	r2, #0
 800bac2:	2100      	movs	r1, #0
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fcef 	bl	800c4a8 <USBD_LL_Transmit>

  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2205      	movs	r2, #5
 800bae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bae4:	2300      	movs	r3, #0
 800bae6:	2200      	movs	r2, #0
 800bae8:	2100      	movs	r1, #0
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fd14 	bl	800c518 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb00:	2200      	movs	r2, #0
 800bb02:	4912      	ldr	r1, [pc, #72]	; (800bb4c <MX_USB_DEVICE_Init+0x50>)
 800bb04:	4812      	ldr	r0, [pc, #72]	; (800bb50 <MX_USB_DEVICE_Init+0x54>)
 800bb06:	f7fe fed9 	bl	800a8bc <USBD_Init>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb10:	f7f5 febe 	bl	8001890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb14:	490f      	ldr	r1, [pc, #60]	; (800bb54 <MX_USB_DEVICE_Init+0x58>)
 800bb16:	480e      	ldr	r0, [pc, #56]	; (800bb50 <MX_USB_DEVICE_Init+0x54>)
 800bb18:	f7fe ff00 	bl	800a91c <USBD_RegisterClass>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb22:	f7f5 feb5 	bl	8001890 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb26:	490c      	ldr	r1, [pc, #48]	; (800bb58 <MX_USB_DEVICE_Init+0x5c>)
 800bb28:	4809      	ldr	r0, [pc, #36]	; (800bb50 <MX_USB_DEVICE_Init+0x54>)
 800bb2a:	f7fe fe51 	bl	800a7d0 <USBD_CDC_RegisterInterface>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb34:	f7f5 feac 	bl	8001890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb38:	4805      	ldr	r0, [pc, #20]	; (800bb50 <MX_USB_DEVICE_Init+0x54>)
 800bb3a:	f7fe ff16 	bl	800a96a <USBD_Start>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb44:	f7f5 fea4 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb48:	bf00      	nop
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20000130 	.word	0x20000130
 800bb50:	2000042c 	.word	0x2000042c
 800bb54:	20000018 	.word	0x20000018
 800bb58:	2000011c 	.word	0x2000011c

0800bb5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb60:	2200      	movs	r2, #0
 800bb62:	4905      	ldr	r1, [pc, #20]	; (800bb78 <CDC_Init_FS+0x1c>)
 800bb64:	4805      	ldr	r0, [pc, #20]	; (800bb7c <CDC_Init_FS+0x20>)
 800bb66:	f7fe fe48 	bl	800a7fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb6a:	4905      	ldr	r1, [pc, #20]	; (800bb80 <CDC_Init_FS+0x24>)
 800bb6c:	4803      	ldr	r0, [pc, #12]	; (800bb7c <CDC_Init_FS+0x20>)
 800bb6e:	f7fe fe62 	bl	800a836 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20000ae4 	.word	0x20000ae4
 800bb7c:	2000042c 	.word	0x2000042c
 800bb80:	200006fc 	.word	0x200006fc

0800bb84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	71fb      	strb	r3, [r7, #7]
 800bba0:	4613      	mov	r3, r2
 800bba2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	2b23      	cmp	r3, #35	; 0x23
 800bba8:	d84a      	bhi.n	800bc40 <CDC_Control_FS+0xac>
 800bbaa:	a201      	add	r2, pc, #4	; (adr r2, 800bbb0 <CDC_Control_FS+0x1c>)
 800bbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb0:	0800bc41 	.word	0x0800bc41
 800bbb4:	0800bc41 	.word	0x0800bc41
 800bbb8:	0800bc41 	.word	0x0800bc41
 800bbbc:	0800bc41 	.word	0x0800bc41
 800bbc0:	0800bc41 	.word	0x0800bc41
 800bbc4:	0800bc41 	.word	0x0800bc41
 800bbc8:	0800bc41 	.word	0x0800bc41
 800bbcc:	0800bc41 	.word	0x0800bc41
 800bbd0:	0800bc41 	.word	0x0800bc41
 800bbd4:	0800bc41 	.word	0x0800bc41
 800bbd8:	0800bc41 	.word	0x0800bc41
 800bbdc:	0800bc41 	.word	0x0800bc41
 800bbe0:	0800bc41 	.word	0x0800bc41
 800bbe4:	0800bc41 	.word	0x0800bc41
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc41 	.word	0x0800bc41
 800bbf4:	0800bc41 	.word	0x0800bc41
 800bbf8:	0800bc41 	.word	0x0800bc41
 800bbfc:	0800bc41 	.word	0x0800bc41
 800bc00:	0800bc41 	.word	0x0800bc41
 800bc04:	0800bc41 	.word	0x0800bc41
 800bc08:	0800bc41 	.word	0x0800bc41
 800bc0c:	0800bc41 	.word	0x0800bc41
 800bc10:	0800bc41 	.word	0x0800bc41
 800bc14:	0800bc41 	.word	0x0800bc41
 800bc18:	0800bc41 	.word	0x0800bc41
 800bc1c:	0800bc41 	.word	0x0800bc41
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	0800bc41 	.word	0x0800bc41
 800bc28:	0800bc41 	.word	0x0800bc41
 800bc2c:	0800bc41 	.word	0x0800bc41
 800bc30:	0800bc41 	.word	0x0800bc41
 800bc34:	0800bc41 	.word	0x0800bc41
 800bc38:	0800bc41 	.word	0x0800bc41
 800bc3c:	0800bc41 	.word	0x0800bc41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc40:	bf00      	nop
  }

  return (USBD_OK);
 800bc42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <CDC_Receive_FS+0x24>)
 800bc5e:	f7fe fdea 	bl	800a836 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc62:	4804      	ldr	r0, [pc, #16]	; (800bc74 <CDC_Receive_FS+0x24>)
 800bc64:	f7fe fe00 	bl	800a868 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	2000042c 	.word	0x2000042c

0800bc78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4613      	mov	r3, r2
 800bc84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
	...

0800bc9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2212      	movs	r2, #18
 800bcac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcae:	4b03      	ldr	r3, [pc, #12]	; (800bcbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	20000150 	.word	0x20000150

0800bcc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	2204      	movs	r2, #4
 800bcd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcd2:	4b03      	ldr	r3, [pc, #12]	; (800bce0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000170 	.word	0x20000170

0800bce4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	4907      	ldr	r1, [pc, #28]	; (800bd18 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcfa:	4808      	ldr	r0, [pc, #32]	; (800bd1c <USBD_FS_ProductStrDescriptor+0x38>)
 800bcfc:	f7ff fe1d 	bl	800b93a <USBD_GetString>
 800bd00:	e004      	b.n	800bd0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	4904      	ldr	r1, [pc, #16]	; (800bd18 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd06:	4805      	ldr	r0, [pc, #20]	; (800bd1c <USBD_FS_ProductStrDescriptor+0x38>)
 800bd08:	f7ff fe17 	bl	800b93a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20000ecc 	.word	0x20000ecc
 800bd1c:	0800c6cc 	.word	0x0800c6cc

0800bd20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	4904      	ldr	r1, [pc, #16]	; (800bd40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd30:	4804      	ldr	r0, [pc, #16]	; (800bd44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd32:	f7ff fe02 	bl	800b93a <USBD_GetString>
  return USBD_StrDesc;
 800bd36:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000ecc 	.word	0x20000ecc
 800bd44:	0800c6e4 	.word	0x0800c6e4

0800bd48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	6039      	str	r1, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	221a      	movs	r2, #26
 800bd58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd5a:	f000 f855 	bl	800be08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd5e:	4b02      	ldr	r3, [pc, #8]	; (800bd68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	20000174 	.word	0x20000174

0800bd6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4907      	ldr	r1, [pc, #28]	; (800bda0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd82:	4808      	ldr	r0, [pc, #32]	; (800bda4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd84:	f7ff fdd9 	bl	800b93a <USBD_GetString>
 800bd88:	e004      	b.n	800bd94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4904      	ldr	r1, [pc, #16]	; (800bda0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd8e:	4805      	ldr	r0, [pc, #20]	; (800bda4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd90:	f7ff fdd3 	bl	800b93a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd94:	4b02      	ldr	r3, [pc, #8]	; (800bda0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000ecc 	.word	0x20000ecc
 800bda4:	0800c6f8 	.word	0x0800c6f8

0800bda8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d105      	bne.n	800bdc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	4907      	ldr	r1, [pc, #28]	; (800bddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdbe:	4808      	ldr	r0, [pc, #32]	; (800bde0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdc0:	f7ff fdbb 	bl	800b93a <USBD_GetString>
 800bdc4:	e004      	b.n	800bdd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4904      	ldr	r1, [pc, #16]	; (800bddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bdca:	4805      	ldr	r0, [pc, #20]	; (800bde0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bdcc:	f7ff fdb5 	bl	800b93a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd0:	4b02      	ldr	r3, [pc, #8]	; (800bddc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20000ecc 	.word	0x20000ecc
 800bde0:	0800c704 	.word	0x0800c704

0800bde4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	220c      	movs	r2, #12
 800bdf4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bdf6:	4b03      	ldr	r3, [pc, #12]	; (800be04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	20000164 	.word	0x20000164

0800be08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be0e:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <Get_SerialNum+0x44>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be14:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <Get_SerialNum+0x48>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be1a:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <Get_SerialNum+0x4c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d009      	beq.n	800be42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be2e:	2208      	movs	r2, #8
 800be30:	4909      	ldr	r1, [pc, #36]	; (800be58 <Get_SerialNum+0x50>)
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 f814 	bl	800be60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be38:	2204      	movs	r2, #4
 800be3a:	4908      	ldr	r1, [pc, #32]	; (800be5c <Get_SerialNum+0x54>)
 800be3c:	68b8      	ldr	r0, [r7, #8]
 800be3e:	f000 f80f 	bl	800be60 <IntToUnicode>
  }
}
 800be42:	bf00      	nop
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	1fff7590 	.word	0x1fff7590
 800be50:	1fff7594 	.word	0x1fff7594
 800be54:	1fff7598 	.word	0x1fff7598
 800be58:	20000176 	.word	0x20000176
 800be5c:	20000186 	.word	0x20000186

0800be60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4613      	mov	r3, r2
 800be6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be72:	2300      	movs	r3, #0
 800be74:	75fb      	strb	r3, [r7, #23]
 800be76:	e027      	b.n	800bec8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	0f1b      	lsrs	r3, r3, #28
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d80b      	bhi.n	800be98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	0f1b      	lsrs	r3, r3, #28
 800be84:	b2da      	uxtb	r2, r3
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	4619      	mov	r1, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	440b      	add	r3, r1
 800be90:	3230      	adds	r2, #48	; 0x30
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	e00a      	b.n	800beae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	0f1b      	lsrs	r3, r3, #28
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	4619      	mov	r1, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	440b      	add	r3, r1
 800bea8:	3237      	adds	r2, #55	; 0x37
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	011b      	lsls	r3, r3, #4
 800beb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	3301      	adds	r3, #1
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	4413      	add	r3, r2
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	3301      	adds	r3, #1
 800bec6:	75fb      	strb	r3, [r7, #23]
 800bec8:	7dfa      	ldrb	r2, [r7, #23]
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	429a      	cmp	r2, r3
 800bece:	d3d3      	bcc.n	800be78 <IntToUnicode+0x18>
  }
}
 800bed0:	bf00      	nop
 800bed2:	bf00      	nop
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b096      	sub	sp, #88	; 0x58
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bee8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800beec:	2200      	movs	r2, #0
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	605a      	str	r2, [r3, #4]
 800bef2:	609a      	str	r2, [r3, #8]
 800bef4:	60da      	str	r2, [r3, #12]
 800bef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bef8:	f107 0310 	add.w	r3, r7, #16
 800befc:	2234      	movs	r2, #52	; 0x34
 800befe:	2100      	movs	r1, #0
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 fbcf 	bl	800c6a4 <memset>
  if(pcdHandle->Instance==USB)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a24      	ldr	r2, [pc, #144]	; (800bf9c <HAL_PCD_MspInit+0xbc>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d141      	bne.n	800bf94 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800bf16:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800bf1a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7f9 ffa3 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bf2c:	f7f5 fcb0 	bl	8001890 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf30:	4b1b      	ldr	r3, [pc, #108]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	4a1a      	ldr	r2, [pc, #104]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf3c:	4b18      	ldr	r3, [pc, #96]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]
 800bf46:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf4e:	2302      	movs	r3, #2
 800bf50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf56:	2303      	movs	r3, #3
 800bf58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bf62:	4619      	mov	r1, r3
 800bf64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf68:	f7f7 f9a8 	bl	80032bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf6c:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf70:	4a0b      	ldr	r2, [pc, #44]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf76:	6593      	str	r3, [r2, #88]	; 0x58
 800bf78:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <HAL_PCD_MspInit+0xc0>)
 800bf7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf80:	60bb      	str	r3, [r7, #8]
 800bf82:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bf84:	2200      	movs	r2, #0
 800bf86:	2100      	movs	r1, #0
 800bf88:	2043      	movs	r0, #67	; 0x43
 800bf8a:	f7f7 f960 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bf8e:	2043      	movs	r0, #67	; 0x43
 800bf90:	f7f7 f979 	bl	8003286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf94:	bf00      	nop
 800bf96:	3758      	adds	r7, #88	; 0x58
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	40006800 	.word	0x40006800
 800bfa0:	40021000 	.word	0x40021000

0800bfa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4610      	mov	r0, r2
 800bfbc:	f7fe fd20 	bl	800aa00 <USBD_LL_SetupStage>
}
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800bfda:	78fa      	ldrb	r2, [r7, #3]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	4619      	mov	r1, r3
 800bff2:	f7fe fd5a 	bl	800aaaa <USBD_LL_DataOutStage>
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800c010:	78fa      	ldrb	r2, [r7, #3]
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	440b      	add	r3, r1
 800c01e:	3340      	adds	r3, #64	; 0x40
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	4619      	mov	r1, r3
 800c026:	f7fe fda3 	bl	800ab70 <USBD_LL_DataInStage>
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe feb7 	bl	800adb4 <USBD_LL_SOF>
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c056:	2301      	movs	r3, #1
 800c058:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d001      	beq.n	800c066 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c062:	f7f5 fc15 	bl	8001890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c06c:	7bfa      	ldrb	r2, [r7, #15]
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fe61 	bl	800ad38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fe fe0d 	bl	800ac9c <USBD_LL_Reset>
}
 800c082:	bf00      	nop
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fe5c 	bl	800ad58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d005      	beq.n	800c0b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0a8:	4b04      	ldr	r3, [pc, #16]	; (800c0bc <HAL_PCD_SuspendCallback+0x30>)
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	4a03      	ldr	r2, [pc, #12]	; (800c0bc <HAL_PCD_SuspendCallback+0x30>)
 800c0ae:	f043 0306 	orr.w	r3, r3, #6
 800c0b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	e000ed00 	.word	0xe000ed00

0800c0c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0d0:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <HAL_PCD_ResumeCallback+0x34>)
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	4a07      	ldr	r2, [pc, #28]	; (800c0f4 <HAL_PCD_ResumeCallback+0x34>)
 800c0d6:	f023 0306 	bic.w	r3, r3, #6
 800c0da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c0dc:	f000 fab6 	bl	800c64c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fe4c 	bl	800ad84 <USBD_LL_Resume>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	e000ed00 	.word	0xe000ed00

0800c0f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c100:	f7f9 f856 	bl	80051b0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c104:	4a2b      	ldr	r2, [pc, #172]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a29      	ldr	r2, [pc, #164]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c110:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c114:	4b27      	ldr	r3, [pc, #156]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c116:	4a28      	ldr	r2, [pc, #160]	; (800c1b8 <USBD_LL_Init+0xc0>)
 800c118:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c11a:	4b26      	ldr	r3, [pc, #152]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c11c:	2208      	movs	r2, #8
 800c11e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c120:	4b24      	ldr	r3, [pc, #144]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c122:	2202      	movs	r2, #2
 800c124:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c126:	4b23      	ldr	r3, [pc, #140]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c128:	2202      	movs	r2, #2
 800c12a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c12c:	4b21      	ldr	r3, [pc, #132]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c12e:	2200      	movs	r2, #0
 800c130:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c132:	4b20      	ldr	r3, [pc, #128]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c134:	2200      	movs	r2, #0
 800c136:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c138:	4b1e      	ldr	r3, [pc, #120]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c13e:	4b1d      	ldr	r3, [pc, #116]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c140:	2200      	movs	r2, #0
 800c142:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c144:	481b      	ldr	r0, [pc, #108]	; (800c1b4 <USBD_LL_Init+0xbc>)
 800c146:	f7f7 fa43 	bl	80035d0 <HAL_PCD_Init>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c150:	f7f5 fb9e 	bl	8001890 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c15a:	2318      	movs	r3, #24
 800c15c:	2200      	movs	r2, #0
 800c15e:	2100      	movs	r1, #0
 800c160:	f7f8 ff53 	bl	800500a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c16a:	2358      	movs	r3, #88	; 0x58
 800c16c:	2200      	movs	r2, #0
 800c16e:	2180      	movs	r1, #128	; 0x80
 800c170:	f7f8 ff4b 	bl	800500a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c17a:	23c0      	movs	r3, #192	; 0xc0
 800c17c:	2200      	movs	r2, #0
 800c17e:	2181      	movs	r1, #129	; 0x81
 800c180:	f7f8 ff43 	bl	800500a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c18a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c18e:	2200      	movs	r2, #0
 800c190:	2101      	movs	r1, #1
 800c192:	f7f8 ff3a 	bl	800500a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c19c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2182      	movs	r1, #130	; 0x82
 800c1a4:	f7f8 ff31 	bl	800500a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200010cc 	.word	0x200010cc
 800c1b8:	40006800 	.word	0x40006800

0800c1bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f7 fb13 	bl	80037fe <HAL_PCD_Start>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d816      	bhi.n	800c210 <USBD_LL_Start+0x54>
 800c1e2:	a201      	add	r2, pc, #4	; (adr r2, 800c1e8 <USBD_LL_Start+0x2c>)
 800c1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e8:	0800c1f9 	.word	0x0800c1f9
 800c1ec:	0800c1ff 	.word	0x0800c1ff
 800c1f0:	0800c205 	.word	0x0800c205
 800c1f4:	0800c20b 	.word	0x0800c20b
    case HAL_OK :
      usb_status = USBD_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fc:	e00b      	b.n	800c216 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1fe:	2303      	movs	r3, #3
 800c200:	73fb      	strb	r3, [r7, #15]
    break;
 800c202:	e008      	b.n	800c216 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c204:	2301      	movs	r3, #1
 800c206:	73fb      	strb	r3, [r7, #15]
    break;
 800c208:	e005      	b.n	800c216 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c20a:	2303      	movs	r3, #3
 800c20c:	73fb      	strb	r3, [r7, #15]
    break;
 800c20e:	e002      	b.n	800c216 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c210:	2303      	movs	r3, #3
 800c212:	73fb      	strb	r3, [r7, #15]
    break;
 800c214:	bf00      	nop
  }
  return usb_status;
 800c216:	7bfb      	ldrb	r3, [r7, #15]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	4608      	mov	r0, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	461a      	mov	r2, r3
 800c22e:	4603      	mov	r3, r0
 800c230:	70fb      	strb	r3, [r7, #3]
 800c232:	460b      	mov	r3, r1
 800c234:	70bb      	strb	r3, [r7, #2]
 800c236:	4613      	mov	r3, r2
 800c238:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c248:	78bb      	ldrb	r3, [r7, #2]
 800c24a:	883a      	ldrh	r2, [r7, #0]
 800c24c:	78f9      	ldrb	r1, [r7, #3]
 800c24e:	f7f7 fc44 	bl	8003ada <HAL_PCD_EP_Open>
 800c252:	4603      	mov	r3, r0
 800c254:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d817      	bhi.n	800c28c <USBD_LL_OpenEP+0x6c>
 800c25c:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <USBD_LL_OpenEP+0x44>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c275 	.word	0x0800c275
 800c268:	0800c27b 	.word	0x0800c27b
 800c26c:	0800c281 	.word	0x0800c281
 800c270:	0800c287 	.word	0x0800c287
    case HAL_OK :
      usb_status = USBD_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	73fb      	strb	r3, [r7, #15]
    break;
 800c278:	e00b      	b.n	800c292 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c27a:	2303      	movs	r3, #3
 800c27c:	73fb      	strb	r3, [r7, #15]
    break;
 800c27e:	e008      	b.n	800c292 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c280:	2301      	movs	r3, #1
 800c282:	73fb      	strb	r3, [r7, #15]
    break;
 800c284:	e005      	b.n	800c292 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	73fb      	strb	r3, [r7, #15]
    break;
 800c28a:	e002      	b.n	800c292 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c28c:	2303      	movs	r3, #3
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	bf00      	nop
  }
  return usb_status;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2b6:	78fa      	ldrb	r2, [r7, #3]
 800c2b8:	4611      	mov	r1, r2
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f7 fc75 	bl	8003baa <HAL_PCD_EP_Close>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d816      	bhi.n	800c2f8 <USBD_LL_CloseEP+0x5c>
 800c2ca:	a201      	add	r2, pc, #4	; (adr r2, 800c2d0 <USBD_LL_CloseEP+0x34>)
 800c2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d0:	0800c2e1 	.word	0x0800c2e1
 800c2d4:	0800c2e7 	.word	0x0800c2e7
 800c2d8:	0800c2ed 	.word	0x0800c2ed
 800c2dc:	0800c2f3 	.word	0x0800c2f3
    case HAL_OK :
      usb_status = USBD_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e4:	e00b      	b.n	800c2fe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ea:	e008      	b.n	800c2fe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f0:	e005      	b.n	800c2fe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f6:	e002      	b.n	800c2fe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c2fc:	bf00      	nop
  }
  return usb_status;
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c322:	78fa      	ldrb	r2, [r7, #3]
 800c324:	4611      	mov	r1, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7f7 fd23 	bl	8003d72 <HAL_PCD_EP_SetStall>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	2b03      	cmp	r3, #3
 800c334:	d816      	bhi.n	800c364 <USBD_LL_StallEP+0x5c>
 800c336:	a201      	add	r2, pc, #4	; (adr r2, 800c33c <USBD_LL_StallEP+0x34>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c34d 	.word	0x0800c34d
 800c340:	0800c353 	.word	0x0800c353
 800c344:	0800c359 	.word	0x0800c359
 800c348:	0800c35f 	.word	0x0800c35f
    case HAL_OK :
      usb_status = USBD_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
    break;
 800c350:	e00b      	b.n	800c36a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c352:	2303      	movs	r3, #3
 800c354:	73fb      	strb	r3, [r7, #15]
    break;
 800c356:	e008      	b.n	800c36a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c358:	2301      	movs	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
    break;
 800c35c:	e005      	b.n	800c36a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c35e:	2303      	movs	r3, #3
 800c360:	73fb      	strb	r3, [r7, #15]
    break;
 800c362:	e002      	b.n	800c36a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c364:	2303      	movs	r3, #3
 800c366:	73fb      	strb	r3, [r7, #15]
    break;
 800c368:	bf00      	nop
  }
  return usb_status;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c38e:	78fa      	ldrb	r2, [r7, #3]
 800c390:	4611      	mov	r1, r2
 800c392:	4618      	mov	r0, r3
 800c394:	f7f7 fd4f 	bl	8003e36 <HAL_PCD_EP_ClrStall>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d816      	bhi.n	800c3d0 <USBD_LL_ClearStallEP+0x5c>
 800c3a2:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <USBD_LL_ClearStallEP+0x34>)
 800c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a8:	0800c3b9 	.word	0x0800c3b9
 800c3ac:	0800c3bf 	.word	0x0800c3bf
 800c3b0:	0800c3c5 	.word	0x0800c3c5
 800c3b4:	0800c3cb 	.word	0x0800c3cb
    case HAL_OK :
      usb_status = USBD_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c3bc:	e00b      	b.n	800c3d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c2:	e008      	b.n	800c3d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c8:	e005      	b.n	800c3d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ce:	e002      	b.n	800c3d6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d4:	bf00      	nop
  }
  return usb_status;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da0c      	bge.n	800c416 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c402:	68f9      	ldr	r1, [r7, #12]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	440b      	add	r3, r1
 800c410:	3306      	adds	r3, #6
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	e00b      	b.n	800c42e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c41c:	68f9      	ldr	r1, [r7, #12]
 800c41e:	4613      	mov	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	4413      	add	r3, r2
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	440b      	add	r3, r1
 800c428:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800c42c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
	...

0800c43c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c456:	78fa      	ldrb	r2, [r7, #3]
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f7 fb18 	bl	8003a90 <HAL_PCD_SetAddress>
 800c460:	4603      	mov	r3, r0
 800c462:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	2b03      	cmp	r3, #3
 800c468:	d816      	bhi.n	800c498 <USBD_LL_SetUSBAddress+0x5c>
 800c46a:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <USBD_LL_SetUSBAddress+0x34>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c481 	.word	0x0800c481
 800c474:	0800c487 	.word	0x0800c487
 800c478:	0800c48d 	.word	0x0800c48d
 800c47c:	0800c493 	.word	0x0800c493
    case HAL_OK :
      usb_status = USBD_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
    break;
 800c484:	e00b      	b.n	800c49e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c486:	2303      	movs	r3, #3
 800c488:	73fb      	strb	r3, [r7, #15]
    break;
 800c48a:	e008      	b.n	800c49e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c48c:	2301      	movs	r3, #1
 800c48e:	73fb      	strb	r3, [r7, #15]
    break;
 800c490:	e005      	b.n	800c49e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c492:	2303      	movs	r3, #3
 800c494:	73fb      	strb	r3, [r7, #15]
    break;
 800c496:	e002      	b.n	800c49e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c498:	2303      	movs	r3, #3
 800c49a:	73fb      	strb	r3, [r7, #15]
    break;
 800c49c:	bf00      	nop
  }
  return usb_status;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4c6:	7af9      	ldrb	r1, [r7, #11]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	f7f7 fc0d 	bl	8003cea <HAL_PCD_EP_Transmit>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c4d4:	7dbb      	ldrb	r3, [r7, #22]
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d816      	bhi.n	800c508 <USBD_LL_Transmit+0x60>
 800c4da:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <USBD_LL_Transmit+0x38>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c4f7 	.word	0x0800c4f7
 800c4e8:	0800c4fd 	.word	0x0800c4fd
 800c4ec:	0800c503 	.word	0x0800c503
    case HAL_OK :
      usb_status = USBD_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	75fb      	strb	r3, [r7, #23]
    break;
 800c4f4:	e00b      	b.n	800c50e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	75fb      	strb	r3, [r7, #23]
    break;
 800c4fa:	e008      	b.n	800c50e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	75fb      	strb	r3, [r7, #23]
    break;
 800c500:	e005      	b.n	800c50e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c502:	2303      	movs	r3, #3
 800c504:	75fb      	strb	r3, [r7, #23]
    break;
 800c506:	e002      	b.n	800c50e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c508:	2303      	movs	r3, #3
 800c50a:	75fb      	strb	r3, [r7, #23]
    break;
 800c50c:	bf00      	nop
  }
  return usb_status;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	607a      	str	r2, [r7, #4]
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	460b      	mov	r3, r1
 800c526:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c536:	7af9      	ldrb	r1, [r7, #11]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	f7f7 fb7f 	bl	8003c3e <HAL_PCD_EP_Receive>
 800c540:	4603      	mov	r3, r0
 800c542:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c544:	7dbb      	ldrb	r3, [r7, #22]
 800c546:	2b03      	cmp	r3, #3
 800c548:	d816      	bhi.n	800c578 <USBD_LL_PrepareReceive+0x60>
 800c54a:	a201      	add	r2, pc, #4	; (adr r2, 800c550 <USBD_LL_PrepareReceive+0x38>)
 800c54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c567 	.word	0x0800c567
 800c558:	0800c56d 	.word	0x0800c56d
 800c55c:	0800c573 	.word	0x0800c573
    case HAL_OK :
      usb_status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	75fb      	strb	r3, [r7, #23]
    break;
 800c564:	e00b      	b.n	800c57e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c566:	2303      	movs	r3, #3
 800c568:	75fb      	strb	r3, [r7, #23]
    break;
 800c56a:	e008      	b.n	800c57e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c56c:	2301      	movs	r3, #1
 800c56e:	75fb      	strb	r3, [r7, #23]
    break;
 800c570:	e005      	b.n	800c57e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c572:	2303      	movs	r3, #3
 800c574:	75fb      	strb	r3, [r7, #23]
    break;
 800c576:	e002      	b.n	800c57e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c578:	2303      	movs	r3, #3
 800c57a:	75fb      	strb	r3, [r7, #23]
    break;
 800c57c:	bf00      	nop
  }
  return usb_status;
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c59a:	78fa      	ldrb	r2, [r7, #3]
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f7 fb8b 	bl	8003cba <HAL_PCD_EP_GetRxCount>
 800c5a4:	4603      	mov	r3, r0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <HAL_PCDEx_LPM_Callback+0x18>
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d013      	beq.n	800c5ee <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c5c6:	e023      	b.n	800c610 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d007      	beq.n	800c5e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c5d0:	f000 f83c 	bl	800c64c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5d4:	4b10      	ldr	r3, [pc, #64]	; (800c618 <HAL_PCDEx_LPM_Callback+0x68>)
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	4a0f      	ldr	r2, [pc, #60]	; (800c618 <HAL_PCDEx_LPM_Callback+0x68>)
 800c5da:	f023 0306 	bic.w	r3, r3, #6
 800c5de:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fbcc 	bl	800ad84 <USBD_LL_Resume>
    break;
 800c5ec:	e010      	b.n	800c610 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fe fbaf 	bl	800ad58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d005      	beq.n	800c60e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <HAL_PCDEx_LPM_Callback+0x68>)
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	4a04      	ldr	r2, [pc, #16]	; (800c618 <HAL_PCDEx_LPM_Callback+0x68>)
 800c608:	f043 0306 	orr.w	r3, r3, #6
 800c60c:	6113      	str	r3, [r2, #16]
    break;
 800c60e:	bf00      	nop
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	e000ed00 	.word	0xe000ed00

0800c61c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c624:	4b03      	ldr	r3, [pc, #12]	; (800c634 <USBD_static_malloc+0x18>)
}
 800c626:	4618      	mov	r0, r3
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	200013c8 	.word	0x200013c8

0800c638 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]

}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800c650:	bf00      	nop
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
	...

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4d0d      	ldr	r5, [pc, #52]	; (800c694 <__libc_init_array+0x38>)
 800c660:	4c0d      	ldr	r4, [pc, #52]	; (800c698 <__libc_init_array+0x3c>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	2600      	movs	r6, #0
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	4d0b      	ldr	r5, [pc, #44]	; (800c69c <__libc_init_array+0x40>)
 800c66e:	4c0c      	ldr	r4, [pc, #48]	; (800c6a0 <__libc_init_array+0x44>)
 800c670:	f000 f820 	bl	800c6b4 <_init>
 800c674:	1b64      	subs	r4, r4, r5
 800c676:	10a4      	asrs	r4, r4, #2
 800c678:	2600      	movs	r6, #0
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800c778 	.word	0x0800c778
 800c698:	0800c778 	.word	0x0800c778
 800c69c:	0800c778 	.word	0x0800c778
 800c6a0:	0800c780 	.word	0x0800c780

0800c6a4 <memset>:
 800c6a4:	4402      	add	r2, r0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d100      	bne.n	800c6ae <memset+0xa>
 800c6ac:	4770      	bx	lr
 800c6ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c6b2:	e7f9      	b.n	800c6a8 <memset+0x4>

0800c6b4 <_init>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr

0800c6c0 <_fini>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr
