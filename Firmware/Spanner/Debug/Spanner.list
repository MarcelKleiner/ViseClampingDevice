
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1c0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800f34c  0800f34c  0001f34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f410  0800f410  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f410  0800f410  0001f410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f418  0800f418  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f418  0800f418  0001f418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f420  0800f420  0001f420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001514  200001f8  0800f61c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000170c  0800f61c  0002170c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bca3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063c3  00000000  00000000  0004becb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00052290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  00054368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dab  00000000  00000000  00056148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b88  00000000  00000000  0007bef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b43  00000000  00000000  000a4a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c7c  00000000  00000000  0016b610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f8 	.word	0x200001f8
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800f334 	.word	0x0800f334

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001fc 	.word	0x200001fc
 80001c8:	0800f334 	.word	0x0800f334

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

#include "stddef.h"

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800f39c 	.word	0x0800f39c

080004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fb50 	bl	8000bb4 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3328      	adds	r3, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	61da      	str	r2, [r3, #28]
		}
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800f3ac 	.word	0x0800f3ac

0800054c <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	705a      	strb	r2, [r3, #1]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	70da      	strb	r2, [r3, #3]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	711a      	strb	r2, [r3, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	715a      	strb	r2, [r3, #5]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	719a      	strb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	71da      	strb	r2, [r3, #7]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	721a      	strb	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	725a      	strb	r2, [r3, #9]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	729a      	strb	r2, [r3, #10]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	72da      	strb	r2, [r3, #11]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2220      	movs	r2, #32
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	805a      	strh	r2, [r3, #2]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	809a      	strh	r2, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	80da      	strh	r2, [r3, #6]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	811a      	strh	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005d6:	815a      	strh	r2, [r3, #10]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2214      	movs	r2, #20
 80005dc:	819a      	strh	r2, [r3, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	81da      	strh	r2, [r3, #14]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80005ea:	821a      	strh	r2, [r3, #16]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80005f2:	825a      	strh	r2, [r3, #18]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2232      	movs	r2, #50	; 0x32
 80005f8:	829a      	strh	r2, [r3, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	82da      	strh	r2, [r3, #22]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000606:	831a      	strh	r2, [r3, #24]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_ZN11DriveStatusC1Ev>:

#define ADC_2_VOLTAGE		2
#define ADC_2_CURRENT		2


class DriveStatus
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	741a      	strb	r2, [r3, #16]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	751a      	strb	r2, [r3, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_ZN7AppMainC1Ev>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

extern ADC_HandleTypeDef hadc1;

AppMain::AppMain()
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	819a      	strh	r2, [r3, #12]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7c 	bl	800054c <_ZN11TaskHandlerC1Ev>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3310      	adds	r3, #16
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fb2b 	bl	8001cb4 <_ZN10RFM95_LoRaC1Ev>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3330      	adds	r3, #48	; 0x30
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	831a      	strh	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3330      	adds	r3, #48	; 0x30
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff97 	bl	80005aa <_ZN13DriveSettingsC1Ev>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	334a      	adds	r3, #74	; 0x4a
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	829a      	strh	r2, [r3, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	334a      	adds	r3, #74	; 0x4a
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffbf 	bl	8000616 <_ZN11DriveStatusC1Ev>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3360      	adds	r3, #96	; 0x60
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f874 	bl	800278a <_ZN12DriveCommandC1Ev>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	334a      	adds	r3, #74	; 0x4a
 80006ac:	4619      	mov	r1, r3
 80006ae:	4610      	mov	r0, r2
 80006b0:	f001 f990 	bl	80019d4 <_ZN7EncoderC1EP11DriveStatus>
 80006b4:	2030      	movs	r0, #48	; 0x30
 80006b6:	f00e fcd6 	bl	800f066 <_Znwj>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461c      	mov	r4, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3310      	adds	r3, #16
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4603      	mov	r3, r0
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff ff09 	bl	80004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	67dc      	str	r4, [r3, #124]	; 0x7c
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3368      	adds	r3, #104	; 0x68
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4623      	mov	r3, r4
 8000702:	f000 ff65 	bl	80015d0 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800070c:	2300      	movs	r3, #0
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <_ZN7AppMainC1Ev+0x138>)
 8000712:	f001 fa69 	bl	8001be8 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800071c:	2300      	movs	r3, #0
 800071e:	2210      	movs	r2, #16
 8000720:	4913      	ldr	r1, [pc, #76]	; (8000770 <_ZN7AppMainC1Ev+0x138>)
 8000722:	f001 fa61 	bl	8001be8 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	334a      	adds	r3, #74	; 0x4a
 8000736:	461a      	mov	r2, r3
 8000738:	f001 f9d4 	bl	8001ae4 <_ZN5ErrorC1EP3LEDP11DriveStatus>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2201      	movs	r2, #1
 8000740:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
{

}
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	48000400 	.word	0x48000400

08000774 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	//Set "self power on" to turn on the external Mosfet.
	HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f005 fae6 	bl	8005d54 <HAL_GPIO_WritePin>
	//turn ext led on
	ledExt.ON();
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	33a0      	adds	r3, #160	; 0xa0
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fa46 	bl	8001c1e <_ZN3LED2ONEv>

	//inti SPI
	HAL_SPI_MspInit(&hspi1);
 8000792:	482d      	ldr	r0, [pc, #180]	; (8000848 <_ZN7AppMain7StartupEv+0xd4>)
 8000794:	f002 fe5c 	bl	8003450 <HAL_SPI_MspInit>

	//init and start Timer
	HAL_TIM_PWM_MspInit(&htim2);	//PWM timer
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <_ZN7AppMain7StartupEv+0xd8>)
 800079a:	f003 f8e7 	bl	800396c <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_MspInit(&htim16);	//task handler timer
 800079e:	482c      	ldr	r0, [pc, #176]	; (8000850 <_ZN7AppMain7StartupEv+0xdc>)
 80007a0:	f003 f902 	bl	80039a8 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim6);	//ADC trigger timer
 80007a4:	482b      	ldr	r0, [pc, #172]	; (8000854 <_ZN7AppMain7StartupEv+0xe0>)
 80007a6:	f003 f8ff 	bl	80039a8 <HAL_TIM_Base_MspInit>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//start PWM CH2
 80007aa:	2104      	movs	r1, #4
 80007ac:	4827      	ldr	r0, [pc, #156]	; (800084c <_ZN7AppMain7StartupEv+0xd8>)
 80007ae:	f008 ff63 	bl	8009678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//start PWM CH1
 80007b2:	2100      	movs	r1, #0
 80007b4:	4825      	ldr	r0, [pc, #148]	; (800084c <_ZN7AppMain7StartupEv+0xd8>)
 80007b6:	f008 ff5f 	bl	8009678 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);				//start task handler in IT mode
 80007ba:	4825      	ldr	r0, [pc, #148]	; (8000850 <_ZN7AppMain7StartupEv+0xdc>)
 80007bc:	f008 feb0 	bl	8009520 <HAL_TIM_Base_Start_IT>

	//init and start ADC
	HAL_ADC_MspInit(&hadc1);
 80007c0:	4825      	ldr	r0, [pc, #148]	; (8000858 <_ZN7AppMain7StartupEv+0xe4>)
 80007c2:	f002 fbf9 	bl	8002fb8 <HAL_ADC_MspInit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	33b8      	adds	r3, #184	; 0xb8
 80007ca:	2202      	movs	r2, #2
 80007cc:	4619      	mov	r1, r3
 80007ce:	4822      	ldr	r0, [pc, #136]	; (8000858 <_ZN7AppMain7StartupEv+0xe4>)
 80007d0:	f003 fdc8 	bl	8004364 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <_ZN7AppMain7StartupEv+0xe0>)
 80007d6:	f008 fea3 	bl	8009520 <HAL_TIM_Base_Start_IT>

	//configure Motor throttle
	TIM2->CCR1 = 6400;
 80007da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007de:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(7000);
 80007e4:	f641 3058 	movw	r0, #7000	; 0x1b58
 80007e8:	f003 fa12 	bl	8003c10 <HAL_Delay>
	TIM2->CCR1 = 3200;
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34

	if (!rfm95.InitRFM())
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3310      	adds	r3, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fe5e 	bl	80024bc <_ZN10RFM95_LoRa7InitRFMEv>
 8000800:	4603      	mov	r3, r0
 8000802:	f083 0301 	eor.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <_ZN7AppMain7StartupEv+0xae>
	{
		driveStatus.setError(DriveStatus::E_COM_ERROR);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	334a      	adds	r3, #74	; 0x4a
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 f94a 	bl	8002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		taskHandler.setDriveTaskEnable(false);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fae9 	bl	8002df4 <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3310      	adds	r3, #16
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc85 	bl	8002138 <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3368      	adds	r3, #104	; 0x68
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f8e6 	bl	8001a04 <_ZN7Encoder4initEv>

	Main();
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f863 	bl	8000904 <_ZN7AppMain4MainEv>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000039c 	.word	0x2000039c
 800084c:	20000450 	.word	0x20000450
 8000850:	200004e8 	.word	0x200004e8
 8000854:	2000049c 	.word	0x2000049c
 8000858:	20000214 	.word	0x20000214

0800085c <_ZN7AppMain5ResetEv>:

int startupCounter = 50;

void AppMain::Reset()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	taskHandler.setAdcUpdateTaskEnable(true);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f002 faa5 	bl	8002db8 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>
	taskHandler.setComTaskEnable(true);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2101      	movs	r1, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f002 faaf 	bl	8002dd6 <_ZN11TaskHandler16setComTaskEnableEb>
	taskHandler.setDriveTaskEnable(true);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fab9 	bl	8002df4 <_ZN11TaskHandler18setDriveTaskEnableEb>
	taskHandler.setErrorTaskEnable(true);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fac3 	bl	8002e12 <_ZN11TaskHandler18setErrorTaskEnableEb>
	taskHandler.setIoUpdateTaskEnable(true);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f002 facd 	bl	8002e30 <_ZN11TaskHandler21setIoUpdateTaskEnableEb>

	TIM2->CCR1 = 3600;
 8000896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800089a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800089e:	635a      	str	r2, [r3, #52]	; 0x34

	driveCommand.setTeach(false);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3360      	adds	r3, #96	; 0x60
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f813 	bl	80028d2 <_ZN12DriveCommand8setTeachEb>
	driveCommand.setClose(false);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3360      	adds	r3, #96	; 0x60
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ff92 	bl	80027dc <_ZN12DriveCommand8setCloseEb>
	driveCommand.setOpen(false);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3360      	adds	r3, #96	; 0x60
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 ffa7 	bl	8002812 <_ZN12DriveCommand7setOpenEb>
	driveCommand.setEnable(false);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3360      	adds	r3, #96	; 0x60
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 ffbc 	bl	8002848 <_ZN12DriveCommand9setEnableEb>
	driveCommand.setStop(false);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3360      	adds	r3, #96	; 0x60
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 ffec 	bl	80028b4 <_ZN12DriveCommand7setStopEb>
	driveCommand.setReset(false);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3360      	adds	r3, #96	; 0x60
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ffcb 	bl	800287e <_ZN12DriveCommand8setResetEb>

	driveStatus.setError(DriveStatus::E_NO_ERROR);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	334a      	adds	r3, #74	; 0x4a
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f8dc 	bl	8002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>
	comLoseCounter = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fa6f 	bl	8002df4 <_ZN11TaskHandler18setDriveTaskEnableEb>

	while (1)
	{
		//Reset task
		if (driveCommand.isReset())
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3360      	adds	r3, #96	; 0x60
 800091a:	4618      	mov	r0, r3
 800091c:	f001 ffa3 	bl	8002866 <_ZN12DriveCommand7isResetEv>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <_ZN7AppMain4MainEv+0x28>
		{
			Reset();
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ff98 	bl	800085c <_ZN7AppMain5ResetEv>
		}


		//RFM Communication task
		if (taskHandler.isComTask())
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f9de 	bl	8002cf0 <_ZN11TaskHandler9isComTaskEv>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d039      	beq.n	80009ae <_ZN7AppMain4MainEv+0xaa>
		{
			if (!rfm95COM->Receive())
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3304      	adds	r3, #4
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	4798      	blx	r3
 800094e:	4603      	mov	r3, r0
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00d      	beq.n	8000976 <_ZN7AppMain4MainEv+0x72>
			{
				comLoseCounter++;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8000960:	3301      	adds	r3, #1
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
				drive.Stop();
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3380      	adds	r3, #128	; 0x80
 800096e:	4618      	mov	r0, r3
 8000970:	f000 ff2b 	bl	80017ca <_ZN5Drive4StopEv>
 8000974:	e003      	b.n	800097e <_ZN7AppMain4MainEv+0x7a>
			}
			else
			{
				comLoseCounter = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
			}

			if (comLoseCounter == (driveSettings.getSelfShutdownDelay() * 4))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8000984:	461c      	mov	r4, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3330      	adds	r3, #48	; 0x30
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fe76 	bl	800267c <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000990:	4603      	mov	r3, r0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	429c      	cmp	r4, r3
 8000996:	bf0c      	ite	eq
 8000998:	2301      	moveq	r3, #1
 800099a:	2300      	movne	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <_ZN7AppMain4MainEv+0xaa>
			{
				//Self-shutdown when the delay time for self-shutdown has elapsed
				HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f005 f9d3 	bl	8005d54 <HAL_GPIO_WritePin>
			}
		}

		//Drive Task
		if (taskHandler.isDriveTask())
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f9b6 	bl	8002d22 <_ZN11TaskHandler11isDriveTaskEv>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d009      	beq.n	80009d0 <_ZN7AppMain4MainEv+0xcc>
		{
			encoder.update();
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3368      	adds	r3, #104	; 0x68
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f84b 	bl	8001a5c <_ZN7Encoder6updateEv>
			drive.updateDrive();
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3380      	adds	r3, #128	; 0x80
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fe23 	bl	8001616 <_ZN5Drive11updateDriveEv>
		}

		//Error Task
		if (taskHandler.isErrorTask())
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f9be 	bl	8002d54 <_ZN11TaskHandler11isErrorTaskEv>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d054      	beq.n	8000a88 <_ZN7AppMain4MainEv+0x184>
		{
			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageWarning()){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	334a      	adds	r3, #74	; 0x4a
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 f8ce 	bl	8002b84 <_ZNK11DriveStatus10getVoltageEv>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461c      	mov	r4, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3330      	adds	r3, #48	; 0x30
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 feaf 	bl	8002754 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80009f6:	4603      	mov	r3, r0
 80009f8:	429c      	cmp	r4, r3
 80009fa:	bf34      	ite	cc
 80009fc:	2301      	movcc	r3, #1
 80009fe:	2300      	movcs	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <_ZN7AppMain4MainEv+0x10e>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_WARNING);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	334a      	adds	r3, #74	; 0x4a
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f84d 	bl	8002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageError()){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	334a      	adds	r3, #74	; 0x4a
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 f8b4 	bl	8002b84 <_ZNK11DriveStatus10getVoltageEv>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461c      	mov	r4, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3330      	adds	r3, #48	; 0x30
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fe7a 	bl	800271e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	bf34      	ite	cc
 8000a30:	2301      	movcc	r3, #1
 8000a32:	2300      	movcs	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d005      	beq.n	8000a46 <_ZN7AppMain4MainEv+0x142>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_ERROR);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	334a      	adds	r3, #74	; 0x4a
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f833 	bl	8002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}



			if (driveStatus.getError() != DriveStatus::E_NO_ERROR)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	334a      	adds	r3, #74	; 0x4a
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 f822 	bl	8002a94 <_ZN11DriveStatus8getErrorEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d013      	beq.n	8000a88 <_ZN7AppMain4MainEv+0x184>
			{
				drive.Stop();
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3380      	adds	r3, #128	; 0x80
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 feb0 	bl	80017ca <_ZN5Drive4StopEv>
				taskHandler.setDriveTaskEnable(false);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 f9c0 	bl	8002df4 <_ZN11TaskHandler18setDriveTaskEnableEb>
				taskHandler.setLEDTaskEnable(false);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 f9e8 	bl	8002e4e <_ZN11TaskHandler16setLEDTaskEnableEb>
				error.error2LED();
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	33a8      	adds	r3, #168	; 0xa8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f844 	bl	8001b10 <_ZN5Error9error2LEDEv>
			}
		}


		if (taskHandler.isLEDTask())
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f97b 	bl	8002d86 <_ZN11TaskHandler9isLEDTaskEv>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f43f af3f 	beq.w	8000916 <_ZN7AppMain4MainEv+0x12>
		{
			led.Toggle();
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3398      	adds	r3, #152	; 0x98
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f8f8 	bl	8001c92 <_ZN3LED6ToggleEv>
		if (driveCommand.isReset())
 8000aa2:	e738      	b.n	8000916 <_ZN7AppMain4MainEv+0x12>

08000aa4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>:




void AppMain::ADCRead(ADC_HandleTypeDef *hadc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    currentSum = currentSum - currentArray[staticCounter] + adc1Buffer[0];
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	335c      	adds	r3, #92	; 0x5c
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	440b      	add	r3, r1
 8000ac2:	889b      	ldrh	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    currentArray[staticCounter] = adc1Buffer[0];
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000ae4:	b291      	uxth	r1, r2
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	335c      	adds	r3, #92	; 0x5c
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	460a      	mov	r2, r1
 8000af0:	809a      	strh	r2, [r3, #4]

    voltageSum = voltageSum - voltageArray[staticCounter] + adc1Buffer[1];
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	3360      	adds	r3, #96	; 0x60
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	440b      	add	r3, r1
 8000b06:	88db      	ldrh	r3, [r3, #6]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	f8b2 20ba 	ldrh.w	r2, [r2, #186]	; 0xba
 8000b10:	b212      	sxth	r2, r2
 8000b12:	441a      	add	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    voltageArray[staticCounter] = adc1Buffer[1];
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b28:	b291      	uxth	r1, r2
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	3360      	adds	r3, #96	; 0x60
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	460a      	mov	r2, r1
 8000b34:	80da      	strh	r2, [r3, #6]


    if (staticCounter == MEAN_VALUE_SIZE-1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d104      	bne.n	8000b4a <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xa6>
    {
        staticCounter = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8000b48:	e007      	b.n	8000b5a <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb6>
    }
    else
    {
        staticCounter++;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
    }


	driveStatus.setCurrent(currentSum/MEAN_VALUE_SIZE);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000b66:	4911      	ldr	r1, [pc, #68]	; (8000bac <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000b68:	fba1 1303 	umull	r1, r3, r1, r3
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f001 fff7 	bl	8002b66 <_ZN11DriveStatus10setCurrentEt>
	driveStatus.setVoltage(voltageSum/MEAN_VALUE_SIZE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b84:	4909      	ldr	r1, [pc, #36]	; (8000bac <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000b86:	fba1 1303 	umull	r1, r3, r1, r3
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4610      	mov	r0, r2
 8000b92:	f002 f805 	bl	8002ba0 <_ZN11DriveStatus10setVoltageEt>

	//restart ADC DMA Conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	33b8      	adds	r3, #184	; 0xb8
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x10c>)
 8000ba0:	f003 fbe0 	bl	8004364 <HAL_ADC_Start_DMA>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	cccccccd 	.word	0xcccccccd
 8000bb0:	20000214 	.word	0x20000214

08000bb4 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:

#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	609a      	str	r2, [r3, #8]
}
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	221f      	movs	r2, #31
 8000bf4:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fcc6 	bl	800258c <_ZNK13DriveSettings16getDeviceAddressEv>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2212      	movs	r2, #18
 8000c0c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	78fa      	ldrb	r2, [r7, #3]
 8000c12:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	3b10      	subs	r3, #16
 8000c18:	2b10      	cmp	r3, #16
 8000c1a:	f200 80d3 	bhi.w	8000dc4 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c69 	.word	0x08000c69
 8000c28:	08000c87 	.word	0x08000c87
 8000c2c:	08000ca5 	.word	0x08000ca5
 8000c30:	08000cc3 	.word	0x08000cc3
 8000c34:	08000ce1 	.word	0x08000ce1
 8000c38:	08000cff 	.word	0x08000cff
 8000c3c:	08000d1b 	.word	0x08000d1b
 8000c40:	08000d39 	.word	0x08000d39
 8000c44:	08000d57 	.word	0x08000d57
 8000c48:	08000d75 	.word	0x08000d75
 8000c4c:	08000d93 	.word	0x08000d93
 8000c50:	08000dc5 	.word	0x08000dc5
 8000c54:	08000dc5 	.word	0x08000dc5
 8000c58:	08000dc5 	.word	0x08000dc5
 8000c5c:	08000dc5 	.word	0x08000dc5
 8000c60:	08000dc5 	.word	0x08000dc5
 8000c64:	08000db1 	.word	0x08000db1
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fd38 	bl	80026e8 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f002 f8f4 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c84:	e0a2      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fd0e 	bl	80026b2 <_ZNK13DriveSettings13getTeachSpeedEv>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f002 f8e5 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ca2:	e093      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fc51 	bl	8002556 <_ZNK13DriveSettings17getClampingTorqueEv>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f002 f8d6 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cc0:	e084      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fc27 	bl	8002520 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f002 f8c7 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cde:	e075      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fcc6 	bl	800267c <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f002 f8b8 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cfc:	e066      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fc4b 	bl	80025a4 <_ZNK13DriveSettings12getInPosDiffEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2204      	movs	r2, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4620      	mov	r0, r4
 8000d16:	f002 f8a9 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fc58 	bl	80025da <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4620      	mov	r0, r4
 8000d32:	f002 f89b 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d36:	e049      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fd06 	bl	8002754 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f002 f88c 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d54:	e03a      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fcdc 	bl	800271e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f002 f87d 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d72:	e02b      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fc46 	bl	8002610 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2204      	movs	r2, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f002 f86e 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d90:	e01c      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fc52 	bl	8002646 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2204      	movs	r2, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4620      	mov	r0, r4
 8000daa:	f002 f85f 	bl	8002e6c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000dae:	e00d      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fbe9 	bl	800258c <_ZNK13DriveSettings16getDeviceAddressEv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	741a      	strb	r2, [r3, #16]
			break;
 8000dc2:	e003      	b.n	8000dcc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	221d      	movs	r2, #29
 8000dc8:	735a      	strb	r2, [r3, #13]
			break;
 8000dca:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	330c      	adds	r3, #12
 8000dd0:	2206      	movs	r2, #6
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 faa3 	bl	8001320 <_ZN7BaseCOM4CRC8EPhh>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	330c      	adds	r3, #12
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop

08000df0 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	221f      	movs	r2, #31
 8000e00:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fbc0 	bl	800258c <_ZNK13DriveSettings16getDeviceAddressEv>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2213      	movs	r2, #19
 8000e18:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d864      	bhi.n	8000ef2 <_ZN7BaseCOM9GetStatusEh+0x102>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e55 	.word	0x08000e55
 8000e34:	08000e69 	.word	0x08000e69
 8000e38:	08000e7d 	.word	0x08000e7d
 8000e3c:	08000e91 	.word	0x08000e91
 8000e40:	08000ea5 	.word	0x08000ea5
 8000e44:	08000ef3 	.word	0x08000ef3
 8000e48:	08000eb9 	.word	0x08000eb9
 8000e4c:	08000ecd 	.word	0x08000ecd
 8000e50:	08000ee1 	.word	0x08000ee1
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fd49 	bl	80028f0 <_ZN11DriveStatus7isCloseEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	741a      	strb	r2, [r3, #16]
			break;
 8000e66:	e048      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fd62 	bl	8002936 <_ZN11DriveStatus6isOpenEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	741a      	strb	r2, [r3, #16]
			break;
 8000e7a:	e03e      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fde4 	bl	8002a4e <_ZN11DriveStatus7isTeachEv>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	741a      	strb	r2, [r3, #16]
			break;
 8000e8e:	e034      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fd94 	bl	80029c2 <_ZN11DriveStatus7isResetEv>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	741a      	strb	r2, [r3, #16]
			break;
 8000ea2:	e02a      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fd67 	bl	800297c <_ZN11DriveStatus8isEnableEv>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	741a      	strb	r2, [r3, #16]
			break;
 8000eb6:	e020      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fda3 	bl	8002a08 <_ZN11DriveStatus6isStopEv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	741a      	strb	r2, [r3, #16]
			break;
 8000eca:	e016      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fddf 	bl	8002a94 <_ZN11DriveStatus8getErrorEv>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	741a      	strb	r2, [r3, #16]
			break;
 8000ede:	e00c      	b.n	8000efa <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fdf5 	bl	8002ad4 <_ZNK11DriveStatus9getStatusEv>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	221d      	movs	r2, #29
 8000ef6:	731a      	strb	r2, [r3, #12]
			break;
 8000ef8:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	330c      	adds	r3, #12
 8000efe:	2206      	movs	r2, #6
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 fa0c 	bl	8001320 <_ZN7BaseCOM4CRC8EPhh>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	330c      	adds	r3, #12
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZN7BaseCOM11SetSettingsEPh>:
}



void BaseCOM::SetSettings(uint8_t *data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3b10      	subs	r3, #16
 8000f32:	2b0a      	cmp	r3, #10
 8000f34:	f200 80f6 	bhi.w	8001124 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f6d 	.word	0x08000f6d
 8000f44:	08000f95 	.word	0x08000f95
 8000f48:	08000fbd 	.word	0x08000fbd
 8000f4c:	08000fe5 	.word	0x08000fe5
 8000f50:	080010ad 	.word	0x080010ad
 8000f54:	0800100d 	.word	0x0800100d
 8000f58:	08001035 	.word	0x08001035
 8000f5c:	080010d5 	.word	0x080010d5
 8000f60:	080010fd 	.word	0x080010fd
 8000f64:	0800105d 	.word	0x0800105d
 8000f68:	08001085 	.word	0x08001085
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	3305      	adds	r3, #5
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	89fa      	ldrh	r2, [r7, #14]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fbb7 	bl	8002700 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f92:	e0c8      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3305      	adds	r3, #5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	89fa      	ldrh	r2, [r7, #14]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fb88 	bl	80026ca <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000fba:	e0b4      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	89fa      	ldrh	r2, [r7, #14]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fac6 	bl	800256e <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fe2:	e0a0      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3305      	adds	r3, #5
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	01db      	lsls	r3, r3, #7
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fa97 	bl	8002538 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 800100a:	e08c      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	3305      	adds	r3, #5
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	b21a      	sxth	r2, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3304      	adds	r3, #4
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	89fa      	ldrh	r2, [r7, #14]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fac5 	bl	80025bc <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001032:	e078      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3305      	adds	r3, #5
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	b21a      	sxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	89fa      	ldrh	r2, [r7, #14]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 facc 	bl	80025f2 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800105a:	e064      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3305      	adds	r3, #5
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	b21a      	sxth	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3304      	adds	r3, #4
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	89fa      	ldrh	r2, [r7, #14]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fad3 	bl	8002628 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8001082:	e050      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3305      	adds	r3, #5
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	b21a      	sxth	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3304      	adds	r3, #4
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fada 	bl	800265e <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 80010aa:	e03c      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3305      	adds	r3, #5
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	89fa      	ldrh	r2, [r7, #14]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fae1 	bl	8002694 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010d2:	e028      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3305      	adds	r3, #5
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	01db      	lsls	r3, r3, #7
 80010dc:	b21a      	sxth	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	89fa      	ldrh	r2, [r7, #14]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fb39 	bl	800276c <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010fa:	e014      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3305      	adds	r3, #5
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	01db      	lsls	r3, r3, #7
 8001104:	b21a      	sxth	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3304      	adds	r3, #4
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	89fa      	ldrh	r2, [r7, #14]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fb0a 	bl	8002736 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8001122:	e000      	b.n	8001126 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8001124:	bf00      	nop
	}
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop

08001130 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3303      	adds	r3, #3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	2b06      	cmp	r3, #6
 8001144:	d86a      	bhi.n	800121c <_ZN7BaseCOM9SetStatusEPh+0xec>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	08001169 	.word	0x08001169
 8001150:	08001187 	.word	0x08001187
 8001154:	080011a5 	.word	0x080011a5
 8001158:	080011c3 	.word	0x080011c3
 800115c:	080011e1 	.word	0x080011e1
 8001160:	0800121d 	.word	0x0800121d
 8001164:	080011ff 	.word	0x080011ff
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	4610      	mov	r0, r2
 8001180:	f001 fbc2 	bl	8002908 <_ZN11DriveStatus8setCloseEb>
			break;
 8001184:	e04b      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3304      	adds	r3, #4
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f001 fbd6 	bl	800294e <_ZN11DriveStatus7setOpenEb>
			break;
 80011a2:	e03c      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f001 fc53 	bl	8002a66 <_ZN11DriveStatus8setTeachEb>
			break;
 80011c0:	e02d      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f001 fbfe 	bl	80029da <_ZN11DriveStatus8setResetEb>
			break;
 80011de:	e01e      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f001 fbcc 	bl	8002994 <_ZN11DriveStatus9setEnableEb>
			break;
 80011fc:	e00f      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 fc03 	bl	8002a20 <_ZN11DriveStatus7setStopEb>
			break;
 800121a:	e000      	b.n	800121e <_ZN7BaseCOM9SetStatusEPh+0xee>
		default:
			break;
 800121c:	bf00      	nop
	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop

08001228 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3303      	adds	r3, #3
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	2b06      	cmp	r3, #6
 800123c:	d86a      	bhi.n	8001314 <_ZN7BaseCOM10SetCommandEPh+0xec>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001261 	.word	0x08001261
 8001248:	0800127f 	.word	0x0800127f
 800124c:	0800129d 	.word	0x0800129d
 8001250:	080012bb 	.word	0x080012bb
 8001254:	080012d9 	.word	0x080012d9
 8001258:	08001315 	.word	0x08001315
 800125c:	080012f7 	.word	0x080012f7
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f001 fab0 	bl	80027dc <_ZN12DriveCommand8setCloseEb>
			break;
 800127c:	e04b      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3304      	adds	r3, #4
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	4610      	mov	r0, r2
 8001296:	f001 fabc 	bl	8002812 <_ZN12DriveCommand7setOpenEb>
			break;
 800129a:	e03c      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	3304      	adds	r3, #4
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f001 fb0d 	bl	80028d2 <_ZN12DriveCommand8setTeachEb>
			break;
 80012b8:	e02d      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3304      	adds	r3, #4
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f001 fad4 	bl	800287e <_ZN12DriveCommand8setResetEb>
			break;
 80012d6:	e01e      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3304      	adds	r3, #4
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f001 faaa 	bl	8002848 <_ZN12DriveCommand9setEnableEb>
			break;
 80012f4:	e00f      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3304      	adds	r3, #4
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f001 fad1 	bl	80028b4 <_ZN12DriveCommand7setStopEb>
			break;
 8001312:	e000      	b.n	8001316 <_ZN7BaseCOM10SetCommandEPh+0xee>
		default:
			break;
 8001314:	bf00      	nop
	}
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop

08001320 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	429a      	cmp	r2, r3
 800133c:	d222      	bcs.n	8001384 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	4413      	add	r3, r2
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	7ffb      	ldrb	r3, [r7, #31]
 8001348:	4053      	eors	r3, r2
 800134a:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d812      	bhi.n	800137c <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001356:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da07      	bge.n	800136e <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b25b      	sxtb	r3, r3
 8001364:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001368:	b25b      	sxtb	r3, r3
 800136a:	77fb      	strb	r3, [r7, #31]
 800136c:	e002      	b.n	8001374 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e7e9      	b.n	8001350 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	3301      	adds	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e7d8      	b.n	8001336 <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001384:	7ffb      	ldrb	r3, [r7, #31]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	4613      	mov	r3, r2
 800139e:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e015      	b.n	80013d6 <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fd66 	bl	8001e82 <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, 7);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6998      	ldr	r0, [r3, #24]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2207      	movs	r2, #7
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	4798      	blx	r3
	rfm95->endPacket();
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fd78 	bl	8001ec4 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	4613      	mov	r3, r2
 80013ec:	71fb      	strb	r3, [r7, #7]

	uint8_t* txDataTemp;

	uint8_t rxData[7];

	uint8_t packetSize = rfm95->parsePacket();
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fd87 	bl	8001f08 <_ZN10RFM95_LoRa11parsePacketEi>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 8001400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80dd 	beq.w	80015c4 <_ZN8RFM95Com7ReceiveEPhh+0x1e4>
	{
		uint8_t counter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4610      	mov	r0, r2
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01c      	beq.n	800146c <_ZN8RFM95Com7ReceiveEPhh+0x8c>
		{
			rxData[counter] = rfm95->read();
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	330c      	adds	r3, #12
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4610      	mov	r0, r2
 8001442:	4798      	blx	r3
 8001444:	4602      	mov	r2, r0
 8001446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	3328      	adds	r3, #40	; 0x28
 800144e:	443b      	add	r3, r7
 8001450:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001458:	2b07      	cmp	r3, #7
 800145a:	d901      	bls.n	8001460 <_ZN8RFM95Com7ReceiveEPhh+0x80>
			{
				return false;
 800145c:	2300      	movs	r3, #0
 800145e:	e0b2      	b.n	80015c6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
			}
			counter++;
 8001460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001464:	3301      	adds	r3, #1
 8001466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 800146a:	e7d1      	b.n	8001410 <_ZN8RFM95Com7ReceiveEPhh+0x30>
		}

		//check CRC
		if (CRC8(rxData, 6) != rxData[6])
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3304      	adds	r3, #4
 8001470:	f107 0118 	add.w	r1, r7, #24
 8001474:	2206      	movs	r2, #6
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff52 	bl	8001320 <_ZN7BaseCOM4CRC8EPhh>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	429a      	cmp	r2, r3
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <_ZN8RFM95Com7ReceiveEPhh+0xc0>
		{
			//error crc
			driveStatus->setError(DriveStatus::E_CRC_ERROR);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2140      	movs	r1, #64	; 0x40
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fb08 	bl	8002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			return false;
 800149c:	2300      	movs	r3, #0
 800149e:	e092      	b.n	80015c6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
		}

		uint8_t txData[] =
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f8c3 2003 	str.w	r2, [r3, #3]
 80014ac:	231f      	movs	r3, #31
 80014ae:	743b      	strb	r3, [r7, #16]
 80014b0:	2301      	movs	r3, #1
 80014b2:	753b      	strb	r3, [r7, #20]
 80014b4:	2301      	movs	r3, #1
 80014b6:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f865 	bl	800258c <_ZNK13DriveSettings16getDeviceAddressEv>
 80014c2:	4603      	mov	r3, r0
				rxData[2],
				rxData[3],
				0x01,
				0x01,
				0x00
		};
 80014c4:	747b      	strb	r3, [r7, #17]
				rxData[2],
 80014c6:	7ebb      	ldrb	r3, [r7, #26]
		};
 80014c8:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 80014ca:	7efb      	ldrb	r3, [r7, #27]
		};
 80014cc:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3304      	adds	r3, #4
 80014d2:	f107 0110 	add.w	r1, r7, #16
 80014d6:	2206      	movs	r2, #6
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff21 	bl	8001320 <_ZN7BaseCOM4CRC8EPhh>
 80014de:	4603      	mov	r3, r0
 80014e0:	75bb      	strb	r3, [r7, #22]

		switch (rxData[2])
 80014e2:	7ebb      	ldrb	r3, [r7, #26]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	2b12      	cmp	r3, #18
 80014e8:	d85e      	bhi.n	80015a8 <_ZN8RFM95Com7ReceiveEPhh+0x1c8>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <_ZN8RFM95Com7ReceiveEPhh+0x110>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	0800153d 	.word	0x0800153d
 80014f4:	08001555 	.word	0x08001555
 80014f8:	0800156d 	.word	0x0800156d
 80014fc:	080015a9 	.word	0x080015a9
 8001500:	080015a9 	.word	0x080015a9
 8001504:	080015a9 	.word	0x080015a9
 8001508:	080015a9 	.word	0x080015a9
 800150c:	080015a9 	.word	0x080015a9
 8001510:	080015a9 	.word	0x080015a9
 8001514:	080015a9 	.word	0x080015a9
 8001518:	080015a9 	.word	0x080015a9
 800151c:	080015a9 	.word	0x080015a9
 8001520:	080015a9 	.word	0x080015a9
 8001524:	080015a9 	.word	0x080015a9
 8001528:	080015a9 	.word	0x080015a9
 800152c:	080015a9 	.word	0x080015a9
 8001530:	08001585 	.word	0x08001585
 8001534:	080015a9 	.word	0x080015a9
 8001538:	08001597 	.word	0x08001597
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3304      	adds	r3, #4
 8001540:	f107 0218 	add.w	r2, r7, #24
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fce8 	bl	8000f1c <_ZN7BaseCOM11SetSettingsEPh>
				txDataTemp = txData;
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001552:	e02e      	b.n	80015b2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3304      	adds	r3, #4
 8001558:	f107 0218 	add.w	r2, r7, #24
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe62 	bl	8001228 <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800156a:	e022      	b.n	80015b2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case SEND_STATUS:
				this->SetStatus(rxData);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3304      	adds	r3, #4
 8001570:	f107 0218 	add.w	r2, r7, #24
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fdda 	bl	8001130 <_ZN7BaseCOM9SetStatusEPh>
				txDataTemp = txData;
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001582:	e016      	b.n	80015b2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3304      	adds	r3, #4
 8001588:	7efa      	ldrb	r2, [r7, #27]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb29 	bl	8000be4 <_ZN7BaseCOM11GetSettingsEh>
 8001592:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 8001594:	e00d      	b.n	80015b2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	7efa      	ldrb	r2, [r7, #27]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc26 	bl	8000df0 <_ZN7BaseCOM9GetStatusEh>
 80015a4:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80015a6:	e004      	b.n	80015b2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			default:
				//not sported command
				txData[4] = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	757b      	strb	r3, [r7, #21]
				break;
 80015b0:	bf00      	nop
		}


		Transmitt(txDataTemp , 7);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2207      	movs	r2, #7
 80015ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	4798      	blx	r3
		return true;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
	}
	return false;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop

080015d0 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>:
 *      Author: marce
 */

#include "Drive.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus,DriveCommand *driveCommand, Encoder *encoder)
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	745a      	strb	r2, [r3, #17]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	74da      	strb	r2, [r3, #19]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	751a      	strb	r2, [r3, #20]
{
	this->driveSettings = driveSettings;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
}
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_ZN5Drive11updateDriveEv>:



void Drive::updateDrive()
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	if(!driveCommand->isEnable() || driveCommand->isStop()){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4618      	mov	r0, r3
 8001624:	f001 f904 	bl	8002830 <_ZN12DriveCommand8isEnableEv>
 8001628:	4603      	mov	r3, r0
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <_ZN5Drive11updateDriveEv+0x2e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4618      	mov	r0, r3
 800163a:	f001 f92f 	bl	800289c <_ZN12DriveCommand6isStopEv>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <_ZN5Drive11updateDriveEv+0x32>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <_ZN5Drive11updateDriveEv+0x34>
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <_ZN5Drive11updateDriveEv+0x40>
		Stop();
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8bb 	bl	80017ca <_ZN5Drive4StopEv>
		return;
 8001654:	e010      	b.n	8001678 <_ZN5Drive11updateDriveEv+0x62>
	}

	switch (driveMode)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7c1b      	ldrb	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <_ZN5Drive11updateDriveEv+0x54>
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <_ZN5Drive11updateDriveEv+0x5a>
	{
		case Drive::OP_MODE:
			OpMode();
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f80b 	bl	800167e <_ZN5Drive6OpModeEv>
			break;
 8001668:	e006      	b.n	8001678 <_ZN5Drive11updateDriveEv+0x62>
		case Drive::TEACH_MODE:
			TeachMode();
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8bc 	bl	80017e8 <_ZN5Drive9TeachModeEv>
		default:
			Stop();
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f8aa 	bl	80017ca <_ZN5Drive4StopEv>
			break;
 8001676:	bf00      	nop
	}
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	if (driveCommand->isClose())
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4618      	mov	r0, r3
 800168c:	f001 f89a 	bl	80027c4 <_ZN12DriveCommand7isCloseEv>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <_ZN5Drive6OpModeEv+0x20>
	{
		Close();
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f810 	bl	80016bc <_ZN5Drive5CloseEv>
	}
	else if (driveCommand->isOpen())
	{
		Open();
	}
}
 800169c:	e00a      	b.n	80016b4 <_ZN5Drive6OpModeEv+0x36>
	else if (driveCommand->isOpen())
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 f8a9 	bl	80027fa <_ZN12DriveCommand6isOpenEv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <_ZN5Drive6OpModeEv+0x36>
		Open();
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f82d 	bl	800170e <_ZN5Drive4OpenEv>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZN5Drive5CloseEv>:


void Drive::Close(){
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if(MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed()))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 ff44 	bl	8002556 <_ZNK13DriveSettings17getClampingTorqueEv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff22 	bl	8002520 <_ZNK13DriveSettings16getClampingSpeedEv>
 80016dc:	4603      	mov	r3, r0
 80016de:	4622      	mov	r2, r4
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f932 	bl	800194c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <_ZN5Drive5CloseEv+0x4a>
	{
		driveStatus->setInPos(true);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fa7e 	bl	8002bf6 <_ZN11DriveStatus8setInPosEb>
		driveCommand->setClose(false);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f001 f86b 	bl	80027dc <_ZN12DriveCommand8setCloseEb>
	}
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bd90      	pop	{r4, r7, pc}

0800170e <_ZN5Drive4OpenEv>:

void Drive::Open(){
 800170e:	b590      	push	{r4, r7, lr}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]

	auto posOut = driveSettings->getOpeningDistance() + driveSettings->getInPosDiff();
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 ff5d 	bl	80025da <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001720:	4603      	mov	r3, r0
 8001722:	461c      	mov	r4, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 ff3b 	bl	80025a4 <_ZNK13DriveSettings12getInPosDiffEv>
 800172e:	4603      	mov	r3, r0
 8001730:	4423      	add	r3, r4
 8001732:	60fb      	str	r3, [r7, #12]
	auto posIn = driveSettings->getOpeningDistance() - driveSettings->getInPosDiff();
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 ff4e 	bl	80025da <_ZNK13DriveSettings18getOpeningDistanceEv>
 800173e:	4603      	mov	r3, r0
 8001740:	461c      	mov	r4, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 ff2c 	bl	80025a4 <_ZNK13DriveSettings12getInPosDiffEv>
 800174c:	4603      	mov	r3, r0
 800174e:	1ae3      	subs	r3, r4, r3
 8001750:	60bb      	str	r3, [r7, #8]


	if(driveStatus->getPosition() >= posOut && driveStatus->getPosition() < posIn)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fa32 	bl	8002bc0 <_ZNK11DriveStatus11getPositionEv>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4293      	cmp	r3, r2
 8001764:	dc0b      	bgt.n	800177e <_ZN5Drive4OpenEv+0x70>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fa28 	bl	8002bc0 <_ZNK11DriveStatus11getPositionEv>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4293      	cmp	r3, r2
 8001778:	dd01      	ble.n	800177e <_ZN5Drive4OpenEv+0x70>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <_ZN5Drive4OpenEv+0x72>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <_ZN5Drive4OpenEv+0x90>
	{
		driveStatus->setInPos(true);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fa33 	bl	8002bf6 <_ZN11DriveStatus8setInPosEb>
		driveCommand->setOpen(false);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f83b 	bl	8002812 <_ZN12DriveCommand7setOpenEb>
	}
	else
	{
		MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
	}
}
 800179c:	e011      	b.n	80017c2 <_ZN5Drive4OpenEv+0xb4>
		MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fed7 	bl	8002556 <_ZNK13DriveSettings17getClampingTorqueEv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461c      	mov	r4, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 feb5 	bl	8002520 <_ZNK13DriveSettings16getClampingSpeedEv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4622      	mov	r2, r4
 80017ba:	2101      	movs	r1, #1
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8c5 	bl	800194c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}

080017ca <_ZN5Drive4StopEv>:



void Drive::Stop()
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 80017d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	currentState = nextState;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7c9a      	ldrb	r2, [r3, #18]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	745a      	strb	r2, [r3, #17]

	switch (currentState)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7c5b      	ldrb	r3, [r3, #17]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	f200 8095 	bhi.w	800192c <_ZN5Drive9TeachModeEv+0x144>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <_ZN5Drive9TeachModeEv+0x20>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	0800181d 	.word	0x0800181d
 800180c:	0800183d 	.word	0x0800183d
 8001810:	080018ad 	.word	0x080018ad
 8001814:	0800185d 	.word	0x0800185d
 8001818:	08001915 	.word	0x08001915
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == false)
 800181c:	2120      	movs	r1, #32
 800181e:	484a      	ldr	r0, [pc, #296]	; (8001948 <_ZN5Drive9TeachModeEv+0x160>)
 8001820:	f004 fa80 	bl	8005d24 <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d07d      	beq.n	8001930 <_ZN5Drive9TeachModeEv+0x148>
			{
				nextState = TEACH_RDY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	749a      	strb	r2, [r3, #18]
			}
			break;
 800183a:	e079      	b.n	8001930 <_ZN5Drive9TeachModeEv+0x148>
		case TEACH_RDY:
			if (IS_EXT_SWITCH == true)
 800183c:	2120      	movs	r1, #32
 800183e:	4842      	ldr	r0, [pc, #264]	; (8001948 <_ZN5Drive9TeachModeEv+0x160>)
 8001840:	f004 fa70 	bl	8005d24 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d06f      	beq.n	8001934 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = DRIVE_OUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	749a      	strb	r2, [r3, #18]
			}
			break;
 800185a:	e06b      	b.n	8001934 <_ZN5Drive9TeachModeEv+0x14c>
		case DRIVE_IN:
			//move drive in
			if(MoveDrive(IN, driveSettings->getTeachTroque(),driveSettings->getTeachSpeed()))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 ff41 	bl	80026e8 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001866:	4603      	mov	r3, r0
 8001868:	461c      	mov	r4, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 ff1f 	bl	80026b2 <_ZNK13DriveSettings13getTeachSpeedEv>
 8001874:	4603      	mov	r3, r0
 8001876:	4622      	mov	r2, r4
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f866 	bl	800194c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <_ZN5Drive9TeachModeEv+0xa4>
			{
				nextState = TEACH_END;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	749a      	strb	r2, [r3, #18]
			}

			if(IS_EXT_SWITCH)
 800188c:	2120      	movs	r1, #32
 800188e:	482e      	ldr	r0, [pc, #184]	; (8001948 <_ZN5Drive9TeachModeEv+0x160>)
 8001890:	f004 fa48 	bl	8005d24 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d049      	beq.n	8001938 <_ZN5Drive9TeachModeEv+0x150>
			{
				nextState = DRIVE_OUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	749a      	strb	r2, [r3, #18]
			}
			break;
 80018aa:	e045      	b.n	8001938 <_ZN5Drive9TeachModeEv+0x150>
		case DRIVE_OUT:
			//move drive out
			if(MoveDrive(OUT, driveSettings->getTeachTroque(), driveSettings->getTeachSpeed()) || torqueOutReached)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 ff19 	bl	80026e8 <_ZNK13DriveSettings14getTeachTroqueEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461c      	mov	r4, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fef7 	bl	80026b2 <_ZNK13DriveSettings13getTeachSpeedEv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4622      	mov	r2, r4
 80018c8:	2101      	movs	r1, #1
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f83e 	bl	800194c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <_ZN5Drive9TeachModeEv+0xf6>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7d1b      	ldrb	r3, [r3, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <_ZN5Drive9TeachModeEv+0xfa>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <_ZN5Drive9TeachModeEv+0xfc>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <_ZN5Drive9TeachModeEv+0x106>
			{
				torqueOutReached = true;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	751a      	strb	r2, [r3, #20]
			}

			if(!IS_EXT_SWITCH)
 80018ee:	2120      	movs	r1, #32
 80018f0:	4815      	ldr	r0, [pc, #84]	; (8001948 <_ZN5Drive9TeachModeEv+0x160>)
 80018f2:	f004 fa17 	bl	8005d24 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01a      	beq.n	800193c <_ZN5Drive9TeachModeEv+0x154>
			{
				nextState = DRIVE_IN;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	749a      	strb	r2, [r3, #18]
				torqueOutReached = false;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	751a      	strb	r2, [r3, #20]
			}
			break;
 8001912:	e013      	b.n	800193c <_ZN5Drive9TeachModeEv+0x154>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f891 	bl	8001a40 <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f000 ffd4 	bl	80028d2 <_ZN12DriveCommand8setTeachEb>
			break;
 800192a:	e008      	b.n	800193e <_ZN5Drive9TeachModeEv+0x156>
		default:
			break;
 800192c:	bf00      	nop
 800192e:	e006      	b.n	800193e <_ZN5Drive9TeachModeEv+0x156>
			break;
 8001930:	bf00      	nop
 8001932:	e004      	b.n	800193e <_ZN5Drive9TeachModeEv+0x156>
			break;
 8001934:	bf00      	nop
 8001936:	e002      	b.n	800193e <_ZN5Drive9TeachModeEv+0x156>
			break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <_ZN5Drive9TeachModeEv+0x156>
			break;
 800193c:	bf00      	nop
	}

}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	48000400 	.word	0x48000400

0800194c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
{
	this->driveMode = driveMode;
}

bool Drive::MoveDrive(DIRECTION direction, uint16_t torque, uint16_t speed)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	72fb      	strb	r3, [r7, #11]
 800195e:	460b      	mov	r3, r1
 8001960:	813b      	strh	r3, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
	if(driveStatus->getCurrent() * CURRENT_2_TORQUE > torque){
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	f001 f8da 	bl	8002b24 <_ZNK11DriveStatus10getCurrentEv>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	893b      	ldrh	r3, [r7, #8]
 8001976:	4293      	cmp	r3, r2
 8001978:	bf34      	ite	cc
 800197a:	2301      	movcc	r3, #1
 800197c:	2300      	movcs	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x42>
		Stop();
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff ff20 	bl	80017ca <_ZN5Drive4StopEv>
		return true;
 800198a:	2301      	movs	r3, #1
 800198c:	e01e      	b.n	80019cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x80>
	}

	switch (direction)
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x4e>
 8001994:	2b01      	cmp	r3, #1
 8001996:	d00a      	beq.n	80019ae <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x62>
 8001998:	e013      	b.n	80019c2 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x76>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = DIRECTION_IN;	//direction
 800199a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000;	//speed
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80019ac:	e00d      	b.n	80019ca <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x7e>
		case DIRECTION::OUT:
			TIM2->CCR2 = DIRECTION_OUT;	//direction
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000; //speed
 80019b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80019c0:	e003      	b.n	80019ca <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x7e>
		default:
			Stop();
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ff01 	bl	80017ca <_ZN5Drive4StopEv>
			break;
 80019c8:	bf00      	nop
	}
	return false;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZN7EncoderC1EP11DriveStatus>:
 *      Author: marce
 */

#include "Encoder.h"

Encoder::Encoder(DriveStatus *driveStatus)
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <_ZN7Encoder4initEv+0x38>)
 8001a0e:	f001 ff61 	bl	80038d4 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8001a12:	2104      	movs	r1, #4
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <_ZN7Encoder4initEv+0x38>)
 8001a16:	f007 ffb3 	bl	8009980 <HAL_TIM_Encoder_Start>

	cValue = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
	lValue = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
	return true;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000404 	.word	0x20000404

08001a40 <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN7Encoder6updateEv>:
{
	return this->encoderValue;
}

bool Encoder::update()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <_ZN7Encoder6updateEv+0x84>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001a84:	da06      	bge.n	8001a94 <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a8e:	33ff      	adds	r3, #255	; 0xff
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	60d3      	str	r3, [r2, #12]
	}

	//backwards overflow
	if (deltaValue > 32768)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	dd06      	ble.n	8001aac <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001aa6:	3bff      	subs	r3, #255	; 0xff
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f001 f882 	bl	8002bd8 <_ZN11DriveStatus11setPositionEt>

	return true;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012c00 	.word	0x40012c00

08001ae4 <_ZN5ErrorC1EP3LEDP11DriveStatus>:

#include "Error.h"
#include "main.h"
#include "gpio.h"

Error::Error(LED* led, DriveStatus *driveStatus){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	815a      	strh	r2, [r3, #10]
	this->led = led;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
}
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_ZN5Error9error2LEDEv>:


void Error::error2LED() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms

	if (driveStatus->getError() != DriveStatus::E_NO_ERROR) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 ffb9 	bl	8002a94 <_ZN11DriveStatus8getErrorEv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d054      	beq.n	8001bdc <_ZN5Error9error2LEDEv+0xcc>
		if (this->LEDerrorCounter == 1) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	895b      	ldrh	r3, [r3, #10]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <_ZN5Error9error2LEDEv+0x3c>
			this->errorCode = (uint8_t)driveStatus->getError();		//Errorcode vom DriveStatus bei Zyklus 1 einlesen
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 ffa8 	bl	8002a94 <_ZN11DriveStatus8getErrorEv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	721a      	strb	r2, [r3, #8]
		}

		if (LEDerrorCounter <= errorCode * 6) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	895b      	ldrh	r3, [r3, #10]
 8001b50:	4619      	mov	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7a1b      	ldrb	r3, [r3, #8]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4299      	cmp	r1, r3
 8001b62:	dc1f      	bgt.n	8001ba4 <_ZN5Error9error2LEDEv+0x94>
			//Error Code Ausgeben
			if (LEDerrorCounter % 6 == 0) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	895a      	ldrh	r2, [r3, #10]
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <_ZN5Error9error2LEDEv+0xd4>)
 8001b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b6e:	0899      	lsrs	r1, r3, #2
 8001b70:	460b      	mov	r3, r1
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	440b      	add	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <_ZN5Error9error2LEDEv+0x7c>
				led->ON();
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f84a 	bl	8001c1e <_ZN3LED2ONEv>
 8001b8a:	e004      	b.n	8001b96 <_ZN5Error9error2LEDEv+0x86>
			} else {
				led->OFF();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f861 	bl	8001c58 <_ZN3LED3OFFEv>
			}
			LEDerrorCounter++;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	895b      	ldrh	r3, [r3, #10]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	815a      	strh	r2, [r3, #10]
			//Nach 4 Pause Widerholen
			LEDerrorCounter = 1;
		}
	}

}
 8001ba2:	e01b      	b.n	8001bdc <_ZN5Error9error2LEDEv+0xcc>
		} else if (LEDerrorCounter <= errorCode * 6 + 15) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	895b      	ldrh	r3, [r3, #10]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7a1b      	ldrb	r3, [r3, #8]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	330f      	adds	r3, #15
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	dc0b      	bgt.n	8001bd6 <_ZN5Error9error2LEDEv+0xc6>
			led->OFF();
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f848 	bl	8001c58 <_ZN3LED3OFFEv>
			LEDerrorCounter++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	895b      	ldrh	r3, [r3, #10]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	815a      	strh	r2, [r3, #10]
}
 8001bd4:	e002      	b.n	8001bdc <_ZN5Error9error2LEDEv+0xcc>
			LEDerrorCounter = 1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	815a      	strh	r2, [r3, #10]
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	aaaaaaab 	.word	0xaaaaaaab

08001be8 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	797a      	ldrb	r2, [r7, #5]
 8001c0e:	719a      	strb	r2, [r3, #6]
}
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZN3LED2ONEv>:

/*
 * LED ON method
 */
void LED::ON() {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	799b      	ldrb	r3, [r3, #6]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <_ZN3LED2ONEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	889b      	ldrh	r3, [r3, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f004 f88b 	bl	8005d54 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	}
}
 8001c3e:	e007      	b.n	8001c50 <_ZN3LED2ONEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	889b      	ldrh	r3, [r3, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f004 f882 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZN3LED3OFFEv>:

/*
 * LED OFF method
 */
void LED::OFF() {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	799b      	ldrb	r3, [r3, #6]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	f004 f86e 	bl	8005d54 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001c78:	e007      	b.n	8001c8a <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	889b      	ldrh	r3, [r3, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	f004 f865 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	889b      	ldrh	r3, [r3, #4]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f004 f86d 	bl	8005d84 <HAL_GPIO_TogglePin>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
{

}
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	0800f3bc 	.word	0x0800f3bc

08001cec <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	f004 f82a 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2110      	movs	r1, #16
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f004 f81c 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2108      	movs	r1, #8
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f004 f80e 	bl	8005d54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f001 ff69 	bl	8003c10 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2108      	movs	r1, #8
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f004 f805 	bl	8005d54 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f001 ff60 	bl	8003c10 <HAL_Delay>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	733b      	strb	r3, [r7, #12]
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb8 	bl	8001cec <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	2202      	movs	r2, #2
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001d86:	f006 fe8e 	bl	8008aa6 <HAL_SPI_Transmit>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffb4 	bl	8001d08 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e003      	b.n	8001dac <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ffaf 	bl	8001d08 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000039c 	.word	0x2000039c

08001db8 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff8d 	bl	8001cec <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	f107 0108 	add.w	r1, r7, #8
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2302      	movs	r3, #2
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001de2:	f006 ffce 	bl	8008d82 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff8e 	bl	8001d08 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001dec:	7b7b      	ldrb	r3, [r7, #13]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000039c 	.word	0x2000039c

08001dfc <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff8c 	bl	8001d24 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001e0c:	2142      	movs	r1, #66	; 0x42
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffd2 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d001      	beq.n	8001e22 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e02b      	b.n	8001e7a <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9b4 	bl	8002190 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9fa 	bl	8002224 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	210e      	movs	r1, #14
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff8f 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	210f      	movs	r1, #15
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff8a 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001e44:	210c      	movs	r1, #12
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffb6 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f043 0303 	orr.w	r3, r3, #3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	210c      	movs	r1, #12
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff7d 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001e5e:	2204      	movs	r2, #4
 8001e60:	2126      	movs	r1, #38	; 0x26
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ff78 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2114      	movs	r1, #20
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f99c 	bl	80021aa <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f97f 	bl	8002176 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001e78:	2301      	movs	r3, #1
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f972 	bl	8002176 <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 faf6 	bl	800248a <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001e9e:	e002      	b.n	8001ea6 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fada 	bl	800245a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210d      	movs	r1, #13
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff54 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2122      	movs	r1, #34	; 0x22
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff4f 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001ecc:	2283      	movs	r2, #131	; 0x83
 8001ece:	2101      	movs	r1, #1
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff41 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001ed6:	2112      	movs	r1, #18
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff6d 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d000      	beq.n	8001ef4 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001ef2:	e7f0      	b.n	8001ed6 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	2112      	movs	r1, #18
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff2d 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001f16:	2112      	movs	r1, #18
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff4d 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	dd0a      	ble.n	8001f3e <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 faae 	bl	800248a <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	2122      	movs	r1, #34	; 0x22
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff0e 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001f3c:	e002      	b.n	8001f44 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fa8b 	bl	800245a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2112      	movs	r1, #18
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff03 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d026      	beq.n	8001faa <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001f74:	2122      	movs	r1, #34	; 0x22
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ff1e 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e005      	b.n	8001f8e <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001f82:	2113      	movs	r1, #19
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff17 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001f8e:	2110      	movs	r1, #16
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff11 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	210d      	movs	r1, #13
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fedb 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8e7 	bl	8002176 <_ZN10RFM95_LoRa4idleEv>
 8001fa8:	e015      	b.n	8001fd6 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001faa:	2101      	movs	r1, #1
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff03 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b86      	cmp	r3, #134	; 0x86
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	210d      	movs	r1, #13
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fec6 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001fcc:	2286      	movs	r2, #134	; 0x86
 8001fce:	2101      	movs	r1, #1
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fec1 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1cf9      	adds	r1, r7, #3
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8002012:	2122      	movs	r1, #34	; 0x22
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff fecf 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 800201a:	4603      	mov	r3, r0
 800201c:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d903      	bls.n	8002030 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800202e:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d20c      	bcs.n	8002056 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	2100      	movs	r1, #0
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff fe85 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e7ee      	b.n	8002034 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4413      	add	r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	2122      	movs	r1, #34	; 0x22
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fe76 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800207e:	2113      	movs	r1, #19
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fe99 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	1ad3      	subs	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3308      	adds	r3, #8
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf0c      	ite	eq
 80020b2:	2301      	moveq	r3, #1
 80020b4:	2300      	movne	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e009      	b.n	80020d6 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 80020cc:	2100      	movs	r1, #0
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fe72 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  if (!available()) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3308      	adds	r3, #8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e013      	b.n	8002130 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8002108:	210d      	movs	r1, #13
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe54 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8002110:	4603      	mov	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8002114:	2100      	movs	r1, #0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fe4e 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 800211c:	4603      	mov	r3, r0
 800211e:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	210d      	movs	r1, #13
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe15 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 800212e:	7afb      	ldrb	r3, [r7, #11]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	dd0a      	ble.n	800215e <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f99e 	bl	800248a <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	2122      	movs	r1, #34	; 0x22
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fdfe 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
 800215c:	e002      	b.n	8002164 <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f97b 	bl	800245a <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8002164:	2285      	movs	r2, #133	; 0x85
 8002166:	2101      	movs	r1, #1
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fdf5 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800217e:	2281      	movs	r2, #129	; 0x81
 8002180:	2101      	movs	r1, #1
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fde8 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_ZN10RFM95_LoRa5sleepEv>:
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	2101      	movs	r1, #1
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fddb 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d116      	bne.n	80021ea <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da02      	bge.n	80021c8 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e004      	b.n	80021d2 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b0e      	cmp	r3, #14
 80021cc:	dd01      	ble.n	80021d2 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 80021ce:	230e      	movs	r3, #14
 80021d0:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	2109      	movs	r1, #9
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fdb8 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 80021e8:	e018      	b.n	800221c <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	dc02      	bgt.n	80021f6 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	e004      	b.n	8002200 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b11      	cmp	r3, #17
 80021fa:	dd01      	ble.n	8002200 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 80021fc:	2311      	movs	r3, #17
 80021fe:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b02      	subs	r3, #2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b25b      	sxtb	r3, r3
 800220a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800220e:	b25b      	sxtb	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	2109      	movs	r1, #9
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fd9e 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	17c8      	asrs	r0, r1, #31
 8002238:	460a      	mov	r2, r1
 800223a:	4603      	mov	r3, r0
 800223c:	1355      	asrs	r5, r2, #13
 800223e:	04d4      	lsls	r4, r2, #19
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fd ffbf 	bl	80001cc <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8002256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	0c02      	lsrs	r2, r0, #16
 8002264:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002268:	0c0b      	lsrs	r3, r1, #16
 800226a:	b2d3      	uxtb	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	2106      	movs	r1, #6
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fd71 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8002276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	0a02      	lsrs	r2, r0, #8
 8002284:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002288:	0a0b      	lsrs	r3, r1, #8
 800228a:	b2d3      	uxtb	r3, r2
 800228c:	461a      	mov	r2, r3
 800228e:	2107      	movs	r1, #7
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fd61 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8002296:	7a3b      	ldrb	r3, [r7, #8]
 8002298:	461a      	mov	r2, r3
 800229a:	2108      	movs	r1, #8
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fd5b 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	01e84800 	.word	0x01e84800

080022b0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	dc02      	bgt.n	80022c6 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 80022c0:	2306      	movs	r3, #6
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	e004      	b.n	80022d0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	dd01      	ble.n	80022d0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 80022cc:	230c      	movs	r3, #12
 80022ce:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d10a      	bne.n	80022ec <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80022d6:	22c5      	movs	r2, #197	; 0xc5
 80022d8:	2131      	movs	r1, #49	; 0x31
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fd3c 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80022e0:	220c      	movs	r2, #12
 80022e2:	2137      	movs	r1, #55	; 0x37
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fd37 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80022ea:	e009      	b.n	8002300 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80022ec:	22c3      	movs	r2, #195	; 0xc3
 80022ee:	2131      	movs	r1, #49	; 0x31
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fd31 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80022f6:	220a      	movs	r2, #10
 80022f8:	2137      	movs	r1, #55	; 0x37
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fd2c 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8002300:	211e      	movs	r1, #30
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff fd58 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8002308:	4603      	mov	r3, r0
 800230a:	b25b      	sxtb	r3, r3
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	b25a      	sxtb	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	b25b      	sxtb	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b25b      	sxtb	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	211e      	movs	r1, #30
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fd18 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002340:	4293      	cmp	r3, r2
 8002342:	dc02      	bgt.n	800234a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e03f      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002350:	4293      	cmp	r3, r2
 8002352:	dc02      	bgt.n	800235a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e037      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002360:	4293      	cmp	r3, r2
 8002362:	dc02      	bgt.n	800236a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8002364:	2302      	movs	r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e02f      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f245 1240 	movw	r2, #20800	; 0x5140
 8002370:	4293      	cmp	r3, r2
 8002372:	dc02      	bgt.n	800237a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8002374:	2303      	movs	r3, #3
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e027      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002380:	4293      	cmp	r3, r2
 8002382:	dc02      	bgt.n	800238a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8002384:	2304      	movs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e01f      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002390:	4293      	cmp	r3, r2
 8002392:	dc02      	bgt.n	800239a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8002394:	2305      	movs	r3, #5
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e017      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f24f 4224 	movw	r2, #62500	; 0xf424
 80023a0:	4293      	cmp	r3, r2
 80023a2:	dc02      	bgt.n	80023aa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 80023a4:	2306      	movs	r3, #6
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00f      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	dc02      	bgt.n	80023b8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 80023b2:	2307      	movs	r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e008      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	dc02      	bgt.n	80023c6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 80023c0:	2308      	movs	r3, #8
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e001      	b.n	80023ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 80023c6:	2309      	movs	r3, #9
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 80023ca:	211d      	movs	r1, #29
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fcf3 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	b25a      	sxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	211d      	movs	r1, #29
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fcb3 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	0001e848 	.word	0x0001e848
 8002400:	0003d090 	.word	0x0003d090

08002404 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	dc02      	bgt.n	800241a <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8002414:	2305      	movs	r3, #5
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	e004      	b.n	8002424 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b08      	cmp	r3, #8
 800241e:	dd01      	ble.n	8002424 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002420:	2308      	movs	r3, #8
 8002422:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3b04      	subs	r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 800242a:	211d      	movs	r1, #29
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fcc3 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8002432:	4603      	mov	r3, r0
 8002434:	b25b      	sxtb	r3, r3
 8002436:	f023 030e 	bic.w	r3, r3, #14
 800243a:	b25a      	sxtb	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	b25b      	sxtb	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b25b      	sxtb	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	211d      	movs	r1, #29
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fc83 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002468:	211d      	movs	r1, #29
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fca4 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 8002470:	4603      	mov	r3, r0
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	211d      	movs	r1, #29
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fc6b 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002498:	211d      	movs	r1, #29
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fc8c 	bl	8001db8 <_ZN10RFM95_LoRa12readRegisterEh>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	211d      	movs	r1, #29
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fc53 	bl	8001d58 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 80024c4:	4914      	ldr	r1, [pc, #80]	; (8002518 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff feac 	bl	8002224 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80024cc:	2201      	movs	r2, #1
 80024ce:	2111      	movs	r1, #17
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fe6a 	bl	80021aa <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 80024d6:	f647 2112 	movw	r1, #31250	; 0x7a12
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff28 	bl	8002330 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 80024e0:	210c      	movs	r1, #12
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fee4 	bl	80022b0 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 80024e8:	2105      	movs	r1, #5
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff8a 	bl	8002404 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fc82 	bl	8001dfc <_ZN10RFM95_LoRa5beginEl>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	33bca100 	.word	0x33bca100
 800251c:	339e1c80 	.word	0x339e1c80

08002520 <_ZNK13DriveSettings16getClampingSpeedEv>:
 *  Created on: 22.10.2022
 *      Author: marce
 */
#include "DriveSettings.h"

uint16_t DriveSettings::getClampingSpeed() const {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	891b      	ldrh	r3, [r3, #8]
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	811a      	strh	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_ZNK13DriveSettings17getClampingTorqueEv>:



uint16_t DriveSettings::getClampingTorque() const {
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	889b      	ldrh	r3, [r3, #4]
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	809a      	strh	r2, [r3, #4]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_ZNK13DriveSettings16getDeviceAddressEv>:



uint8_t DriveSettings::getDeviceAddress() const {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	781b      	ldrb	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_ZNK13DriveSettings12getInPosDiffEv>:
	this->deviceAddress = deviceAddress;
}



uint16_t DriveSettings::getInPosDiff() const {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	899b      	ldrh	r3, [r3, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	819a      	strh	r2, [r3, #12]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_ZNK13DriveSettings18getOpeningDistanceEv>:



uint16_t DriveSettings::getOpeningDistance() const {
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	return openingDistance;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	89db      	ldrh	r3, [r3, #14]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	81da      	strh	r2, [r3, #14]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_ZNK13DriveSettings21getOverCurrentWarningEv>:
void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold) {
	this->overCurrentTimeThreshold = overCurrentTimeThreshold;
}

uint16_t DriveSettings::getOverCurrentWarning() const {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8a9b      	ldrh	r3, [r3, #20]
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	829a      	strh	r2, [r3, #20]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8adb      	ldrh	r3, [r3, #22]
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	887a      	ldrh	r2, [r7, #2]
 800266e:	82da      	strh	r2, [r3, #22]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	895b      	ldrh	r3, [r3, #10]
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	815a      	strh	r2, [r3, #10]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	88db      	ldrh	r3, [r3, #6]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	80da      	strh	r2, [r3, #6]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	return teachTroque;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	885b      	ldrh	r3, [r3, #2]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	805a      	strh	r2, [r3, #2]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8a5b      	ldrh	r3, [r3, #18]
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	887a      	ldrh	r2, [r7, #2]
 8002746:	825a      	strh	r2, [r3, #18]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8a1b      	ldrh	r3, [r3, #16]
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	821a      	strh	r2, [r3, #16]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	709a      	strb	r2, [r3, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	70da      	strb	r2, [r3, #3]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	711a      	strb	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	715a      	strb	r2, [r3, #5]
{
}
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	return close;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	701a      	strb	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	return open;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	785b      	ldrb	r3, [r3, #1]
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	705a      	strb	r2, [r3, #1]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	return enable;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	791b      	ldrb	r3, [r3, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	711a      	strb	r2, [r3, #4]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return reset;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	78db      	ldrb	r3, [r3, #3]
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	70da      	strb	r2, [r3, #3]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	return stop;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	795b      	ldrb	r3, [r3, #5]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	715a      	strb	r2, [r3, #5]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_ZN12DriveCommand8setTeachEb>:
{
	return teach;
}

void DriveCommand::setTeach(bool teach)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	70fb      	strb	r3, [r7, #3]
		this->teach = teach;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	709a      	strb	r2, [r3, #2]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return close;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	785b      	ldrb	r3, [r3, #1]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	429a      	cmp	r2, r3
 800291c:	d005      	beq.n	800292a <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	751a      	strb	r2, [r3, #20]
	}
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return open;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	789b      	ldrb	r3, [r3, #2]
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	789b      	ldrb	r3, [r3, #2]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	429a      	cmp	r2, r3
 8002962:	d005      	beq.n	8002970 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	751a      	strb	r2, [r3, #20]
	}
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	return enable;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	795b      	ldrb	r3, [r3, #5]
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	795b      	ldrb	r3, [r3, #5]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d005      	beq.n	80029b6 <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	751a      	strb	r2, [r3, #20]
	}
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
	return reset;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	791b      	ldrb	r3, [r3, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d005      	beq.n	80029fc <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	751a      	strb	r2, [r3, #20]
	}
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 ****************************************************************************************/
bool DriveStatus::isStop()
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	return stop;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	799b      	ldrb	r3, [r3, #6]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	799b      	ldrb	r3, [r3, #6]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d005      	beq.n	8002a42 <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	751a      	strb	r2, [r3, #20]
	}
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
	return teach;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	78db      	ldrb	r3, [r3, #3]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	78db      	ldrb	r3, [r3, #3]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d005      	beq.n	8002a88 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	751a      	strb	r2, [r3, #20]
	}
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	return this->error;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
	if (this->error != error)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d002      	beq.n	8002ac8 <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x1c>
	{
		statusChanged = true;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	751a      	strb	r2, [r3, #20]
	}
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_ZNK11DriveStatus9getStatusEv>:

uint8_t DriveStatus::getStatus() const
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	01db      	lsls	r3, r3, #7
 8002ae2:	b25a      	sxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b25a      	sxtb	r2, r3
			| (uint8_t) close << 5 | (uint8_t) teach << 4 | (uint8_t) stop << 3;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	015b      	lsls	r3, r3, #5
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b25a      	sxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	78db      	ldrb	r3, [r3, #3]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	b25b      	sxtb	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b25a      	sxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	799b      	ldrb	r3, [r3, #6]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002b14:	73fb      	strb	r3, [r7, #15]

	return result;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_ZNK11DriveStatus10getCurrentEv>:
/*******************************************************************
 * Current settings
 ******************************************************************/

uint16_t DriveStatus::getCurrent() const
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	if (zeroCurrentValue > current)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	895a      	ldrh	r2, [r3, #10]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	891b      	ldrh	r3, [r3, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d908      	bls.n	8002b4a <_ZNK11DriveStatus10getCurrentEv+0x26>
	{
		return (zeroCurrentValue - current) * ADC_2_CURRENT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	895a      	ldrh	r2, [r3, #10]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	891b      	ldrh	r3, [r3, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	e007      	b.n	8002b5a <_ZNK11DriveStatus10getCurrentEv+0x36>
	}
	else
	{
		return (current - zeroCurrentValue) * ADC_2_CURRENT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	891a      	ldrh	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	895b      	ldrh	r3, [r3, #10]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b29b      	uxth	r3, r3
	}
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_ZN11DriveStatus10setCurrentEt>:

void DriveStatus::setCurrent(uint16_t current)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
	this->current = current;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	811a      	strh	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_ZNK11DriveStatus10getVoltageEv>:
/*******************************************************************
 * Voltage settings
 ******************************************************************/

uint16_t DriveStatus::getVoltage() const
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	return voltage * ADC_2_VOLTAGE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	899b      	ldrh	r3, [r3, #12]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	b29b      	uxth	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_ZN11DriveStatus10setVoltageEt>:

void DriveStatus::setVoltage(uint16_t voltageADC)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
	this->voltage = voltage;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	899a      	ldrh	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	819a      	strh	r2, [r3, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <_ZNK11DriveStatus11getPositionEv>:
/*******************************************************************
 * Position settings
 ******************************************************************/

uint16_t DriveStatus::getPosition() const
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	return position;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	89db      	ldrh	r3, [r3, #14]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_ZN11DriveStatus11setPositionEt>:

void DriveStatus::setPosition(uint16_t position)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	81da      	strh	r2, [r3, #14]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <_ZN11DriveStatus8setInPosEb>:
{
	return this->inPos;
}

void DriveStatus::setInPos(bool flag)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
	this->inPos = flag;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	741a      	strb	r2, [r3, #16]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_ZN11TaskHandler11UpdateTasksEv>:
#include "TaskHandler.h"
#include "main.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

	//1ms


	//2ms
	if(counter % 2 == 0){
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	899b      	ldrh	r3, [r3, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	711a      	strb	r2, [r3, #4]
	}


	//15ms
	if(counter % 15 == 0){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	899a      	ldrh	r2, [r3, #12]
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	08d9      	lsrs	r1, r3, #3
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a5b      	subs	r3, r3, r1
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	709a      	strb	r2, [r3, #2]
	}


	//100ms
	if(counter % 100 == 0){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	899b      	ldrh	r3, [r3, #12]
 8002c58:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 8002c5a:	fba2 1203 	umull	r1, r2, r2, r3
 8002c5e:	0952      	lsrs	r2, r2, #5
 8002c60:	2164      	movs	r1, #100	; 0x64
 8002c62:	fb01 f202 	mul.w	r2, r1, r2
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <_ZN11TaskHandler11UpdateTasksEv+0x60>
		errorTask = true;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
	}

	//250ms
	if(counter % 250 == 0){
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	899b      	ldrh	r3, [r3, #12]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002c7a:	fba2 1203 	umull	r1, r2, r2, r3
 8002c7e:	0912      	lsrs	r2, r2, #4
 8002c80:	21fa      	movs	r1, #250	; 0xfa
 8002c82:	fb01 f202 	mul.w	r2, r1, r2
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <_ZN11TaskHandler11UpdateTasksEv+0x80>
		comTask = true;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	899b      	ldrh	r3, [r3, #12]
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002c9a:	fba2 1203 	umull	r1, r2, r2, r3
 8002c9e:	0952      	lsrs	r2, r2, #5
 8002ca0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ca4:	fb01 f202 	mul.w	r2, r1, r2
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		ledTask = true;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	715a      	strb	r2, [r3, #5]
	}

	//increment counter
	if(counter > 2999){
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	899b      	ldrh	r3, [r3, #12]
 8002cba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d903      	bls.n	8002cca <_ZN11TaskHandler11UpdateTasksEv+0xb6>
		counter = 1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 8002cc8:	e005      	b.n	8002cd6 <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		counter++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	899b      	ldrh	r3, [r3, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	819a      	strh	r2, [r3, #12]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	88888889 	.word	0x88888889
 8002ce8:	51eb851f 	.word	0x51eb851f
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	79db      	ldrb	r3, [r3, #7]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	789b      	ldrb	r3, [r3, #2]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7a1b      	ldrb	r3, [r3, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	799b      	ldrb	r3, [r3, #6]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_ZN11TaskHandler9isLEDTaskEv>:
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}

bool TaskHandler::isLEDTask(){
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	795b      	ldrb	r3, [r3, #5]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7adb      	ldrb	r3, [r3, #11]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>:




void TaskHandler::setAdcUpdateTaskEnable(bool adcUpdateTaskEnable ) {
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
	this->adcUpdateTaskEnable = adcUpdateTaskEnable;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	729a      	strb	r2, [r3, #10]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_ZN11TaskHandler16setComTaskEnableEb>:


void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
	this->comTaskEnable = comTaskEnable;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	71da      	strb	r2, [r3, #7]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_ZN11TaskHandler18setDriveTaskEnableEb>:


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	721a      	strb	r2, [r3, #8]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_ZN11TaskHandler18setErrorTaskEnableEb>:


void TaskHandler::setErrorTaskEnable(bool errorTaskEnable ) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
	this->errorTaskEnable = errorTaskEnable;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	719a      	strb	r2, [r3, #6]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_ZN11TaskHandler21setIoUpdateTaskEnableEb>:


void TaskHandler::setIoUpdateTaskEnable(bool ioUpdateTaskEnable ) {
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
	this->ioUpdateTaskEnable = ioUpdateTaskEnable;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	725a      	strb	r2, [r3, #9]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_ZN11TaskHandler16setLEDTaskEnableEb>:

void TaskHandler::setLEDTaskEnable(bool ledTaskEnable){
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
	this->ledTaskEnable = ledTaskEnable;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	72da      	strb	r2, [r3, #11]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	787b      	ldrb	r3, [r7, #1]
 8002e90:	3301      	adds	r3, #1
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2ca      	uxtb	r2, r1
 8002e98:	701a      	strb	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
 8002ec8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ecc:	4a37      	ldr	r2, [pc, #220]	; (8002fac <MX_ADC1_Init+0x104>)
 8002ece:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002eea:	2204      	movs	r2, #4
 8002eec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002efc:	2202      	movs	r2, #2
 8002efe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f0a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f2e:	481e      	ldr	r0, [pc, #120]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f30:	f001 f8c8 	bl	80040c4 <HAL_ADC_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002f3a:	f000 fa27 	bl	800338c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	4817      	ldr	r0, [pc, #92]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f4a:	f002 f98d 	bl	8005268 <HAL_ADCEx_MultiModeConfigChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002f54:	f000 fa1a 	bl	800338c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_ADC1_Init+0x108>)
 8002f5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002f60:	2303      	movs	r3, #3
 8002f62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f64:	237f      	movs	r3, #127	; 0x7f
 8002f66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f68:	2304      	movs	r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f76:	f001 fb1f 	bl	80045b8 <HAL_ADC_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002f80:	f000 fa04 	bl	800338c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <MX_ADC1_Init+0x10c>)
 8002f86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f88:	230c      	movs	r3, #12
 8002f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_ADC1_Init+0x100>)
 8002f92:	f001 fb11 	bl	80045b8 <HAL_ADC_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002f9c:	f000 f9f6 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000214 	.word	0x20000214
 8002fac:	50040000 	.word	0x50040000
 8002fb0:	19200040 	.word	0x19200040
 8002fb4:	1d500080 	.word	0x1d500080

08002fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	; (8003084 <HAL_ADC_MspInit+0xcc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d14f      	bne.n	800307a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8002fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	4a24      	ldr	r2, [pc, #144]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_ADC_MspInit+0xd0>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 800300a:	2306      	movs	r3, #6
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800300e:	230b      	movs	r3, #11
 8003010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003020:	f002 fd0e 	bl	8005a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_ADC_MspInit+0xd8>)
 8003028:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_ADC_MspInit+0xd4>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_ADC_MspInit+0xd4>)
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_ADC_MspInit+0xd4>)
 800304c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_ADC_MspInit+0xd4>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800305e:	480b      	ldr	r0, [pc, #44]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003060:	f002 fab8 	bl	80055d4 <HAL_DMA_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800306a:	f000 f98f 	bl	800338c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003072:	64da      	str	r2, [r3, #76]	; 0x4c
 8003074:	4a05      	ldr	r2, [pc, #20]	; (800308c <HAL_ADC_MspInit+0xd4>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	50040000 	.word	0x50040000
 8003088:	40021000 	.word	0x40021000
 800308c:	20000278 	.word	0x20000278
 8003090:	40020008 	.word	0x40020008

08003094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <MX_DMA_Init+0x38>)
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <MX_DMA_Init+0x38>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6493      	str	r3, [r2, #72]	; 0x48
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <MX_DMA_Init+0x38>)
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	200b      	movs	r0, #11
 80030b8:	f002 fa55 	bl	8005566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030bc:	200b      	movs	r0, #11
 80030be:	f002 fa6e 	bl	800559e <HAL_NVIC_EnableIRQ>

}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e6:	4b4d      	ldr	r3, [pc, #308]	; (800321c <MX_GPIO_Init+0x14c>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	4a4c      	ldr	r2, [pc, #304]	; (800321c <MX_GPIO_Init+0x14c>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <MX_GPIO_Init+0x14c>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <MX_GPIO_Init+0x14c>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	4a46      	ldr	r2, [pc, #280]	; (800321c <MX_GPIO_Init+0x14c>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800310a:	4b44      	ldr	r3, [pc, #272]	; (800321c <MX_GPIO_Init+0x14c>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <MX_GPIO_Init+0x14c>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	4a40      	ldr	r2, [pc, #256]	; (800321c <MX_GPIO_Init+0x14c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <MX_GPIO_Init+0x14c>)
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312e:	4b3b      	ldr	r3, [pc, #236]	; (800321c <MX_GPIO_Init+0x14c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a3a      	ldr	r2, [pc, #232]	; (800321c <MX_GPIO_Init+0x14c>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <MX_GPIO_Init+0x14c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2119      	movs	r1, #25
 800314a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314e:	f002 fe01 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	2190      	movs	r1, #144	; 0x90
 8003156:	4832      	ldr	r0, [pc, #200]	; (8003220 <MX_GPIO_Init+0x150>)
 8003158:	f002 fdfc 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 800315c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	482c      	ldr	r0, [pc, #176]	; (8003224 <MX_GPIO_Init+0x154>)
 8003172:	f002 fc65 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 8003176:	2319      	movs	r3, #25
 8003178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317a:	2301      	movs	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003190:	f002 fc56 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8003194:	2323      	movs	r3, #35	; 0x23
 8003196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	481e      	ldr	r0, [pc, #120]	; (8003220 <MX_GPIO_Init+0x150>)
 80031a8:	f002 fc4a 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b2:	2303      	movs	r3, #3
 80031b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c4:	f002 fc3c 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 80031c8:	2390      	movs	r3, #144	; 0x90
 80031ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	4810      	ldr	r0, [pc, #64]	; (8003220 <MX_GPIO_Init+0x150>)
 80031e0:	f002 fc2e 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031e4:	2340      	movs	r3, #64	; 0x40
 80031e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e8:	2303      	movs	r3, #3
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	480a      	ldr	r0, [pc, #40]	; (8003220 <MX_GPIO_Init+0x150>)
 80031f8:	f002 fc22 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031fc:	2308      	movs	r3, #8
 80031fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003200:	2303      	movs	r3, #3
 8003202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4806      	ldr	r0, [pc, #24]	; (8003228 <MX_GPIO_Init+0x158>)
 8003210:	f002 fc16 	bl	8005a40 <HAL_GPIO_Init>

}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	48001c00 	.word	0x48001c00

0800322c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003230:	f000 fc79 	bl	8003b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003234:	f000 f818 	bl	8003268 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003238:	f7ff ff4a 	bl	80030d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800323c:	f7ff fe34 	bl	8002ea8 <MX_ADC1_Init>
  MX_DMA_Init();
 8003240:	f7ff ff28 	bl	8003094 <MX_DMA_Init>
  MX_SPI1_Init();
 8003244:	f000 f8c6 	bl	80033d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003248:	f000 fa28 	bl	800369c <MX_TIM1_Init>
  MX_TIM2_Init();
 800324c:	f000 fa80 	bl	8003750 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003250:	f00b f95a 	bl	800e508 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8003254:	f000 fae2 	bl	800381c <MX_TIM6_Init>
  MX_TIM16_Init();
 8003258:	f000 fb16 	bl	8003888 <MX_TIM16_Init>


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 800325c:	4801      	ldr	r0, [pc, #4]	; (8003264 <main+0x38>)
 800325e:	f7fd fa89 	bl	8000774 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003262:	e7fe      	b.n	8003262 <main+0x36>
 8003264:	200002c0 	.word	0x200002c0

08003268 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b096      	sub	sp, #88	; 0x58
 800326c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	2244      	movs	r2, #68	; 0x44
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f00b ff5e 	bl	800f138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800327c:	463b      	mov	r3, r7
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800328a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800328e:	f004 fb2d 	bl	80078ec <HAL_PWREx_ControlVoltageScaling>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80032a2:	f000 f873 	bl	800338c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80032a6:	2312      	movs	r3, #18
 80032a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80032b4:	2301      	movs	r3, #1
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80032bc:	23b0      	movs	r3, #176	; 0xb0
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c0:	2302      	movs	r3, #2
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c4:	2302      	movs	r3, #2
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032c8:	2301      	movs	r3, #1
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 80032cc:	2308      	movs	r3, #8
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032d0:	2302      	movs	r3, #2
 80032d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 fb6b 	bl	80079b8 <HAL_RCC_OscConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80032f2:	f000 f84b 	bl	800338c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f6:	230f      	movs	r3, #15
 80032f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032fa:	2303      	movs	r3, #3
 80032fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800330a:	463b      	mov	r3, r7
 800330c:	2103      	movs	r1, #3
 800330e:	4618      	mov	r0, r3
 8003310:	f004 ffb4 	bl	800827c <HAL_RCC_ClockConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003324:	f000 f832 	bl	800338c <Error_Handler>
  }
}
 8003328:	bf00      	nop
 800332a:	3758      	adds	r7, #88	; 0x58
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d102      	bne.n	8003348 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 8003342:	4804      	ldr	r0, [pc, #16]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003344:	f7ff fc66 	bl	8002c14 <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40014400 	.word	0x40014400
 8003354:	200002c0 	.word	0x200002c0

08003358 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <HAL_ADC_ConvCpltCallback+0x28>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConvCpltCallback+0x20>
		HAL_ADC_Stop_DMA(&hadc1);
 800336a:	4806      	ldr	r0, [pc, #24]	; (8003384 <HAL_ADC_ConvCpltCallback+0x2c>)
 800336c:	f001 f8ae 	bl	80044cc <HAL_ADC_Stop_DMA>
		appMain.ADCRead(hadc);
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <HAL_ADC_ConvCpltCallback+0x30>)
 8003374:	f7fd fb96 	bl	8000aa4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>
	}
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	50040000 	.word	0x50040000
 8003384:	20000214 	.word	0x20000214
 8003388:	200002c0 	.word	0x200002c0

0800338c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003390:	b672      	cpsid	i
}
 8003392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003394:	e7fe      	b.n	8003394 <Error_Handler+0x8>
	...

08003398 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d102      	bne.n	80033b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 80033b2:	4803      	ldr	r0, [pc, #12]	; (80033c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80033b4:	f7fd f940 	bl	8000638 <_ZN7AppMainC1Ev>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200002c0 	.word	0x200002c0

080033c4 <_GLOBAL__sub_I_appMain>:
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7ff ffe3 	bl	8003398 <_Z41__static_initialization_and_destruction_0ii>
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <MX_SPI1_Init+0x74>)
 80033da:	4a1c      	ldr	r2, [pc, #112]	; (800344c <MX_SPI1_Init+0x78>)
 80033dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <MX_SPI1_Init+0x74>)
 80033e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <MX_SPI1_Init+0x74>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <MX_SPI1_Init+0x74>)
 80033ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <MX_SPI1_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <MX_SPI1_Init+0x74>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_SPI1_Init+0x74>)
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <MX_SPI1_Init+0x74>)
 800340a:	2220      	movs	r2, #32
 800340c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_SPI1_Init+0x74>)
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_SPI1_Init+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_SPI1_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_SPI1_Init+0x74>)
 8003422:	2207      	movs	r2, #7
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_SPI1_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_SPI1_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_SPI1_Init+0x74>)
 8003434:	f005 fa94 	bl	8008960 <HAL_SPI_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800343e:	f7ff ffa5 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000039c 	.word	0x2000039c
 800344c:	40013000 	.word	0x40013000

08003450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_SPI_MspInit+0x7c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d128      	bne.n	80034c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800347c:	6613      	str	r3, [r2, #96]	; 0x60
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_SPI_MspInit+0x80>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034a2:	23e0      	movs	r3, #224	; 0xe0
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034b2:	2305      	movs	r3, #5
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f002 fabe 	bl	8005a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034c4:	bf00      	nop
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013000 	.word	0x40013000
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_MspInit+0x44>)
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <HAL_MspInit+0x44>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6613      	str	r3, [r2, #96]	; 0x60
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_MspInit+0x44>)
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_MspInit+0x44>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_MspInit+0x44>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	; 0x58
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_MspInit+0x44>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000

0800351c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <NMI_Handler+0x4>

08003522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <MemManage_Handler+0x4>

0800352e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <BusFault_Handler+0x4>

08003534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <UsageFault_Handler+0x4>

0800353a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003568:	f000 fb32 	bl	8003bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}

08003570 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <DMA1_Channel1_IRQHandler+0x10>)
 8003576:	f002 f983 	bl	8005880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000278 	.word	0x20000278

08003584 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800358a:	f006 fa87 	bl	8009a9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800358e:	4803      	ldr	r0, [pc, #12]	; (800359c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003590:	f006 fa84 	bl	8009a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000404 	.word	0x20000404
 800359c:	200004e8 	.word	0x200004e8

080035a0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <TIM6_IRQHandler+0x10>)
 80035a6:	f006 fa79 	bl	8009a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000049c 	.word	0x2000049c

080035b4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <USB_IRQHandler+0x10>)
 80035ba:	f002 fd36 	bl	800602a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200011dc 	.word	0x200011dc

080035c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
	return 1;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_kill>:

int _kill(int pid, int sig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035e2:	f00b fd77 	bl	800f0d4 <__errno>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2216      	movs	r2, #22
 80035ea:	601a      	str	r2, [r3, #0]
	return -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_exit>:

void _exit (int status)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffe7 	bl	80035d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800360a:	e7fe      	b.n	800360a <_exit+0x12>

0800360c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <_sbrk+0x5c>)
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <_sbrk+0x60>)
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <_sbrk+0x64>)
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <_sbrk+0x68>)
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800363c:	f00b fd4a 	bl	800f0d4 <__errno>
 8003640:	4603      	mov	r3, r0
 8003642:	220c      	movs	r2, #12
 8003644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	e009      	b.n	8003660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <_sbrk+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <_sbrk+0x64>)
 800365c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	2000a000 	.word	0x2000a000
 800366c:	00000400 	.word	0x00000400
 8003670:	20000400 	.word	0x20000400
 8003674:	20001710 	.word	0x20001710

08003678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <SystemInit+0x20>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <SystemInit+0x20>)
 8003684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036a2:	f107 030c 	add.w	r3, r7, #12
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f00b fd44 	bl	800f138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <MX_TIM1_Init+0xac>)
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <MX_TIM1_Init+0xb0>)
 80036be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <MX_TIM1_Init+0xac>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <MX_TIM1_Init+0xac>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <MX_TIM1_Init+0xac>)
 80036ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <MX_TIM1_Init+0xac>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <MX_TIM1_Init+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <MX_TIM1_Init+0xac>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036fe:	2301      	movs	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003702:	2300      	movs	r3, #0
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	4619      	mov	r1, r3
 8003710:	480d      	ldr	r0, [pc, #52]	; (8003748 <MX_TIM1_Init+0xac>)
 8003712:	f006 f88f 	bl	8009834 <HAL_TIM_Encoder_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800371c:	f7ff fe36 	bl	800338c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800372c:	463b      	mov	r3, r7
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_TIM1_Init+0xac>)
 8003732:	f006 ff17 	bl	800a564 <HAL_TIMEx_MasterConfigSynchronization>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800373c:	f7ff fe26 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000404 	.word	0x20000404
 800374c:	40012c00 	.word	0x40012c00

08003750 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003762:	463b      	mov	r3, r7
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
 8003770:	615a      	str	r2, [r3, #20]
 8003772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <MX_TIM2_Init+0xc8>)
 8003776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800377a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <MX_TIM2_Init+0xc8>)
 800377e:	2214      	movs	r2, #20
 8003780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <MX_TIM2_Init+0xc8>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <MX_TIM2_Init+0xc8>)
 800378a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800378e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <MX_TIM2_Init+0xc8>)
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <MX_TIM2_Init+0xc8>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800379c:	481e      	ldr	r0, [pc, #120]	; (8003818 <MX_TIM2_Init+0xc8>)
 800379e:	f005 ff13 	bl	80095c8 <HAL_TIM_PWM_Init>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80037a8:	f7ff fdf0 	bl	800338c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037b4:	f107 031c 	add.w	r3, r7, #28
 80037b8:	4619      	mov	r1, r3
 80037ba:	4817      	ldr	r0, [pc, #92]	; (8003818 <MX_TIM2_Init+0xc8>)
 80037bc:	f006 fed2 	bl	800a564 <HAL_TIMEx_MasterConfigSynchronization>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80037c6:	f7ff fde1 	bl	800338c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ca:	2360      	movs	r3, #96	; 0x60
 80037cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 80037ce:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80037d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80037d4:	2302      	movs	r3, #2
 80037d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037dc:	463b      	mov	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	4619      	mov	r1, r3
 80037e2:	480d      	ldr	r0, [pc, #52]	; (8003818 <MX_TIM2_Init+0xc8>)
 80037e4:	f006 fa7a 	bl	8009cdc <HAL_TIM_PWM_ConfigChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80037ee:	f7ff fdcd 	bl	800338c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037f2:	463b      	mov	r3, r7
 80037f4:	2204      	movs	r2, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <MX_TIM2_Init+0xc8>)
 80037fa:	f006 fa6f 	bl	8009cdc <HAL_TIM_PWM_ConfigChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003804:	f7ff fdc2 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <MX_TIM2_Init+0xc8>)
 800380a:	f000 f90f 	bl	8003a2c <HAL_TIM_MspPostInit>

}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000450 	.word	0x20000450

0800381c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <MX_TIM6_Init+0x64>)
 800382e:	4a15      	ldr	r2, [pc, #84]	; (8003884 <MX_TIM6_Init+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <MX_TIM6_Init+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <MX_TIM6_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <MX_TIM6_Init+0x64>)
 8003840:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003844:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <MX_TIM6_Init+0x64>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <MX_TIM6_Init+0x64>)
 800384e:	f005 fe0f 	bl	8009470 <HAL_TIM_Base_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003858:	f7ff fd98 	bl	800338c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800385c:	2320      	movs	r3, #32
 800385e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <MX_TIM6_Init+0x64>)
 800386a:	f006 fe7b 	bl	800a564 <HAL_TIMEx_MasterConfigSynchronization>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003874:	f7ff fd8a 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	2000049c 	.word	0x2000049c
 8003884:	40001000 	.word	0x40001000

08003888 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_TIM16_Init+0x44>)
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <MX_TIM16_Init+0x48>)
 8003890:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_TIM16_Init+0x44>)
 8003894:	2201      	movs	r2, #1
 8003896:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_TIM16_Init+0x44>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 31999;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <MX_TIM16_Init+0x44>)
 80038a0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80038a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_TIM16_Init+0x44>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_TIM16_Init+0x44>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_TIM16_Init+0x44>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_TIM16_Init+0x44>)
 80038ba:	f005 fdd9 	bl	8009470 <HAL_TIM_Base_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80038c4:	f7ff fd62 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200004e8 	.word	0x200004e8
 80038d0:	40014400 	.word	0x40014400

080038d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <HAL_TIM_Encoder_MspInit+0x90>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d131      	bne.n	800395a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 80038fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003900:	6613      	str	r3, [r2, #96]	; 0x60
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_TIM_Encoder_MspInit+0x94>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003926:	f44f 7340 	mov.w	r3, #768	; 0x300
 800392a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003946:	f002 f87b 	bl	8005a40 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2019      	movs	r0, #25
 8003950:	f001 fe09 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003954:	2019      	movs	r0, #25
 8003956:	f001 fe22 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800395a:	bf00      	nop
 800395c:	3728      	adds	r7, #40	; 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40021000 	.word	0x40021000

0800396c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d10b      	bne.n	8003996 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_TIM_PWM_MspInit+0x38>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_TIM_PWM_MspInit+0x38>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_TIM_PWM_MspInit+0x38>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_TIM_Base_MspInit+0x78>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d114      	bne.n	80039e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039c0:	f043 0310 	orr.w	r3, r3, #16
 80039c4:	6593      	str	r3, [r2, #88]	; 0x58
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	2036      	movs	r0, #54	; 0x36
 80039d8:	f001 fdc5 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80039dc:	2036      	movs	r0, #54	; 0x36
 80039de:	f001 fdde 	bl	800559e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80039e2:	e018      	b.n	8003a16 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_TIM_Base_MspInit+0x80>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	6613      	str	r3, [r2, #96]	; 0x60
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_TIM_Base_MspInit+0x7c>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2019      	movs	r0, #25
 8003a0c:	f001 fdab 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a10:	2019      	movs	r0, #25
 8003a12:	f001 fdc4 	bl	800559e <HAL_NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40001000 	.word	0x40001000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40014400 	.word	0x40014400

08003a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d139      	bne.n	8003ac2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_TIM_MspPostInit+0xa0>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8003a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9e:	f001 ffcf 	bl	8005a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <HAL_TIM_MspPostInit+0xa4>)
 8003abe:	f001 ffbf 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003ac2:	bf00      	nop
 8003ac4:	3728      	adds	r7, #40	; 0x28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	48000400 	.word	0x48000400

08003ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad8:	f7ff fdce 	bl	8003678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ade:	490d      	ldr	r1, [pc, #52]	; (8003b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <LoopForever+0xe>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af4:	4c0a      	ldr	r4, [pc, #40]	; (8003b20 <LoopForever+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b02:	f00b faed 	bl	800f0e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b06:	f7ff fb91 	bl	800322c <main>

08003b0a <LoopForever>:

LoopForever:
    b LoopForever
 8003b0a:	e7fe      	b.n	8003b0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b0c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b14:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b18:	0800f424 	.word	0x0800f424
  ldr r2, =_sbss
 8003b1c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b20:	2000170c 	.word	0x2000170c

08003b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC1_2_IRQHandler>

08003b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f001 fd0d 	bl	8005550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b36:	200f      	movs	r0, #15
 8003b38:	f000 f80e 	bl	8003b58 <HAL_InitTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	e001      	b.n	8003b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b48:	f7ff fcc4 	bl	80034d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_InitTick+0x6c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b6c:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_InitTick+0x70>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <HAL_InitTick+0x6c>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fd19 	bl	80055ba <HAL_SYSTICK_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d809      	bhi.n	8003ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b94:	2200      	movs	r2, #0
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f001 fce3 	bl	8005566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_InitTick+0x74>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e007      	b.n	8003bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e004      	b.n	8003bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e001      	b.n	8003bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000008 	.word	0x20000008
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	20000004 	.word	0x20000004

08003bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x20>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_IncTick+0x24>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_IncTick+0x24>)
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	20000534 	.word	0x20000534

08003bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_GetTick+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000534 	.word	0x20000534

08003c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff ffee 	bl	8003bf8 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d005      	beq.n	8003c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_Delay+0x44>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c36:	bf00      	nop
 8003c38:	f7ff ffde 	bl	8003bf8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d8f7      	bhi.n	8003c38 <HAL_Delay+0x28>
  {
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000008 	.word	0x20000008

08003c58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3360      	adds	r3, #96	; 0x60
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <LL_ADC_SetOffset+0x44>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	03fff000 	.word	0x03fff000

08003d08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3360      	adds	r3, #96	; 0x60
 8003d16:	461a      	mov	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3360      	adds	r3, #96	; 0x60
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	615a      	str	r2, [r3, #20]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b087      	sub	sp, #28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3330      	adds	r3, #48	; 0x30
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	4413      	add	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	211f      	movs	r1, #31
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	401a      	ands	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 011f 	and.w	r1, r3, #31
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0e5b      	lsrs	r3, r3, #25
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	0d1b      	lsrs	r3, r3, #20
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2107      	movs	r1, #7
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	0d1b      	lsrs	r3, r3, #20
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	431a      	orrs	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0318 	and.w	r3, r3, #24
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e88:	40d9      	lsrs	r1, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	0007ffff 	.word	0x0007ffff

08003eac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6093      	str	r3, [r2, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f00:	d101      	bne.n	8003f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f50:	d101      	bne.n	8003f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fa0:	f043 0202 	orr.w	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <LL_ADC_IsEnabled+0x18>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <LL_ADC_IsEnabled+0x1a>
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d101      	bne.n	8003ff2 <LL_ADC_IsDisableOngoing+0x18>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <LL_ADC_IsDisableOngoing+0x1a>
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800403c:	f043 0210 	orr.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d101      	bne.n	8004068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004086:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d101      	bne.n	80040b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e131      	b.n	8004342 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fe ff63 	bl	8002fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fef1 	bl	8003eec <LL_ADC_IsDeepPowerDownEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fed7 	bl	8003ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff0c 	bl	8003f3c <LL_ADC_IsInternalRegulatorEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d115      	bne.n	8004156 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fef0 	bl	8003f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004134:	4b85      	ldr	r3, [pc, #532]	; (800434c <HAL_ADC_Init+0x288>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	4a85      	ldr	r2, [pc, #532]	; (8004350 <HAL_ADC_Init+0x28c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	3301      	adds	r3, #1
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004148:	e002      	b.n	8004150 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3b01      	subs	r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f9      	bne.n	800414a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff feee 	bl	8003f3c <LL_ADC_IsInternalRegulatorEnabled>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f043 0210 	orr.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff62 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 800418c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 80ca 	bne.w	8004330 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 80c6 	bne.w	8004330 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041ac:	f043 0202 	orr.w	r2, r3, #2
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fefb 	bl	8003fb4 <LL_ADC_IsEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d110      	bne.n	80041e6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c4:	4863      	ldr	r0, [pc, #396]	; (8004354 <HAL_ADC_Init+0x290>)
 80041c6:	f7ff fef5 	bl	8003fb4 <LL_ADC_IsEnabled>
 80041ca:	4604      	mov	r4, r0
 80041cc:	4862      	ldr	r0, [pc, #392]	; (8004358 <HAL_ADC_Init+0x294>)
 80041ce:	f7ff fef1 	bl	8003fb4 <LL_ADC_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4323      	orrs	r3, r4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	485e      	ldr	r0, [pc, #376]	; (800435c <HAL_ADC_Init+0x298>)
 80041e2:	f7ff fd39 	bl	8003c58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7e5b      	ldrb	r3, [r3, #25]
 80041ea:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041f0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80041f6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80041fc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004204:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	3b01      	subs	r3, #1
 800421a:	045b      	lsls	r3, r3, #17
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4b46      	ldr	r3, [pc, #280]	; (8004360 <HAL_ADC_Init+0x29c>)
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	430b      	orrs	r3, r1
 8004250:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fefa 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 800425c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff1b 	bl	800409e <LL_ADC_INJ_IsConversionOngoing>
 8004268:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d13d      	bne.n	80042ec <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d13a      	bne.n	80042ec <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800427a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004282:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004292:	f023 0302 	bic.w	r3, r3, #2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	430b      	orrs	r3, r1
 800429e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d118      	bne.n	80042dc <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042cc:	430a      	orrs	r2, r1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e007      	b.n	80042ec <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10c      	bne.n	800430e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f023 010f 	bic.w	r1, r3, #15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
 800430c:	e007      	b.n	800431e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 020f 	bic.w	r2, r2, #15
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
 800432e:	e007      	b.n	8004340 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f043 0210 	orr.w	r2, r3, #16
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004340:	7ffb      	ldrb	r3, [r7, #31]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	bf00      	nop
 800434c:	20000000 	.word	0x20000000
 8004350:	053e2d63 	.word	0x053e2d63
 8004354:	50040000 	.word	0x50040000
 8004358:	50040100 	.word	0x50040100
 800435c:	50040300 	.word	0x50040300
 8004360:	fff0c007 	.word	0xfff0c007

08004364 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004370:	4850      	ldr	r0, [pc, #320]	; (80044b4 <HAL_ADC_Start_DMA+0x150>)
 8004372:	f7ff fd9b 	bl	8003eac <LL_ADC_GetMultimode>
 8004376:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fe67 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 808e 	bne.w	80044a6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_ADC_Start_DMA+0x34>
 8004394:	2302      	movs	r3, #2
 8004396:	e089      	b.n	80044ac <HAL_ADC_Start_DMA+0x148>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d002      	beq.n	80043b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d172      	bne.n	8004498 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fdb8 	bl	8004f28 <ADC_Enable>
 80043b8:	4603      	mov	r3, r0
 80043ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d165      	bne.n	800448e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_ADC_Start_DMA+0x154>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d002      	beq.n	80043e6 <HAL_ADC_Start_DMA+0x82>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_ADC_Start_DMA+0x84>
 80043e6:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_ADC_Start_DMA+0x158>)
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d002      	beq.n	80043f6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f023 0206 	bic.w	r2, r3, #6
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58
 800441a:	e002      	b.n	8004422 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_ADC_Start_DMA+0x15c>)
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <HAL_ADC_Start_DMA+0x160>)
 8004430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_ADC_Start_DMA+0x164>)
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	221c      	movs	r2, #28
 8004440:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0210 	orr.w	r2, r2, #16
 8004458:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3340      	adds	r3, #64	; 0x40
 8004474:	4619      	mov	r1, r3
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f001 f963 	bl	8005744 <HAL_DMA_Start_IT>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fdba 	bl	8004000 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800448c:	e00d      	b.n	80044aa <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004496:	e008      	b.n	80044aa <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80044a4:	e001      	b.n	80044aa <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	50040300 	.word	0x50040300
 80044b8:	50040100 	.word	0x50040100
 80044bc:	50040000 	.word	0x50040000
 80044c0:	080050f3 	.word	0x080050f3
 80044c4:	080051cb 	.word	0x080051cb
 80044c8:	080051e7 	.word	0x080051e7

080044cc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_ADC_Stop_DMA+0x16>
 80044de:	2302      	movs	r3, #2
 80044e0:	e051      	b.n	8004586 <HAL_ADC_Stop_DMA+0xba>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80044ea:	2103      	movs	r1, #3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fc5f 	bl	8004db0 <ADC_ConversionStop>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d13f      	bne.n	800457c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d10f      	bne.n	800453a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f970 	bl	8005804 <HAL_DMA_Abort>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0210 	bic.w	r2, r2, #16
 8004548:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fd6f 	bl	8005034 <ADC_Disable>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e002      	b.n	8004562 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fd69 	bl	8005034 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b0b6      	sub	sp, #216	; 0xd8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_ADC_ConfigChannel+0x22>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e3d5      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x7ce>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fd32 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 83ba 	bne.w	8004d68 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d824      	bhi.n	8004646 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	3b02      	subs	r3, #2
 8004602:	2b03      	cmp	r3, #3
 8004604:	d81b      	bhi.n	800463e <HAL_ADC_ConfigChannel+0x86>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_ADC_ConfigChannel+0x54>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	0800461d 	.word	0x0800461d
 8004610:	08004625 	.word	0x08004625
 8004614:	0800462d 	.word	0x0800462d
 8004618:	08004635 	.word	0x08004635
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	220c      	movs	r2, #12
 8004620:	605a      	str	r2, [r3, #4]
          break;
 8004622:	e011      	b.n	8004648 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2212      	movs	r2, #18
 8004628:	605a      	str	r2, [r3, #4]
          break;
 800462a:	e00d      	b.n	8004648 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2218      	movs	r2, #24
 8004630:	605a      	str	r2, [r3, #4]
          break;
 8004632:	e009      	b.n	8004648 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800463a:	605a      	str	r2, [r3, #4]
          break;
 800463c:	e004      	b.n	8004648 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2206      	movs	r2, #6
 8004642:	605a      	str	r2, [r3, #4]
          break;
 8004644:	e000      	b.n	8004648 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004646:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	f7ff fbae 	bl	8003db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fcf6 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 8004664:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fd16 	bl	800409e <LL_ADC_INJ_IsConversionOngoing>
 8004672:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 81c1 	bne.w	8004a02 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 81bc 	bne.w	8004a02 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004692:	d10f      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	4619      	mov	r1, r3
 80046a0:	f7ff fbb5 	bl	8003e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fb5c 	bl	8003d6a <LL_ADC_SetSamplingTimeCommonConfig>
 80046b2:	e00e      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	461a      	mov	r2, r3
 80046c2:	f7ff fba4 	bl	8003e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fb4c 	bl	8003d6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d00a      	beq.n	800470a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6919      	ldr	r1, [r3, #16]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004704:	f7ff fadc 	bl	8003cc0 <LL_ADC_SetOffset>
 8004708:	e17b      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff faf9 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x17e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff faee 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 800472c:	4603      	mov	r3, r0
 800472e:	0e9b      	lsrs	r3, r3, #26
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	e01e      	b.n	8004774 <HAL_ADC_ConfigChannel+0x1bc>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fae3 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 8004742:	4603      	mov	r3, r0
 8004744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800475c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e004      	b.n	8004772 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <HAL_ADC_ConfigChannel+0x1d4>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	e018      	b.n	80047be <HAL_ADC_ConfigChannel+0x206>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80047b0:	2320      	movs	r3, #32
 80047b2:	e004      	b.n	80047be <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80047b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047be:	429a      	cmp	r2, r3
 80047c0:	d106      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fab2 	bl	8003d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fa96 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 80047dc:	4603      	mov	r3, r0
 80047de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x244>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fa8b 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 80047f2:	4603      	mov	r3, r0
 80047f4:	0e9b      	lsrs	r3, r3, #26
 80047f6:	f003 021f 	and.w	r2, r3, #31
 80047fa:	e01e      	b.n	800483a <HAL_ADC_ConfigChannel+0x282>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fa80 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800481a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800481e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800482a:	2320      	movs	r3, #32
 800482c:	e004      	b.n	8004838 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800482e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x29a>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0e9b      	lsrs	r3, r3, #26
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	e018      	b.n	8004884 <HAL_ADC_ConfigChannel+0x2cc>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800486a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800486e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e004      	b.n	8004884 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800487a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004884:	429a      	cmp	r2, r3
 8004886:	d106      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fa4f 	bl	8003d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fa33 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x30a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fa28 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 80048b8:	4603      	mov	r3, r0
 80048ba:	0e9b      	lsrs	r3, r3, #26
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	e01e      	b.n	8004900 <HAL_ADC_ConfigChannel+0x348>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fa1d 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80048e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80048f0:	2320      	movs	r3, #32
 80048f2:	e004      	b.n	80048fe <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80048f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x360>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	e016      	b.n	8004946 <HAL_ADC_ConfigChannel+0x38e>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800492a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e004      	b.n	8004946 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800493c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004946:	429a      	cmp	r2, r3
 8004948:	d106      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2102      	movs	r1, #2
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f9ee 	bl	8003d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2103      	movs	r1, #3
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff f9d2 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x3cc>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2103      	movs	r1, #3
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff f9c7 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 800497a:	4603      	mov	r3, r0
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	f003 021f 	and.w	r2, r3, #31
 8004982:	e017      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x3fc>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2103      	movs	r1, #3
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff f9bc 	bl	8003d08 <LL_ADC_GetOffsetChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800499c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80049a6:	2320      	movs	r3, #32
 80049a8:	e003      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80049aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ac:	fab3 f383 	clz	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x414>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0e9b      	lsrs	r3, r3, #26
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	e011      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x438>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80049da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80049e4:	2320      	movs	r3, #32
 80049e6:	e003      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80049e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2103      	movs	r1, #3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f999 	bl	8003d34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fad4 	bl	8003fb4 <LL_ADC_IsEnabled>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8140 	bne.w	8004c94 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f7ff fa1f 	bl	8003e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4a8f      	ldr	r2, [pc, #572]	; (8004c68 <HAL_ADC_ConfigChannel+0x6b0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	f040 8131 	bne.w	8004c94 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x4a2>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	bf94      	ite	ls
 8004a52:	2301      	movls	r3, #1
 8004a54:	2300      	movhi	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e019      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x4d6>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004a72:	2320      	movs	r3, #32
 8004a74:	e003      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	bf94      	ite	ls
 8004a88:	2301      	movls	r3, #1
 8004a8a:	2300      	movhi	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d079      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x4f6>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	0e9b      	lsrs	r3, r3, #26
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	069b      	lsls	r3, r3, #26
 8004aa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aac:	e015      	b.n	8004ada <HAL_ADC_ConfigChannel+0x522>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	069b      	lsls	r3, r3, #26
 8004ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x542>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	0e9b      	lsrs	r3, r3, #26
 8004aec:	3301      	adds	r3, #1
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2101      	movs	r1, #1
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	e017      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x572>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004b12:	2320      	movs	r3, #32
 8004b14:	e003      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	ea42 0103 	orr.w	r1, r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x598>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	051b      	lsls	r3, r3, #20
 8004b4e:	e018      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x5ca>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004b68:	2320      	movs	r3, #32
 8004b6a:	e003      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f003 021f 	and.w	r2, r3, #31
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b82:	430b      	orrs	r3, r1
 8004b84:	e081      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x5ea>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	0e9b      	lsrs	r3, r3, #26
 8004b98:	3301      	adds	r3, #1
 8004b9a:	069b      	lsls	r3, r3, #26
 8004b9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba0:	e015      	b.n	8004bce <HAL_ADC_ConfigChannel+0x616>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	e003      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	069b      	lsls	r3, r3, #26
 8004bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x636>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	3301      	adds	r3, #1
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	e017      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x666>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	61fb      	str	r3, [r7, #28]
  return result;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e003      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	ea42 0103 	orr.w	r1, r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x692>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	0e9b      	lsrs	r3, r3, #26
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 021f 	and.w	r2, r3, #31
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	3b1e      	subs	r3, #30
 8004c42:	051b      	lsls	r3, r3, #20
 8004c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c48:	e01e      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x6d0>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	613b      	str	r3, [r7, #16]
  return result;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004c62:	2320      	movs	r3, #32
 8004c64:	e006      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x6bc>
 8004c66:	bf00      	nop
 8004c68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f003 021f 	and.w	r2, r3, #31
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	3b1e      	subs	r3, #30
 8004c82:	051b      	lsls	r3, r3, #20
 8004c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	6892      	ldr	r2, [r2, #8]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7ff f8bd 	bl	8003e0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_ADC_ConfigChannel+0x7d8>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d06c      	beq.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ca0:	483c      	ldr	r0, [pc, #240]	; (8004d94 <HAL_ADC_ConfigChannel+0x7dc>)
 8004ca2:	f7fe ffff 	bl	8003ca4 <LL_ADC_GetCommonPathInternalCh>
 8004ca6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3a      	ldr	r2, [pc, #232]	; (8004d98 <HAL_ADC_ConfigChannel+0x7e0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d127      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d121      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <HAL_ADC_ConfigChannel+0x7e4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d157      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	482f      	ldr	r0, [pc, #188]	; (8004d94 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cd6:	f7fe ffd2 	bl	8003c7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_ADC_ConfigChannel+0x7e8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	4a30      	ldr	r2, [pc, #192]	; (8004da4 <HAL_ADC_ConfigChannel+0x7ec>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cf4:	e002      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f9      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d02:	e03a      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <HAL_ADC_ConfigChannel+0x7f0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d113      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x77e>
 8004d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10d      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <HAL_ADC_ConfigChannel+0x7e4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d12a      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4819      	ldr	r0, [pc, #100]	; (8004d94 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d30:	f7fe ffa5 	bl	8003c7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d34:	e021      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_ADC_ConfigChannel+0x7f4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d11c      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <HAL_ADC_ConfigChannel+0x7e4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480c      	ldr	r0, [pc, #48]	; (8004d94 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d62:	f7fe ff8c 	bl	8003c7e <LL_ADC_SetCommonPathInternalCh>
 8004d66:	e008      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	37d8      	adds	r7, #216	; 0xd8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	80080000 	.word	0x80080000
 8004d94:	50040300 	.word	0x50040300
 8004d98:	c7520000 	.word	0xc7520000
 8004d9c:	50040000 	.word	0x50040000
 8004da0:	20000000 	.word	0x20000000
 8004da4:	053e2d63 	.word	0x053e2d63
 8004da8:	cb840000 	.word	0xcb840000
 8004dac:	80000001 	.word	0x80000001

08004db0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f942 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 8004dcc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff f963 	bl	800409e <LL_ADC_INJ_IsConversionOngoing>
 8004dd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8098 	beq.w	8004f18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02a      	beq.n	8004e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7e5b      	ldrb	r3, [r3, #25]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d126      	bne.n	8004e4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7e1b      	ldrb	r3, [r3, #24]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d122      	bne.n	8004e4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004e06:	2301      	movs	r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e0a:	e014      	b.n	8004e36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4a45      	ldr	r2, [pc, #276]	; (8004f24 <ADC_ConversionStop+0x174>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d90d      	bls.n	8004e30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f043 0210 	orr.w	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e074      	b.n	8004f1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d1e3      	bne.n	8004e0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2240      	movs	r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d014      	beq.n	8004e7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f8fa 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f8b7 	bl	8003fda <LL_ADC_IsDisableOngoing>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f8d6 	bl	8004028 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d014      	beq.n	8004eac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f909 	bl	800409e <LL_ADC_INJ_IsConversionOngoing>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff f89f 	bl	8003fda <LL_ADC_IsDisableOngoing>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f8e5 	bl	8004076 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d005      	beq.n	8004ebe <ADC_ConversionStop+0x10e>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d105      	bne.n	8004ec4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004eb8:	230c      	movs	r3, #12
 8004eba:	617b      	str	r3, [r7, #20]
        break;
 8004ebc:	e005      	b.n	8004eca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	617b      	str	r3, [r7, #20]
        break;
 8004ec2:	e002      	b.n	8004eca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	617b      	str	r3, [r7, #20]
        break;
 8004ec8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004eca:	f7fe fe95 	bl	8003bf8 <HAL_GetTick>
 8004ece:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ed0:	e01b      	b.n	8004f0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ed2:	f7fe fe91 	bl	8003bf8 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d914      	bls.n	8004f0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f043 0210 	orr.w	r2, r3, #16
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e007      	b.n	8004f1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1dc      	bne.n	8004ed2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	a33fffff 	.word	0xa33fffff

08004f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff f83b 	bl	8003fb4 <LL_ADC_IsEnabled>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d169      	bne.n	8005018 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	4b36      	ldr	r3, [pc, #216]	; (8005024 <ADC_Enable+0xfc>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f043 0210 	orr.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e055      	b.n	800501a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fff6 	bl	8003f64 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f78:	482b      	ldr	r0, [pc, #172]	; (8005028 <ADC_Enable+0x100>)
 8004f7a:	f7fe fe93 	bl	8003ca4 <LL_ADC_GetCommonPathInternalCh>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d013      	beq.n	8004fb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f88:	4b28      	ldr	r3, [pc, #160]	; (800502c <ADC_Enable+0x104>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	099b      	lsrs	r3, r3, #6
 8004f8e:	4a28      	ldr	r2, [pc, #160]	; (8005030 <ADC_Enable+0x108>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004fa2:	e002      	b.n	8004faa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f9      	bne.n	8004fa4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fb0:	f7fe fe22 	bl	8003bf8 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fb6:	e028      	b.n	800500a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe fff9 	bl	8003fb4 <LL_ADC_IsEnabled>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe ffc9 	bl	8003f64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fd2:	f7fe fe11 	bl	8003bf8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d914      	bls.n	800500a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d00d      	beq.n	800500a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e007      	b.n	800501a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d1cf      	bne.n	8004fb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	8000003f 	.word	0x8000003f
 8005028:	50040300 	.word	0x50040300
 800502c:	20000000 	.word	0x20000000
 8005030:	053e2d63 	.word	0x053e2d63

08005034 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe ffca 	bl	8003fda <LL_ADC_IsDisableOngoing>
 8005046:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe ffb1 	bl	8003fb4 <LL_ADC_IsEnabled>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d047      	beq.n	80050e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d144      	bne.n	80050e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 030d 	and.w	r3, r3, #13
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10c      	bne.n	8005086 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe ff8b 	bl	8003f8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2203      	movs	r2, #3
 800507c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800507e:	f7fe fdbb 	bl	8003bf8 <HAL_GetTick>
 8005082:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005084:	e029      	b.n	80050da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f043 0210 	orr.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e023      	b.n	80050ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050a2:	f7fe fda9 	bl	8003bf8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d914      	bls.n	80050da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0210 	orr.w	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e007      	b.n	80050ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1dc      	bne.n	80050a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005108:	2b00      	cmp	r3, #0
 800510a:	d14b      	bne.n	80051a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d021      	beq.n	800516a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fe30 	bl	8003d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d032      	beq.n	800519c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d12b      	bne.n	800519c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11f      	bne.n	800519c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
 8005168:	e018      	b.n	800519c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d111      	bne.n	800519c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7fe f8db 	bl	8003358 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051a2:	e00e      	b.n	80051c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff f9f6 	bl	80045a2 <HAL_ADC_ErrorCallback>
}
 80051b6:	e004      	b.n	80051c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff f9d8 	bl	800458e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	f043 0204 	orr.w	r2, r3, #4
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff f9c8 	bl	80045a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <LL_ADC_IsEnabled>:
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <LL_ADC_IsEnabled+0x18>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <LL_ADC_IsEnabled+0x1a>
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_ADC_REG_IsConversionOngoing>:
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d101      	bne.n	8005258 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b09f      	sub	sp, #124	; 0x7c
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005282:	2302      	movs	r3, #2
 8005284:	e089      	b.n	800539a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800528e:	2300      	movs	r3, #0
 8005290:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005292:	2300      	movs	r3, #0
 8005294:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a42      	ldr	r2, [pc, #264]	; (80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d102      	bne.n	80052a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052a0:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	e001      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e068      	b.n	800539a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ffb8 	bl	8005240 <LL_ADC_REG_IsConversionOngoing>
 80052d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ffb2 	bl	8005240 <LL_ADC_REG_IsConversionOngoing>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d14a      	bne.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80052e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d147      	bne.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052e8:	4b30      	ldr	r3, [pc, #192]	; (80053ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80052ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d027      	beq.n	8005344 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80052f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005306:	035b      	lsls	r3, r3, #13
 8005308:	430b      	orrs	r3, r1
 800530a:	431a      	orrs	r2, r3
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005310:	4824      	ldr	r0, [pc, #144]	; (80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005312:	f7ff ff82 	bl	800521a <LL_ADC_IsEnabled>
 8005316:	4604      	mov	r4, r0
 8005318:	4823      	ldr	r0, [pc, #140]	; (80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800531a:	f7ff ff7e 	bl	800521a <LL_ADC_IsEnabled>
 800531e:	4603      	mov	r3, r0
 8005320:	4323      	orrs	r3, r4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d132      	bne.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800532e:	f023 030f 	bic.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	6892      	ldr	r2, [r2, #8]
 800533a:	430a      	orrs	r2, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005342:	e023      	b.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005350:	4814      	ldr	r0, [pc, #80]	; (80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005352:	f7ff ff62 	bl	800521a <LL_ADC_IsEnabled>
 8005356:	4604      	mov	r4, r0
 8005358:	4813      	ldr	r0, [pc, #76]	; (80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800535a:	f7ff ff5e 	bl	800521a <LL_ADC_IsEnabled>
 800535e:	4603      	mov	r3, r0
 8005360:	4323      	orrs	r3, r4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d112      	bne.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800536e:	f023 030f 	bic.w	r3, r3, #15
 8005372:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005374:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005376:	e009      	b.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800538a:	e000      	b.n	800538e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800538c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005396:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800539a:	4618      	mov	r0, r3
 800539c:	377c      	adds	r7, #124	; 0x7c
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	50040000 	.word	0x50040000
 80053a8:	50040100 	.word	0x50040100
 80053ac:	50040300 	.word	0x50040300

080053b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db0a      	blt.n	800547a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <__NVIC_SetPriority+0x4c>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	440b      	add	r3, r1
 8005474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005478:	e00a      	b.n	8005490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <__NVIC_SetPriority+0x50>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3b04      	subs	r3, #4
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	440b      	add	r3, r1
 800548e:	761a      	strb	r2, [r3, #24]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf28      	it	cs
 80054c2:	2304      	movcs	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d902      	bls.n	80054d4 <NVIC_EncodePriority+0x30>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	e000      	b.n	80054d6 <NVIC_EncodePriority+0x32>
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ec:	f04f 31ff 	mov.w	r1, #4294967295
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	4313      	orrs	r3, r2
         );
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3b01      	subs	r3, #1
 8005518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551c:	d301      	bcc.n	8005522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <SysTick_Config+0x40>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800552a:	210f      	movs	r1, #15
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	f7ff ff8e 	bl	8005450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <SysTick_Config+0x40>)
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <SysTick_Config+0x40>)
 800553c:	2207      	movs	r2, #7
 800553e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000e010 	.word	0xe000e010

08005550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff29 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005578:	f7ff ff3e 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 800557c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff8e 	bl	80054a4 <NVIC_EncodePriority>
 8005588:	4602      	mov	r2, r0
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff5d 	bl	8005450 <__NVIC_SetPriority>
}
 8005596:	bf00      	nop
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	4603      	mov	r3, r0
 80055a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ff31 	bl	8005414 <__NVIC_EnableIRQ>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffa2 	bl	800550c <SysTick_Config>
 80055c8:	4603      	mov	r3, r0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e098      	b.n	8005718 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b4d      	ldr	r3, [pc, #308]	; (8005724 <HAL_DMA_Init+0x150>)
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d80f      	bhi.n	8005612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_DMA_Init+0x154>)
 80055fa:	4413      	add	r3, r2
 80055fc:	4a4b      	ldr	r2, [pc, #300]	; (800572c <HAL_DMA_Init+0x158>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	009a      	lsls	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a48      	ldr	r2, [pc, #288]	; (8005730 <HAL_DMA_Init+0x15c>)
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
 8005610:	e00e      	b.n	8005630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	4b46      	ldr	r3, [pc, #280]	; (8005734 <HAL_DMA_Init+0x160>)
 800561a:	4413      	add	r3, r2
 800561c:	4a43      	ldr	r2, [pc, #268]	; (800572c <HAL_DMA_Init+0x158>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	009a      	lsls	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a42      	ldr	r2, [pc, #264]	; (8005738 <HAL_DMA_Init+0x164>)
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568a:	d039      	beq.n	8005700 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	4a27      	ldr	r2, [pc, #156]	; (8005730 <HAL_DMA_Init+0x15c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d11a      	bne.n	80056cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <HAL_DMA_Init+0x168>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f003 031c 	and.w	r3, r3, #28
 80056a2:	210f      	movs	r1, #15
 80056a4:	fa01 f303 	lsl.w	r3, r1, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	4924      	ldr	r1, [pc, #144]	; (800573c <HAL_DMA_Init+0x168>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056b0:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_DMA_Init+0x168>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	f003 031c 	and.w	r3, r3, #28
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	491d      	ldr	r1, [pc, #116]	; (800573c <HAL_DMA_Init+0x168>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	e019      	b.n	8005700 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <HAL_DMA_Init+0x16c>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	f003 031c 	and.w	r3, r3, #28
 80056d8:	210f      	movs	r1, #15
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	4917      	ldr	r1, [pc, #92]	; (8005740 <HAL_DMA_Init+0x16c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056e6:	4b16      	ldr	r3, [pc, #88]	; (8005740 <HAL_DMA_Init+0x16c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f003 031c 	and.w	r3, r3, #28
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	4911      	ldr	r1, [pc, #68]	; (8005740 <HAL_DMA_Init+0x16c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40020407 	.word	0x40020407
 8005728:	bffdfff8 	.word	0xbffdfff8
 800572c:	cccccccd 	.word	0xcccccccd
 8005730:	40020000 	.word	0x40020000
 8005734:	bffdfbf8 	.word	0xbffdfbf8
 8005738:	40020400 	.word	0x40020400
 800573c:	400200a8 	.word	0x400200a8
 8005740:	400204a8 	.word	0x400204a8

08005744 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_DMA_Start_IT+0x20>
 8005760:	2302      	movs	r3, #2
 8005762:	e04b      	b.n	80057fc <HAL_DMA_Start_IT+0xb8>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d13a      	bne.n	80057ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f91e 	bl	80059de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 020e 	orr.w	r2, r2, #14
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e00f      	b.n	80057dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 020a 	orr.w	r2, r2, #10
 80057da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e005      	b.n	80057fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
 80057f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d008      	beq.n	800582e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e022      	b.n	8005874 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 020e 	bic.w	r2, r2, #14
 800583c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f003 021c 	and.w	r2, r3, #28
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2101      	movs	r1, #1
 800585c:	fa01 f202 	lsl.w	r2, r1, r2
 8005860:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	f003 031c 	and.w	r3, r3, #28
 80058a0:	2204      	movs	r2, #4
 80058a2:	409a      	lsls	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d026      	beq.n	80058fa <HAL_DMA_IRQHandler+0x7a>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d021      	beq.n	80058fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0204 	bic.w	r2, r2, #4
 80058d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	f003 021c 	and.w	r2, r3, #28
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	2104      	movs	r1, #4
 80058e2:	fa01 f202 	lsl.w	r2, r1, r2
 80058e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d071      	beq.n	80059d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80058f8:	e06c      	b.n	80059d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f003 031c 	and.w	r3, r3, #28
 8005902:	2202      	movs	r2, #2
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02e      	beq.n	800596c <HAL_DMA_IRQHandler+0xec>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d029      	beq.n	800596c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 020a 	bic.w	r2, r2, #10
 8005934:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f003 021c 	and.w	r2, r3, #28
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	2102      	movs	r1, #2
 800594c:	fa01 f202 	lsl.w	r2, r1, r2
 8005950:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d038      	beq.n	80059d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800596a:	e033      	b.n	80059d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f003 031c 	and.w	r3, r3, #28
 8005974:	2208      	movs	r2, #8
 8005976:	409a      	lsls	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d02a      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x156>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d025      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 020e 	bic.w	r2, r2, #14
 8005998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 021c 	and.w	r2, r3, #28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
}
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
 80059ea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f003 021c 	and.w	r2, r3, #28
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f202 	lsl.w	r2, r1, r2
 80059fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d108      	bne.n	8005a22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a20:	e007      	b.n	8005a32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	60da      	str	r2, [r3, #12]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a4e:	e14e      	b.n	8005cee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8140 	beq.w	8005ce8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d005      	beq.n	8005a80 <HAL_GPIO_Init+0x40>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d130      	bne.n	8005ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0201 	and.w	r2, r3, #1
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d017      	beq.n	8005b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	2203      	movs	r2, #3
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4013      	ands	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d123      	bne.n	8005b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	08da      	lsrs	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3208      	adds	r2, #8
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	08da      	lsrs	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3208      	adds	r2, #8
 8005b6c:	6939      	ldr	r1, [r7, #16]
 8005b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4013      	ands	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0203 	and.w	r2, r3, #3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 809a 	beq.w	8005ce8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bb4:	4b55      	ldr	r3, [pc, #340]	; (8005d0c <HAL_GPIO_Init+0x2cc>)
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb8:	4a54      	ldr	r2, [pc, #336]	; (8005d0c <HAL_GPIO_Init+0x2cc>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8005bc0:	4b52      	ldr	r3, [pc, #328]	; (8005d0c <HAL_GPIO_Init+0x2cc>)
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005bcc:	4a50      	ldr	r2, [pc, #320]	; (8005d10 <HAL_GPIO_Init+0x2d0>)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	220f      	movs	r2, #15
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005bf6:	d013      	beq.n	8005c20 <HAL_GPIO_Init+0x1e0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a46      	ldr	r2, [pc, #280]	; (8005d14 <HAL_GPIO_Init+0x2d4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00d      	beq.n	8005c1c <HAL_GPIO_Init+0x1dc>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a45      	ldr	r2, [pc, #276]	; (8005d18 <HAL_GPIO_Init+0x2d8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <HAL_GPIO_Init+0x1d8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a44      	ldr	r2, [pc, #272]	; (8005d1c <HAL_GPIO_Init+0x2dc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d101      	bne.n	8005c14 <HAL_GPIO_Init+0x1d4>
 8005c10:	2303      	movs	r3, #3
 8005c12:	e006      	b.n	8005c22 <HAL_GPIO_Init+0x1e2>
 8005c14:	2307      	movs	r3, #7
 8005c16:	e004      	b.n	8005c22 <HAL_GPIO_Init+0x1e2>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e002      	b.n	8005c22 <HAL_GPIO_Init+0x1e2>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <HAL_GPIO_Init+0x1e2>
 8005c20:	2300      	movs	r3, #0
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	f002 0203 	and.w	r2, r2, #3
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	4093      	lsls	r3, r2
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c32:	4937      	ldr	r1, [pc, #220]	; (8005d10 <HAL_GPIO_Init+0x2d0>)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	089b      	lsrs	r3, r3, #2
 8005c38:	3302      	adds	r3, #2
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c40:	4b37      	ldr	r3, [pc, #220]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c64:	4a2e      	ldr	r2, [pc, #184]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c8e:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005cbe:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <HAL_GPIO_Init+0x2e0>)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3301      	adds	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f aea9 	bne.w	8005a50 <HAL_GPIO_Init+0x10>
  }
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40010000 	.word	0x40010000
 8005d14:	48000400 	.word	0x48000400
 8005d18:	48000800 	.word	0x48000800
 8005d1c:	48000c00 	.word	0x48000c00
 8005d20:	40010400 	.word	0x40010400

08005d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	887b      	ldrh	r3, [r7, #2]
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e001      	b.n	8005d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d70:	e002      	b.n	8005d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	43d9      	mvns	r1, r3
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	400b      	ands	r3, r1
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dba:	b08b      	sub	sp, #44	; 0x2c
 8005dbc:	af06      	add	r7, sp, #24
 8005dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e109      	b.n	8005fde <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f008 fd84 	bl	800e8ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 fc63 	bl	800a6bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	687e      	ldr	r6, [r7, #4]
 8005dfe:	466d      	mov	r5, sp
 8005e00:	f106 0410 	add.w	r4, r6, #16
 8005e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e10:	1d33      	adds	r3, r6, #4
 8005e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e14:	6838      	ldr	r0, [r7, #0]
 8005e16:	f004 fc29 	bl	800a66c <USB_CoreInit>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0d8      	b.n	8005fde <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 fc5d 	bl	800a6f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	e04d      	b.n	8005eda <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3305      	adds	r3, #5
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	3304      	adds	r3, #4
 8005e66:	7bfa      	ldrb	r2, [r7, #15]
 8005e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	b298      	uxth	r0, r3
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	440b      	add	r3, r1
 8005e7c:	333a      	adds	r3, #58	; 0x3a
 8005e7e:	4602      	mov	r2, r0
 8005e80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	440b      	add	r3, r1
 8005e92:	3307      	adds	r3, #7
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	440b      	add	r3, r1
 8005ea6:	333c      	adds	r3, #60	; 0x3c
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	440b      	add	r3, r1
 8005eba:	3340      	adds	r3, #64	; 0x40
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	440b      	add	r3, r1
 8005ece:	3344      	adds	r3, #68	; 0x44
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3ac      	bcc.n	8005e3e <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
 8005ee8:	e044      	b.n	8005f74 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005eea:	7bfa      	ldrb	r2, [r7, #15]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f2c:	7bfa      	ldrb	r2, [r7, #15]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f58:	7bfa      	ldrb	r2, [r7, #15]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	3301      	adds	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	7bfa      	ldrb	r2, [r7, #15]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3b5      	bcc.n	8005eea <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	687e      	ldr	r6, [r7, #4]
 8005f86:	466d      	mov	r5, sp
 8005f88:	f106 0410 	add.w	r4, r6, #16
 8005f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f98:	1d33      	adds	r3, r6, #4
 8005f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f9c:	6838      	ldr	r0, [r7, #0]
 8005f9e:	f004 fbb5 	bl	800a70c <USB_DevInit>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e014      	b.n	8005fde <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d102      	bne.n	8005fd2 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fc55 	bl	800787c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f006 fdc1 	bl	800cb5e <USB_DevDisconnect>

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fe6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_PCD_Start+0x16>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e012      	b.n	8006022 <HAL_PCD_Start+0x3c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f004 fb40 	bl	800a68e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f006 fd8c 	bl	800cb30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f006 fda6 	bl	800cb88 <USB_ReadInterrupts>
 800603c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb3e 	bl	80066ca <PCD_EP_ISR_Handler>

    return;
 800604e:	e110      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606c:	b292      	uxth	r2, r2
 800606e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f008 fcf1 	bl	800ea5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8fc 	bl	8006278 <HAL_PCD_SetAddress>

    return;
 8006080:	e0f7      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00c      	beq.n	80060a6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800609e:	b292      	uxth	r2, r2
 80060a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80060a4:	e0e5      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060c2:	b292      	uxth	r2, r2
 80060c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80060c8:	e0d3      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d034      	beq.n	800613e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	b292      	uxth	r2, r2
 80060e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0208 	bic.w	r2, r2, #8
 80060fe:	b292      	uxth	r2, r2
 8006100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800610a:	2b01      	cmp	r3, #1
 800610c:	d107      	bne.n	800611e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006116:	2100      	movs	r1, #0
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f008 ff4f 	bl	800efbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f008 fcd4 	bl	800eacc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006136:	b292      	uxth	r2, r2
 8006138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800613c:	e099      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006144:	2b00      	cmp	r3, #0
 8006146:	d027      	beq.n	8006198 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0208 	orr.w	r2, r2, #8
 800615a:	b292      	uxth	r2, r2
 800615c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006172:	b292      	uxth	r2, r2
 8006174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0204 	orr.w	r2, r2, #4
 800618a:	b292      	uxth	r2, r2
 800618c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f008 fc81 	bl	800ea98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006196:	e06c      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d040      	beq.n	8006224 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b4:	b292      	uxth	r2, r2
 80061b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d12b      	bne.n	800621c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0204 	orr.w	r2, r2, #4
 80061d6:	b292      	uxth	r2, r2
 80061d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	b292      	uxth	r2, r2
 80061f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006204:	b29b      	uxth	r3, r3
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006212:	2101      	movs	r1, #1
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f008 fed1 	bl	800efbc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800621a:	e02a      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f008 fc3b 	bl	800ea98 <HAL_PCD_SuspendCallback>
    return;
 8006222:	e026      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006236:	b29a      	uxth	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006240:	b292      	uxth	r2, r2
 8006242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f008 fbf9 	bl	800ea3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800624c:	e011      	b.n	8006272 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00c      	beq.n	8006272 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626a:	b292      	uxth	r2, r2
 800626c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006270:	bf00      	nop
  }
}
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_PCD_SetAddress+0x1a>
 800628e:	2302      	movs	r3, #2
 8006290:	e013      	b.n	80062ba <HAL_PCD_SetAddress+0x42>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f006 fc2c 	bl	800cb08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	461a      	mov	r2, r3
 80062d0:	4603      	mov	r3, r0
 80062d2:	70fb      	strb	r3, [r7, #3]
 80062d4:	460b      	mov	r3, r1
 80062d6:	803b      	strh	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da0f      	bge.n	8006308 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	705a      	strb	r2, [r3, #1]
 8006306:	e00f      	b.n	8006328 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 0207 	and.w	r2, r3, #7
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	3304      	adds	r3, #4
 8006320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	b2da      	uxtb	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006334:	883a      	ldrh	r2, [r7, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	78ba      	ldrb	r2, [r7, #2]
 800633e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006352:	78bb      	ldrb	r3, [r7, #2]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d102      	bne.n	800635e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_PCD_EP_Open+0xaa>
 8006368:	2302      	movs	r3, #2
 800636a:	e00e      	b.n	800638a <HAL_PCD_EP_Open+0xc8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	4618      	mov	r0, r3
 800637c:	f004 f9e8 	bl	800a750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8006388:	7afb      	ldrb	r3, [r7, #11]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800639e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da0f      	bge.n	80063c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4413      	add	r3, r2
 80063ba:	3304      	adds	r3, #4
 80063bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	705a      	strb	r2, [r3, #1]
 80063c4:	e00f      	b.n	80063e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 0207 	and.w	r2, r3, #7
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4413      	add	r3, r2
 80063dc:	3304      	adds	r3, #4
 80063de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_PCD_EP_Close+0x6e>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e00e      	b.n	800641e <HAL_PCD_EP_Close+0x8c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	4618      	mov	r0, r3
 8006410:	f004 fd58 	bl	800aec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	460b      	mov	r3, r1
 8006434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006436:	7afb      	ldrb	r3, [r7, #11]
 8006438:	f003 0207 	and.w	r2, r3, #7
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	3304      	adds	r3, #4
 800644e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b2da      	uxtb	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6979      	ldr	r1, [r7, #20]
 8006484:	4618      	mov	r0, r3
 8006486:	f004 ff0a 	bl	800b29e <USB_EPStartXfer>
 800648a:	e005      	b.n	8006498 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6979      	ldr	r1, [r7, #20]
 8006492:	4618      	mov	r0, r3
 8006494:	f004 ff03 	bl	800b29e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 0207 	and.w	r2, r3, #7
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	440b      	add	r3, r1
 80064c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80064c4:	681b      	ldr	r3, [r3, #0]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	460b      	mov	r3, r1
 80064e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	3304      	adds	r3, #4
 80064f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2200      	movs	r2, #0
 8006518:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2201      	movs	r2, #1
 800651e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b2da      	uxtb	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	4618      	mov	r0, r3
 800653e:	f004 feae 	bl	800b29e <USB_EPStartXfer>
 8006542:	e005      	b.n	8006550 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	4618      	mov	r0, r3
 800654c:	f004 fea7 	bl	800b29e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	f003 0207 	and.w	r2, r3, #7
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d901      	bls.n	8006578 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e04e      	b.n	8006616 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657c:	2b00      	cmp	r3, #0
 800657e:	da0f      	bge.n	80065a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	3304      	adds	r3, #4
 8006596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	705a      	strb	r2, [r3, #1]
 800659e:	e00d      	b.n	80065bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	3304      	adds	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_PCD_EP_SetStall+0x82>
 80065d8:	2302      	movs	r3, #2
 80065da:	e01c      	b.n	8006616 <HAL_PCD_EP_SetStall+0xbc>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68f9      	ldr	r1, [r7, #12]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f006 f98d 	bl	800c90a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f006 face 	bl	800cba8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	f003 020f 	and.w	r2, r3, #15
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d901      	bls.n	800663c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e042      	b.n	80066c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800663c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006640:	2b00      	cmp	r3, #0
 8006642:	da0f      	bge.n	8006664 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	3304      	adds	r3, #4
 800665a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	705a      	strb	r2, [r3, #1]
 8006662:	e00f      	b.n	8006684 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	f003 0207 	and.w	r2, r3, #7
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	3304      	adds	r3, #4
 800667c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_PCD_EP_ClrStall+0x86>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e00e      	b.n	80066c2 <HAL_PCD_EP_ClrStall+0xa4>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f006 f97a 	bl	800c9ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b096      	sub	sp, #88	; 0x58
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80066d2:	e3a9      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80066e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80066ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 8169 	bne.w	80069ca <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80066f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d150      	bne.n	80067a6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	89fb      	ldrh	r3, [r7, #14]
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	332c      	adds	r3, #44	; 0x2c
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006754:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	441a      	add	r2, r3
 8006760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006762:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006764:	2100      	movs	r1, #0
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f008 f94f 	bl	800ea0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8357 	beq.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
 800677a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8352 	bne.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006790:	b2da      	uxtb	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	b292      	uxth	r2, r2
 8006798:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80067a4:	e340      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80067ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80067b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80067bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d032      	beq.n	800682a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	4413      	add	r3, r2
 80067de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80067f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f006 fa20 	bl	800cc44 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29a      	uxth	r2, r3
 800680c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006810:	4013      	ands	r3, r2
 8006812:	823b      	strh	r3, [r7, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	8a3a      	ldrh	r2, [r7, #16]
 800681a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800681e:	b292      	uxth	r2, r2
 8006820:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f008 f8c4 	bl	800e9b0 <HAL_PCD_SetupStageCallback>
 8006828:	e2fe      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800682a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800682e:	2b00      	cmp	r3, #0
 8006830:	f280 82fa 	bge.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29a      	uxth	r2, r3
 800683c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006840:	4013      	ands	r3, r2
 8006842:	83fb      	strh	r3, [r7, #30]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	8bfa      	ldrh	r2, [r7, #30]
 800684a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800684e:	b292      	uxth	r2, r2
 8006850:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4413      	add	r3, r2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	4413      	add	r3, r2
 800686c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d019      	beq.n	80068b6 <PCD_EP_ISR_Handler+0x1ec>
 8006882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d015      	beq.n	80068b6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	6959      	ldr	r1, [r3, #20]
 8006892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006894:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006898:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800689a:	b29b      	uxth	r3, r3
 800689c:	f006 f9d2 	bl	800cc44 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	441a      	add	r2, r3
 80068aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f008 f88f 	bl	800e9d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80068c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 82ad 	bne.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
 80068ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068da:	f000 82a5 	beq.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	4413      	add	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b3e      	cmp	r3, #62	; 0x3e
 8006904:	d918      	bls.n	8006938 <PCD_EP_ISR_Handler+0x26e>
 8006906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <PCD_EP_ISR_Handler+0x256>
 800691a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691c:	3b01      	subs	r3, #1
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e029      	b.n	800698c <PCD_EP_ISR_Handler+0x2c2>
 8006938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d112      	bne.n	8006966 <PCD_EP_ISR_Handler+0x29c>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800694a:	b29a      	uxth	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	801a      	strh	r2, [r3, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695e:	b29a      	uxth	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e012      	b.n	800698c <PCD_EP_ISR_Handler+0x2c2>
 8006966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
 800696e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <PCD_EP_ISR_Handler+0x2b6>
 800697a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697c:	3301      	adds	r3, #1
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
 8006980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006982:	b29b      	uxth	r3, r3
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	b29a      	uxth	r2, r3
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	827b      	strh	r3, [r7, #18]
 800699e:	8a7b      	ldrh	r3, [r7, #18]
 80069a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a4:	827b      	strh	r3, [r7, #18]
 80069a6:	8a7b      	ldrh	r3, [r7, #18]
 80069a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ac:	827b      	strh	r3, [r7, #18]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	8a7b      	ldrh	r3, [r7, #18]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]
 80069c8:	e22e      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069de:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f280 80f7 	bge.w	8006bd6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069fe:	4013      	ands	r3, r2
 8006a00:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a1a:	b292      	uxth	r2, r2
 8006a1c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006a1e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	3304      	adds	r3, #4
 8006a34:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d123      	bne.n	8006a86 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	4413      	add	r3, r2
 8006a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006a66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 808e 	beq.w	8006b8c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	6959      	ldr	r1, [r3, #20]
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	88da      	ldrh	r2, [r3, #6]
 8006a7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a80:	f006 f8e0 	bl	800cc44 <USB_ReadPMA>
 8006a84:	e082      	b.n	8006b8c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a88:	78db      	ldrb	r3, [r3, #3]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d10a      	bne.n	8006aa4 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006a8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a92:	461a      	mov	r2, r3
 8006a94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9d4 	bl	8006e44 <HAL_PCD_EP_DB_Receive>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006aa2:	e073      	b.n	8006b8c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d022      	beq.n	8006b48 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	4413      	add	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006b2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02c      	beq.n	8006b8c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	6959      	ldr	r1, [r3, #20]
 8006b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3c:	891a      	ldrh	r2, [r3, #8]
 8006b3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b42:	f006 f87f 	bl	800cc44 <USB_ReadPMA>
 8006b46:	e021      	b.n	8006b8c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006b70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	6959      	ldr	r1, [r3, #20]
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	895a      	ldrh	r2, [r3, #10]
 8006b84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b88:	f006 f85c 	bl	800cc44 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b94:	441a      	add	r2, r3
 8006b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ba2:	441a      	add	r2, r3
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <PCD_EP_ISR_Handler+0x4f2>
 8006bb0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d206      	bcs.n	8006bca <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f007 ff06 	bl	800e9d4 <HAL_PCD_DataOutStageCallback>
 8006bc8:	e005      	b.n	8006bd6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f004 fb64 	bl	800b29e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006bd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8122 	beq.w	8006e28 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006be4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c38:	78db      	ldrb	r3, [r3, #3]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	f040 80a2 	bne.w	8006d84 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	2200      	movs	r2, #0
 8006c44:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c48:	7b1b      	ldrb	r3, [r3, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 8093 	beq.w	8006d76 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d046      	beq.n	8006cea <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d126      	bne.n	8006cb2 <PCD_EP_ISR_Handler+0x5e8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	4413      	add	r3, r2
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	00da      	lsls	r2, r3, #3
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c8a:	623b      	str	r3, [r7, #32]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	e061      	b.n	8006d76 <PCD_EP_ISR_Handler+0x6ac>
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d15d      	bne.n	8006d76 <PCD_EP_ISR_Handler+0x6ac>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	4413      	add	r3, r2
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	00da      	lsls	r2, r3, #3
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	4413      	add	r3, r2
 8006cdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e045      	b.n	8006d76 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d126      	bne.n	8006d46 <PCD_EP_ISR_Handler+0x67c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	4413      	add	r3, r2
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	00da      	lsls	r2, r3, #3
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e017      	b.n	8006d76 <PCD_EP_ISR_Handler+0x6ac>
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d113      	bne.n	8006d76 <PCD_EP_ISR_Handler+0x6ac>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5c:	4413      	add	r3, r2
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00da      	lsls	r2, r3, #3
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	2200      	movs	r2, #0
 8006d74:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f007 fe44 	bl	800ea0a <HAL_PCD_DataInStageCallback>
 8006d82:	e051      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006d84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d144      	bne.n	8006e1a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4413      	add	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d907      	bls.n	8006dd4 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8006dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006dcc:	1ad2      	subs	r2, r2, r3
 8006dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd0:	619a      	str	r2, [r3, #24]
 8006dd2:	e002      	b.n	8006dda <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f007 fe0e 	bl	800ea0a <HAL_PCD_DataInStageCallback>
 8006dee:	e01b      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006df8:	441a      	add	r2, r3
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	69da      	ldr	r2, [r3, #28]
 8006e02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e06:	441a      	add	r2, r3
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e12:	4618      	mov	r0, r3
 8006e14:	f004 fa43 	bl	800b29e <USB_EPStartXfer>
 8006e18:	e006      	b.n	8006e28 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006e1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f917 	bl	8007056 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	b21b      	sxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f6ff ac4d 	blt.w	80066d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3758      	adds	r7, #88	; 0x58
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d07c      	beq.n	8006f56 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	8b7b      	ldrh	r3, [r7, #26]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d306      	bcc.n	8006e9a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	8b7b      	ldrh	r3, [r7, #26]
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	619a      	str	r2, [r3, #24]
 8006e98:	e002      	b.n	8006ea0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d123      	bne.n	8006ef0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	833b      	strh	r3, [r7, #24]
 8006ec4:	8b3b      	ldrh	r3, [r7, #24]
 8006ec6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006eca:	833b      	strh	r3, [r7, #24]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	441a      	add	r2, r3
 8006eda:	8b3b      	ldrh	r3, [r7, #24]
 8006edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01f      	beq.n	8006f3a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	82fb      	strh	r3, [r7, #22]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006f3a:	8b7b      	ldrh	r3, [r7, #26]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8085 	beq.w	800704c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	891a      	ldrh	r2, [r3, #8]
 8006f4e:	8b7b      	ldrh	r3, [r7, #26]
 8006f50:	f005 fe78 	bl	800cc44 <USB_ReadPMA>
 8006f54:	e07a      	b.n	800704c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	8b7b      	ldrh	r3, [r7, #26]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d306      	bcc.n	8006f94 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	8b7b      	ldrh	r3, [r7, #26]
 8006f8c:	1ad2      	subs	r2, r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	619a      	str	r2, [r3, #24]
 8006f92:	e002      	b.n	8006f9a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d123      	bne.n	8006fea <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbc:	83fb      	strh	r3, [r7, #30]
 8006fbe:	8bfb      	ldrh	r3, [r7, #30]
 8006fc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fc4:	83fb      	strh	r3, [r7, #30]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	441a      	add	r2, r3
 8006fd4:	8bfb      	ldrh	r3, [r7, #30]
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11f      	bne.n	8007034 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	83bb      	strh	r3, [r7, #28]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	8bbb      	ldrh	r3, [r7, #28]
 8007020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007030:	b29b      	uxth	r3, r3
 8007032:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007034:	8b7b      	ldrh	r3, [r7, #26]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6959      	ldr	r1, [r3, #20]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	895a      	ldrh	r2, [r3, #10]
 8007046:	8b7b      	ldrh	r3, [r7, #26]
 8007048:	f005 fdfc 	bl	800cc44 <USB_ReadPMA>
    }
  }

  return count;
 800704c:	8b7b      	ldrh	r3, [r7, #26]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b0a2      	sub	sp, #136	; 0x88
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	4613      	mov	r3, r2
 8007062:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 81c5 	beq.w	80073fa <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4413      	add	r3, r2
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	4413      	add	r3, r2
 800708a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007094:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d907      	bls.n	80070b4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070ac:	1ad2      	subs	r2, r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	619a      	str	r2, [r3, #24]
 80070b2:	e002      	b.n	80070ba <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 80b9 	bne.w	8007236 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d126      	bne.n	800711a <HAL_PCD_EP_DB_Transmit+0xc4>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	4413      	add	r3, r2
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	00da      	lsls	r2, r3, #3
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	4413      	add	r3, r2
 80070ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e01a      	b.n	8007150 <HAL_PCD_EP_DB_Transmit+0xfa>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d116      	bne.n	8007150 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	4413      	add	r3, r2
 8007138:	633b      	str	r3, [r7, #48]	; 0x30
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	00da      	lsls	r2, r3, #3
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	4413      	add	r3, r2
 8007144:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	2200      	movs	r2, #0
 800714e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d126      	bne.n	80071ac <HAL_PCD_EP_DB_Transmit+0x156>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	4413      	add	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	00da      	lsls	r2, r3, #3
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	4413      	add	r3, r2
 8007180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007190:	b29a      	uxth	r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	e017      	b.n	80071dc <HAL_PCD_EP_DB_Transmit+0x186>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d113      	bne.n	80071dc <HAL_PCD_EP_DB_Transmit+0x186>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	4413      	add	r3, r2
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	4413      	add	r3, r2
 80071d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2200      	movs	r2, #0
 80071da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	4619      	mov	r1, r3
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f007 fc11 	bl	800ea0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 82d2 	beq.w	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	827b      	strh	r3, [r7, #18]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	8a7b      	ldrh	r3, [r7, #18]
 8007220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800722c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007230:	b29b      	uxth	r3, r3
 8007232:	8013      	strh	r3, [r2, #0]
 8007234:	e2b0      	b.n	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	441a      	add	r2, r3
 800726c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800727c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007280:	b29b      	uxth	r3, r3
 8007282:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800728a:	2b01      	cmp	r3, #1
 800728c:	f040 8284 	bne.w	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007298:	441a      	add	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	69da      	ldr	r2, [r3, #28]
 80072a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072a6:	441a      	add	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d309      	bcc.n	80072cc <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	621a      	str	r2, [r3, #32]
 80072ca:	e015      	b.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80072d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80072e2:	e009      	b.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2200      	movs	r2, #0
 80072f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d155      	bne.n	80073ac <HAL_PCD_EP_DB_Transmit+0x356>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	63bb      	str	r3, [r7, #56]	; 0x38
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730e:	b29b      	uxth	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	4413      	add	r3, r2
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	00da      	lsls	r2, r3, #3
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	4413      	add	r3, r2
 8007322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
 8007328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732a:	2b3e      	cmp	r3, #62	; 0x3e
 800732c:	d916      	bls.n	800735c <HAL_PCD_EP_DB_Transmit+0x306>
 800732e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	64bb      	str	r3, [r7, #72]	; 0x48
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007340:	3b01      	subs	r3, #1
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007354:	b29a      	uxth	r2, r3
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	e043      	b.n	80073e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 800735c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735e:	2b00      	cmp	r3, #0
 8007360:	d112      	bne.n	8007388 <HAL_PCD_EP_DB_Transmit+0x332>
 8007362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800736c:	b29a      	uxth	r2, r3
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007380:	b29a      	uxth	r2, r3
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e02d      	b.n	80073e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	64bb      	str	r3, [r7, #72]	; 0x48
 800738e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_PCD_EP_DB_Transmit+0x348>
 8007398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739a:	3301      	adds	r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	; 0x48
 800739e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	029b      	lsls	r3, r3, #10
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e01b      	b.n	80073e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d117      	bne.n	80073e4 <HAL_PCD_EP_DB_Transmit+0x38e>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c8:	4413      	add	r3, r2
 80073ca:	643b      	str	r3, [r7, #64]	; 0x40
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	00da      	lsls	r2, r3, #3
 80073d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d4:	4413      	add	r3, r2
 80073d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6959      	ldr	r1, [r3, #20]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	891a      	ldrh	r2, [r3, #8]
 80073f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f005 fbe4 	bl	800cbc0 <USB_WritePMA>
 80073f8:	e1ce      	b.n	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007402:	b29b      	uxth	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	4413      	add	r3, r2
 8007414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800742a:	429a      	cmp	r2, r3
 800742c:	d307      	bcc.n	800743e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	619a      	str	r2, [r3, #24]
 800743c:	e002      	b.n	8007444 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 80c4 	bne.w	80075d6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d126      	bne.n	80074a4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	66bb      	str	r3, [r7, #104]	; 0x68
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007464:	b29b      	uxth	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746a:	4413      	add	r3, r2
 800746c:	66bb      	str	r3, [r7, #104]	; 0x68
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	00da      	lsls	r2, r3, #3
 8007474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007476:	4413      	add	r3, r2
 8007478:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800747c:	667b      	str	r3, [r7, #100]	; 0x64
 800747e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007488:	b29a      	uxth	r2, r3
 800748a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e01a      	b.n	80074da <HAL_PCD_EP_DB_Transmit+0x484>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d116      	bne.n	80074da <HAL_PCD_EP_DB_Transmit+0x484>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	673b      	str	r3, [r7, #112]	; 0x70
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c0:	4413      	add	r3, r2
 80074c2:	673b      	str	r3, [r7, #112]	; 0x70
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	00da      	lsls	r2, r3, #3
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	2200      	movs	r2, #0
 80074d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d12f      	bne.n	8007548 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007500:	4413      	add	r3, r2
 8007502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	00da      	lsls	r2, r3, #3
 800750c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007510:	4413      	add	r3, r2
 8007512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800751a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e017      	b.n	8007578 <HAL_PCD_EP_DB_Transmit+0x522>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d113      	bne.n	8007578 <HAL_PCD_EP_DB_Transmit+0x522>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800755e:	4413      	add	r3, r2
 8007560:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	00da      	lsls	r2, r3, #3
 8007568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800756a:	4413      	add	r3, r2
 800756c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007570:	67bb      	str	r3, [r7, #120]	; 0x78
 8007572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007574:	2200      	movs	r2, #0
 8007576:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f007 fa43 	bl	800ea0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758a:	2b00      	cmp	r3, #0
 800758c:	f040 8104 	bne.w	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]
 80075d4:	e0e0      	b.n	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d121      	bne.n	8007624 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	441a      	add	r2, r3
 800760c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800762a:	2b01      	cmp	r3, #1
 800762c:	f040 80b4 	bne.w	8007798 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	695a      	ldr	r2, [r3, #20]
 8007634:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007638:	441a      	add	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007646:	441a      	add	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	d309      	bcc.n	800766c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007664:	1ad2      	subs	r2, r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	621a      	str	r2, [r3, #32]
 800766a:	e015      	b.n	8007698 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d107      	bne.n	8007684 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007678:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007682:	e009      	b.n	8007698 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	663b      	str	r3, [r7, #96]	; 0x60
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d155      	bne.n	8007752 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ba:	4413      	add	r3, r2
 80076bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00da      	lsls	r2, r3, #3
 80076c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076cc:	657b      	str	r3, [r7, #84]	; 0x54
 80076ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d0:	2b3e      	cmp	r3, #62	; 0x3e
 80076d2:	d916      	bls.n	8007702 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80076d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	677b      	str	r3, [r7, #116]	; 0x74
 80076da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_PCD_EP_DB_Transmit+0x694>
 80076e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e6:	3b01      	subs	r3, #1
 80076e8:	677b      	str	r3, [r7, #116]	; 0x74
 80076ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	029b      	lsls	r3, r3, #10
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	e040      	b.n	8007784 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007704:	2b00      	cmp	r3, #0
 8007706:	d112      	bne.n	800772e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007712:	b29a      	uxth	r2, r3
 8007714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29a      	uxth	r2, r3
 8007728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e02a      	b.n	8007784 <HAL_PCD_EP_DB_Transmit+0x72e>
 800772e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	677b      	str	r3, [r7, #116]	; 0x74
 8007734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800773e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007740:	3301      	adds	r3, #1
 8007742:	677b      	str	r3, [r7, #116]	; 0x74
 8007744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29a      	uxth	r2, r3
 800774c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	e018      	b.n	8007784 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d114      	bne.n	8007784 <HAL_PCD_EP_DB_Transmit+0x72e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007762:	b29b      	uxth	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007768:	4413      	add	r3, r2
 800776a:	663b      	str	r3, [r7, #96]	; 0x60
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	00da      	lsls	r2, r3, #3
 8007772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007774:	4413      	add	r3, r2
 8007776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800777a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800777c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777e:	b29a      	uxth	r2, r3
 8007780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007782:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6959      	ldr	r1, [r3, #20]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	895a      	ldrh	r2, [r3, #10]
 8007790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007792:	b29b      	uxth	r3, r3
 8007794:	f005 fa14 	bl	800cbc0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b2:	823b      	strh	r3, [r7, #16]
 80077b4:	8a3b      	ldrh	r3, [r7, #16]
 80077b6:	f083 0310 	eor.w	r3, r3, #16
 80077ba:	823b      	strh	r3, [r7, #16]
 80077bc:	8a3b      	ldrh	r3, [r7, #16]
 80077be:	f083 0320 	eor.w	r3, r3, #32
 80077c2:	823b      	strh	r3, [r7, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	8a3b      	ldrh	r3, [r7, #16]
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3788      	adds	r7, #136	; 0x88
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b087      	sub	sp, #28
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	817b      	strh	r3, [r7, #10]
 8007800:	4613      	mov	r3, r2
 8007802:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00c      	beq.n	800782a <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007810:	897b      	ldrh	r3, [r7, #10]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	3304      	adds	r3, #4
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e00a      	b.n	8007840 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800782a:	897a      	ldrh	r2, [r7, #10]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	3304      	adds	r3, #4
 800783e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007840:	893b      	ldrh	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	b29a      	uxth	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	80da      	strh	r2, [r3, #6]
 8007854:	e00b      	b.n	800786e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2201      	movs	r2, #1
 800785a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	b29a      	uxth	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	0c1b      	lsrs	r3, r3, #16
 8007868:	b29a      	uxth	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f043 0301 	orr.w	r3, r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80078dc:	4618      	mov	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40007000 	.word	0x40007000

080078ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fa:	d130      	bne.n	800795e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80078fc:	4b23      	ldr	r3, [pc, #140]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007908:	d038      	beq.n	800797c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007912:	4a1e      	ldr	r2, [pc, #120]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007918:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2232      	movs	r2, #50	; 0x32
 8007920:	fb02 f303 	mul.w	r3, r2, r3
 8007924:	4a1b      	ldr	r2, [pc, #108]	; (8007994 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	0c9b      	lsrs	r3, r3, #18
 800792c:	3301      	adds	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007930:	e002      	b.n	8007938 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b01      	subs	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007938:	4b14      	ldr	r3, [pc, #80]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007944:	d102      	bne.n	800794c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f2      	bne.n	8007932 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007958:	d110      	bne.n	800797c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e00f      	b.n	800797e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796a:	d007      	beq.n	800797c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007974:	4a05      	ldr	r2, [pc, #20]	; (800798c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800797a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40007000 	.word	0x40007000
 8007990:	20000000 	.word	0x20000000
 8007994:	431bde83 	.word	0x431bde83

08007998 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80079a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079a6:	6053      	str	r3, [r2, #4]
}
 80079a8:	bf00      	nop
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40007000 	.word	0x40007000

080079b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f000 bc4f 	b.w	800826a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079cc:	4b97      	ldr	r3, [pc, #604]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079d6:	4b95      	ldr	r3, [pc, #596]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80e6 	beq.w	8007bba <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <HAL_RCC_OscConfig+0x4c>
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	2b0c      	cmp	r3, #12
 80079f8:	f040 808d 	bne.w	8007b16 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	f040 8089 	bne.w	8007b16 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a04:	4b89      	ldr	r3, [pc, #548]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d006      	beq.n	8007a1e <HAL_RCC_OscConfig+0x66>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f000 bc26 	b.w	800826a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a22:	4b82      	ldr	r3, [pc, #520]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <HAL_RCC_OscConfig+0x80>
 8007a2e:	4b7f      	ldr	r3, [pc, #508]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a36:	e005      	b.n	8007a44 <HAL_RCC_OscConfig+0x8c>
 8007a38:	4b7c      	ldr	r3, [pc, #496]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d224      	bcs.n	8007a92 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fda1 	bl	8008594 <RCC_SetFlashLatencyFromMSIRange>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f000 bc06 	b.w	800826a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a5e:	4b73      	ldr	r3, [pc, #460]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a72      	ldr	r2, [pc, #456]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a64:	f043 0308 	orr.w	r3, r3, #8
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4b70      	ldr	r3, [pc, #448]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	496d      	ldr	r1, [pc, #436]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a7c:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	4968      	ldr	r1, [pc, #416]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	604b      	str	r3, [r1, #4]
 8007a90:	e025      	b.n	8007ade <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a92:	4b66      	ldr	r3, [pc, #408]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a65      	ldr	r2, [pc, #404]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007a98:	f043 0308 	orr.w	r3, r3, #8
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b63      	ldr	r3, [pc, #396]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	4960      	ldr	r1, [pc, #384]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ab0:	4b5e      	ldr	r3, [pc, #376]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	495b      	ldr	r1, [pc, #364]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fd60 	bl	8008594 <RCC_SetFlashLatencyFromMSIRange>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e3c5      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ade:	f000 fccd 	bl	800847c <HAL_RCC_GetSysClockFreq>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b51      	ldr	r3, [pc, #324]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	4950      	ldr	r1, [pc, #320]	; (8007c30 <HAL_RCC_OscConfig+0x278>)
 8007af0:	5ccb      	ldrb	r3, [r1, r3]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	fa22 f303 	lsr.w	r3, r2, r3
 8007afa:	4a4e      	ldr	r2, [pc, #312]	; (8007c34 <HAL_RCC_OscConfig+0x27c>)
 8007afc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007afe:	4b4e      	ldr	r3, [pc, #312]	; (8007c38 <HAL_RCC_OscConfig+0x280>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fc f828 	bl	8003b58 <HAL_InitTick>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d052      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	e3a9      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d032      	beq.n	8007b84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b1e:	4b43      	ldr	r3, [pc, #268]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a42      	ldr	r2, [pc, #264]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b2a:	f7fc f865 	bl	8003bf8 <HAL_GetTick>
 8007b2e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b32:	f7fc f861 	bl	8003bf8 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e392      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b44:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b50:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a35      	ldr	r2, [pc, #212]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b56:	f043 0308 	orr.w	r3, r3, #8
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	4b33      	ldr	r3, [pc, #204]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	4930      	ldr	r1, [pc, #192]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b6e:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	492b      	ldr	r1, [pc, #172]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	604b      	str	r3, [r1, #4]
 8007b82:	e01a      	b.n	8007bba <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b84:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a28      	ldr	r2, [pc, #160]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b90:	f7fc f832 	bl	8003bf8 <HAL_GetTick>
 8007b94:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b98:	f7fc f82e 	bl	8003bf8 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e35f      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007baa:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x1e0>
 8007bb6:	e000      	b.n	8007bba <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d073      	beq.n	8007cae <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d005      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x220>
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	2b0c      	cmp	r3, #12
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d10b      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d063      	beq.n	8007cac <HAL_RCC_OscConfig+0x2f4>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d15f      	bne.n	8007cac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e33c      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCC_OscConfig+0x250>
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a0b      	ldr	r2, [pc, #44]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e025      	b.n	8007c54 <HAL_RCC_OscConfig+0x29c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c10:	d114      	bne.n	8007c3c <HAL_RCC_OscConfig+0x284>
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a05      	ldr	r2, [pc, #20]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a02      	ldr	r2, [pc, #8]	; (8007c2c <HAL_RCC_OscConfig+0x274>)
 8007c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	e013      	b.n	8007c54 <HAL_RCC_OscConfig+0x29c>
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	0800f3d0 	.word	0x0800f3d0
 8007c34:	20000000 	.word	0x20000000
 8007c38:	20000004 	.word	0x20000004
 8007c3c:	4b8f      	ldr	r3, [pc, #572]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a8e      	ldr	r2, [pc, #568]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	4b8c      	ldr	r3, [pc, #560]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a8b      	ldr	r2, [pc, #556]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb ffcc 	bl	8003bf8 <HAL_GetTick>
 8007c60:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c64:	f7fb ffc8 	bl	8003bf8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b64      	cmp	r3, #100	; 0x64
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e2f9      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c76:	4b81      	ldr	r3, [pc, #516]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0x2ac>
 8007c82:	e014      	b.n	8007cae <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c84:	f7fb ffb8 	bl	8003bf8 <HAL_GetTick>
 8007c88:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c8c:	f7fb ffb4 	bl	8003bf8 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b64      	cmp	r3, #100	; 0x64
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e2e5      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c9e:	4b77      	ldr	r3, [pc, #476]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f0      	bne.n	8007c8c <HAL_RCC_OscConfig+0x2d4>
 8007caa:	e000      	b.n	8007cae <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d060      	beq.n	8007d7c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_OscConfig+0x314>
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d119      	bne.n	8007cfa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d116      	bne.n	8007cfa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ccc:	4b6b      	ldr	r3, [pc, #428]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x32c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e2c2      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce4:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	061b      	lsls	r3, r3, #24
 8007cf2:	4962      	ldr	r1, [pc, #392]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf8:	e040      	b.n	8007d7c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d023      	beq.n	8007d4a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d02:	4b5e      	ldr	r3, [pc, #376]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5d      	ldr	r2, [pc, #372]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0e:	f7fb ff73 	bl	8003bf8 <HAL_GetTick>
 8007d12:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d16:	f7fb ff6f 	bl	8003bf8 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e2a0      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d28:	4b54      	ldr	r3, [pc, #336]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d34:	4b51      	ldr	r3, [pc, #324]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	061b      	lsls	r3, r3, #24
 8007d42:	494e      	ldr	r1, [pc, #312]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	604b      	str	r3, [r1, #4]
 8007d48:	e018      	b.n	8007d7c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d4a:	4b4c      	ldr	r3, [pc, #304]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4b      	ldr	r2, [pc, #300]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d56:	f7fb ff4f 	bl	8003bf8 <HAL_GetTick>
 8007d5a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d5e:	f7fb ff4b 	bl	8003bf8 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e27c      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d70:	4b42      	ldr	r3, [pc, #264]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f0      	bne.n	8007d5e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8082 	beq.w	8007e8e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05f      	beq.n	8007e52 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007d92:	4b3a      	ldr	r3, [pc, #232]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d98:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d037      	beq.n	8007e18 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d006      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e254      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01b      	beq.n	8007e02 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8007dca:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007dda:	f7fb ff0d 	bl	8003bf8 <HAL_GetTick>
 8007dde:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007de2:	f7fb ff09 	bl	8003bf8 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b11      	cmp	r3, #17
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e23a      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007df4:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ef      	bne.n	8007de2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8007e02:	4b1e      	ldr	r3, [pc, #120]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e08:	f023 0210 	bic.w	r2, r3, #16
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	491a      	ldr	r1, [pc, #104]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e18:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e20:	f043 0301 	orr.w	r3, r3, #1
 8007e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e28:	f7fb fee6 	bl	8003bf8 <HAL_GetTick>
 8007e2c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e30:	f7fb fee2 	bl	8003bf8 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b11      	cmp	r3, #17
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e213      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e42:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0ef      	beq.n	8007e30 <HAL_RCC_OscConfig+0x478>
 8007e50:	e01d      	b.n	8007e8e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e52:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <HAL_RCC_OscConfig+0x4c4>)
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e62:	f7fb fec9 	bl	8003bf8 <HAL_GetTick>
 8007e66:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e68:	e00a      	b.n	8007e80 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e6a:	f7fb fec5 	bl	8003bf8 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b11      	cmp	r3, #17
 8007e76:	d903      	bls.n	8007e80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e1f6      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
 8007e7c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e80:	4ba9      	ldr	r3, [pc, #676]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1ed      	bne.n	8007e6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80bd 	beq.w	8008016 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ea2:	4ba1      	ldr	r3, [pc, #644]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10e      	bne.n	8007ecc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eae:	4b9e      	ldr	r3, [pc, #632]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	4a9d      	ldr	r2, [pc, #628]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8007eba:	4b9b      	ldr	r3, [pc, #620]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ecc:	4b97      	ldr	r3, [pc, #604]	; (800812c <HAL_RCC_OscConfig+0x774>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d118      	bne.n	8007f0a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ed8:	4b94      	ldr	r3, [pc, #592]	; (800812c <HAL_RCC_OscConfig+0x774>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a93      	ldr	r2, [pc, #588]	; (800812c <HAL_RCC_OscConfig+0x774>)
 8007ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ee4:	f7fb fe88 	bl	8003bf8 <HAL_GetTick>
 8007ee8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eec:	f7fb fe84 	bl	8003bf8 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e1b5      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007efe:	4b8b      	ldr	r3, [pc, #556]	; (800812c <HAL_RCC_OscConfig+0x774>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02c      	beq.n	8007f70 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007f16:	4b84      	ldr	r3, [pc, #528]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	497f      	ldr	r1, [pc, #508]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d010      	beq.n	8007f5e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007f3c:	4b7a      	ldr	r3, [pc, #488]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	4a79      	ldr	r2, [pc, #484]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f44:	f043 0304 	orr.w	r3, r3, #4
 8007f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f4c:	4b76      	ldr	r3, [pc, #472]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f52:	4a75      	ldr	r2, [pc, #468]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f54:	f043 0301 	orr.w	r3, r3, #1
 8007f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f5c:	e018      	b.n	8007f90 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f5e:	4b72      	ldr	r3, [pc, #456]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	4a70      	ldr	r2, [pc, #448]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f6e:	e00f      	b.n	8007f90 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f70:	4b6d      	ldr	r3, [pc, #436]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f76:	4a6c      	ldr	r2, [pc, #432]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007f80:	4b69      	ldr	r3, [pc, #420]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	4a68      	ldr	r2, [pc, #416]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007f88:	f023 0304 	bic.w	r3, r3, #4
 8007f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d016      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f98:	f7fb fe2e 	bl	8003bf8 <HAL_GetTick>
 8007f9c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f9e:	e00a      	b.n	8007fb6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fa0:	f7fb fe2a 	bl	8003bf8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e159      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb6:	4b5c      	ldr	r3, [pc, #368]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ed      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x5e8>
 8007fc4:	e01d      	b.n	8008002 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc6:	f7fb fe17 	bl	8003bf8 <HAL_GetTick>
 8007fca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fce:	f7fb fe13 	bl	8003bf8 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e142      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fe4:	4b50      	ldr	r3, [pc, #320]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ed      	bne.n	8007fce <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007ff2:	4b4d      	ldr	r3, [pc, #308]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff8:	4a4b      	ldr	r2, [pc, #300]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8007ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008006:	2b01      	cmp	r3, #1
 8008008:	d105      	bne.n	8008016 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800800a:	4b47      	ldr	r3, [pc, #284]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 800800c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800e:	4a46      	ldr	r2, [pc, #280]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d03c      	beq.n	800809c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01c      	beq.n	8008064 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800802a:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 800802c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008030:	4a3d      	ldr	r2, [pc, #244]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800803a:	f7fb fddd 	bl	8003bf8 <HAL_GetTick>
 800803e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008040:	e008      	b.n	8008054 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008042:	f7fb fdd9 	bl	8003bf8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e10a      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008054:	4b34      	ldr	r3, [pc, #208]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0ef      	beq.n	8008042 <HAL_RCC_OscConfig+0x68a>
 8008062:	e01b      	b.n	800809c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008064:	4b30      	ldr	r3, [pc, #192]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800806a:	4a2f      	ldr	r2, [pc, #188]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 800806c:	f023 0301 	bic.w	r3, r3, #1
 8008070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008074:	f7fb fdc0 	bl	8003bf8 <HAL_GetTick>
 8008078:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800807c:	f7fb fdbc 	bl	8003bf8 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0ed      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800808e:	4b26      	ldr	r3, [pc, #152]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1ef      	bne.n	800807c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80e1 	beq.w	8008268 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f040 80b5 	bne.w	800821a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080b0:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f003 0203 	and.w	r2, r3, #3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d124      	bne.n	800810e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	3b01      	subs	r3, #1
 80080d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d11b      	bne.n	800810e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d113      	bne.n	800810e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	3b01      	subs	r3, #1
 80080f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d109      	bne.n	800810e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	3b01      	subs	r3, #1
 8008108:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800810a:	429a      	cmp	r2, r3
 800810c:	d05f      	beq.n	80081ce <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	2b0c      	cmp	r3, #12
 8008112:	d05a      	beq.n	80081ca <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a03      	ldr	r2, [pc, #12]	; (8008128 <HAL_RCC_OscConfig+0x770>)
 800811a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800811e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008120:	f7fb fd6a 	bl	8003bf8 <HAL_GetTick>
 8008124:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008126:	e00c      	b.n	8008142 <HAL_RCC_OscConfig+0x78a>
 8008128:	40021000 	.word	0x40021000
 800812c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008130:	f7fb fd62 	bl	8003bf8 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e093      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008142:	4b4c      	ldr	r3, [pc, #304]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800814e:	4b49      	ldr	r3, [pc, #292]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	4b49      	ldr	r3, [pc, #292]	; (8008278 <HAL_RCC_OscConfig+0x8c0>)
 8008154:	4013      	ands	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800815e:	3a01      	subs	r2, #1
 8008160:	0112      	lsls	r2, r2, #4
 8008162:	4311      	orrs	r1, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008168:	0212      	lsls	r2, r2, #8
 800816a:	4311      	orrs	r1, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008170:	0852      	lsrs	r2, r2, #1
 8008172:	3a01      	subs	r2, #1
 8008174:	0552      	lsls	r2, r2, #21
 8008176:	4311      	orrs	r1, r2
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800817c:	0852      	lsrs	r2, r2, #1
 800817e:	3a01      	subs	r2, #1
 8008180:	0652      	lsls	r2, r2, #25
 8008182:	430a      	orrs	r2, r1
 8008184:	493b      	ldr	r1, [pc, #236]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800818a:	4b3a      	ldr	r3, [pc, #232]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a39      	ldr	r2, [pc, #228]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008194:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008196:	4b37      	ldr	r3, [pc, #220]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	4a36      	ldr	r2, [pc, #216]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 800819c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081a0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081a2:	f7fb fd29 	bl	8003bf8 <HAL_GetTick>
 80081a6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081aa:	f7fb fd25 	bl	8003bf8 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e056      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081bc:	4b2d      	ldr	r3, [pc, #180]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80081c8:	e04e      	b.n	8008268 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e04d      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081ce:	4b29      	ldr	r3, [pc, #164]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d146      	bne.n	8008268 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80081da:	4b26      	ldr	r3, [pc, #152]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a25      	ldr	r2, [pc, #148]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081e4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4a22      	ldr	r2, [pc, #136]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 80081ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081f2:	f7fb fd01 	bl	8003bf8 <HAL_GetTick>
 80081f6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081f8:	e008      	b.n	800820c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081fa:	f7fb fcfd 	bl	8003bf8 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e02e      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800820c:	4b19      	ldr	r3, [pc, #100]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0f0      	beq.n	80081fa <HAL_RCC_OscConfig+0x842>
 8008218:	e026      	b.n	8008268 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b0c      	cmp	r3, #12
 800821e:	d021      	beq.n	8008264 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008220:	4b14      	ldr	r3, [pc, #80]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800822a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fb fce4 	bl	8003bf8 <HAL_GetTick>
 8008230:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008234:	f7fb fce0 	bl	8003bf8 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e011      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1f0      	bne.n	8008234 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	4a07      	ldr	r2, [pc, #28]	; (8008274 <HAL_RCC_OscConfig+0x8bc>)
 8008258:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	60d3      	str	r3, [r2, #12]
 8008262:	e001      	b.n	8008268 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3728      	adds	r7, #40	; 0x28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40021000 	.word	0x40021000
 8008278:	f99f808c 	.word	0xf99f808c

0800827c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0e7      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008290:	4b75      	ldr	r3, [pc, #468]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d910      	bls.n	80082c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800829e:	4b72      	ldr	r3, [pc, #456]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f023 0207 	bic.w	r2, r3, #7
 80082a6:	4970      	ldr	r1, [pc, #448]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ae:	4b6e      	ldr	r3, [pc, #440]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e0cf      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d010      	beq.n	80082ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	4b66      	ldr	r3, [pc, #408]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082d8:	429a      	cmp	r2, r3
 80082da:	d908      	bls.n	80082ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082dc:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4960      	ldr	r1, [pc, #384]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d04c      	beq.n	8008394 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d107      	bne.n	8008312 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008302:	4b5a      	ldr	r3, [pc, #360]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d121      	bne.n	8008352 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0a6      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d107      	bne.n	800832a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800831a:	4b54      	ldr	r3, [pc, #336]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d115      	bne.n	8008352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e09a      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008332:	4b4e      	ldr	r3, [pc, #312]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e08e      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008342:	4b4a      	ldr	r3, [pc, #296]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e086      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008352:	4b46      	ldr	r3, [pc, #280]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 0203 	bic.w	r2, r3, #3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4943      	ldr	r1, [pc, #268]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008360:	4313      	orrs	r3, r2
 8008362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008364:	f7fb fc48 	bl	8003bf8 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	e00a      	b.n	8008382 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800836c:	f7fb fc44 	bl	8003bf8 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e06e      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	4b3a      	ldr	r3, [pc, #232]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 020c 	and.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	429a      	cmp	r2, r3
 8008392:	d1eb      	bne.n	800836c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d010      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	4b31      	ldr	r3, [pc, #196]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d208      	bcs.n	80083c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b0:	4b2e      	ldr	r3, [pc, #184]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	492b      	ldr	r1, [pc, #172]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c2:	4b29      	ldr	r3, [pc, #164]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d210      	bcs.n	80083f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d0:	4b25      	ldr	r3, [pc, #148]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f023 0207 	bic.w	r2, r3, #7
 80083d8:	4923      	ldr	r1, [pc, #140]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	4313      	orrs	r3, r2
 80083de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e0:	4b21      	ldr	r3, [pc, #132]	; (8008468 <HAL_RCC_ClockConfig+0x1ec>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0307 	and.w	r3, r3, #7
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d001      	beq.n	80083f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e036      	b.n	8008460 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083fe:	4b1b      	ldr	r3, [pc, #108]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	4918      	ldr	r1, [pc, #96]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 800840c:	4313      	orrs	r3, r2
 800840e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4910      	ldr	r1, [pc, #64]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008430:	f000 f824 	bl	800847c <HAL_RCC_GetSysClockFreq>
 8008434:	4602      	mov	r2, r0
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <HAL_RCC_ClockConfig+0x1f0>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	091b      	lsrs	r3, r3, #4
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	490b      	ldr	r1, [pc, #44]	; (8008470 <HAL_RCC_ClockConfig+0x1f4>)
 8008442:	5ccb      	ldrb	r3, [r1, r3]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	fa22 f303 	lsr.w	r3, r2, r3
 800844c:	4a09      	ldr	r2, [pc, #36]	; (8008474 <HAL_RCC_ClockConfig+0x1f8>)
 800844e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <HAL_RCC_ClockConfig+0x1fc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f7fb fb7f 	bl	8003b58 <HAL_InitTick>
 800845a:	4603      	mov	r3, r0
 800845c:	72fb      	strb	r3, [r7, #11]

  return status;
 800845e:	7afb      	ldrb	r3, [r7, #11]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40022000 	.word	0x40022000
 800846c:	40021000 	.word	0x40021000
 8008470:	0800f3d0 	.word	0x0800f3d0
 8008474:	20000000 	.word	0x20000000
 8008478:	20000004 	.word	0x20000004

0800847c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	; 0x24
 8008480:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	2300      	movs	r3, #0
 8008488:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800848a:	4b3e      	ldr	r3, [pc, #248]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 030c 	and.w	r3, r3, #12
 8008492:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008494:	4b3b      	ldr	r3, [pc, #236]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_RCC_GetSysClockFreq+0x34>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	d121      	bne.n	80084ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d11e      	bne.n	80084ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80084b0:	4b34      	ldr	r3, [pc, #208]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80084bc:	4b31      	ldr	r3, [pc, #196]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 80084be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	61fb      	str	r3, [r7, #28]
 80084ca:	e005      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80084cc:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80084d8:	4a2b      	ldr	r2, [pc, #172]	; (8008588 <HAL_RCC_GetSysClockFreq+0x10c>)
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10d      	bne.n	8008504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084ec:	e00a      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d102      	bne.n	80084fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084f4:	4b25      	ldr	r3, [pc, #148]	; (800858c <HAL_RCC_GetSysClockFreq+0x110>)
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	e004      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d101      	bne.n	8008504 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008500:	4b23      	ldr	r3, [pc, #140]	; (8008590 <HAL_RCC_GetSysClockFreq+0x114>)
 8008502:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b0c      	cmp	r3, #12
 8008508:	d134      	bne.n	8008574 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800850a:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d003      	beq.n	8008522 <HAL_RCC_GetSysClockFreq+0xa6>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d003      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0xac>
 8008520:	e005      	b.n	800852e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008522:	4b1a      	ldr	r3, [pc, #104]	; (800858c <HAL_RCC_GetSysClockFreq+0x110>)
 8008524:	617b      	str	r3, [r7, #20]
      break;
 8008526:	e005      	b.n	8008534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <HAL_RCC_GetSysClockFreq+0x114>)
 800852a:	617b      	str	r3, [r7, #20]
      break;
 800852c:	e002      	b.n	8008534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	617b      	str	r3, [r7, #20]
      break;
 8008532:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	3301      	adds	r3, #1
 8008540:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	fb03 f202 	mul.w	r2, r3, r2
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	fbb2 f3f3 	udiv	r3, r2, r3
 8008558:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_RCC_GetSysClockFreq+0x108>)
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	0e5b      	lsrs	r3, r3, #25
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	3301      	adds	r3, #1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008574:	69bb      	ldr	r3, [r7, #24]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3724      	adds	r7, #36	; 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40021000 	.word	0x40021000
 8008588:	0800f3e0 	.word	0x0800f3e0
 800858c:	00f42400 	.word	0x00f42400
 8008590:	007a1200 	.word	0x007a1200

08008594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800859c:	2300      	movs	r3, #0
 800859e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80085a0:	4b2a      	ldr	r3, [pc, #168]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80085ac:	f7ff f990 	bl	80078d0 <HAL_PWREx_GetVoltageRange>
 80085b0:	6178      	str	r0, [r7, #20]
 80085b2:	e014      	b.n	80085de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80085b4:	4b25      	ldr	r3, [pc, #148]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b8:	4a24      	ldr	r2, [pc, #144]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085be:	6593      	str	r3, [r2, #88]	; 0x58
 80085c0:	4b22      	ldr	r3, [pc, #136]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80085cc:	f7ff f980 	bl	80078d0 <HAL_PWREx_GetVoltageRange>
 80085d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80085d2:	4b1e      	ldr	r3, [pc, #120]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d6:	4a1d      	ldr	r2, [pc, #116]	; (800864c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e4:	d10b      	bne.n	80085fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d919      	bls.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2ba0      	cmp	r3, #160	; 0xa0
 80085f0:	d902      	bls.n	80085f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80085f2:	2302      	movs	r3, #2
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e013      	b.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80085f8:	2301      	movs	r3, #1
 80085fa:	613b      	str	r3, [r7, #16]
 80085fc:	e010      	b.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	d902      	bls.n	800860a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008604:	2303      	movs	r3, #3
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	e00a      	b.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d102      	bne.n	8008616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008610:	2302      	movs	r3, #2
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	e004      	b.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b70      	cmp	r3, #112	; 0x70
 800861a:	d101      	bne.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800861c:	2301      	movs	r3, #1
 800861e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f023 0207 	bic.w	r2, r3, #7
 8008628:	4909      	ldr	r1, [pc, #36]	; (8008650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	429a      	cmp	r2, r3
 800863c:	d001      	beq.n	8008642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40021000 	.word	0x40021000
 8008650:	40022000 	.word	0x40022000

08008654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800865c:	2300      	movs	r3, #0
 800865e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008660:	2300      	movs	r3, #0
 8008662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 809e 	beq.w	80087ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008672:	2300      	movs	r3, #0
 8008674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008676:	4b46      	ldr	r3, [pc, #280]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00d      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800868c:	4b40      	ldr	r3, [pc, #256]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	4a3f      	ldr	r2, [pc, #252]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008696:	6593      	str	r3, [r2, #88]	; 0x58
 8008698:	4b3d      	ldr	r3, [pc, #244]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a0:	60bb      	str	r3, [r7, #8]
 80086a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086a4:	2301      	movs	r3, #1
 80086a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086a8:	4b3a      	ldr	r3, [pc, #232]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a39      	ldr	r2, [pc, #228]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80086ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086b4:	f7fb faa0 	bl	8003bf8 <HAL_GetTick>
 80086b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086ba:	e009      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086bc:	f7fb fa9c 	bl	8003bf8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d902      	bls.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	74fb      	strb	r3, [r7, #19]
        break;
 80086ce:	e005      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086d0:	4b30      	ldr	r3, [pc, #192]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ef      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80086dc:	7cfb      	ldrb	r3, [r7, #19]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d15a      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086e2:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01e      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d019      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008708:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008710:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800872a:	4a19      	ldr	r2, [pc, #100]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fb fa5c 	bl	8003bf8 <HAL_GetTick>
 8008740:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008742:	e00b      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008744:	f7fb fa58 	bl	8003bf8 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008752:	4293      	cmp	r3, r2
 8008754:	d902      	bls.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	74fb      	strb	r3, [r7, #19]
            break;
 800875a:	e006      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0ec      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800876a:	7cfb      	ldrb	r3, [r7, #19]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	4904      	ldr	r1, [pc, #16]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008786:	e009      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008788:	7cfb      	ldrb	r3, [r7, #19]
 800878a:	74bb      	strb	r3, [r7, #18]
 800878c:	e006      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800878e:	bf00      	nop
 8008790:	40021000 	.word	0x40021000
 8008794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	7cfb      	ldrb	r3, [r7, #19]
 800879a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800879c:	7c7b      	ldrb	r3, [r7, #17]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d105      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087a2:	4b6e      	ldr	r3, [pc, #440]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	4a6d      	ldr	r2, [pc, #436]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087ba:	4b68      	ldr	r3, [pc, #416]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f023 0203 	bic.w	r2, r3, #3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4964      	ldr	r1, [pc, #400]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00a      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087dc:	4b5f      	ldr	r3, [pc, #380]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e2:	f023 020c 	bic.w	r2, r3, #12
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	495c      	ldr	r1, [pc, #368]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087fe:	4b57      	ldr	r3, [pc, #348]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4953      	ldr	r1, [pc, #332]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800880e:	4313      	orrs	r3, r2
 8008810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00a      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008820:	4b4e      	ldr	r3, [pc, #312]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	494b      	ldr	r1, [pc, #300]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008830:	4313      	orrs	r3, r2
 8008832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008842:	4b46      	ldr	r3, [pc, #280]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	4942      	ldr	r1, [pc, #264]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008852:	4313      	orrs	r3, r2
 8008854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008864:	4b3d      	ldr	r3, [pc, #244]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	493a      	ldr	r1, [pc, #232]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008874:	4313      	orrs	r3, r2
 8008876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008886:	4b35      	ldr	r3, [pc, #212]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	4931      	ldr	r1, [pc, #196]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008896:	4313      	orrs	r3, r2
 8008898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088a8:	4b2c      	ldr	r3, [pc, #176]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	4929      	ldr	r1, [pc, #164]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088ca:	4b24      	ldr	r3, [pc, #144]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	4920      	ldr	r1, [pc, #128]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d015      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088ec:	4b1b      	ldr	r3, [pc, #108]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	4918      	ldr	r1, [pc, #96]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800890a:	d105      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4a12      	ldr	r2, [pc, #72]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008916:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	490a      	ldr	r1, [pc, #40]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008942:	d105      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008944:	4b05      	ldr	r3, [pc, #20]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4a04      	ldr	r2, [pc, #16]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800894a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800894e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008950:	7cbb      	ldrb	r3, [r7, #18]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40021000 	.word	0x40021000

08008960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e095      	b.n	8008a9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d108      	bne.n	800898c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008982:	d009      	beq.n	8008998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	61da      	str	r2, [r3, #28]
 800898a:	e005      	b.n	8008998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fa fd4c 	bl	8003450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089d8:	d902      	bls.n	80089e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	e002      	b.n	80089e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80089ee:	d007      	beq.n	8008a00 <HAL_SPI_Init+0xa0>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089f8:	d002      	beq.n	8008a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a42:	ea42 0103 	orr.w	r1, r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	0c1b      	lsrs	r3, r3, #16
 8008a5c:	f003 0204 	and.w	r2, r3, #4
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a7c:	ea42 0103 	orr.w	r1, r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_SPI_Transmit+0x22>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e158      	b.n	8008d7a <HAL_SPI_Transmit+0x2d4>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ad0:	f7fb f892 	bl	8003bf8 <HAL_GetTick>
 8008ad4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d002      	beq.n	8008aec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aea:	e13d      	b.n	8008d68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_SPI_Transmit+0x52>
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008afc:	e134      	b.n	8008d68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2203      	movs	r2, #3
 8008b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	d10f      	bne.n	8008b6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d007      	beq.n	8008b88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b90:	d94b      	bls.n	8008c2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_SPI_Transmit+0xfa>
 8008b9a:	8afb      	ldrh	r3, [r7, #22]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d13e      	bne.n	8008c1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	881a      	ldrh	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	1c9a      	adds	r2, r3, #2
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bc4:	e02b      	b.n	8008c1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d112      	bne.n	8008bfa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	881a      	ldrh	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	1c9a      	adds	r2, r3, #2
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bf8:	e011      	b.n	8008c1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bfa:	f7fa fffd 	bl	8003bf8 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d803      	bhi.n	8008c12 <HAL_SPI_Transmit+0x16c>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c10:	d102      	bne.n	8008c18 <HAL_SPI_Transmit+0x172>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c1c:	e0a4      	b.n	8008d68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1ce      	bne.n	8008bc6 <HAL_SPI_Transmit+0x120>
 8008c28:	e07c      	b.n	8008d24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_SPI_Transmit+0x192>
 8008c32:	8afb      	ldrh	r3, [r7, #22]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d170      	bne.n	8008d1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d912      	bls.n	8008c68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	881a      	ldrh	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b02      	subs	r3, #2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c66:	e058      	b.n	8008d1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	330c      	adds	r3, #12
 8008c72:	7812      	ldrb	r2, [r2, #0]
 8008c74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c8e:	e044      	b.n	8008d1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d12b      	bne.n	8008cf6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d912      	bls.n	8008cce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	881a      	ldrh	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b02      	subs	r3, #2
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ccc:	e025      	b.n	8008d1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	7812      	ldrb	r2, [r2, #0]
 8008cda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cf4:	e011      	b.n	8008d1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf6:	f7fa ff7f 	bl	8003bf8 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d803      	bhi.n	8008d0e <HAL_SPI_Transmit+0x268>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d102      	bne.n	8008d14 <HAL_SPI_Transmit+0x26e>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d18:	e026      	b.n	8008d68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1b5      	bne.n	8008c90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fb5b 	bl	80093e4 <SPI_EndRxTxTransaction>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d42:	2300      	movs	r3, #0
 8008d44:	613b      	str	r3, [r7, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	77fb      	strb	r3, [r7, #31]
 8008d64:	e000      	b.n	8008d68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b08a      	sub	sp, #40	; 0x28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d90:	2301      	movs	r3, #1
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d101      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x26>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e1fb      	b.n	80091a0 <HAL_SPI_TransmitReceive+0x41e>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db0:	f7fa ff22 	bl	8003bf8 <HAL_GetTick>
 8008db4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008dc4:	887b      	ldrh	r3, [r7, #2]
 8008dc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008dc8:	887b      	ldrh	r3, [r7, #2]
 8008dca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008dcc:	7efb      	ldrb	r3, [r7, #27]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00e      	beq.n	8008df0 <HAL_SPI_TransmitReceive+0x6e>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dd8:	d106      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x66>
 8008de2:	7efb      	ldrb	r3, [r7, #27]
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d003      	beq.n	8008df0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008dee:	e1cd      	b.n	800918c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_SPI_TransmitReceive+0x80>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_SPI_TransmitReceive+0x80>
 8008dfc:	887b      	ldrh	r3, [r7, #2]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e08:	e1c0      	b.n	800918c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d003      	beq.n	8008e1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2205      	movs	r2, #5
 8008e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	887a      	ldrh	r2, [r7, #2]
 8008e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	887a      	ldrh	r2, [r7, #2]
 8008e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	887a      	ldrh	r2, [r7, #2]
 8008e44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	887a      	ldrh	r2, [r7, #2]
 8008e4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e60:	d802      	bhi.n	8008e68 <HAL_SPI_TransmitReceive+0xe6>
 8008e62:	8a3b      	ldrh	r3, [r7, #16]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d908      	bls.n	8008e7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e76:	605a      	str	r2, [r3, #4]
 8008e78:	e007      	b.n	8008e8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	d007      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008eb0:	d97c      	bls.n	8008fac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <HAL_SPI_TransmitReceive+0x13e>
 8008eba:	8a7b      	ldrh	r3, [r7, #18]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d169      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	881a      	ldrh	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	1c9a      	adds	r2, r3, #2
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ee4:	e056      	b.n	8008f94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d11b      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x1aa>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d016      	beq.n	8008f2c <HAL_SPI_TransmitReceive+0x1aa>
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d113      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	881a      	ldrh	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	1c9a      	adds	r2, r3, #2
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	3b01      	subs	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d11c      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x1f2>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d016      	beq.n	8008f74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	b292      	uxth	r2, r2
 8008f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	1c9a      	adds	r2, r3, #2
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f70:	2301      	movs	r3, #1
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f74:	f7fa fe40 	bl	8003bf8 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d807      	bhi.n	8008f94 <HAL_SPI_TransmitReceive+0x212>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8a:	d003      	beq.n	8008f94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f92:	e0fb      	b.n	800918c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1a3      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x164>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d19d      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x164>
 8008faa:	e0df      	b.n	800916c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x23a>
 8008fb4:	8a7b      	ldrh	r3, [r7, #18]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	f040 80cb 	bne.w	8009152 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d912      	bls.n	8008fec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	881a      	ldrh	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	1c9a      	adds	r2, r3, #2
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b02      	subs	r3, #2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fea:	e0b2      	b.n	8009152 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009012:	e09e      	b.n	8009152 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b02      	cmp	r3, #2
 8009020:	d134      	bne.n	800908c <HAL_SPI_TransmitReceive+0x30a>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d02f      	beq.n	800908c <HAL_SPI_TransmitReceive+0x30a>
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	2b01      	cmp	r3, #1
 8009030:	d12c      	bne.n	800908c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b01      	cmp	r3, #1
 800903a:	d912      	bls.n	8009062 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	1c9a      	adds	r2, r3, #2
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b02      	subs	r3, #2
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009060:	e012      	b.n	8009088 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	7812      	ldrb	r2, [r2, #0]
 800906e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b01      	cmp	r3, #1
 8009098:	d148      	bne.n	800912c <HAL_SPI_TransmitReceive+0x3aa>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d042      	beq.n	800912c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d923      	bls.n	80090fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	b292      	uxth	r2, r2
 80090be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	1c9a      	adds	r2, r3, #2
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b02      	subs	r3, #2
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d81f      	bhi.n	8009128 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090f6:	605a      	str	r2, [r3, #4]
 80090f8:	e016      	b.n	8009128 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f103 020c 	add.w	r2, r3, #12
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	7812      	ldrb	r2, [r2, #0]
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009128:	2301      	movs	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800912c:	f7fa fd64 	bl	8003bf8 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009138:	429a      	cmp	r2, r3
 800913a:	d803      	bhi.n	8009144 <HAL_SPI_TransmitReceive+0x3c2>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d102      	bne.n	800914a <HAL_SPI_TransmitReceive+0x3c8>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009150:	e01c      	b.n	800918c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009156:	b29b      	uxth	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	f47f af5b 	bne.w	8009014 <HAL_SPI_TransmitReceive+0x292>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f af54 	bne.w	8009014 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f937 	bl	80093e4 <SPI_EndRxTxTransaction>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d006      	beq.n	800918a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	661a      	str	r2, [r3, #96]	; 0x60
 8009188:	e000      	b.n	800918c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800918a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800919c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3728      	adds	r7, #40	; 0x28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b8:	f7fa fd1e 	bl	8003bf8 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c8:	f7fa fd16 	bl	8003bf8 <HAL_GetTick>
 80091cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ce:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	015b      	lsls	r3, r3, #5
 80091d4:	0d1b      	lsrs	r3, r3, #20
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091de:	e054      	b.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d050      	beq.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e8:	f7fa fd06 	bl	8003bf8 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d902      	bls.n	80091fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d13d      	bne.n	800927a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800920c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d111      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009220:	d004      	beq.n	800922c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922a:	d107      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009244:	d10f      	bne.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e017      	b.n	80092aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3b01      	subs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4013      	ands	r3, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	bf0c      	ite	eq
 800929a:	2301      	moveq	r3, #1
 800929c:	2300      	movne	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d19b      	bne.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000000 	.word	0x20000000

080092b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092ca:	f7fa fc95 	bl	8003bf8 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	4413      	add	r3, r2
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80092da:	f7fa fc8d 	bl	8003bf8 <HAL_GetTick>
 80092de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	330c      	adds	r3, #12
 80092e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092e8:	4b3d      	ldr	r3, [pc, #244]	; (80093e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	00da      	lsls	r2, r3, #3
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009300:	e060      	b.n	80093c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009308:	d107      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0x62>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009318:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d050      	beq.n	80093c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009322:	f7fa fc69 	bl	8003bf8 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	429a      	cmp	r2, r3
 8009330:	d902      	bls.n	8009338 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d13d      	bne.n	80093b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009346:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009350:	d111      	bne.n	8009376 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935a:	d004      	beq.n	8009366 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009364:	d107      	bne.n	8009376 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	d10f      	bne.n	80093a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800939e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e010      	b.n	80093d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d196      	bne.n	8009302 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000000 	.word	0x20000000

080093e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff ff5b 	bl	80092b8 <SPI_WaitFifoStateUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d007      	beq.n	8009418 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e027      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	2180      	movs	r1, #128	; 0x80
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fec0 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009432:	f043 0220 	orr.w	r2, r3, #32
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e014      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2200      	movs	r2, #0
 8009446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff34 	bl	80092b8 <SPI_WaitFifoStateUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800945a:	f043 0220 	orr.w	r2, r3, #32
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e000      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e049      	b.n	8009516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7fa fa86 	bl	80039a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f000 fd50 	bl	8009f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b01      	cmp	r3, #1
 8009532:	d001      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e03b      	b.n	80095b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a19      	ldr	r2, [pc, #100]	; (80095bc <HAL_TIM_Base_Start_IT+0x9c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_TIM_Base_Start_IT+0x4e>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009562:	d004      	beq.n	800956e <HAL_TIM_Base_Start_IT+0x4e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a15      	ldr	r2, [pc, #84]	; (80095c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d115      	bne.n	800959a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8009576:	4013      	ands	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b06      	cmp	r3, #6
 800957e:	d015      	beq.n	80095ac <HAL_TIM_Base_Start_IT+0x8c>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009586:	d011      	beq.n	80095ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009598:	e008      	b.n	80095ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e000      	b.n	80095ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40012c00 	.word	0x40012c00
 80095c0:	40014000 	.word	0x40014000
 80095c4:	00010007 	.word	0x00010007

080095c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e049      	b.n	800966e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fa f9bc 	bl	800396c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f000 fca4 	bl	8009f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <HAL_TIM_PWM_Start+0x24>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b01      	cmp	r3, #1
 8009692:	bf14      	ite	ne
 8009694:	2301      	movne	r3, #1
 8009696:	2300      	moveq	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	e03c      	b.n	8009716 <HAL_TIM_PWM_Start+0x9e>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d109      	bne.n	80096b6 <HAL_TIM_PWM_Start+0x3e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	bf14      	ite	ne
 80096ae:	2301      	movne	r3, #1
 80096b0:	2300      	moveq	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	e02f      	b.n	8009716 <HAL_TIM_PWM_Start+0x9e>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b08      	cmp	r3, #8
 80096ba:	d109      	bne.n	80096d0 <HAL_TIM_PWM_Start+0x58>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	bf14      	ite	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	2300      	moveq	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	e022      	b.n	8009716 <HAL_TIM_PWM_Start+0x9e>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b0c      	cmp	r3, #12
 80096d4:	d109      	bne.n	80096ea <HAL_TIM_PWM_Start+0x72>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b01      	cmp	r3, #1
 80096e0:	bf14      	ite	ne
 80096e2:	2301      	movne	r3, #1
 80096e4:	2300      	moveq	r3, #0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	e015      	b.n	8009716 <HAL_TIM_PWM_Start+0x9e>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b10      	cmp	r3, #16
 80096ee:	d109      	bne.n	8009704 <HAL_TIM_PWM_Start+0x8c>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	bf14      	ite	ne
 80096fc:	2301      	movne	r3, #1
 80096fe:	2300      	moveq	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	e008      	b.n	8009716 <HAL_TIM_PWM_Start+0x9e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e07e      	b.n	800981c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <HAL_TIM_PWM_Start+0xb6>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800972c:	e023      	b.n	8009776 <HAL_TIM_PWM_Start+0xfe>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b04      	cmp	r3, #4
 8009732:	d104      	bne.n	800973e <HAL_TIM_PWM_Start+0xc6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800973c:	e01b      	b.n	8009776 <HAL_TIM_PWM_Start+0xfe>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d104      	bne.n	800974e <HAL_TIM_PWM_Start+0xd6>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800974c:	e013      	b.n	8009776 <HAL_TIM_PWM_Start+0xfe>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b0c      	cmp	r3, #12
 8009752:	d104      	bne.n	800975e <HAL_TIM_PWM_Start+0xe6>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800975c:	e00b      	b.n	8009776 <HAL_TIM_PWM_Start+0xfe>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b10      	cmp	r3, #16
 8009762:	d104      	bne.n	800976e <HAL_TIM_PWM_Start+0xf6>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800976c:	e003      	b.n	8009776 <HAL_TIM_PWM_Start+0xfe>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2201      	movs	r2, #1
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f000 feca 	bl	800a518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a26      	ldr	r2, [pc, #152]	; (8009824 <HAL_TIM_PWM_Start+0x1ac>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d009      	beq.n	80097a2 <HAL_TIM_PWM_Start+0x12a>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a25      	ldr	r2, [pc, #148]	; (8009828 <HAL_TIM_PWM_Start+0x1b0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d004      	beq.n	80097a2 <HAL_TIM_PWM_Start+0x12a>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a23      	ldr	r2, [pc, #140]	; (800982c <HAL_TIM_PWM_Start+0x1b4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_PWM_Start+0x12e>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <HAL_TIM_PWM_Start+0x130>
 80097a6:	2300      	movs	r3, #0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a18      	ldr	r2, [pc, #96]	; (8009824 <HAL_TIM_PWM_Start+0x1ac>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d009      	beq.n	80097da <HAL_TIM_PWM_Start+0x162>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ce:	d004      	beq.n	80097da <HAL_TIM_PWM_Start+0x162>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a14      	ldr	r2, [pc, #80]	; (8009828 <HAL_TIM_PWM_Start+0x1b0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d115      	bne.n	8009806 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	4b13      	ldr	r3, [pc, #76]	; (8009830 <HAL_TIM_PWM_Start+0x1b8>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d015      	beq.n	8009818 <HAL_TIM_PWM_Start+0x1a0>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f2:	d011      	beq.n	8009818 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0201 	orr.w	r2, r2, #1
 8009802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009804:	e008      	b.n	8009818 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e000      	b.n	800981a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	40012c00 	.word	0x40012c00
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	00010007 	.word	0x00010007

08009834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e097      	b.n	8009978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fa f839 	bl	80038d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f000 fb63 	bl	8009f54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	4313      	orrs	r3, r2
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80098d4:	f023 030c 	bic.w	r3, r3, #12
 80098d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	4313      	orrs	r3, r2
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	011a      	lsls	r2, r3, #4
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	031b      	lsls	r3, r3, #12
 8009904:	4313      	orrs	r3, r2
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	4313      	orrs	r3, r2
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d110      	bne.n	80099d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d102      	bne.n	80099bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099b6:	7b7b      	ldrb	r3, [r7, #13]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d001      	beq.n	80099c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e069      	b.n	8009a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2202      	movs	r2, #2
 80099c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d0:	e031      	b.n	8009a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d110      	bne.n	80099fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d102      	bne.n	80099e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80099de:	7b3b      	ldrb	r3, [r7, #12]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d001      	beq.n	80099e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e055      	b.n	8009a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f8:	e01d      	b.n	8009a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d108      	bne.n	8009a12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d105      	bne.n	8009a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a06:	7b7b      	ldrb	r3, [r7, #13]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d102      	bne.n	8009a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a0c:	7b3b      	ldrb	r3, [r7, #12]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d001      	beq.n	8009a16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e03e      	b.n	8009a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2202      	movs	r2, #2
 8009a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2202      	movs	r2, #2
 8009a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_TIM_Encoder_Start+0xc4>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d008      	beq.n	8009a54 <HAL_TIM_Encoder_Start+0xd4>
 8009a42:	e00f      	b.n	8009a64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fd63 	bl	800a518 <TIM_CCxChannelCmd>
      break;
 8009a52:	e016      	b.n	8009a82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	2104      	movs	r1, #4
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fd5b 	bl	800a518 <TIM_CCxChannelCmd>
      break;
 8009a62:	e00e      	b.n	8009a82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fd53 	bl	800a518 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2201      	movs	r2, #1
 8009a78:	2104      	movs	r1, #4
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fd4c 	bl	800a518 <TIM_CCxChannelCmd>
      break;
 8009a80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f042 0201 	orr.w	r2, r2, #1
 8009a90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d122      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d11b      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f06f 0202 	mvn.w	r2, #2
 8009ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa1a 	bl	8009f18 <HAL_TIM_IC_CaptureCallback>
 8009ae4:	e005      	b.n	8009af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa0c 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa1d 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d122      	bne.n	8009b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d11b      	bne.n	8009b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0204 	mvn.w	r2, #4
 8009b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2202      	movs	r2, #2
 8009b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9f0 	bl	8009f18 <HAL_TIM_IC_CaptureCallback>
 8009b38:	e005      	b.n	8009b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9e2 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9f3 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d122      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d11b      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0208 	mvn.w	r2, #8
 8009b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2204      	movs	r2, #4
 8009b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f9c6 	bl	8009f18 <HAL_TIM_IC_CaptureCallback>
 8009b8c:	e005      	b.n	8009b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9b8 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f9c9 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f003 0310 	and.w	r3, r3, #16
 8009baa:	2b10      	cmp	r3, #16
 8009bac:	d122      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f003 0310 	and.w	r3, r3, #16
 8009bb8:	2b10      	cmp	r3, #16
 8009bba:	d11b      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0210 	mvn.w	r2, #16
 8009bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2208      	movs	r2, #8
 8009bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f99c 	bl	8009f18 <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f98e 	bl	8009f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f99f 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d10e      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d107      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0201 	mvn.w	r2, #1
 8009c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7f9 fb88 	bl	8003330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d10e      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c38:	2b80      	cmp	r3, #128	; 0x80
 8009c3a:	d107      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fcfc 	bl	800a644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	d10e      	bne.n	8009c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c66:	2b80      	cmp	r3, #128	; 0x80
 8009c68:	d107      	bne.n	8009c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcef 	bl	800a658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	d10e      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c92:	2b40      	cmp	r3, #64	; 0x40
 8009c94:	d107      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f94d 	bl	8009f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f003 0320 	and.w	r3, r3, #32
 8009cb0:	2b20      	cmp	r3, #32
 8009cb2:	d10e      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d107      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f06f 0220 	mvn.w	r2, #32
 8009cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fcaf 	bl	800a630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e0ff      	b.n	8009efa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b14      	cmp	r3, #20
 8009d06:	f200 80f0 	bhi.w	8009eea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009eeb 	.word	0x08009eeb
 8009d18:	08009eeb 	.word	0x08009eeb
 8009d1c:	08009eeb 	.word	0x08009eeb
 8009d20:	08009da5 	.word	0x08009da5
 8009d24:	08009eeb 	.word	0x08009eeb
 8009d28:	08009eeb 	.word	0x08009eeb
 8009d2c:	08009eeb 	.word	0x08009eeb
 8009d30:	08009de7 	.word	0x08009de7
 8009d34:	08009eeb 	.word	0x08009eeb
 8009d38:	08009eeb 	.word	0x08009eeb
 8009d3c:	08009eeb 	.word	0x08009eeb
 8009d40:	08009e27 	.word	0x08009e27
 8009d44:	08009eeb 	.word	0x08009eeb
 8009d48:	08009eeb 	.word	0x08009eeb
 8009d4c:	08009eeb 	.word	0x08009eeb
 8009d50:	08009e69 	.word	0x08009e69
 8009d54:	08009eeb 	.word	0x08009eeb
 8009d58:	08009eeb 	.word	0x08009eeb
 8009d5c:	08009eeb 	.word	0x08009eeb
 8009d60:	08009ea9 	.word	0x08009ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f956 	bl	800a01c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0208 	orr.w	r2, r2, #8
 8009d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0204 	bic.w	r2, r2, #4
 8009d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6999      	ldr	r1, [r3, #24]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	619a      	str	r2, [r3, #24]
      break;
 8009da2:	e0a5      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 f9b2 	bl	800a114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6999      	ldr	r1, [r3, #24]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	021a      	lsls	r2, r3, #8
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	619a      	str	r2, [r3, #24]
      break;
 8009de4:	e084      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fa0b 	bl	800a208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69da      	ldr	r2, [r3, #28]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0208 	orr.w	r2, r2, #8
 8009e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0204 	bic.w	r2, r2, #4
 8009e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69d9      	ldr	r1, [r3, #28]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	61da      	str	r2, [r3, #28]
      break;
 8009e24:	e064      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fa63 	bl	800a2f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	021a      	lsls	r2, r3, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	61da      	str	r2, [r3, #28]
      break;
 8009e66:	e043      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 faa0 	bl	800a3b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f042 0208 	orr.w	r2, r2, #8
 8009e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 0204 	bic.w	r2, r2, #4
 8009e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ea6:	e023      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68b9      	ldr	r1, [r7, #8]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fad8 	bl	800a464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	021a      	lsls	r2, r3, #8
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ee8:	e002      	b.n	8009ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	75fb      	strb	r3, [r7, #23]
      break;
 8009eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop

08009f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a2a      	ldr	r2, [pc, #168]	; (800a010 <TIM_Base_SetConfig+0xbc>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d003      	beq.n	8009f74 <TIM_Base_SetConfig+0x20>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f72:	d108      	bne.n	8009f86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a21      	ldr	r2, [pc, #132]	; (800a010 <TIM_Base_SetConfig+0xbc>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00b      	beq.n	8009fa6 <TIM_Base_SetConfig+0x52>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f94:	d007      	beq.n	8009fa6 <TIM_Base_SetConfig+0x52>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <TIM_Base_SetConfig+0xc0>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_Base_SetConfig+0x52>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a1d      	ldr	r2, [pc, #116]	; (800a018 <TIM_Base_SetConfig+0xc4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d108      	bne.n	8009fb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a0c      	ldr	r2, [pc, #48]	; (800a010 <TIM_Base_SetConfig+0xbc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d007      	beq.n	8009ff4 <TIM_Base_SetConfig+0xa0>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a0b      	ldr	r2, [pc, #44]	; (800a014 <TIM_Base_SetConfig+0xc0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d003      	beq.n	8009ff4 <TIM_Base_SetConfig+0xa0>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a0a      	ldr	r2, [pc, #40]	; (800a018 <TIM_Base_SetConfig+0xc4>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d103      	bne.n	8009ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	691a      	ldr	r2, [r3, #16]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	615a      	str	r2, [r3, #20]
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40014000 	.word	0x40014000
 800a018:	40014400 	.word	0x40014400

0800a01c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f023 0302 	bic.w	r3, r3, #2
 800a068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a24      	ldr	r2, [pc, #144]	; (800a108 <TIM_OC1_SetConfig+0xec>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d007      	beq.n	800a08c <TIM_OC1_SetConfig+0x70>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a23      	ldr	r2, [pc, #140]	; (800a10c <TIM_OC1_SetConfig+0xf0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d003      	beq.n	800a08c <TIM_OC1_SetConfig+0x70>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a22      	ldr	r2, [pc, #136]	; (800a110 <TIM_OC1_SetConfig+0xf4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d10c      	bne.n	800a0a6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f023 0308 	bic.w	r3, r3, #8
 800a092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f023 0304 	bic.w	r3, r3, #4
 800a0a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a17      	ldr	r2, [pc, #92]	; (800a108 <TIM_OC1_SetConfig+0xec>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d007      	beq.n	800a0be <TIM_OC1_SetConfig+0xa2>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a16      	ldr	r2, [pc, #88]	; (800a10c <TIM_OC1_SetConfig+0xf0>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d003      	beq.n	800a0be <TIM_OC1_SetConfig+0xa2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a15      	ldr	r2, [pc, #84]	; (800a110 <TIM_OC1_SetConfig+0xf4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d111      	bne.n	800a0e2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	621a      	str	r2, [r3, #32]
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	40012c00 	.word	0x40012c00
 800a10c:	40014000 	.word	0x40014000
 800a110:	40014400 	.word	0x40014400

0800a114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	f023 0210 	bic.w	r2, r3, #16
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0320 	bic.w	r3, r3, #32
 800a162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a22      	ldr	r2, [pc, #136]	; (800a1fc <TIM_OC2_SetConfig+0xe8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d10d      	bne.n	800a194 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	011b      	lsls	r3, r3, #4
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a19      	ldr	r2, [pc, #100]	; (800a1fc <TIM_OC2_SetConfig+0xe8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d007      	beq.n	800a1ac <TIM_OC2_SetConfig+0x98>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <TIM_OC2_SetConfig+0xec>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_OC2_SetConfig+0x98>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a17      	ldr	r2, [pc, #92]	; (800a204 <TIM_OC2_SetConfig+0xf0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d113      	bne.n	800a1d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	621a      	str	r2, [r3, #32]
}
 800a1ee:	bf00      	nop
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	40012c00 	.word	0x40012c00
 800a200:	40014000 	.word	0x40014000
 800a204:	40014400 	.word	0x40014400

0800a208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a21      	ldr	r2, [pc, #132]	; (800a2ec <TIM_OC3_SetConfig+0xe4>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d10d      	bne.n	800a286 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a18      	ldr	r2, [pc, #96]	; (800a2ec <TIM_OC3_SetConfig+0xe4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d007      	beq.n	800a29e <TIM_OC3_SetConfig+0x96>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <TIM_OC3_SetConfig+0xe8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC3_SetConfig+0x96>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a16      	ldr	r2, [pc, #88]	; (800a2f4 <TIM_OC3_SetConfig+0xec>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d113      	bne.n	800a2c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	621a      	str	r2, [r3, #32]
}
 800a2e0:	bf00      	nop
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	40012c00 	.word	0x40012c00
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	40014400 	.word	0x40014400

0800a2f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	031b      	lsls	r3, r3, #12
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	4313      	orrs	r3, r2
 800a352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a14      	ldr	r2, [pc, #80]	; (800a3a8 <TIM_OC4_SetConfig+0xb0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d007      	beq.n	800a36c <TIM_OC4_SetConfig+0x74>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a13      	ldr	r2, [pc, #76]	; (800a3ac <TIM_OC4_SetConfig+0xb4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d003      	beq.n	800a36c <TIM_OC4_SetConfig+0x74>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a12      	ldr	r2, [pc, #72]	; (800a3b0 <TIM_OC4_SetConfig+0xb8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d109      	bne.n	800a380 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	019b      	lsls	r3, r3, #6
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40012c00 	.word	0x40012c00
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400

0800a3b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a3f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	041b      	lsls	r3, r3, #16
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a13      	ldr	r2, [pc, #76]	; (800a458 <TIM_OC5_SetConfig+0xa4>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d007      	beq.n	800a41e <TIM_OC5_SetConfig+0x6a>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a12      	ldr	r2, [pc, #72]	; (800a45c <TIM_OC5_SetConfig+0xa8>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d003      	beq.n	800a41e <TIM_OC5_SetConfig+0x6a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a11      	ldr	r2, [pc, #68]	; (800a460 <TIM_OC5_SetConfig+0xac>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d109      	bne.n	800a432 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a424:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	621a      	str	r2, [r3, #32]
}
 800a44c:	bf00      	nop
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	40012c00 	.word	0x40012c00
 800a45c:	40014000 	.word	0x40014000
 800a460:	40014400 	.word	0x40014400

0800a464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	051b      	lsls	r3, r3, #20
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a14      	ldr	r2, [pc, #80]	; (800a50c <TIM_OC6_SetConfig+0xa8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_OC6_SetConfig+0x6c>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a13      	ldr	r2, [pc, #76]	; (800a510 <TIM_OC6_SetConfig+0xac>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_OC6_SetConfig+0x6c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a12      	ldr	r2, [pc, #72]	; (800a514 <TIM_OC6_SetConfig+0xb0>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d109      	bne.n	800a4e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	029b      	lsls	r3, r3, #10
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40012c00 	.word	0x40012c00
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400

0800a518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f003 031f 	and.w	r3, r3, #31
 800a52a:	2201      	movs	r2, #1
 800a52c:	fa02 f303 	lsl.w	r3, r2, r3
 800a530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1a      	ldr	r2, [r3, #32]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	43db      	mvns	r3, r3
 800a53a:	401a      	ands	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a1a      	ldr	r2, [r3, #32]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	fa01 f303 	lsl.w	r3, r1, r3
 800a550:	431a      	orrs	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a578:	2302      	movs	r3, #2
 800a57a:	e04f      	b.n	800a61c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a21      	ldr	r2, [pc, #132]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d108      	bne.n	800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a14      	ldr	r2, [pc, #80]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d009      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e4:	d004      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a10      	ldr	r2, [pc, #64]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d10c      	bne.n	800a60a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	40014000 	.word	0x40014000

0800a630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a66c:	b084      	sub	sp, #16
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	f107 0014 	add.w	r0, r7, #20
 800a67a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	b004      	add	sp, #16
 800a68c:	4770      	bx	lr

0800a68e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a68e:	b480      	push	{r7}
 800a690:	b085      	sub	sp, #20
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a69e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	43db      	mvns	r3, r3
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4013      	ands	r3, r2
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a70c:	b084      	sub	sp, #16
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	f107 0014 	add.w	r0, r7, #20
 800a71a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	b004      	add	sp, #16
 800a74c:	4770      	bx	lr
	...

0800a750 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a750:	b480      	push	{r7}
 800a752:	b09d      	sub	sp, #116	; 0x74
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a776:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	78db      	ldrb	r3, [r3, #3]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d81f      	bhi.n	800a7c2 <USB_ActivateEndpoint+0x72>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <USB_ActivateEndpoint+0x38>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a7b5 	.word	0x0800a7b5
 800a790:	0800a7cb 	.word	0x0800a7cb
 800a794:	0800a7a7 	.word	0x0800a7a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a79c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7a4:	e012      	b.n	800a7cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a7a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a7ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7b2:	e00b      	b.n	800a7cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7c0:	e004      	b.n	800a7cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a7c8:	e000      	b.n	800a7cc <USB_ActivateEndpoint+0x7c>
      break;
 800a7ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	441a      	add	r2, r3
 800a7d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a806:	b21a      	sxth	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	b21b      	sxth	r3, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	b21b      	sxth	r3, r3
 800a812:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	441a      	add	r2, r3
 800a820:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a82c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a834:	b29b      	uxth	r3, r3
 800a836:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	7b1b      	ldrb	r3, [r3, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f040 816e 	bne.w	800ab1e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 8084 	beq.w	800a954 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	61bb      	str	r3, [r7, #24]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a856:	b29b      	uxth	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	4413      	add	r3, r2
 800a85e:	61bb      	str	r3, [r7, #24]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	00da      	lsls	r2, r3, #3
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	88db      	ldrh	r3, [r3, #6]
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	b29b      	uxth	r3, r3
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	827b      	strh	r3, [r7, #18]
 800a88e:	8a7b      	ldrh	r3, [r7, #18]
 800a890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01b      	beq.n	800a8d0 <USB_ActivateEndpoint+0x180>
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ae:	823b      	strh	r3, [r7, #16]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	441a      	add	r2, r3
 800a8ba:	8a3b      	ldrh	r3, [r7, #16]
 800a8bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	78db      	ldrb	r3, [r3, #3]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d020      	beq.n	800a91a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ee:	81bb      	strh	r3, [r7, #12]
 800a8f0:	89bb      	ldrh	r3, [r7, #12]
 800a8f2:	f083 0320 	eor.w	r3, r3, #32
 800a8f6:	81bb      	strh	r3, [r7, #12]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	441a      	add	r2, r3
 800a902:	89bb      	ldrh	r3, [r7, #12]
 800a904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a90c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a914:	b29b      	uxth	r3, r3
 800a916:	8013      	strh	r3, [r2, #0]
 800a918:	e2cb      	b.n	800aeb2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a930:	81fb      	strh	r3, [r7, #14]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	441a      	add	r2, r3
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a94a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94e:	b29b      	uxth	r3, r3
 800a950:	8013      	strh	r3, [r2, #0]
 800a952:	e2ae      	b.n	800aeb2 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	633b      	str	r3, [r7, #48]	; 0x30
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a95e:	b29b      	uxth	r3, r3
 800a960:	461a      	mov	r2, r3
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	4413      	add	r3, r2
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	00da      	lsls	r2, r3, #3
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	4413      	add	r3, r2
 800a972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a976:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	085b      	lsrs	r3, r3, #1
 800a97e:	b29b      	uxth	r3, r3
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	b29a      	uxth	r2, r3
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a992:	b29b      	uxth	r3, r3
 800a994:	461a      	mov	r2, r3
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	4413      	add	r3, r2
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	00da      	lsls	r2, r3, #3
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9b2:	d918      	bls.n	800a9e6 <USB_ActivateEndpoint+0x296>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <USB_ActivateEndpoint+0x27e>
 800a9c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	029b      	lsls	r3, r3, #10
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	e029      	b.n	800aa3a <USB_ActivateEndpoint+0x2ea>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d112      	bne.n	800aa14 <USB_ActivateEndpoint+0x2c4>
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	e012      	b.n	800aa3a <USB_ActivateEndpoint+0x2ea>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	085b      	lsrs	r3, r3, #1
 800aa1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <USB_ActivateEndpoint+0x2de>
 800aa28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	029b      	lsls	r3, r3, #10
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d01b      	beq.n	800aa8a <USB_ActivateEndpoint+0x33a>
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa68:	843b      	strh	r3, [r7, #32]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	441a      	add	r2, r3
 800aa74:	8c3b      	ldrh	r3, [r7, #32]
 800aa76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d124      	bne.n	800aadc <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa8:	83bb      	strh	r3, [r7, #28]
 800aaaa:	8bbb      	ldrh	r3, [r7, #28]
 800aaac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aab0:	83bb      	strh	r3, [r7, #28]
 800aab2:	8bbb      	ldrh	r3, [r7, #28]
 800aab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aab8:	83bb      	strh	r3, [r7, #28]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	441a      	add	r2, r3
 800aac4:	8bbb      	ldrh	r3, [r7, #28]
 800aac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	8013      	strh	r3, [r2, #0]
 800aada:	e1ea      	b.n	800aeb2 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf2:	83fb      	strh	r3, [r7, #30]
 800aaf4:	8bfb      	ldrh	r3, [r7, #30]
 800aaf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aafa:	83fb      	strh	r3, [r7, #30]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	441a      	add	r2, r3
 800ab06:	8bfb      	ldrh	r3, [r7, #30]
 800ab08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	8013      	strh	r3, [r2, #0]
 800ab1c:	e1c9      	b.n	800aeb2 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	78db      	ldrb	r3, [r3, #3]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d11e      	bne.n	800ab64 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	441a      	add	r2, r3
 800ab4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ab4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ab5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	8013      	strh	r3, [r2, #0]
 800ab62:	e01d      	b.n	800aba0 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	441a      	add	r2, r3
 800ab88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abaa:	b29b      	uxth	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abb0:	4413      	add	r3, r2
 800abb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	00da      	lsls	r2, r3, #3
 800abba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abc2:	65bb      	str	r3, [r7, #88]	; 0x58
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	891b      	ldrh	r3, [r3, #8]
 800abc8:	085b      	lsrs	r3, r3, #1
 800abca:	b29b      	uxth	r3, r3
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abd2:	801a      	strh	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	657b      	str	r3, [r7, #84]	; 0x54
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abde:	b29b      	uxth	r3, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abe4:	4413      	add	r3, r2
 800abe6:	657b      	str	r3, [r7, #84]	; 0x54
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	00da      	lsls	r2, r3, #3
 800abee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf0:	4413      	add	r3, r2
 800abf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800abf6:	653b      	str	r3, [r7, #80]	; 0x50
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	895b      	ldrh	r3, [r3, #10]
 800abfc:	085b      	lsrs	r3, r3, #1
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac06:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 8093 	bne.w	800ad38 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ac22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d01b      	beq.n	800ac66 <USB_ActivateEndpoint+0x516>
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	441a      	add	r2, r3
 800ac50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ac74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01b      	beq.n	800acb6 <USB_ActivateEndpoint+0x566>
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac94:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	441a      	add	r2, r3
 800aca0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800accc:	873b      	strh	r3, [r7, #56]	; 0x38
 800acce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800acd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800acd4:	873b      	strh	r3, [r7, #56]	; 0x38
 800acd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800acd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acdc:	873b      	strh	r3, [r7, #56]	; 0x38
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	441a      	add	r2, r3
 800ace8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800acea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad14:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	441a      	add	r2, r3
 800ad20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	8013      	strh	r3, [r2, #0]
 800ad36:	e0bc      	b.n	800aeb2 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ad48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d01d      	beq.n	800ad90 <USB_ActivateEndpoint+0x640>
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	441a      	add	r2, r3
 800ad78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ad7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ada0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01d      	beq.n	800ade8 <USB_ActivateEndpoint+0x698>
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	441a      	add	r2, r3
 800add0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800add4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800add8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800addc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ade0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	78db      	ldrb	r3, [r3, #3]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d024      	beq.n	800ae3a <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae0e:	f083 0320 	eor.w	r3, r3, #32
 800ae12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	441a      	add	r2, r3
 800ae20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	8013      	strh	r3, [r2, #0]
 800ae38:	e01d      	b.n	800ae76 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	441a      	add	r2, r3
 800ae5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ae62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	441a      	add	r2, r3
 800ae9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800aeb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3774      	adds	r7, #116	; 0x74
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop

0800aec4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b08d      	sub	sp, #52	; 0x34
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	7b1b      	ldrb	r3, [r3, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 808e 	bne.w	800aff4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d044      	beq.n	800af6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	81bb      	strh	r3, [r7, #12]
 800aeee:	89bb      	ldrh	r3, [r7, #12]
 800aef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01b      	beq.n	800af30 <USB_DeactivateEndpoint+0x6c>
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0e:	817b      	strh	r3, [r7, #10]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	441a      	add	r2, r3
 800af1a:	897b      	ldrh	r3, [r7, #10]
 800af1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af46:	813b      	strh	r3, [r7, #8]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	441a      	add	r2, r3
 800af52:	893b      	ldrh	r3, [r7, #8]
 800af54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af64:	b29b      	uxth	r3, r3
 800af66:	8013      	strh	r3, [r2, #0]
 800af68:	e192      	b.n	800b290 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	827b      	strh	r3, [r7, #18]
 800af78:	8a7b      	ldrh	r3, [r7, #18]
 800af7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d01b      	beq.n	800afba <USB_DeactivateEndpoint+0xf6>
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af98:	823b      	strh	r3, [r7, #16]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	441a      	add	r2, r3
 800afa4:	8a3b      	ldrh	r3, [r7, #16]
 800afa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd0:	81fb      	strh	r3, [r7, #14]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	441a      	add	r2, r3
 800afdc:	89fb      	ldrh	r3, [r7, #14]
 800afde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afee:	b29b      	uxth	r3, r3
 800aff0:	8013      	strh	r3, [r2, #0]
 800aff2:	e14d      	b.n	800b290 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	785b      	ldrb	r3, [r3, #1]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f040 80a5 	bne.w	800b148 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	843b      	strh	r3, [r7, #32]
 800b00c:	8c3b      	ldrh	r3, [r7, #32]
 800b00e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01b      	beq.n	800b04e <USB_DeactivateEndpoint+0x18a>
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	b29b      	uxth	r3, r3
 800b024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02c:	83fb      	strh	r3, [r7, #30]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	441a      	add	r2, r3
 800b038:	8bfb      	ldrh	r3, [r7, #30]
 800b03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	83bb      	strh	r3, [r7, #28]
 800b05c:	8bbb      	ldrh	r3, [r7, #28]
 800b05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01b      	beq.n	800b09e <USB_DeactivateEndpoint+0x1da>
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07c:	837b      	strh	r3, [r7, #26]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	441a      	add	r2, r3
 800b088:	8b7b      	ldrh	r3, [r7, #26]
 800b08a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b08e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b4:	833b      	strh	r3, [r7, #24]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	441a      	add	r2, r3
 800b0c0:	8b3b      	ldrh	r3, [r7, #24]
 800b0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ec:	82fb      	strh	r3, [r7, #22]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	441a      	add	r2, r3
 800b0f8:	8afb      	ldrh	r3, [r7, #22]
 800b0fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b124:	82bb      	strh	r3, [r7, #20]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	441a      	add	r2, r3
 800b130:	8abb      	ldrh	r3, [r7, #20]
 800b132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b142:	b29b      	uxth	r3, r3
 800b144:	8013      	strh	r3, [r2, #0]
 800b146:	e0a3      	b.n	800b290 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01b      	beq.n	800b198 <USB_DeactivateEndpoint+0x2d4>
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b176:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	441a      	add	r2, r3
 800b182:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b194:	b29b      	uxth	r3, r3
 800b196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b1a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01b      	beq.n	800b1e8 <USB_DeactivateEndpoint+0x324>
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c6:	853b      	strh	r3, [r7, #40]	; 0x28
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	441a      	add	r2, r3
 800b1d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	441a      	add	r2, r3
 800b20a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b20c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b236:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	441a      	add	r2, r3
 800b242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b24c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b254:	b29b      	uxth	r3, r3
 800b256:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	881b      	ldrh	r3, [r3, #0]
 800b264:	b29b      	uxth	r3, r3
 800b266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b26e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	441a      	add	r2, r3
 800b27a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3734      	adds	r7, #52	; 0x34
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b0c2      	sub	sp, #264	; 0x108
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ac:	6018      	str	r0, [r3, #0]
 800b2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	f040 867b 	bne.w	800bfc0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d908      	bls.n	800b2f8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b2f6:	e007      	b.n	800b308 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	7b1b      	ldrb	r3, [r3, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d13a      	bne.n	800b38e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6959      	ldr	r1, [r3, #20]
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	88da      	ldrh	r2, [r3, #6]
 800b330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b334:	b29b      	uxth	r3, r3
 800b336:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b33a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b33e:	6800      	ldr	r0, [r0, #0]
 800b340:	f001 fc3e 	bl	800cbc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	613b      	str	r3, [r7, #16]
 800b350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b35e:	b29b      	uxth	r3, r3
 800b360:	461a      	mov	r2, r3
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	4413      	add	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
 800b368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	00da      	lsls	r2, r3, #3
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	4413      	add	r3, r2
 800b37a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	f000 bde3 	b.w	800bf54 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	78db      	ldrb	r3, [r3, #3]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	f040 843a 	bne.w	800bc14 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	f240 83b7 	bls.w	800bb2c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	441a      	add	r2, r3
 800b402:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b40a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b40e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6a1a      	ldr	r2, [r3, #32]
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	1ad2      	subs	r2, r2, r3
 800b42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4413      	add	r3, r2
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	b29b      	uxth	r3, r3
 800b456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 81b3 	beq.w	800b7c6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	633b      	str	r3, [r7, #48]	; 0x30
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d16d      	bne.n	800b558 <USB_EPStartXfer+0x2ba>
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b496:	b29b      	uxth	r3, r3
 800b498:	461a      	mov	r2, r3
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	4413      	add	r3, r2
 800b49e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	00da      	lsls	r2, r3, #3
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4bc:	2b3e      	cmp	r3, #62	; 0x3e
 800b4be:	d91c      	bls.n	800b4fa <USB_EPStartXfer+0x25c>
 800b4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c4:	095b      	lsrs	r3, r3, #5
 800b4c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	f003 031f 	and.w	r3, r3, #31
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d104      	bne.n	800b4e0 <USB_EPStartXfer+0x242>
 800b4d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	029b      	lsls	r3, r3, #10
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	801a      	strh	r2, [r3, #0]
 800b4f8:	e053      	b.n	800b5a2 <USB_EPStartXfer+0x304>
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d112      	bne.n	800b528 <USB_EPStartXfer+0x28a>
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	b29b      	uxth	r3, r3
 800b518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b520:	b29a      	uxth	r2, r3
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	801a      	strh	r2, [r3, #0]
 800b526:	e03c      	b.n	800b5a2 <USB_EPStartXfer+0x304>
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	085b      	lsrs	r3, r3, #1
 800b52e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d004      	beq.n	800b548 <USB_EPStartXfer+0x2aa>
 800b53e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b542:	3301      	adds	r3, #1
 800b544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b548:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	029b      	lsls	r3, r3, #10
 800b550:	b29a      	uxth	r2, r3
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	801a      	strh	r2, [r3, #0]
 800b556:	e024      	b.n	800b5a2 <USB_EPStartXfer+0x304>
 800b558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d11c      	bne.n	800b5a2 <USB_EPStartXfer+0x304>
 800b568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b576:	b29b      	uxth	r3, r3
 800b578:	461a      	mov	r2, r3
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	4413      	add	r3, r2
 800b57e:	633b      	str	r3, [r7, #48]	; 0x30
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	00da      	lsls	r2, r3, #3
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	4413      	add	r3, r2
 800b592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6959      	ldr	r1, [r3, #20]
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b5d0:	6800      	ldr	r0, [r0, #0]
 800b5d2:	f001 faf5 	bl	800cbc0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	695a      	ldr	r2, [r3, #20]
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	441a      	add	r2, r3
 800b5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6a1a      	ldr	r2, [r3, #32]
 800b600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d90f      	bls.n	800b630 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6a1a      	ldr	r2, [r3, #32]
 800b61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b620:	1ad2      	subs	r2, r2, r3
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	621a      	str	r2, [r3, #32]
 800b62e:	e00e      	b.n	800b64e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2200      	movs	r2, #0
 800b64c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	785b      	ldrb	r3, [r3, #1]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d16d      	bne.n	800b73a <USB_EPStartXfer+0x49c>
 800b65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	61bb      	str	r3, [r7, #24]
 800b66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b678:	b29b      	uxth	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	4413      	add	r3, r2
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	00da      	lsls	r2, r3, #3
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	4413      	add	r3, r2
 800b694:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	2b3e      	cmp	r3, #62	; 0x3e
 800b6a0:	d91c      	bls.n	800b6dc <USB_EPStartXfer+0x43e>
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	095b      	lsrs	r3, r3, #5
 800b6a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b0:	f003 031f 	and.w	r3, r3, #31
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <USB_EPStartXfer+0x424>
 800b6b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	029b      	lsls	r3, r3, #10
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	801a      	strh	r2, [r3, #0]
 800b6da:	e059      	b.n	800b790 <USB_EPStartXfer+0x4f2>
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d112      	bne.n	800b70a <USB_EPStartXfer+0x46c>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b702:	b29a      	uxth	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	801a      	strh	r2, [r3, #0]
 800b708:	e042      	b.n	800b790 <USB_EPStartXfer+0x4f2>
 800b70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70e:	085b      	lsrs	r3, r3, #1
 800b710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <USB_EPStartXfer+0x48c>
 800b720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b724:	3301      	adds	r3, #1
 800b726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b72a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b72e:	b29b      	uxth	r3, r3
 800b730:	029b      	lsls	r3, r3, #10
 800b732:	b29a      	uxth	r2, r3
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	801a      	strh	r2, [r3, #0]
 800b738:	e02a      	b.n	800b790 <USB_EPStartXfer+0x4f2>
 800b73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	785b      	ldrb	r3, [r3, #1]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d122      	bne.n	800b790 <USB_EPStartXfer+0x4f2>
 800b74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	623b      	str	r3, [r7, #32]
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b764:	b29b      	uxth	r3, r3
 800b766:	461a      	mov	r2, r3
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	4413      	add	r3, r2
 800b76c:	623b      	str	r3, [r7, #32]
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	00da      	lsls	r2, r3, #3
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	4413      	add	r3, r2
 800b780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b784:	61fb      	str	r3, [r7, #28]
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	891b      	ldrh	r3, [r3, #8]
 800b79c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	6959      	ldr	r1, [r3, #20]
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7be:	6800      	ldr	r0, [r0, #0]
 800b7c0:	f001 f9fe 	bl	800cbc0 <USB_WritePMA>
 800b7c4:	e3c6      	b.n	800bf54 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	785b      	ldrb	r3, [r3, #1]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d16d      	bne.n	800b8b2 <USB_EPStartXfer+0x614>
 800b7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f6:	4413      	add	r3, r2
 800b7f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	00da      	lsls	r2, r3, #3
 800b808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80a:	4413      	add	r3, r2
 800b80c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b810:	647b      	str	r3, [r7, #68]	; 0x44
 800b812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b816:	2b3e      	cmp	r3, #62	; 0x3e
 800b818:	d91c      	bls.n	800b854 <USB_EPStartXfer+0x5b6>
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	095b      	lsrs	r3, r3, #5
 800b820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b828:	f003 031f 	and.w	r3, r3, #31
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d104      	bne.n	800b83a <USB_EPStartXfer+0x59c>
 800b830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b834:	3b01      	subs	r3, #1
 800b836:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b83a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b83e:	b29b      	uxth	r3, r3
 800b840:	029b      	lsls	r3, r3, #10
 800b842:	b29b      	uxth	r3, r3
 800b844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b850:	801a      	strh	r2, [r3, #0]
 800b852:	e059      	b.n	800b908 <USB_EPStartXfer+0x66a>
 800b854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d112      	bne.n	800b882 <USB_EPStartXfer+0x5e4>
 800b85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b866:	b29a      	uxth	r2, r3
 800b868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b86a:	801a      	strh	r2, [r3, #0]
 800b86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	b29b      	uxth	r3, r3
 800b872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b87e:	801a      	strh	r2, [r3, #0]
 800b880:	e042      	b.n	800b908 <USB_EPStartXfer+0x66a>
 800b882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <USB_EPStartXfer+0x604>
 800b898:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b89c:	3301      	adds	r3, #1
 800b89e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	029b      	lsls	r3, r3, #10
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	e02a      	b.n	800b908 <USB_EPStartXfer+0x66a>
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d122      	bne.n	800b908 <USB_EPStartXfer+0x66a>
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	653b      	str	r3, [r7, #80]	; 0x50
 800b8ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e2:	4413      	add	r3, r2
 800b8e4:	653b      	str	r3, [r7, #80]	; 0x50
 800b8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	00da      	lsls	r2, r3, #3
 800b8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b902:	b29a      	uxth	r2, r3
 800b904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b906:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	891b      	ldrh	r3, [r3, #8]
 800b914:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6959      	ldr	r1, [r3, #20]
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	b29b      	uxth	r3, r3
 800b92a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b92e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b932:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b936:	6800      	ldr	r0, [r0, #0]
 800b938:	f001 f942 	bl	800cbc0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	695a      	ldr	r2, [r3, #20]
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	441a      	add	r2, r3
 800b94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6a1a      	ldr	r2, [r3, #32]
 800b966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	429a      	cmp	r2, r3
 800b974:	d90f      	bls.n	800b996 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6a1a      	ldr	r2, [r3, #32]
 800b982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b986:	1ad2      	subs	r2, r2, r3
 800b988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	621a      	str	r2, [r3, #32]
 800b994:	e00e      	b.n	800b9b4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	643b      	str	r3, [r7, #64]	; 0x40
 800b9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d16d      	bne.n	800baac <USB_EPStartXfer+0x80e>
 800b9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f0:	4413      	add	r3, r2
 800b9f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	00da      	lsls	r2, r3, #3
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	4413      	add	r3, r2
 800ba06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba10:	2b3e      	cmp	r3, #62	; 0x3e
 800ba12:	d91c      	bls.n	800ba4e <USB_EPStartXfer+0x7b0>
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	095b      	lsrs	r3, r3, #5
 800ba1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	f003 031f 	and.w	r3, r3, #31
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d104      	bne.n	800ba34 <USB_EPStartXfer+0x796>
 800ba2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	029b      	lsls	r3, r3, #10
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4a:	801a      	strh	r2, [r3, #0]
 800ba4c:	e053      	b.n	800baf6 <USB_EPStartXfer+0x858>
 800ba4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d112      	bne.n	800ba7c <USB_EPStartXfer+0x7de>
 800ba56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	801a      	strh	r2, [r3, #0]
 800ba66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	e03c      	b.n	800baf6 <USB_EPStartXfer+0x858>
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba80:	085b      	lsrs	r3, r3, #1
 800ba82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d004      	beq.n	800ba9c <USB_EPStartXfer+0x7fe>
 800ba92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba96:	3301      	adds	r3, #1
 800ba98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	029b      	lsls	r3, r3, #10
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	e024      	b.n	800baf6 <USB_EPStartXfer+0x858>
 800baac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	785b      	ldrb	r3, [r3, #1]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d11c      	bne.n	800baf6 <USB_EPStartXfer+0x858>
 800babc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baca:	b29b      	uxth	r3, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad0:	4413      	add	r3, r2
 800bad2:	643b      	str	r3, [r7, #64]	; 0x40
 800bad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	00da      	lsls	r2, r3, #3
 800bae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae4:	4413      	add	r3, r2
 800bae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800baf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	895b      	ldrh	r3, [r3, #10]
 800bb02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6959      	ldr	r1, [r3, #20]
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb24:	6800      	ldr	r0, [r0, #0]
 800bb26:	f001 f84b 	bl	800cbc0 <USB_WritePMA>
 800bb2a:	e213      	b.n	800bf54 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	441a      	add	r2, r3
 800bb80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bb84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb8:	4413      	add	r3, r2
 800bbba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	00da      	lsls	r2, r3, #3
 800bbca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbcc:	4413      	add	r3, r2
 800bbce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	891b      	ldrh	r3, [r3, #8]
 800bbea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6959      	ldr	r1, [r3, #20]
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f000 ffd7 	bl	800cbc0 <USB_WritePMA>
 800bc12:	e19f      	b.n	800bf54 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6a1a      	ldr	r2, [r3, #32]
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	1ad2      	subs	r2, r2, r3
 800bc26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 80bc 	beq.w	800bdd2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	673b      	str	r3, [r7, #112]	; 0x70
 800bc66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	785b      	ldrb	r3, [r3, #1]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d16d      	bne.n	800bd52 <USB_EPStartXfer+0xab4>
 800bc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	461a      	mov	r2, r3
 800bc94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc96:	4413      	add	r3, r2
 800bc98:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	00da      	lsls	r2, r3, #3
 800bca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcaa:	4413      	add	r3, r2
 800bcac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcb0:	667b      	str	r3, [r7, #100]	; 0x64
 800bcb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb6:	2b3e      	cmp	r3, #62	; 0x3e
 800bcb8:	d91c      	bls.n	800bcf4 <USB_EPStartXfer+0xa56>
 800bcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc8:	f003 031f 	and.w	r3, r3, #31
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d104      	bne.n	800bcda <USB_EPStartXfer+0xa3c>
 800bcd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	029b      	lsls	r3, r3, #10
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf0:	801a      	strh	r2, [r3, #0]
 800bcf2:	e053      	b.n	800bd9c <USB_EPStartXfer+0xafe>
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d112      	bne.n	800bd22 <USB_EPStartXfer+0xa84>
 800bcfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd0a:	801a      	strh	r2, [r3, #0]
 800bd0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1e:	801a      	strh	r2, [r3, #0]
 800bd20:	e03c      	b.n	800bd9c <USB_EPStartXfer+0xafe>
 800bd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd26:	085b      	lsrs	r3, r3, #1
 800bd28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <USB_EPStartXfer+0xaa4>
 800bd38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	029b      	lsls	r3, r3, #10
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd4e:	801a      	strh	r2, [r3, #0]
 800bd50:	e024      	b.n	800bd9c <USB_EPStartXfer+0xafe>
 800bd52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d11c      	bne.n	800bd9c <USB_EPStartXfer+0xafe>
 800bd62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd76:	4413      	add	r3, r2
 800bd78:	673b      	str	r3, [r7, #112]	; 0x70
 800bd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	00da      	lsls	r2, r3, #3
 800bd88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	895b      	ldrh	r3, [r3, #10]
 800bda8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6959      	ldr	r1, [r3, #20]
 800bdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bdc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bdc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bdca:	6800      	ldr	r0, [r0, #0]
 800bdcc:	f000 fef8 	bl	800cbc0 <USB_WritePMA>
 800bdd0:	e0c0      	b.n	800bf54 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	785b      	ldrb	r3, [r3, #1]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d16d      	bne.n	800bebe <USB_EPStartXfer+0xc20>
 800bde2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be02:	4413      	add	r3, r2
 800be04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	00da      	lsls	r2, r3, #3
 800be14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be16:	4413      	add	r3, r2
 800be18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be22:	2b3e      	cmp	r3, #62	; 0x3e
 800be24:	d91c      	bls.n	800be60 <USB_EPStartXfer+0xbc2>
 800be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2a:	095b      	lsrs	r3, r3, #5
 800be2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be34:	f003 031f 	and.w	r3, r3, #31
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d104      	bne.n	800be46 <USB_EPStartXfer+0xba8>
 800be3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be40:	3b01      	subs	r3, #1
 800be42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	029b      	lsls	r3, r3, #10
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be58:	b29a      	uxth	r2, r3
 800be5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be5c:	801a      	strh	r2, [r3, #0]
 800be5e:	e05f      	b.n	800bf20 <USB_EPStartXfer+0xc82>
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be64:	2b00      	cmp	r3, #0
 800be66:	d112      	bne.n	800be8e <USB_EPStartXfer+0xbf0>
 800be68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be72:	b29a      	uxth	r2, r3
 800be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be76:	801a      	strh	r2, [r3, #0]
 800be78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be86:	b29a      	uxth	r2, r3
 800be88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be8a:	801a      	strh	r2, [r3, #0]
 800be8c:	e048      	b.n	800bf20 <USB_EPStartXfer+0xc82>
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <USB_EPStartXfer+0xc10>
 800bea4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bea8:	3301      	adds	r3, #1
 800beaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800beae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	029b      	lsls	r3, r3, #10
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beba:	801a      	strh	r2, [r3, #0]
 800bebc:	e030      	b.n	800bf20 <USB_EPStartXfer+0xc82>
 800bebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	785b      	ldrb	r3, [r3, #1]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d128      	bne.n	800bf20 <USB_EPStartXfer+0xc82>
 800bece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beea:	b29b      	uxth	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bef2:	4413      	add	r3, r2
 800bef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800befc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	00da      	lsls	r2, r3, #3
 800bf06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf0a:	4413      	add	r3, r2
 800bf0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	891b      	ldrh	r3, [r3, #8]
 800bf2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6959      	ldr	r1, [r3, #20]
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf4e:	6800      	ldr	r0, [r0, #0]
 800bf50:	f000 fe36 	bl	800cbc0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf7a:	817b      	strh	r3, [r7, #10]
 800bf7c:	897b      	ldrh	r3, [r7, #10]
 800bf7e:	f083 0310 	eor.w	r3, r3, #16
 800bf82:	817b      	strh	r3, [r7, #10]
 800bf84:	897b      	ldrh	r3, [r7, #10]
 800bf86:	f083 0320 	eor.w	r3, r3, #32
 800bf8a:	817b      	strh	r3, [r7, #10]
 800bf8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	441a      	add	r2, r3
 800bfa6:	897b      	ldrh	r3, [r7, #10]
 800bfa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	8013      	strh	r3, [r2, #0]
 800bfbc:	f000 bc9f 	b.w	800c8fe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bfc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	7b1b      	ldrb	r3, [r3, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f040 80ae 	bne.w	800c12e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	699a      	ldr	r2, [r3, #24]
 800bfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d917      	bls.n	800c01e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800bfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	699a      	ldr	r2, [r3, #24]
 800c00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	619a      	str	r2, [r3, #24]
 800c01c:	e00e      	b.n	800c03c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800c01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2200      	movs	r2, #0
 800c03a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c04e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c060:	4413      	add	r3, r2
 800c062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	00da      	lsls	r2, r3, #3
 800c074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c078:	4413      	add	r3, r2
 800c07a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c07e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c086:	2b3e      	cmp	r3, #62	; 0x3e
 800c088:	d91d      	bls.n	800c0c6 <USB_EPStartXfer+0xe28>
 800c08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c08e:	095b      	lsrs	r3, r3, #5
 800c090:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c098:	f003 031f 	and.w	r3, r3, #31
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d104      	bne.n	800c0aa <USB_EPStartXfer+0xe0c>
 800c0a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	029b      	lsls	r3, r3, #10
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0c2:	801a      	strh	r2, [r3, #0]
 800c0c4:	e3e1      	b.n	800c88a <USB_EPStartXfer+0x15ec>
 800c0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d116      	bne.n	800c0fc <USB_EPStartXfer+0xe5e>
 800c0ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0e0:	801a      	strh	r2, [r3, #0]
 800c0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0f8:	801a      	strh	r2, [r3, #0]
 800c0fa:	e3c6      	b.n	800c88a <USB_EPStartXfer+0x15ec>
 800c0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <USB_EPStartXfer+0xe7e>
 800c112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c116:	3301      	adds	r3, #1
 800c118:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c11c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c120:	b29b      	uxth	r3, r3
 800c122:	029b      	lsls	r3, r3, #10
 800c124:	b29a      	uxth	r2, r3
 800c126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c12a:	801a      	strh	r2, [r3, #0]
 800c12c:	e3ad      	b.n	800c88a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	78db      	ldrb	r3, [r3, #3]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	f040 8200 	bne.w	800c540 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 8091 	bne.w	800c274 <USB_EPStartXfer+0xfd6>
 800c152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16e:	b29b      	uxth	r3, r3
 800c170:	461a      	mov	r2, r3
 800c172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c176:	4413      	add	r3, r2
 800c178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	00da      	lsls	r2, r3, #3
 800c18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c18e:	4413      	add	r3, r2
 800c190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	2b3e      	cmp	r3, #62	; 0x3e
 800c1a6:	d925      	bls.n	800c1f4 <USB_EPStartXfer+0xf56>
 800c1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	095b      	lsrs	r3, r3, #5
 800c1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	f003 031f 	and.w	r3, r3, #31
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d104      	bne.n	800c1d8 <USB_EPStartXfer+0xf3a>
 800c1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	029b      	lsls	r3, r3, #10
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1f0:	801a      	strh	r2, [r3, #0]
 800c1f2:	e074      	b.n	800c2de <USB_EPStartXfer+0x1040>
 800c1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d116      	bne.n	800c232 <USB_EPStartXfer+0xf94>
 800c204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c210:	b29a      	uxth	r2, r3
 800c212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c216:	801a      	strh	r2, [r3, #0]
 800c218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c228:	b29a      	uxth	r2, r3
 800c22a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c22e:	801a      	strh	r2, [r3, #0]
 800c230:	e055      	b.n	800c2de <USB_EPStartXfer+0x1040>
 800c232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	085b      	lsrs	r3, r3, #1
 800c240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d004      	beq.n	800c262 <USB_EPStartXfer+0xfc4>
 800c258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25c:	3301      	adds	r3, #1
 800c25e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c266:	b29b      	uxth	r3, r3
 800c268:	029b      	lsls	r3, r3, #10
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c270:	801a      	strh	r2, [r3, #0]
 800c272:	e034      	b.n	800c2de <USB_EPStartXfer+0x1040>
 800c274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d12c      	bne.n	800c2de <USB_EPStartXfer+0x1040>
 800c284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	00da      	lsls	r2, r3, #3
 800c2bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c2dc:	801a      	strh	r2, [r3, #0]
 800c2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	785b      	ldrb	r3, [r3, #1]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f040 8091 	bne.w	800c420 <USB_EPStartXfer+0x1182>
 800c2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	461a      	mov	r2, r3
 800c31e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c322:	4413      	add	r3, r2
 800c324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	00da      	lsls	r2, r3, #3
 800c336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c33a:	4413      	add	r3, r2
 800c33c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b3e      	cmp	r3, #62	; 0x3e
 800c352:	d925      	bls.n	800c3a0 <USB_EPStartXfer+0x1102>
 800c354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	095b      	lsrs	r3, r3, #5
 800c362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c36a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	f003 031f 	and.w	r3, r3, #31
 800c376:	2b00      	cmp	r3, #0
 800c378:	d104      	bne.n	800c384 <USB_EPStartXfer+0x10e6>
 800c37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c37e:	3b01      	subs	r3, #1
 800c380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c388:	b29b      	uxth	r3, r3
 800c38a:	029b      	lsls	r3, r3, #10
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c396:	b29a      	uxth	r2, r3
 800c398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c39c:	801a      	strh	r2, [r3, #0]
 800c39e:	e06d      	b.n	800c47c <USB_EPStartXfer+0x11de>
 800c3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d116      	bne.n	800c3de <USB_EPStartXfer+0x1140>
 800c3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3c2:	801a      	strh	r2, [r3, #0]
 800c3c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3da:	801a      	strh	r2, [r3, #0]
 800c3dc:	e04e      	b.n	800c47c <USB_EPStartXfer+0x11de>
 800c3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	085b      	lsrs	r3, r3, #1
 800c3ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d004      	beq.n	800c40e <USB_EPStartXfer+0x1170>
 800c404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c408:	3301      	adds	r3, #1
 800c40a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c412:	b29b      	uxth	r3, r3
 800c414:	029b      	lsls	r3, r3, #10
 800c416:	b29a      	uxth	r2, r3
 800c418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	e02d      	b.n	800c47c <USB_EPStartXfer+0x11de>
 800c420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	785b      	ldrb	r3, [r3, #1]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d125      	bne.n	800c47c <USB_EPStartXfer+0x11de>
 800c430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c43e:	b29b      	uxth	r3, r3
 800c440:	461a      	mov	r2, r3
 800c442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c446:	4413      	add	r3, r2
 800c448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	00da      	lsls	r2, r3, #3
 800c45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c45e:	4413      	add	r3, r2
 800c460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	b29a      	uxth	r2, r3
 800c476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c47a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 81fe 	beq.w	800c88a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c4ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c4b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <USB_EPStartXfer+0x1228>
 800c4ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10d      	bne.n	800c4e2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c4c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c4ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f040 81db 	bne.w	800c88a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c4d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 81d4 	bne.w	800c88a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c508:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	441a      	add	r2, r3
 800c526:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c52a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c52e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	8013      	strh	r3, [r2, #0]
 800c53e:	e1a4      	b.n	800c88a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	78db      	ldrb	r3, [r3, #3]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	f040 819a 	bne.w	800c886 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	699a      	ldr	r2, [r3, #24]
 800c55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d917      	bls.n	800c59e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	699a      	ldr	r2, [r3, #24]
 800c58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	619a      	str	r2, [r3, #24]
 800c59c:	e00e      	b.n	800c5bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d178      	bne.n	800c6be <USB_EPStartXfer+0x1420>
 800c5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	00da      	lsls	r2, r3, #3
 800c604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c608:	4413      	add	r3, r2
 800c60a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c60e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c616:	2b3e      	cmp	r3, #62	; 0x3e
 800c618:	d91d      	bls.n	800c656 <USB_EPStartXfer+0x13b8>
 800c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c61e:	095b      	lsrs	r3, r3, #5
 800c620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c628:	f003 031f 	and.w	r3, r3, #31
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d104      	bne.n	800c63a <USB_EPStartXfer+0x139c>
 800c630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c634:	3b01      	subs	r3, #1
 800c636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c63e:	b29b      	uxth	r3, r3
 800c640:	029b      	lsls	r3, r3, #10
 800c642:	b29b      	uxth	r3, r3
 800c644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c652:	801a      	strh	r2, [r3, #0]
 800c654:	e064      	b.n	800c720 <USB_EPStartXfer+0x1482>
 800c656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d116      	bne.n	800c68c <USB_EPStartXfer+0x13ee>
 800c65e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	b29b      	uxth	r3, r3
 800c666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c682:	b29a      	uxth	r2, r3
 800c684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c688:	801a      	strh	r2, [r3, #0]
 800c68a:	e049      	b.n	800c720 <USB_EPStartXfer+0x1482>
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c690:	085b      	lsrs	r3, r3, #1
 800c692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d004      	beq.n	800c6ac <USB_EPStartXfer+0x140e>
 800c6a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	029b      	lsls	r3, r3, #10
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6ba:	801a      	strh	r2, [r3, #0]
 800c6bc:	e030      	b.n	800c720 <USB_EPStartXfer+0x1482>
 800c6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d128      	bne.n	800c720 <USB_EPStartXfer+0x1482>
 800c6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	00da      	lsls	r2, r3, #3
 800c706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c70a:	4413      	add	r3, r2
 800c70c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c718:	b29a      	uxth	r2, r3
 800c71a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c71e:	801a      	strh	r2, [r3, #0]
 800c720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	785b      	ldrb	r3, [r3, #1]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d178      	bne.n	800c830 <USB_EPStartXfer+0x1592>
 800c73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c762:	4413      	add	r3, r2
 800c764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	00da      	lsls	r2, r3, #3
 800c776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c77a:	4413      	add	r3, r2
 800c77c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c788:	2b3e      	cmp	r3, #62	; 0x3e
 800c78a:	d91d      	bls.n	800c7c8 <USB_EPStartXfer+0x152a>
 800c78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c790:	095b      	lsrs	r3, r3, #5
 800c792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c79a:	f003 031f 	and.w	r3, r3, #31
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d104      	bne.n	800c7ac <USB_EPStartXfer+0x150e>
 800c7a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	029b      	lsls	r3, r3, #10
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7c4:	801a      	strh	r2, [r3, #0]
 800c7c6:	e060      	b.n	800c88a <USB_EPStartXfer+0x15ec>
 800c7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d116      	bne.n	800c7fe <USB_EPStartXfer+0x1560>
 800c7d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7e2:	801a      	strh	r2, [r3, #0]
 800c7e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7fa:	801a      	strh	r2, [r3, #0]
 800c7fc:	e045      	b.n	800c88a <USB_EPStartXfer+0x15ec>
 800c7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c802:	085b      	lsrs	r3, r3, #1
 800c804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	d004      	beq.n	800c81e <USB_EPStartXfer+0x1580>
 800c814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c818:	3301      	adds	r3, #1
 800c81a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c81e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c822:	b29b      	uxth	r3, r3
 800c824:	029b      	lsls	r3, r3, #10
 800c826:	b29a      	uxth	r2, r3
 800c828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c82c:	801a      	strh	r2, [r3, #0]
 800c82e:	e02c      	b.n	800c88a <USB_EPStartXfer+0x15ec>
 800c830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	785b      	ldrb	r3, [r3, #1]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d124      	bne.n	800c88a <USB_EPStartXfer+0x15ec>
 800c840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c84e:	b29b      	uxth	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c856:	4413      	add	r3, r2
 800c858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	00da      	lsls	r2, r3, #3
 800c86a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c86e:	4413      	add	r3, r2
 800c870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c882:	801a      	strh	r2, [r3, #0]
 800c884:	e001      	b.n	800c88a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e03a      	b.n	800c900 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c8b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c8b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c8bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c8c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c8c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c8c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	441a      	add	r2, r3
 800c8e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c8ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c90a:	b480      	push	{r7}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	785b      	ldrb	r3, [r3, #1]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d020      	beq.n	800c95e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c92e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c932:	81bb      	strh	r3, [r7, #12]
 800c934:	89bb      	ldrh	r3, [r7, #12]
 800c936:	f083 0310 	eor.w	r3, r3, #16
 800c93a:	81bb      	strh	r3, [r7, #12]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	441a      	add	r2, r3
 800c946:	89bb      	ldrh	r3, [r7, #12]
 800c948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c94c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c958:	b29b      	uxth	r3, r3
 800c95a:	8013      	strh	r3, [r2, #0]
 800c95c:	e01f      	b.n	800c99e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c974:	81fb      	strh	r3, [r7, #14]
 800c976:	89fb      	ldrh	r3, [r7, #14]
 800c978:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c97c:	81fb      	strh	r3, [r7, #14]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	441a      	add	r2, r3
 800c988:	89fb      	ldrh	r3, [r7, #14]
 800c98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	7b1b      	ldrb	r3, [r3, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f040 809d 	bne.w	800cafa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d04c      	beq.n	800ca62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	823b      	strh	r3, [r7, #16]
 800c9d6:	8a3b      	ldrh	r3, [r7, #16]
 800c9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01b      	beq.n	800ca18 <USB_EPClearStall+0x6c>
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9f6:	81fb      	strh	r3, [r7, #14]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	441a      	add	r2, r3
 800ca02:	89fb      	ldrh	r3, [r7, #14]
 800ca04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	78db      	ldrb	r3, [r3, #3]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d06c      	beq.n	800cafa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca36:	81bb      	strh	r3, [r7, #12]
 800ca38:	89bb      	ldrh	r3, [r7, #12]
 800ca3a:	f083 0320 	eor.w	r3, r3, #32
 800ca3e:	81bb      	strh	r3, [r7, #12]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	441a      	add	r2, r3
 800ca4a:	89bb      	ldrh	r3, [r7, #12]
 800ca4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	8013      	strh	r3, [r2, #0]
 800ca60:	e04b      	b.n	800cafa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	82fb      	strh	r3, [r7, #22]
 800ca70:	8afb      	ldrh	r3, [r7, #22]
 800ca72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d01b      	beq.n	800cab2 <USB_EPClearStall+0x106>
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca90:	82bb      	strh	r3, [r7, #20]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	441a      	add	r2, r3
 800ca9c:	8abb      	ldrh	r3, [r7, #20]
 800ca9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800caaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caae:	b29b      	uxth	r3, r3
 800cab0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac8:	827b      	strh	r3, [r7, #18]
 800caca:	8a7b      	ldrh	r3, [r7, #18]
 800cacc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cad0:	827b      	strh	r3, [r7, #18]
 800cad2:	8a7b      	ldrh	r3, [r7, #18]
 800cad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cad8:	827b      	strh	r3, [r7, #18]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	441a      	add	r2, r3
 800cae4:	8a7b      	ldrh	r3, [r7, #18]
 800cae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d103      	bne.n	800cb22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2280      	movs	r2, #128	; 0x80
 800cb1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b08b      	sub	sp, #44	; 0x2c
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	461a      	mov	r2, r3
 800cbce:	460b      	mov	r3, r1
 800cbd0:	80fb      	strh	r3, [r7, #6]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cbd6:	88bb      	ldrh	r3, [r7, #4]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	085b      	lsrs	r3, r3, #1
 800cbdc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cbe6:	88fa      	ldrh	r2, [r7, #6]
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbf0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf6:	e01b      	b.n	800cc30 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	3301      	adds	r3, #1
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	021b      	lsls	r3, r3, #8
 800cc06:	b21a      	sxth	r2, r3
 800cc08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	b21b      	sxth	r3, r3
 800cc10:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	8a7a      	ldrh	r2, [r7, #18]
 800cc16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cc18:	6a3b      	ldr	r3, [r7, #32]
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	3301      	adds	r3, #1
 800cc22:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	3301      	adds	r3, #1
 800cc28:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e0      	bne.n	800cbf8 <USB_WritePMA+0x38>
  }
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	372c      	adds	r7, #44	; 0x2c
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b08b      	sub	sp, #44	; 0x2c
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	4611      	mov	r1, r2
 800cc50:	461a      	mov	r2, r3
 800cc52:	460b      	mov	r3, r1
 800cc54:	80fb      	strh	r3, [r7, #6]
 800cc56:	4613      	mov	r3, r2
 800cc58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cc5a:	88bb      	ldrh	r3, [r7, #4]
 800cc5c:	085b      	lsrs	r3, r3, #1
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cc6a:	88fa      	ldrh	r2, [r7, #6]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc74:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
 800cc7a:	e018      	b.n	800ccae <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	3302      	adds	r3, #2
 800cc88:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	3301      	adds	r3, #1
 800cc96:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	0a1b      	lsrs	r3, r3, #8
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	3301      	adds	r3, #1
 800cca6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e3      	bne.n	800cc7c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ccb4:	88bb      	ldrh	r3, [r7, #4]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d007      	beq.n	800ccd0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	881b      	ldrh	r3, [r3, #0]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	701a      	strb	r2, [r3, #0]
  }
}
 800ccd0:	bf00      	nop
 800ccd2:	372c      	adds	r7, #44	; 0x2c
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cce8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ccec:	f002 f99c 	bl	800f028 <USBD_static_malloc>
 800ccf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d105      	bne.n	800cd04 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cd00:	2302      	movs	r3, #2
 800cd02:	e066      	b.n	800cdd2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	7c1b      	ldrb	r3, [r3, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d119      	bne.n	800cd48 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cd14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd18:	2202      	movs	r2, #2
 800cd1a:	2181      	movs	r1, #129	; 0x81
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 ff85 	bl	800ec2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cd28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	2101      	movs	r1, #1
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 ff7b 	bl	800ec2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2210      	movs	r2, #16
 800cd42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cd46:	e016      	b.n	800cd76 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cd48:	2340      	movs	r3, #64	; 0x40
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	2181      	movs	r1, #129	; 0x81
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f001 ff6c 	bl	800ec2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cd5a:	2340      	movs	r3, #64	; 0x40
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	2101      	movs	r1, #1
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 ff63 	bl	800ec2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2210      	movs	r2, #16
 800cd72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cd76:	2308      	movs	r3, #8
 800cd78:	2203      	movs	r2, #3
 800cd7a:	2182      	movs	r1, #130	; 0x82
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f001 ff55 	bl	800ec2c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7c1b      	ldrb	r3, [r3, #16]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d109      	bne.n	800cdc0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cdb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb6:	2101      	movs	r1, #1
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f002 f8b3 	bl	800ef24 <USBD_LL_PrepareReceive>
 800cdbe:	e007      	b.n	800cdd0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cdc6:	2340      	movs	r3, #64	; 0x40
 800cdc8:	2101      	movs	r1, #1
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f002 f8aa 	bl	800ef24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cde6:	2181      	movs	r1, #129	; 0x81
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f001 ff5d 	bl	800eca8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 ff56 	bl	800eca8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ce04:	2182      	movs	r1, #130	; 0x82
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 ff4e 	bl	800eca8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00e      	beq.n	800ce44 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce36:	4618      	mov	r0, r3
 800ce38:	f002 f904 	bl	800f044 <USBD_static_free>
    pdev->pClassData = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ce62:	2300      	movs	r3, #0
 800ce64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce66:	2300      	movs	r3, #0
 800ce68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ce74:	2303      	movs	r3, #3
 800ce76:	e0af      	b.n	800cfd8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d03f      	beq.n	800cf04 <USBD_CDC_Setup+0xb4>
 800ce84:	2b20      	cmp	r3, #32
 800ce86:	f040 809f 	bne.w	800cfc8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	88db      	ldrh	r3, [r3, #6]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02e      	beq.n	800cef0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	b25b      	sxtb	r3, r3
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da16      	bge.n	800ceca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cea8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	88d2      	ldrh	r2, [r2, #6]
 800ceae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	88db      	ldrh	r3, [r3, #6]
 800ceb4:	2b07      	cmp	r3, #7
 800ceb6:	bf28      	it	cs
 800ceb8:	2307      	movcs	r3, #7
 800ceba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	89fa      	ldrh	r2, [r7, #14]
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fa9f 	bl	800e406 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cec8:	e085      	b.n	800cfd6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	785a      	ldrb	r2, [r3, #1]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	88db      	ldrh	r3, [r3, #6]
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cee0:	6939      	ldr	r1, [r7, #16]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	88db      	ldrh	r3, [r3, #6]
 800cee6:	461a      	mov	r2, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 fab8 	bl	800e45e <USBD_CtlPrepareRx>
      break;
 800ceee:	e072      	b.n	800cfd6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	7850      	ldrb	r0, [r2, #1]
 800cefc:	2200      	movs	r2, #0
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	4798      	blx	r3
      break;
 800cf02:	e068      	b.n	800cfd6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	785b      	ldrb	r3, [r3, #1]
 800cf08:	2b0b      	cmp	r3, #11
 800cf0a:	d852      	bhi.n	800cfb2 <USBD_CDC_Setup+0x162>
 800cf0c:	a201      	add	r2, pc, #4	; (adr r2, 800cf14 <USBD_CDC_Setup+0xc4>)
 800cf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf12:	bf00      	nop
 800cf14:	0800cf45 	.word	0x0800cf45
 800cf18:	0800cfc1 	.word	0x0800cfc1
 800cf1c:	0800cfb3 	.word	0x0800cfb3
 800cf20:	0800cfb3 	.word	0x0800cfb3
 800cf24:	0800cfb3 	.word	0x0800cfb3
 800cf28:	0800cfb3 	.word	0x0800cfb3
 800cf2c:	0800cfb3 	.word	0x0800cfb3
 800cf30:	0800cfb3 	.word	0x0800cfb3
 800cf34:	0800cfb3 	.word	0x0800cfb3
 800cf38:	0800cfb3 	.word	0x0800cfb3
 800cf3c:	0800cf6f 	.word	0x0800cf6f
 800cf40:	0800cf99 	.word	0x0800cf99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d107      	bne.n	800cf60 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf50:	f107 030a 	add.w	r3, r7, #10
 800cf54:	2202      	movs	r2, #2
 800cf56:	4619      	mov	r1, r3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f001 fa54 	bl	800e406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf5e:	e032      	b.n	800cfc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 f9de 	bl	800e324 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	75fb      	strb	r3, [r7, #23]
          break;
 800cf6c:	e02b      	b.n	800cfc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d107      	bne.n	800cf8a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cf7a:	f107 030d 	add.w	r3, r7, #13
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f001 fa3f 	bl	800e406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf88:	e01d      	b.n	800cfc6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f001 f9c9 	bl	800e324 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf92:	2303      	movs	r3, #3
 800cf94:	75fb      	strb	r3, [r7, #23]
          break;
 800cf96:	e016      	b.n	800cfc6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d00f      	beq.n	800cfc4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 f9bc 	bl	800e324 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfac:	2303      	movs	r3, #3
 800cfae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cfb0:	e008      	b.n	800cfc4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f001 f9b5 	bl	800e324 <USBD_CtlError>
          ret = USBD_FAIL;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	75fb      	strb	r3, [r7, #23]
          break;
 800cfbe:	e002      	b.n	800cfc6 <USBD_CDC_Setup+0x176>
          break;
 800cfc0:	bf00      	nop
 800cfc2:	e008      	b.n	800cfd6 <USBD_CDC_Setup+0x186>
          break;
 800cfc4:	bf00      	nop
      }
      break;
 800cfc6:	e006      	b.n	800cfd6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f001 f9aa 	bl	800e324 <USBD_CtlError>
      ret = USBD_FAIL;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	75fb      	strb	r3, [r7, #23]
      break;
 800cfd4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cff2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	e04f      	b.n	800d0a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d008:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d00a:	78fa      	ldrb	r2, [r7, #3]
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	4613      	mov	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	440b      	add	r3, r1
 800d018:	3318      	adds	r3, #24
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d029      	beq.n	800d074 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d020:	78fa      	ldrb	r2, [r7, #3]
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	3318      	adds	r3, #24
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	78f9      	ldrb	r1, [r7, #3]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	460b      	mov	r3, r1
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	440b      	add	r3, r1
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	4403      	add	r3, r0
 800d040:	333c      	adds	r3, #60	; 0x3c
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	fbb2 f1f3 	udiv	r1, r2, r3
 800d048:	fb01 f303 	mul.w	r3, r1, r3
 800d04c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d110      	bne.n	800d074 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d052:	78fa      	ldrb	r2, [r7, #3]
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	4613      	mov	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	440b      	add	r3, r1
 800d060:	3318      	adds	r3, #24
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d066:	78f9      	ldrb	r1, [r7, #3]
 800d068:	2300      	movs	r3, #0
 800d06a:	2200      	movs	r2, #0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f001 ff21 	bl	800eeb4 <USBD_LL_Transmit>
 800d072:	e015      	b.n	800d0a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00b      	beq.n	800d0a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d09c:	78fa      	ldrb	r2, [r7, #3]
 800d09e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e015      	b.n	800d0f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d0cc:	78fb      	ldrb	r3, [r7, #3]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f001 ff5f 	bl	800ef94 <USBD_LL_GetRxDataSize>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d10e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d116:	2303      	movs	r3, #3
 800d118:	e01b      	b.n	800d152 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d015      	beq.n	800d150 <USBD_CDC_EP0_RxReady+0x50>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d12a:	2bff      	cmp	r3, #255	; 0xff
 800d12c:	d010      	beq.n	800d150 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d13c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d144:	b292      	uxth	r2, r2
 800d146:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	22ff      	movs	r2, #255	; 0xff
 800d14c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
	...

0800d15c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2243      	movs	r2, #67	; 0x43
 800d168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d16a:	4b03      	ldr	r3, [pc, #12]	; (800d178 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	20000094 	.word	0x20000094

0800d17c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2243      	movs	r2, #67	; 0x43
 800d188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d18a:	4b03      	ldr	r3, [pc, #12]	; (800d198 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	20000050 	.word	0x20000050

0800d19c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2243      	movs	r2, #67	; 0x43
 800d1a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d1aa:	4b03      	ldr	r3, [pc, #12]	; (800d1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	200000d8 	.word	0x200000d8

0800d1bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	220a      	movs	r2, #10
 800d1c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d1ca:	4b03      	ldr	r3, [pc, #12]	; (800d1d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	2000000c 	.word	0x2000000c

0800d1dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	e004      	b.n	800d1fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d206:	b480      	push	{r7}
 800d208:	b087      	sub	sp, #28
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	60b9      	str	r1, [r7, #8]
 800d210:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d218:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d220:	2303      	movs	r3, #3
 800d222:	e008      	b.n	800d236 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	371c      	adds	r7, #28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d242:	b480      	push	{r7}
 800d244:	b085      	sub	sp, #20
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d252:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e004      	b.n	800d268 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d28e:	2303      	movs	r3, #3
 800d290:	e016      	b.n	800d2c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7c1b      	ldrb	r3, [r3, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 fe3c 	bl	800ef24 <USBD_LL_PrepareReceive>
 800d2ac:	e007      	b.n	800d2be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2b4:	2340      	movs	r3, #64	; 0x40
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f001 fe33 	bl	800ef24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d2dc:	2303      	movs	r3, #3
 800d2de:	e01f      	b.n	800d320 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d003      	beq.n	800d306 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	79fa      	ldrb	r2, [r7, #7]
 800d312:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f001 fbf5 	bl	800eb04 <USBD_LL_Init>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d101      	bne.n	800d340 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d33c:	2303      	movs	r3, #3
 800d33e:	e016      	b.n	800d36e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	f107 020e 	add.w	r2, r7, #14
 800d360:	4610      	mov	r0, r2
 800d362:	4798      	blx	r3
 800d364:	4602      	mov	r2, r0
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fc22 	bl	800ebc8 <USBD_LL_Start>
 800d384:	4603      	mov	r3, r0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	78fa      	ldrb	r2, [r7, #3]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	4798      	blx	r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	78fa      	ldrb	r2, [r7, #3]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
  }

  return USBD_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d41c:	6839      	ldr	r1, [r7, #0]
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 ff46 	bl	800e2b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d432:	461a      	mov	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d440:	f003 031f 	and.w	r3, r3, #31
 800d444:	2b02      	cmp	r3, #2
 800d446:	d01a      	beq.n	800d47e <USBD_LL_SetupStage+0x72>
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d822      	bhi.n	800d492 <USBD_LL_SetupStage+0x86>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <USBD_LL_SetupStage+0x4a>
 800d450:	2b01      	cmp	r3, #1
 800d452:	d00a      	beq.n	800d46a <USBD_LL_SetupStage+0x5e>
 800d454:	e01d      	b.n	800d492 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f9ee 	bl	800d840 <USBD_StdDevReq>
 800d464:	4603      	mov	r3, r0
 800d466:	73fb      	strb	r3, [r7, #15]
      break;
 800d468:	e020      	b.n	800d4ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d470:	4619      	mov	r1, r3
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fa52 	bl	800d91c <USBD_StdItfReq>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
      break;
 800d47c:	e016      	b.n	800d4ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fa91 	bl	800d9ae <USBD_StdEPReq>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
      break;
 800d490:	e00c      	b.n	800d4ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d498:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 fc37 	bl	800ed14 <USBD_LL_StallEP>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d4aa:	bf00      	nop
  }

  return ret;
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b086      	sub	sp, #24
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	60f8      	str	r0, [r7, #12]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	607a      	str	r2, [r7, #4]
 800d4c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d4c4:	7afb      	ldrb	r3, [r7, #11]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d138      	bne.n	800d53c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d4d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d14a      	bne.n	800d572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	689a      	ldr	r2, [r3, #8]
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d913      	bls.n	800d510 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	1ad2      	subs	r2, r2, r3
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	68da      	ldr	r2, [r3, #12]
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	4293      	cmp	r3, r2
 800d500:	bf28      	it	cs
 800d502:	4613      	movcs	r3, r2
 800d504:	461a      	mov	r2, r3
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 ffc5 	bl	800e498 <USBD_CtlContinueRx>
 800d50e:	e030      	b.n	800d572 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b03      	cmp	r3, #3
 800d51a:	d10b      	bne.n	800d534 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 ffc0 	bl	800e4ba <USBD_CtlSendStatus>
 800d53a:	e01a      	b.n	800d572 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b03      	cmp	r3, #3
 800d546:	d114      	bne.n	800d572 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00e      	beq.n	800d572 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	7afa      	ldrb	r2, [r7, #11]
 800d55e:	4611      	mov	r1, r2
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	4798      	blx	r3
 800d564:	4603      	mov	r3, r0
 800d566:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	e000      	b.n	800d574 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	460b      	mov	r3, r1
 800d586:	607a      	str	r2, [r7, #4]
 800d588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d58a:	7afb      	ldrb	r3, [r7, #11]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d16b      	bne.n	800d668 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3314      	adds	r3, #20
 800d594:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d156      	bne.n	800d64e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d914      	bls.n	800d5d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	1ad2      	subs	r2, r2, r3
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	6879      	ldr	r1, [r7, #4]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 ff3a 	bl	800e43c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f001 fca8 	bl	800ef24 <USBD_LL_PrepareReceive>
 800d5d4:	e03b      	b.n	800d64e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d11c      	bne.n	800d61c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d316      	bcc.n	800d61c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	685a      	ldr	r2, [r3, #4]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d20f      	bcs.n	800d61c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2100      	movs	r1, #0
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 ff1b 	bl	800e43c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2200      	movs	r2, #0
 800d60a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d60e:	2300      	movs	r3, #0
 800d610:	2200      	movs	r2, #0
 800d612:	2100      	movs	r1, #0
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f001 fc85 	bl	800ef24 <USBD_LL_PrepareReceive>
 800d61a:	e018      	b.n	800d64e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b03      	cmp	r3, #3
 800d626:	d10b      	bne.n	800d640 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d640:	2180      	movs	r1, #128	; 0x80
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f001 fb66 	bl	800ed14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 ff49 	bl	800e4e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d654:	2b01      	cmp	r3, #1
 800d656:	d122      	bne.n	800d69e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f7ff fe98 	bl	800d38e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d666:	e01a      	b.n	800d69e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b03      	cmp	r3, #3
 800d672:	d114      	bne.n	800d69e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00e      	beq.n	800d69e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	7afa      	ldrb	r2, [r7, #11]
 800d68a:	4611      	mov	r1, r2
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	4798      	blx	r3
 800d690:	4603      	mov	r3, r0
 800d692:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
 800d69c:	e000      	b.n	800d6a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	e02f      	b.n	800d73c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00f      	beq.n	800d706 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d009      	beq.n	800d706 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6852      	ldr	r2, [r2, #4]
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	4611      	mov	r1, r2
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d706:	2340      	movs	r3, #64	; 0x40
 800d708:	2200      	movs	r2, #0
 800d70a:	2100      	movs	r1, #0
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f001 fa8d 	bl	800ec2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2240      	movs	r2, #64	; 0x40
 800d71e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d722:	2340      	movs	r3, #64	; 0x40
 800d724:	2200      	movs	r2, #0
 800d726:	2180      	movs	r1, #128	; 0x80
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 fa7f 	bl	800ec2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2240      	movs	r2, #64	; 0x40
 800d738:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	78fa      	ldrb	r2, [r7, #3]
 800d754:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d772:	b2da      	uxtb	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2204      	movs	r2, #4
 800d77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d106      	bne.n	800d7b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e012      	b.n	800d7fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d10b      	bne.n	800d7fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e8:	69db      	ldr	r3, [r3, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d005      	beq.n	800d7fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d804:	b480      	push	{r7}
 800d806:	b087      	sub	sp, #28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	3301      	adds	r3, #1
 800d81a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d822:	8a3b      	ldrh	r3, [r7, #16]
 800d824:	021b      	lsls	r3, r3, #8
 800d826:	b21a      	sxth	r2, r3
 800d828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	b21b      	sxth	r3, r3
 800d830:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d832:	89fb      	ldrh	r3, [r7, #14]
}
 800d834:	4618      	mov	r0, r3
 800d836:	371c      	adds	r7, #28
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d856:	2b40      	cmp	r3, #64	; 0x40
 800d858:	d005      	beq.n	800d866 <USBD_StdDevReq+0x26>
 800d85a:	2b40      	cmp	r3, #64	; 0x40
 800d85c:	d853      	bhi.n	800d906 <USBD_StdDevReq+0xc6>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00b      	beq.n	800d87a <USBD_StdDevReq+0x3a>
 800d862:	2b20      	cmp	r3, #32
 800d864:	d14f      	bne.n	800d906 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	4798      	blx	r3
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]
      break;
 800d878:	e04a      	b.n	800d910 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	2b09      	cmp	r3, #9
 800d880:	d83b      	bhi.n	800d8fa <USBD_StdDevReq+0xba>
 800d882:	a201      	add	r2, pc, #4	; (adr r2, 800d888 <USBD_StdDevReq+0x48>)
 800d884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d888:	0800d8dd 	.word	0x0800d8dd
 800d88c:	0800d8f1 	.word	0x0800d8f1
 800d890:	0800d8fb 	.word	0x0800d8fb
 800d894:	0800d8e7 	.word	0x0800d8e7
 800d898:	0800d8fb 	.word	0x0800d8fb
 800d89c:	0800d8bb 	.word	0x0800d8bb
 800d8a0:	0800d8b1 	.word	0x0800d8b1
 800d8a4:	0800d8fb 	.word	0x0800d8fb
 800d8a8:	0800d8d3 	.word	0x0800d8d3
 800d8ac:	0800d8c5 	.word	0x0800d8c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f9de 	bl	800dc74 <USBD_GetDescriptor>
          break;
 800d8b8:	e024      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fb6d 	bl	800df9c <USBD_SetAddress>
          break;
 800d8c2:	e01f      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fbac 	bl	800e024 <USBD_SetConfig>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]
          break;
 800d8d0:	e018      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fc4b 	bl	800e170 <USBD_GetConfig>
          break;
 800d8da:	e013      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fc7c 	bl	800e1dc <USBD_GetStatus>
          break;
 800d8e4:	e00e      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d8e6:	6839      	ldr	r1, [r7, #0]
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fcab 	bl	800e244 <USBD_SetFeature>
          break;
 800d8ee:	e009      	b.n	800d904 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fcba 	bl	800e26c <USBD_ClrFeature>
          break;
 800d8f8:	e004      	b.n	800d904 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fd11 	bl	800e324 <USBD_CtlError>
          break;
 800d902:	bf00      	nop
      }
      break;
 800d904:	e004      	b.n	800d910 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 fd0b 	bl	800e324 <USBD_CtlError>
      break;
 800d90e:	bf00      	nop
  }

  return ret;
 800d910:	7bfb      	ldrb	r3, [r7, #15]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop

0800d91c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d932:	2b40      	cmp	r3, #64	; 0x40
 800d934:	d005      	beq.n	800d942 <USBD_StdItfReq+0x26>
 800d936:	2b40      	cmp	r3, #64	; 0x40
 800d938:	d82f      	bhi.n	800d99a <USBD_StdItfReq+0x7e>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <USBD_StdItfReq+0x26>
 800d93e:	2b20      	cmp	r3, #32
 800d940:	d12b      	bne.n	800d99a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	3b01      	subs	r3, #1
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d81d      	bhi.n	800d98c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	889b      	ldrh	r3, [r3, #4]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b01      	cmp	r3, #1
 800d958:	d813      	bhi.n	800d982 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	4798      	blx	r3
 800d968:	4603      	mov	r3, r0
 800d96a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	88db      	ldrh	r3, [r3, #6]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d110      	bne.n	800d996 <USBD_StdItfReq+0x7a>
 800d974:	7bfb      	ldrb	r3, [r7, #15]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10d      	bne.n	800d996 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 fd9d 	bl	800e4ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d980:	e009      	b.n	800d996 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fccd 	bl	800e324 <USBD_CtlError>
          break;
 800d98a:	e004      	b.n	800d996 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d98c:	6839      	ldr	r1, [r7, #0]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fcc8 	bl	800e324 <USBD_CtlError>
          break;
 800d994:	e000      	b.n	800d998 <USBD_StdItfReq+0x7c>
          break;
 800d996:	bf00      	nop
      }
      break;
 800d998:	e004      	b.n	800d9a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fcc1 	bl	800e324 <USBD_CtlError>
      break;
 800d9a2:	bf00      	nop
  }

  return ret;
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	889b      	ldrh	r3, [r3, #4]
 800d9c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9ca:	2b40      	cmp	r3, #64	; 0x40
 800d9cc:	d007      	beq.n	800d9de <USBD_StdEPReq+0x30>
 800d9ce:	2b40      	cmp	r3, #64	; 0x40
 800d9d0:	f200 8145 	bhi.w	800dc5e <USBD_StdEPReq+0x2b0>
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00c      	beq.n	800d9f2 <USBD_StdEPReq+0x44>
 800d9d8:	2b20      	cmp	r3, #32
 800d9da:	f040 8140 	bne.w	800dc5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	4798      	blx	r3
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f0:	e13a      	b.n	800dc68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	d007      	beq.n	800da0a <USBD_StdEPReq+0x5c>
 800d9fa:	2b03      	cmp	r3, #3
 800d9fc:	f300 8129 	bgt.w	800dc52 <USBD_StdEPReq+0x2a4>
 800da00:	2b00      	cmp	r3, #0
 800da02:	d07f      	beq.n	800db04 <USBD_StdEPReq+0x156>
 800da04:	2b01      	cmp	r3, #1
 800da06:	d03c      	beq.n	800da82 <USBD_StdEPReq+0xd4>
 800da08:	e123      	b.n	800dc52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b02      	cmp	r3, #2
 800da14:	d002      	beq.n	800da1c <USBD_StdEPReq+0x6e>
 800da16:	2b03      	cmp	r3, #3
 800da18:	d016      	beq.n	800da48 <USBD_StdEPReq+0x9a>
 800da1a:	e02c      	b.n	800da76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00d      	beq.n	800da3e <USBD_StdEPReq+0x90>
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	2b80      	cmp	r3, #128	; 0x80
 800da26:	d00a      	beq.n	800da3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f001 f971 	bl	800ed14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da32:	2180      	movs	r1, #128	; 0x80
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 f96d 	bl	800ed14 <USBD_LL_StallEP>
 800da3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da3c:	e020      	b.n	800da80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fc6f 	bl	800e324 <USBD_CtlError>
              break;
 800da46:	e01b      	b.n	800da80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	885b      	ldrh	r3, [r3, #2]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10e      	bne.n	800da6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00b      	beq.n	800da6e <USBD_StdEPReq+0xc0>
 800da56:	7bbb      	ldrb	r3, [r7, #14]
 800da58:	2b80      	cmp	r3, #128	; 0x80
 800da5a:	d008      	beq.n	800da6e <USBD_StdEPReq+0xc0>
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	88db      	ldrh	r3, [r3, #6]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d104      	bne.n	800da6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 f953 	bl	800ed14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fd23 	bl	800e4ba <USBD_CtlSendStatus>

              break;
 800da74:	e004      	b.n	800da80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 fc53 	bl	800e324 <USBD_CtlError>
              break;
 800da7e:	bf00      	nop
          }
          break;
 800da80:	e0ec      	b.n	800dc5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d002      	beq.n	800da94 <USBD_StdEPReq+0xe6>
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d016      	beq.n	800dac0 <USBD_StdEPReq+0x112>
 800da92:	e030      	b.n	800daf6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da94:	7bbb      	ldrb	r3, [r7, #14]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00d      	beq.n	800dab6 <USBD_StdEPReq+0x108>
 800da9a:	7bbb      	ldrb	r3, [r7, #14]
 800da9c:	2b80      	cmp	r3, #128	; 0x80
 800da9e:	d00a      	beq.n	800dab6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f001 f935 	bl	800ed14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800daaa:	2180      	movs	r1, #128	; 0x80
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f001 f931 	bl	800ed14 <USBD_LL_StallEP>
 800dab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dab4:	e025      	b.n	800db02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 fc33 	bl	800e324 <USBD_CtlError>
              break;
 800dabe:	e020      	b.n	800db02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	885b      	ldrh	r3, [r3, #2]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d11b      	bne.n	800db00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d004      	beq.n	800dadc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dad2:	7bbb      	ldrb	r3, [r7, #14]
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f001 f952 	bl	800ed80 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fcec 	bl	800e4ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	4798      	blx	r3
 800daf0:	4603      	mov	r3, r0
 800daf2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800daf4:	e004      	b.n	800db00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 fc13 	bl	800e324 <USBD_CtlError>
              break;
 800dafe:	e000      	b.n	800db02 <USBD_StdEPReq+0x154>
              break;
 800db00:	bf00      	nop
          }
          break;
 800db02:	e0ab      	b.n	800dc5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d002      	beq.n	800db16 <USBD_StdEPReq+0x168>
 800db10:	2b03      	cmp	r3, #3
 800db12:	d032      	beq.n	800db7a <USBD_StdEPReq+0x1cc>
 800db14:	e097      	b.n	800dc46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d007      	beq.n	800db2c <USBD_StdEPReq+0x17e>
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	2b80      	cmp	r3, #128	; 0x80
 800db20:	d004      	beq.n	800db2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 fbfd 	bl	800e324 <USBD_CtlError>
                break;
 800db2a:	e091      	b.n	800dc50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db30:	2b00      	cmp	r3, #0
 800db32:	da0b      	bge.n	800db4c <USBD_StdEPReq+0x19e>
 800db34:	7bbb      	ldrb	r3, [r7, #14]
 800db36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db3a:	4613      	mov	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	3310      	adds	r3, #16
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	4413      	add	r3, r2
 800db48:	3304      	adds	r3, #4
 800db4a:	e00b      	b.n	800db64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db52:	4613      	mov	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	4413      	add	r3, r2
 800db62:	3304      	adds	r3, #4
 800db64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2200      	movs	r2, #0
 800db6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2202      	movs	r2, #2
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fc47 	bl	800e406 <USBD_CtlSendData>
              break;
 800db78:	e06a      	b.n	800dc50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	da11      	bge.n	800dba6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	f003 020f 	and.w	r2, r3, #15
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	440b      	add	r3, r1
 800db94:	3324      	adds	r3, #36	; 0x24
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d117      	bne.n	800dbcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fbc0 	bl	800e324 <USBD_CtlError>
                  break;
 800dba4:	e054      	b.n	800dc50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	f003 020f 	and.w	r2, r3, #15
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4413      	add	r3, r2
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	440b      	add	r3, r1
 800dbb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d104      	bne.n	800dbcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fbad 	bl	800e324 <USBD_CtlError>
                  break;
 800dbca:	e041      	b.n	800dc50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da0b      	bge.n	800dbec <USBD_StdEPReq+0x23e>
 800dbd4:	7bbb      	ldrb	r3, [r7, #14]
 800dbd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbda:	4613      	mov	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	3310      	adds	r3, #16
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	3304      	adds	r3, #4
 800dbea:	e00b      	b.n	800dc04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	4413      	add	r3, r2
 800dc02:	3304      	adds	r3, #4
 800dc04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <USBD_StdEPReq+0x264>
 800dc0c:	7bbb      	ldrb	r3, [r7, #14]
 800dc0e:	2b80      	cmp	r3, #128	; 0x80
 800dc10:	d103      	bne.n	800dc1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2200      	movs	r2, #0
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	e00e      	b.n	800dc38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f001 f8e4 	bl	800edec <USBD_LL_IsStallEP>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	e002      	b.n	800dc38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fbe1 	bl	800e406 <USBD_CtlSendData>
              break;
 800dc44:	e004      	b.n	800dc50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fb6b 	bl	800e324 <USBD_CtlError>
              break;
 800dc4e:	bf00      	nop
          }
          break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fb65 	bl	800e324 <USBD_CtlError>
          break;
 800dc5a:	bf00      	nop
      }
      break;
 800dc5c:	e004      	b.n	800dc68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fb5f 	bl	800e324 <USBD_CtlError>
      break;
 800dc66:	bf00      	nop
  }

  return ret;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
	...

0800dc74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc82:	2300      	movs	r3, #0
 800dc84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc86:	2300      	movs	r3, #0
 800dc88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	3b01      	subs	r3, #1
 800dc94:	2b0e      	cmp	r3, #14
 800dc96:	f200 8152 	bhi.w	800df3e <USBD_GetDescriptor+0x2ca>
 800dc9a:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <USBD_GetDescriptor+0x2c>)
 800dc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca0:	0800dd11 	.word	0x0800dd11
 800dca4:	0800dd29 	.word	0x0800dd29
 800dca8:	0800dd69 	.word	0x0800dd69
 800dcac:	0800df3f 	.word	0x0800df3f
 800dcb0:	0800df3f 	.word	0x0800df3f
 800dcb4:	0800dedf 	.word	0x0800dedf
 800dcb8:	0800df0b 	.word	0x0800df0b
 800dcbc:	0800df3f 	.word	0x0800df3f
 800dcc0:	0800df3f 	.word	0x0800df3f
 800dcc4:	0800df3f 	.word	0x0800df3f
 800dcc8:	0800df3f 	.word	0x0800df3f
 800dccc:	0800df3f 	.word	0x0800df3f
 800dcd0:	0800df3f 	.word	0x0800df3f
 800dcd4:	0800df3f 	.word	0x0800df3f
 800dcd8:	0800dcdd 	.word	0x0800dcdd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	7c12      	ldrb	r2, [r2, #16]
 800dcf4:	f107 0108 	add.w	r1, r7, #8
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	4798      	blx	r3
 800dcfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcfe:	e126      	b.n	800df4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fb0e 	bl	800e324 <USBD_CtlError>
        err++;
 800dd08:	7afb      	ldrb	r3, [r7, #11]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	72fb      	strb	r3, [r7, #11]
      break;
 800dd0e:	e11e      	b.n	800df4e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	7c12      	ldrb	r2, [r2, #16]
 800dd1c:	f107 0108 	add.w	r1, r7, #8
 800dd20:	4610      	mov	r0, r2
 800dd22:	4798      	blx	r3
 800dd24:	60f8      	str	r0, [r7, #12]
      break;
 800dd26:	e112      	b.n	800df4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	7c1b      	ldrb	r3, [r3, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10d      	bne.n	800dd4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd38:	f107 0208 	add.w	r2, r7, #8
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	4798      	blx	r3
 800dd40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3301      	adds	r3, #1
 800dd46:	2202      	movs	r2, #2
 800dd48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd4a:	e100      	b.n	800df4e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	f107 0208 	add.w	r2, r7, #8
 800dd58:	4610      	mov	r0, r2
 800dd5a:	4798      	blx	r3
 800dd5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3301      	adds	r3, #1
 800dd62:	2202      	movs	r2, #2
 800dd64:	701a      	strb	r2, [r3, #0]
      break;
 800dd66:	e0f2      	b.n	800df4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	885b      	ldrh	r3, [r3, #2]
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	f200 80ac 	bhi.w	800decc <USBD_GetDescriptor+0x258>
 800dd74:	a201      	add	r2, pc, #4	; (adr r2, 800dd7c <USBD_GetDescriptor+0x108>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800dd95 	.word	0x0800dd95
 800dd80:	0800ddc9 	.word	0x0800ddc9
 800dd84:	0800ddfd 	.word	0x0800ddfd
 800dd88:	0800de31 	.word	0x0800de31
 800dd8c:	0800de65 	.word	0x0800de65
 800dd90:	0800de99 	.word	0x0800de99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00b      	beq.n	800ddb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	7c12      	ldrb	r2, [r2, #16]
 800ddac:	f107 0108 	add.w	r1, r7, #8
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	4798      	blx	r3
 800ddb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddb6:	e091      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fab2 	bl	800e324 <USBD_CtlError>
            err++;
 800ddc0:	7afb      	ldrb	r3, [r7, #11]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ddc6:	e089      	b.n	800dedc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00b      	beq.n	800ddec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	7c12      	ldrb	r2, [r2, #16]
 800dde0:	f107 0108 	add.w	r1, r7, #8
 800dde4:	4610      	mov	r0, r2
 800dde6:	4798      	blx	r3
 800dde8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddea:	e077      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fa98 	bl	800e324 <USBD_CtlError>
            err++;
 800ddf4:	7afb      	ldrb	r3, [r7, #11]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ddfa:	e06f      	b.n	800dedc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00b      	beq.n	800de20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	7c12      	ldrb	r2, [r2, #16]
 800de14:	f107 0108 	add.w	r1, r7, #8
 800de18:	4610      	mov	r0, r2
 800de1a:	4798      	blx	r3
 800de1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de1e:	e05d      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de20:	6839      	ldr	r1, [r7, #0]
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fa7e 	bl	800e324 <USBD_CtlError>
            err++;
 800de28:	7afb      	ldrb	r3, [r7, #11]
 800de2a:	3301      	adds	r3, #1
 800de2c:	72fb      	strb	r3, [r7, #11]
          break;
 800de2e:	e055      	b.n	800dedc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00b      	beq.n	800de54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	7c12      	ldrb	r2, [r2, #16]
 800de48:	f107 0108 	add.w	r1, r7, #8
 800de4c:	4610      	mov	r0, r2
 800de4e:	4798      	blx	r3
 800de50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de52:	e043      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fa64 	bl	800e324 <USBD_CtlError>
            err++;
 800de5c:	7afb      	ldrb	r3, [r7, #11]
 800de5e:	3301      	adds	r3, #1
 800de60:	72fb      	strb	r3, [r7, #11]
          break;
 800de62:	e03b      	b.n	800dedc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de6a:	695b      	ldr	r3, [r3, #20]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00b      	beq.n	800de88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	7c12      	ldrb	r2, [r2, #16]
 800de7c:	f107 0108 	add.w	r1, r7, #8
 800de80:	4610      	mov	r0, r2
 800de82:	4798      	blx	r3
 800de84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de86:	e029      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de88:	6839      	ldr	r1, [r7, #0]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 fa4a 	bl	800e324 <USBD_CtlError>
            err++;
 800de90:	7afb      	ldrb	r3, [r7, #11]
 800de92:	3301      	adds	r3, #1
 800de94:	72fb      	strb	r3, [r7, #11]
          break;
 800de96:	e021      	b.n	800dedc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de9e:	699b      	ldr	r3, [r3, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00b      	beq.n	800debc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	7c12      	ldrb	r2, [r2, #16]
 800deb0:	f107 0108 	add.w	r1, r7, #8
 800deb4:	4610      	mov	r0, r2
 800deb6:	4798      	blx	r3
 800deb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deba:	e00f      	b.n	800dedc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800debc:	6839      	ldr	r1, [r7, #0]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fa30 	bl	800e324 <USBD_CtlError>
            err++;
 800dec4:	7afb      	ldrb	r3, [r7, #11]
 800dec6:	3301      	adds	r3, #1
 800dec8:	72fb      	strb	r3, [r7, #11]
          break;
 800deca:	e007      	b.n	800dedc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa28 	bl	800e324 <USBD_CtlError>
          err++;
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	3301      	adds	r3, #1
 800ded8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800deda:	bf00      	nop
      }
      break;
 800dedc:	e037      	b.n	800df4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	7c1b      	ldrb	r3, [r3, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d109      	bne.n	800defa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deee:	f107 0208 	add.w	r2, r7, #8
 800def2:	4610      	mov	r0, r2
 800def4:	4798      	blx	r3
 800def6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800def8:	e029      	b.n	800df4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fa11 	bl	800e324 <USBD_CtlError>
        err++;
 800df02:	7afb      	ldrb	r3, [r7, #11]
 800df04:	3301      	adds	r3, #1
 800df06:	72fb      	strb	r3, [r7, #11]
      break;
 800df08:	e021      	b.n	800df4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7c1b      	ldrb	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10d      	bne.n	800df2e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1a:	f107 0208 	add.w	r2, r7, #8
 800df1e:	4610      	mov	r0, r2
 800df20:	4798      	blx	r3
 800df22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3301      	adds	r3, #1
 800df28:	2207      	movs	r2, #7
 800df2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df2c:	e00f      	b.n	800df4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f9f7 	bl	800e324 <USBD_CtlError>
        err++;
 800df36:	7afb      	ldrb	r3, [r7, #11]
 800df38:	3301      	adds	r3, #1
 800df3a:	72fb      	strb	r3, [r7, #11]
      break;
 800df3c:	e007      	b.n	800df4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9ef 	bl	800e324 <USBD_CtlError>
      err++;
 800df46:	7afb      	ldrb	r3, [r7, #11]
 800df48:	3301      	adds	r3, #1
 800df4a:	72fb      	strb	r3, [r7, #11]
      break;
 800df4c:	bf00      	nop
  }

  if (err != 0U)
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d11e      	bne.n	800df92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	88db      	ldrh	r3, [r3, #6]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d016      	beq.n	800df8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800df5c:	893b      	ldrh	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00e      	beq.n	800df80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	88da      	ldrh	r2, [r3, #6]
 800df66:	893b      	ldrh	r3, [r7, #8]
 800df68:	4293      	cmp	r3, r2
 800df6a:	bf28      	it	cs
 800df6c:	4613      	movcs	r3, r2
 800df6e:	b29b      	uxth	r3, r3
 800df70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df72:	893b      	ldrh	r3, [r7, #8]
 800df74:	461a      	mov	r2, r3
 800df76:	68f9      	ldr	r1, [r7, #12]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fa44 	bl	800e406 <USBD_CtlSendData>
 800df7e:	e009      	b.n	800df94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9ce 	bl	800e324 <USBD_CtlError>
 800df88:	e004      	b.n	800df94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fa95 	bl	800e4ba <USBD_CtlSendStatus>
 800df90:	e000      	b.n	800df94 <USBD_GetDescriptor+0x320>
    return;
 800df92:	bf00      	nop
  }
}
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop

0800df9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	889b      	ldrh	r3, [r3, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d131      	bne.n	800e012 <USBD_SetAddress+0x76>
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	88db      	ldrh	r3, [r3, #6]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d12d      	bne.n	800e012 <USBD_SetAddress+0x76>
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	885b      	ldrh	r3, [r3, #2]
 800dfba:	2b7f      	cmp	r3, #127	; 0x7f
 800dfbc:	d829      	bhi.n	800e012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b03      	cmp	r3, #3
 800dfd4:	d104      	bne.n	800dfe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f9a3 	bl	800e324 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfde:	e01d      	b.n	800e01c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	7bfa      	ldrb	r2, [r7, #15]
 800dfe4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	4619      	mov	r1, r3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 ff2b 	bl	800ee48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 fa61 	bl	800e4ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d004      	beq.n	800e008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2202      	movs	r2, #2
 800e002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e006:	e009      	b.n	800e01c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e010:	e004      	b.n	800e01c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f985 	bl	800e324 <USBD_CtlError>
  }
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	885b      	ldrh	r3, [r3, #2]
 800e036:	b2da      	uxtb	r2, r3
 800e038:	4b4c      	ldr	r3, [pc, #304]	; (800e16c <USBD_SetConfig+0x148>)
 800e03a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e03c:	4b4b      	ldr	r3, [pc, #300]	; (800e16c <USBD_SetConfig+0x148>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d905      	bls.n	800e050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e044:	6839      	ldr	r1, [r7, #0]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f96c 	bl	800e324 <USBD_CtlError>
    return USBD_FAIL;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e088      	b.n	800e162 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d002      	beq.n	800e062 <USBD_SetConfig+0x3e>
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d025      	beq.n	800e0ac <USBD_SetConfig+0x88>
 800e060:	e071      	b.n	800e146 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e062:	4b42      	ldr	r3, [pc, #264]	; (800e16c <USBD_SetConfig+0x148>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d01c      	beq.n	800e0a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e06a:	4b40      	ldr	r3, [pc, #256]	; (800e16c <USBD_SetConfig+0x148>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	461a      	mov	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e074:	4b3d      	ldr	r3, [pc, #244]	; (800e16c <USBD_SetConfig+0x148>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	4619      	mov	r1, r3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff f992 	bl	800d3a4 <USBD_SetClassConfig>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e084:	7bfb      	ldrb	r3, [r7, #15]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f949 	bl	800e324 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e092:	e065      	b.n	800e160 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 fa10 	bl	800e4ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2203      	movs	r2, #3
 800e09e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0a2:	e05d      	b.n	800e160 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fa08 	bl	800e4ba <USBD_CtlSendStatus>
      break;
 800e0aa:	e059      	b.n	800e160 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0ac:	4b2f      	ldr	r3, [pc, #188]	; (800e16c <USBD_SetConfig+0x148>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d112      	bne.n	800e0da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e0bc:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <USBD_SetConfig+0x148>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0c6:	4b29      	ldr	r3, [pc, #164]	; (800e16c <USBD_SetConfig+0x148>)
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7ff f985 	bl	800d3dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f9f1 	bl	800e4ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0d8:	e042      	b.n	800e160 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e0da:	4b24      	ldr	r3, [pc, #144]	; (800e16c <USBD_SetConfig+0x148>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d02a      	beq.n	800e13e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7ff f973 	bl	800d3dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e0f6:	4b1d      	ldr	r3, [pc, #116]	; (800e16c <USBD_SetConfig+0x148>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e100:	4b1a      	ldr	r3, [pc, #104]	; (800e16c <USBD_SetConfig+0x148>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff f94c 	bl	800d3a4 <USBD_SetClassConfig>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00f      	beq.n	800e136 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 f903 	bl	800e324 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	b2db      	uxtb	r3, r3
 800e124:	4619      	mov	r1, r3
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f7ff f958 	bl	800d3dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2202      	movs	r2, #2
 800e130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e134:	e014      	b.n	800e160 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f9bf 	bl	800e4ba <USBD_CtlSendStatus>
      break;
 800e13c:	e010      	b.n	800e160 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f9bb 	bl	800e4ba <USBD_CtlSendStatus>
      break;
 800e144:	e00c      	b.n	800e160 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f8eb 	bl	800e324 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e14e:	4b07      	ldr	r3, [pc, #28]	; (800e16c <USBD_SetConfig+0x148>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff f941 	bl	800d3dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e15a:	2303      	movs	r3, #3
 800e15c:	73fb      	strb	r3, [r7, #15]
      break;
 800e15e:	bf00      	nop
  }

  return ret;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20000538 	.word	0x20000538

0800e170 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	88db      	ldrh	r3, [r3, #6]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d004      	beq.n	800e18c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f8cd 	bl	800e324 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e18a:	e023      	b.n	800e1d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b02      	cmp	r3, #2
 800e196:	dc02      	bgt.n	800e19e <USBD_GetConfig+0x2e>
 800e198:	2b00      	cmp	r3, #0
 800e19a:	dc03      	bgt.n	800e1a4 <USBD_GetConfig+0x34>
 800e19c:	e015      	b.n	800e1ca <USBD_GetConfig+0x5a>
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d00b      	beq.n	800e1ba <USBD_GetConfig+0x4a>
 800e1a2:	e012      	b.n	800e1ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f927 	bl	800e406 <USBD_CtlSendData>
        break;
 800e1b8:	e00c      	b.n	800e1d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f91f 	bl	800e406 <USBD_CtlSendData>
        break;
 800e1c8:	e004      	b.n	800e1d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f8a9 	bl	800e324 <USBD_CtlError>
        break;
 800e1d2:	bf00      	nop
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d81e      	bhi.n	800e232 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	88db      	ldrh	r3, [r3, #6]
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d004      	beq.n	800e206 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f890 	bl	800e324 <USBD_CtlError>
        break;
 800e204:	e01a      	b.n	800e23c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e212:	2b00      	cmp	r3, #0
 800e214:	d005      	beq.n	800e222 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f043 0202 	orr.w	r2, r3, #2
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	330c      	adds	r3, #12
 800e226:	2202      	movs	r2, #2
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f8eb 	bl	800e406 <USBD_CtlSendData>
      break;
 800e230:	e004      	b.n	800e23c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f875 	bl	800e324 <USBD_CtlError>
      break;
 800e23a:	bf00      	nop
  }
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	885b      	ldrh	r3, [r3, #2]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d106      	bne.n	800e264 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f92b 	bl	800e4ba <USBD_CtlSendStatus>
  }
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	3b01      	subs	r3, #1
 800e280:	2b02      	cmp	r3, #2
 800e282:	d80b      	bhi.n	800e29c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	885b      	ldrh	r3, [r3, #2]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d10c      	bne.n	800e2a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 f910 	bl	800e4ba <USBD_CtlSendStatus>
      }
      break;
 800e29a:	e004      	b.n	800e2a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f840 	bl	800e324 <USBD_CtlError>
      break;
 800e2a4:	e000      	b.n	800e2a8 <USBD_ClrFeature+0x3c>
      break;
 800e2a6:	bf00      	nop
  }
}
 800e2a8:	bf00      	nop
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	781a      	ldrb	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fa92 	bl	800d804 <SWAPBYTE>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7ff fa85 	bl	800d804 <SWAPBYTE>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3301      	adds	r3, #1
 800e306:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3301      	adds	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff fa78 	bl	800d804 <SWAPBYTE>
 800e314:	4603      	mov	r3, r0
 800e316:	461a      	mov	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	80da      	strh	r2, [r3, #6]
}
 800e31c:	bf00      	nop
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e32e:	2180      	movs	r1, #128	; 0x80
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fcef 	bl	800ed14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e336:	2100      	movs	r1, #0
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 fceb 	bl	800ed14 <USBD_LL_StallEP>
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b086      	sub	sp, #24
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	60f8      	str	r0, [r7, #12]
 800e34e:	60b9      	str	r1, [r7, #8]
 800e350:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e352:	2300      	movs	r3, #0
 800e354:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d036      	beq.n	800e3ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e360:	6938      	ldr	r0, [r7, #16]
 800e362:	f000 f836 	bl	800e3d2 <USBD_GetLen>
 800e366:	4603      	mov	r3, r0
 800e368:	3301      	adds	r3, #1
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	b29a      	uxth	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e374:	7dfb      	ldrb	r3, [r7, #23]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	4413      	add	r3, r2
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	7812      	ldrb	r2, [r2, #0]
 800e37e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	3301      	adds	r3, #1
 800e384:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e386:	7dfb      	ldrb	r3, [r7, #23]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	4413      	add	r3, r2
 800e38c:	2203      	movs	r2, #3
 800e38e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	3301      	adds	r3, #1
 800e394:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e396:	e013      	b.n	800e3c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e398:	7dfb      	ldrb	r3, [r7, #23]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	4413      	add	r3, r2
 800e39e:	693a      	ldr	r2, [r7, #16]
 800e3a0:	7812      	ldrb	r2, [r2, #0]
 800e3a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	613b      	str	r3, [r7, #16]
    idx++;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1e7      	bne.n	800e398 <USBD_GetString+0x52>
 800e3c8:	e000      	b.n	800e3cc <USBD_GetString+0x86>
    return;
 800e3ca:	bf00      	nop
  }
}
 800e3cc:	3718      	adds	r7, #24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	b085      	sub	sp, #20
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e3e2:	e005      	b.n	800e3f0 <USBD_GetLen+0x1e>
  {
    len++;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1f5      	bne.n	800e3e4 <USBD_GetLen+0x12>
  }

  return len;
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr

0800e406 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b084      	sub	sp, #16
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2202      	movs	r2, #2
 800e416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	2100      	movs	r1, #0
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 fd41 	bl	800eeb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	2100      	movs	r1, #0
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f000 fd30 	bl	800eeb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3710      	adds	r7, #16
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b084      	sub	sp, #16
 800e462:	af00      	add	r7, sp, #0
 800e464:	60f8      	str	r0, [r7, #12]
 800e466:	60b9      	str	r1, [r7, #8]
 800e468:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2203      	movs	r2, #3
 800e46e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	2100      	movs	r1, #0
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 fd4b 	bl	800ef24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fd3a 	bl	800ef24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b082      	sub	sp, #8
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2204      	movs	r2, #4
 800e4c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fcef 	bl	800eeb4 <USBD_LL_Transmit>

  return USBD_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2205      	movs	r2, #5
 800e4ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 fd14 	bl	800ef24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e50c:	2200      	movs	r2, #0
 800e50e:	4912      	ldr	r1, [pc, #72]	; (800e558 <MX_USB_DEVICE_Init+0x50>)
 800e510:	4812      	ldr	r0, [pc, #72]	; (800e55c <MX_USB_DEVICE_Init+0x54>)
 800e512:	f7fe fed9 	bl	800d2c8 <USBD_Init>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e51c:	f7f4 ff36 	bl	800338c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e520:	490f      	ldr	r1, [pc, #60]	; (800e560 <MX_USB_DEVICE_Init+0x58>)
 800e522:	480e      	ldr	r0, [pc, #56]	; (800e55c <MX_USB_DEVICE_Init+0x54>)
 800e524:	f7fe ff00 	bl	800d328 <USBD_RegisterClass>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e52e:	f7f4 ff2d 	bl	800338c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e532:	490c      	ldr	r1, [pc, #48]	; (800e564 <MX_USB_DEVICE_Init+0x5c>)
 800e534:	4809      	ldr	r0, [pc, #36]	; (800e55c <MX_USB_DEVICE_Init+0x54>)
 800e536:	f7fe fe51 	bl	800d1dc <USBD_CDC_RegisterInterface>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e540:	f7f4 ff24 	bl	800338c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e544:	4805      	ldr	r0, [pc, #20]	; (800e55c <MX_USB_DEVICE_Init+0x54>)
 800e546:	f7fe ff16 	bl	800d376 <USBD_Start>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e550:	f7f4 ff1c 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e554:	bf00      	nop
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20000130 	.word	0x20000130
 800e55c:	2000053c 	.word	0x2000053c
 800e560:	20000018 	.word	0x20000018
 800e564:	2000011c 	.word	0x2000011c

0800e568 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e56c:	2200      	movs	r2, #0
 800e56e:	4905      	ldr	r1, [pc, #20]	; (800e584 <CDC_Init_FS+0x1c>)
 800e570:	4805      	ldr	r0, [pc, #20]	; (800e588 <CDC_Init_FS+0x20>)
 800e572:	f7fe fe48 	bl	800d206 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e576:	4905      	ldr	r1, [pc, #20]	; (800e58c <CDC_Init_FS+0x24>)
 800e578:	4803      	ldr	r0, [pc, #12]	; (800e588 <CDC_Init_FS+0x20>)
 800e57a:	f7fe fe62 	bl	800d242 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e57e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e580:	4618      	mov	r0, r3
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20000bf4 	.word	0x20000bf4
 800e588:	2000053c 	.word	0x2000053c
 800e58c:	2000080c 	.word	0x2000080c

0800e590 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e594:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e596:	4618      	mov	r0, r3
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	6039      	str	r1, [r7, #0]
 800e5aa:	71fb      	strb	r3, [r7, #7]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	2b23      	cmp	r3, #35	; 0x23
 800e5b4:	d84a      	bhi.n	800e64c <CDC_Control_FS+0xac>
 800e5b6:	a201      	add	r2, pc, #4	; (adr r2, 800e5bc <CDC_Control_FS+0x1c>)
 800e5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5bc:	0800e64d 	.word	0x0800e64d
 800e5c0:	0800e64d 	.word	0x0800e64d
 800e5c4:	0800e64d 	.word	0x0800e64d
 800e5c8:	0800e64d 	.word	0x0800e64d
 800e5cc:	0800e64d 	.word	0x0800e64d
 800e5d0:	0800e64d 	.word	0x0800e64d
 800e5d4:	0800e64d 	.word	0x0800e64d
 800e5d8:	0800e64d 	.word	0x0800e64d
 800e5dc:	0800e64d 	.word	0x0800e64d
 800e5e0:	0800e64d 	.word	0x0800e64d
 800e5e4:	0800e64d 	.word	0x0800e64d
 800e5e8:	0800e64d 	.word	0x0800e64d
 800e5ec:	0800e64d 	.word	0x0800e64d
 800e5f0:	0800e64d 	.word	0x0800e64d
 800e5f4:	0800e64d 	.word	0x0800e64d
 800e5f8:	0800e64d 	.word	0x0800e64d
 800e5fc:	0800e64d 	.word	0x0800e64d
 800e600:	0800e64d 	.word	0x0800e64d
 800e604:	0800e64d 	.word	0x0800e64d
 800e608:	0800e64d 	.word	0x0800e64d
 800e60c:	0800e64d 	.word	0x0800e64d
 800e610:	0800e64d 	.word	0x0800e64d
 800e614:	0800e64d 	.word	0x0800e64d
 800e618:	0800e64d 	.word	0x0800e64d
 800e61c:	0800e64d 	.word	0x0800e64d
 800e620:	0800e64d 	.word	0x0800e64d
 800e624:	0800e64d 	.word	0x0800e64d
 800e628:	0800e64d 	.word	0x0800e64d
 800e62c:	0800e64d 	.word	0x0800e64d
 800e630:	0800e64d 	.word	0x0800e64d
 800e634:	0800e64d 	.word	0x0800e64d
 800e638:	0800e64d 	.word	0x0800e64d
 800e63c:	0800e64d 	.word	0x0800e64d
 800e640:	0800e64d 	.word	0x0800e64d
 800e644:	0800e64d 	.word	0x0800e64d
 800e648:	0800e64d 	.word	0x0800e64d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e64c:	bf00      	nop
  }

  return (USBD_OK);
 800e64e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	4805      	ldr	r0, [pc, #20]	; (800e680 <CDC_Receive_FS+0x24>)
 800e66a:	f7fe fdea 	bl	800d242 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e66e:	4804      	ldr	r0, [pc, #16]	; (800e680 <CDC_Receive_FS+0x24>)
 800e670:	f7fe fe00 	bl	800d274 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e674:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	2000053c 	.word	0x2000053c

0800e684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e684:	b480      	push	{r7}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	4613      	mov	r3, r2
 800e690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e692:	2300      	movs	r3, #0
 800e694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	371c      	adds	r7, #28
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
	...

0800e6a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6039      	str	r1, [r7, #0]
 800e6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2212      	movs	r2, #18
 800e6b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6ba:	4b03      	ldr	r3, [pc, #12]	; (800e6c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	20000150 	.word	0x20000150

0800e6cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6039      	str	r1, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2204      	movs	r2, #4
 800e6dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6de:	4b03      	ldr	r3, [pc, #12]	; (800e6ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	20000170 	.word	0x20000170

0800e6f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	6039      	str	r1, [r7, #0]
 800e6fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6fc:	79fb      	ldrb	r3, [r7, #7]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d105      	bne.n	800e70e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	4907      	ldr	r1, [pc, #28]	; (800e724 <USBD_FS_ProductStrDescriptor+0x34>)
 800e706:	4808      	ldr	r0, [pc, #32]	; (800e728 <USBD_FS_ProductStrDescriptor+0x38>)
 800e708:	f7ff fe1d 	bl	800e346 <USBD_GetString>
 800e70c:	e004      	b.n	800e718 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	4904      	ldr	r1, [pc, #16]	; (800e724 <USBD_FS_ProductStrDescriptor+0x34>)
 800e712:	4805      	ldr	r0, [pc, #20]	; (800e728 <USBD_FS_ProductStrDescriptor+0x38>)
 800e714:	f7ff fe17 	bl	800e346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e718:	4b02      	ldr	r3, [pc, #8]	; (800e724 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	20000fdc 	.word	0x20000fdc
 800e728:	0800f34c 	.word	0x0800f34c

0800e72c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	4603      	mov	r3, r0
 800e734:	6039      	str	r1, [r7, #0]
 800e736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	4904      	ldr	r1, [pc, #16]	; (800e74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e73c:	4804      	ldr	r0, [pc, #16]	; (800e750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e73e:	f7ff fe02 	bl	800e346 <USBD_GetString>
  return USBD_StrDesc;
 800e742:	4b02      	ldr	r3, [pc, #8]	; (800e74c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20000fdc 	.word	0x20000fdc
 800e750:	0800f364 	.word	0x0800f364

0800e754 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	6039      	str	r1, [r7, #0]
 800e75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	221a      	movs	r2, #26
 800e764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e766:	f000 f855 	bl	800e814 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e76a:	4b02      	ldr	r3, [pc, #8]	; (800e774 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	20000174 	.word	0x20000174

0800e778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	4603      	mov	r3, r0
 800e780:	6039      	str	r1, [r7, #0]
 800e782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e784:	79fb      	ldrb	r3, [r7, #7]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d105      	bne.n	800e796 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	4907      	ldr	r1, [pc, #28]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800e78e:	4808      	ldr	r0, [pc, #32]	; (800e7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e790:	f7ff fdd9 	bl	800e346 <USBD_GetString>
 800e794:	e004      	b.n	800e7a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	4904      	ldr	r1, [pc, #16]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800e79a:	4805      	ldr	r0, [pc, #20]	; (800e7b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e79c:	f7ff fdd3 	bl	800e346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7a0:	4b02      	ldr	r3, [pc, #8]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20000fdc 	.word	0x20000fdc
 800e7b0:	0800f378 	.word	0x0800f378

0800e7b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	6039      	str	r1, [r7, #0]
 800e7be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d105      	bne.n	800e7d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	4907      	ldr	r1, [pc, #28]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7ca:	4808      	ldr	r0, [pc, #32]	; (800e7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7cc:	f7ff fdbb 	bl	800e346 <USBD_GetString>
 800e7d0:	e004      	b.n	800e7dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	4904      	ldr	r1, [pc, #16]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7d6:	4805      	ldr	r0, [pc, #20]	; (800e7ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d8:	f7ff fdb5 	bl	800e346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7dc:	4b02      	ldr	r3, [pc, #8]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000fdc 	.word	0x20000fdc
 800e7ec:	0800f384 	.word	0x0800f384

0800e7f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	6039      	str	r1, [r7, #0]
 800e7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	220c      	movs	r2, #12
 800e800:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e802:	4b03      	ldr	r3, [pc, #12]	; (800e810 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e804:	4618      	mov	r0, r3
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	20000164 	.word	0x20000164

0800e814 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e81a:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <Get_SerialNum+0x44>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e820:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <Get_SerialNum+0x48>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e826:	4b0e      	ldr	r3, [pc, #56]	; (800e860 <Get_SerialNum+0x4c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4413      	add	r3, r2
 800e832:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e83a:	2208      	movs	r2, #8
 800e83c:	4909      	ldr	r1, [pc, #36]	; (800e864 <Get_SerialNum+0x50>)
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f000 f814 	bl	800e86c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e844:	2204      	movs	r2, #4
 800e846:	4908      	ldr	r1, [pc, #32]	; (800e868 <Get_SerialNum+0x54>)
 800e848:	68b8      	ldr	r0, [r7, #8]
 800e84a:	f000 f80f 	bl	800e86c <IntToUnicode>
  }
}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	1fff7590 	.word	0x1fff7590
 800e85c:	1fff7594 	.word	0x1fff7594
 800e860:	1fff7598 	.word	0x1fff7598
 800e864:	20000176 	.word	0x20000176
 800e868:	20000186 	.word	0x20000186

0800e86c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	4613      	mov	r3, r2
 800e878:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e87e:	2300      	movs	r3, #0
 800e880:	75fb      	strb	r3, [r7, #23]
 800e882:	e027      	b.n	800e8d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	0f1b      	lsrs	r3, r3, #28
 800e888:	2b09      	cmp	r3, #9
 800e88a:	d80b      	bhi.n	800e8a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	0f1b      	lsrs	r3, r3, #28
 800e890:	b2da      	uxtb	r2, r3
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	4619      	mov	r1, r3
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	440b      	add	r3, r1
 800e89c:	3230      	adds	r2, #48	; 0x30
 800e89e:	b2d2      	uxtb	r2, r2
 800e8a0:	701a      	strb	r2, [r3, #0]
 800e8a2:	e00a      	b.n	800e8ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	0f1b      	lsrs	r3, r3, #28
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	440b      	add	r3, r1
 800e8b4:	3237      	adds	r2, #55	; 0x37
 800e8b6:	b2d2      	uxtb	r2, r2
 800e8b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	011b      	lsls	r3, r3, #4
 800e8be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	75fb      	strb	r3, [r7, #23]
 800e8d4:	7dfa      	ldrb	r2, [r7, #23]
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d3d3      	bcc.n	800e884 <IntToUnicode+0x18>
  }
}
 800e8dc:	bf00      	nop
 800e8de:	bf00      	nop
 800e8e0:	371c      	adds	r7, #28
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
	...

0800e8ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b096      	sub	sp, #88	; 0x58
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	605a      	str	r2, [r3, #4]
 800e8fe:	609a      	str	r2, [r3, #8]
 800e900:	60da      	str	r2, [r3, #12]
 800e902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e904:	f107 0310 	add.w	r3, r7, #16
 800e908:	2234      	movs	r2, #52	; 0x34
 800e90a:	2100      	movs	r1, #0
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 fc13 	bl	800f138 <memset>
  if(pcdHandle->Instance==USB)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a24      	ldr	r2, [pc, #144]	; (800e9a8 <HAL_PCD_MspInit+0xbc>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d141      	bne.n	800e9a0 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e91c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e920:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800e922:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800e926:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e928:	f107 0310 	add.w	r3, r7, #16
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7f9 fe91 	bl	8008654 <HAL_RCCEx_PeriphCLKConfig>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e938:	f7f4 fd28 	bl	800338c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e93c:	4b1b      	ldr	r3, [pc, #108]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e940:	4a1a      	ldr	r2, [pc, #104]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e942:	f043 0301 	orr.w	r3, r3, #1
 800e946:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e948:	4b18      	ldr	r3, [pc, #96]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e958:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e95a:	2302      	movs	r3, #2
 800e95c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e962:	2303      	movs	r3, #3
 800e964:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800e966:	230a      	movs	r3, #10
 800e968:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e96a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e96e:	4619      	mov	r1, r3
 800e970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e974:	f7f7 f864 	bl	8005a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e978:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e97c:	4a0b      	ldr	r2, [pc, #44]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e97e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e982:	6593      	str	r3, [r2, #88]	; 0x58
 800e984:	4b09      	ldr	r3, [pc, #36]	; (800e9ac <HAL_PCD_MspInit+0xc0>)
 800e986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e98c:	60bb      	str	r3, [r7, #8]
 800e98e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e990:	2200      	movs	r2, #0
 800e992:	2100      	movs	r1, #0
 800e994:	2043      	movs	r0, #67	; 0x43
 800e996:	f7f6 fde6 	bl	8005566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e99a:	2043      	movs	r0, #67	; 0x43
 800e99c:	f7f6 fdff 	bl	800559e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e9a0:	bf00      	nop
 800e9a2:	3758      	adds	r7, #88	; 0x58
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	40006800 	.word	0x40006800
 800e9ac:	40021000 	.word	0x40021000

0800e9b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f7fe fd20 	bl	800d40c <USBD_LL_SetupStage>
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e9e6:	78fa      	ldrb	r2, [r7, #3]
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	4413      	add	r3, r2
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	440b      	add	r3, r1
 800e9f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f7fe fd5a 	bl	800d4b6 <USBD_LL_DataOutStage>
}
 800ea02:	bf00      	nop
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	460b      	mov	r3, r1
 800ea14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	4613      	mov	r3, r2
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	4413      	add	r3, r2
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	440b      	add	r3, r1
 800ea2a:	3340      	adds	r3, #64	; 0x40
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	78fb      	ldrb	r3, [r7, #3]
 800ea30:	4619      	mov	r1, r3
 800ea32:	f7fe fda3 	bl	800d57c <USBD_LL_DataInStage>
}
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b082      	sub	sp, #8
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe feb7 	bl	800d7c0 <USBD_LL_SOF>
}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b084      	sub	sp, #16
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea62:	2301      	movs	r3, #1
 800ea64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d001      	beq.n	800ea72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea6e:	f7f4 fc8d 	bl	800338c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ea78:	7bfa      	ldrb	r2, [r7, #15]
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe fe61 	bl	800d744 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fe fe0d 	bl	800d6a8 <USBD_LL_Reset>
}
 800ea8e:	bf00      	nop
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
	...

0800ea98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe fe5c 	bl	800d764 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eab4:	4b04      	ldr	r3, [pc, #16]	; (800eac8 <HAL_PCD_SuspendCallback+0x30>)
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	4a03      	ldr	r2, [pc, #12]	; (800eac8 <HAL_PCD_SuspendCallback+0x30>)
 800eaba:	f043 0306 	orr.w	r3, r3, #6
 800eabe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	e000ed00 	.word	0xe000ed00

0800eacc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d007      	beq.n	800eaec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eadc:	4b08      	ldr	r3, [pc, #32]	; (800eb00 <HAL_PCD_ResumeCallback+0x34>)
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	4a07      	ldr	r2, [pc, #28]	; (800eb00 <HAL_PCD_ResumeCallback+0x34>)
 800eae2:	f023 0306 	bic.w	r3, r3, #6
 800eae6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eae8:	f000 fab6 	bl	800f058 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe fe4c 	bl	800d790 <USBD_LL_Resume>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	e000ed00 	.word	0xe000ed00

0800eb04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800eb0c:	f7f8 ff44 	bl	8007998 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eb10:	4a2b      	ldr	r2, [pc, #172]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a29      	ldr	r2, [pc, #164]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eb20:	4b27      	ldr	r3, [pc, #156]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb22:	4a28      	ldr	r2, [pc, #160]	; (800ebc4 <USBD_LL_Init+0xc0>)
 800eb24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eb26:	4b26      	ldr	r3, [pc, #152]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb28:	2208      	movs	r2, #8
 800eb2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb2c:	4b24      	ldr	r3, [pc, #144]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb2e:	2202      	movs	r2, #2
 800eb30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb32:	4b23      	ldr	r3, [pc, #140]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb34:	2202      	movs	r2, #2
 800eb36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eb38:	4b21      	ldr	r3, [pc, #132]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb3e:	4b20      	ldr	r3, [pc, #128]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eb44:	4b1e      	ldr	r3, [pc, #120]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb4a:	4b1d      	ldr	r3, [pc, #116]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eb50:	481b      	ldr	r0, [pc, #108]	; (800ebc0 <USBD_LL_Init+0xbc>)
 800eb52:	f7f7 f931 	bl	8005db8 <HAL_PCD_Init>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800eb5c:	f7f4 fc16 	bl	800338c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb66:	2318      	movs	r3, #24
 800eb68:	2200      	movs	r2, #0
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	f7f8 fe41 	bl	80077f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb76:	2358      	movs	r3, #88	; 0x58
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2180      	movs	r1, #128	; 0x80
 800eb7c:	f7f8 fe39 	bl	80077f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb86:	23c0      	movs	r3, #192	; 0xc0
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2181      	movs	r1, #129	; 0x81
 800eb8c:	f7f8 fe31 	bl	80077f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb96:	f44f 7388 	mov.w	r3, #272	; 0x110
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	f7f8 fe28 	bl	80077f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebac:	2200      	movs	r2, #0
 800ebae:	2182      	movs	r1, #130	; 0x82
 800ebb0:	f7f8 fe1f 	bl	80077f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200011dc 	.word	0x200011dc
 800ebc4:	40006800 	.word	0x40006800

0800ebc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f7 fa01 	bl	8005fe6 <HAL_PCD_Start>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebe8:	7bbb      	ldrb	r3, [r7, #14]
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d816      	bhi.n	800ec1c <USBD_LL_Start+0x54>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <USBD_LL_Start+0x2c>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec05 	.word	0x0800ec05
 800ebf8:	0800ec0b 	.word	0x0800ec0b
 800ebfc:	0800ec11 	.word	0x0800ec11
 800ec00:	0800ec17 	.word	0x0800ec17
    case HAL_OK :
      usb_status = USBD_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	73fb      	strb	r3, [r7, #15]
    break;
 800ec08:	e00b      	b.n	800ec22 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec0e:	e008      	b.n	800ec22 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec10:	2301      	movs	r3, #1
 800ec12:	73fb      	strb	r3, [r7, #15]
    break;
 800ec14:	e005      	b.n	800ec22 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec16:	2303      	movs	r3, #3
 800ec18:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1a:	e002      	b.n	800ec22 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec20:	bf00      	nop
  }
  return usb_status;
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	4608      	mov	r0, r1
 800ec36:	4611      	mov	r1, r2
 800ec38:	461a      	mov	r2, r3
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	70fb      	strb	r3, [r7, #3]
 800ec3e:	460b      	mov	r3, r1
 800ec40:	70bb      	strb	r3, [r7, #2]
 800ec42:	4613      	mov	r3, r2
 800ec44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec46:	2300      	movs	r3, #0
 800ec48:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec54:	78bb      	ldrb	r3, [r7, #2]
 800ec56:	883a      	ldrh	r2, [r7, #0]
 800ec58:	78f9      	ldrb	r1, [r7, #3]
 800ec5a:	f7f7 fb32 	bl	80062c2 <HAL_PCD_EP_Open>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec62:	7bbb      	ldrb	r3, [r7, #14]
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d817      	bhi.n	800ec98 <USBD_LL_OpenEP+0x6c>
 800ec68:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <USBD_LL_OpenEP+0x44>)
 800ec6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6e:	bf00      	nop
 800ec70:	0800ec81 	.word	0x0800ec81
 800ec74:	0800ec87 	.word	0x0800ec87
 800ec78:	0800ec8d 	.word	0x0800ec8d
 800ec7c:	0800ec93 	.word	0x0800ec93
    case HAL_OK :
      usb_status = USBD_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]
    break;
 800ec84:	e00b      	b.n	800ec9e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec86:	2303      	movs	r3, #3
 800ec88:	73fb      	strb	r3, [r7, #15]
    break;
 800ec8a:	e008      	b.n	800ec9e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec90:	e005      	b.n	800ec9e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec92:	2303      	movs	r3, #3
 800ec94:	73fb      	strb	r3, [r7, #15]
    break;
 800ec96:	e002      	b.n	800ec9e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9c:	bf00      	nop
  }
  return usb_status;
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f7 fb63 	bl	8006392 <HAL_PCD_EP_Close>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ecd0:	7bbb      	ldrb	r3, [r7, #14]
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d816      	bhi.n	800ed04 <USBD_LL_CloseEP+0x5c>
 800ecd6:	a201      	add	r2, pc, #4	; (adr r2, 800ecdc <USBD_LL_CloseEP+0x34>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800eced 	.word	0x0800eced
 800ece0:	0800ecf3 	.word	0x0800ecf3
 800ece4:	0800ecf9 	.word	0x0800ecf9
 800ece8:	0800ecff 	.word	0x0800ecff
    case HAL_OK :
      usb_status = USBD_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf0:	e00b      	b.n	800ed0a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecf2:	2303      	movs	r3, #3
 800ecf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf6:	e008      	b.n	800ed0a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecfc:	e005      	b.n	800ed0a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	73fb      	strb	r3, [r7, #15]
    break;
 800ed02:	e002      	b.n	800ed0a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed04:	2303      	movs	r3, #3
 800ed06:	73fb      	strb	r3, [r7, #15]
    break;
 800ed08:	bf00      	nop
  }
  return usb_status;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed24:	2300      	movs	r3, #0
 800ed26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed2e:	78fa      	ldrb	r2, [r7, #3]
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7f7 fc11 	bl	800655a <HAL_PCD_EP_SetStall>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d816      	bhi.n	800ed70 <USBD_LL_StallEP+0x5c>
 800ed42:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <USBD_LL_StallEP+0x34>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed59 	.word	0x0800ed59
 800ed4c:	0800ed5f 	.word	0x0800ed5f
 800ed50:	0800ed65 	.word	0x0800ed65
 800ed54:	0800ed6b 	.word	0x0800ed6b
    case HAL_OK :
      usb_status = USBD_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed5c:	e00b      	b.n	800ed76 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	73fb      	strb	r3, [r7, #15]
    break;
 800ed62:	e008      	b.n	800ed76 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed64:	2301      	movs	r3, #1
 800ed66:	73fb      	strb	r3, [r7, #15]
    break;
 800ed68:	e005      	b.n	800ed76 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed6e:	e002      	b.n	800ed76 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed70:	2303      	movs	r3, #3
 800ed72:	73fb      	strb	r3, [r7, #15]
    break;
 800ed74:	bf00      	nop
  }
  return usb_status;
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed9a:	78fa      	ldrb	r2, [r7, #3]
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f7 fc3d 	bl	800661e <HAL_PCD_EP_ClrStall>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d816      	bhi.n	800eddc <USBD_LL_ClearStallEP+0x5c>
 800edae:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <USBD_LL_ClearStallEP+0x34>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800edc5 	.word	0x0800edc5
 800edb8:	0800edcb 	.word	0x0800edcb
 800edbc:	0800edd1 	.word	0x0800edd1
 800edc0:	0800edd7 	.word	0x0800edd7
    case HAL_OK :
      usb_status = USBD_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	73fb      	strb	r3, [r7, #15]
    break;
 800edc8:	e00b      	b.n	800ede2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edca:	2303      	movs	r3, #3
 800edcc:	73fb      	strb	r3, [r7, #15]
    break;
 800edce:	e008      	b.n	800ede2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edd0:	2301      	movs	r3, #1
 800edd2:	73fb      	strb	r3, [r7, #15]
    break;
 800edd4:	e005      	b.n	800ede2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edd6:	2303      	movs	r3, #3
 800edd8:	73fb      	strb	r3, [r7, #15]
    break;
 800edda:	e002      	b.n	800ede2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eddc:	2303      	movs	r3, #3
 800edde:	73fb      	strb	r3, [r7, #15]
    break;
 800ede0:	bf00      	nop
  }
  return usb_status;
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da0c      	bge.n	800ee22 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee08:	78fb      	ldrb	r3, [r7, #3]
 800ee0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee0e:	68f9      	ldr	r1, [r7, #12]
 800ee10:	1c5a      	adds	r2, r3, #1
 800ee12:	4613      	mov	r3, r2
 800ee14:	009b      	lsls	r3, r3, #2
 800ee16:	4413      	add	r3, r2
 800ee18:	00db      	lsls	r3, r3, #3
 800ee1a:	440b      	add	r3, r1
 800ee1c:	3306      	adds	r3, #6
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	e00b      	b.n	800ee3a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee22:	78fb      	ldrb	r3, [r7, #3]
 800ee24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee28:	68f9      	ldr	r1, [r7, #12]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4413      	add	r3, r2
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	440b      	add	r3, r1
 800ee34:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800ee38:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3714      	adds	r7, #20
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
	...

0800ee48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee62:	78fa      	ldrb	r2, [r7, #3]
 800ee64:	4611      	mov	r1, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f7 fa06 	bl	8006278 <HAL_PCD_SetAddress>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d816      	bhi.n	800eea4 <USBD_LL_SetUSBAddress+0x5c>
 800ee76:	a201      	add	r2, pc, #4	; (adr r2, 800ee7c <USBD_LL_SetUSBAddress+0x34>)
 800ee78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7c:	0800ee8d 	.word	0x0800ee8d
 800ee80:	0800ee93 	.word	0x0800ee93
 800ee84:	0800ee99 	.word	0x0800ee99
 800ee88:	0800ee9f 	.word	0x0800ee9f
    case HAL_OK :
      usb_status = USBD_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee90:	e00b      	b.n	800eeaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee92:	2303      	movs	r3, #3
 800ee94:	73fb      	strb	r3, [r7, #15]
    break;
 800ee96:	e008      	b.n	800eeaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee9c:	e005      	b.n	800eeaa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	73fb      	strb	r3, [r7, #15]
    break;
 800eea2:	e002      	b.n	800eeaa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800eea4:	2303      	movs	r3, #3
 800eea6:	73fb      	strb	r3, [r7, #15]
    break;
 800eea8:	bf00      	nop
  }
  return usb_status;
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	607a      	str	r2, [r7, #4]
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	460b      	mov	r3, r1
 800eec2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eec8:	2300      	movs	r3, #0
 800eeca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eed2:	7af9      	ldrb	r1, [r7, #11]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	f7f7 fafb 	bl	80064d2 <HAL_PCD_EP_Transmit>
 800eedc:	4603      	mov	r3, r0
 800eede:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800eee0:	7dbb      	ldrb	r3, [r7, #22]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d816      	bhi.n	800ef14 <USBD_LL_Transmit+0x60>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <USBD_LL_Transmit+0x38>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800eefd 	.word	0x0800eefd
 800eef0:	0800ef03 	.word	0x0800ef03
 800eef4:	0800ef09 	.word	0x0800ef09
 800eef8:	0800ef0f 	.word	0x0800ef0f
    case HAL_OK :
      usb_status = USBD_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	75fb      	strb	r3, [r7, #23]
    break;
 800ef00:	e00b      	b.n	800ef1a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef02:	2303      	movs	r3, #3
 800ef04:	75fb      	strb	r3, [r7, #23]
    break;
 800ef06:	e008      	b.n	800ef1a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	75fb      	strb	r3, [r7, #23]
    break;
 800ef0c:	e005      	b.n	800ef1a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	75fb      	strb	r3, [r7, #23]
    break;
 800ef12:	e002      	b.n	800ef1a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ef14:	2303      	movs	r3, #3
 800ef16:	75fb      	strb	r3, [r7, #23]
    break;
 800ef18:	bf00      	nop
  }
  return usb_status;
 800ef1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	607a      	str	r2, [r7, #4]
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	460b      	mov	r3, r1
 800ef32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef42:	7af9      	ldrb	r1, [r7, #11]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	f7f7 fa6d 	bl	8006426 <HAL_PCD_EP_Receive>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ef50:	7dbb      	ldrb	r3, [r7, #22]
 800ef52:	2b03      	cmp	r3, #3
 800ef54:	d816      	bhi.n	800ef84 <USBD_LL_PrepareReceive+0x60>
 800ef56:	a201      	add	r2, pc, #4	; (adr r2, 800ef5c <USBD_LL_PrepareReceive+0x38>)
 800ef58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef5c:	0800ef6d 	.word	0x0800ef6d
 800ef60:	0800ef73 	.word	0x0800ef73
 800ef64:	0800ef79 	.word	0x0800ef79
 800ef68:	0800ef7f 	.word	0x0800ef7f
    case HAL_OK :
      usb_status = USBD_OK;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	75fb      	strb	r3, [r7, #23]
    break;
 800ef70:	e00b      	b.n	800ef8a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef72:	2303      	movs	r3, #3
 800ef74:	75fb      	strb	r3, [r7, #23]
    break;
 800ef76:	e008      	b.n	800ef8a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	75fb      	strb	r3, [r7, #23]
    break;
 800ef7c:	e005      	b.n	800ef8a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	75fb      	strb	r3, [r7, #23]
    break;
 800ef82:	e002      	b.n	800ef8a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ef84:	2303      	movs	r3, #3
 800ef86:	75fb      	strb	r3, [r7, #23]
    break;
 800ef88:	bf00      	nop
  }
  return usb_status;
 800ef8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efa6:	78fa      	ldrb	r2, [r7, #3]
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f7 fa79 	bl	80064a2 <HAL_PCD_EP_GetRxCount>
 800efb0:	4603      	mov	r3, r0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800efc8:	78fb      	ldrb	r3, [r7, #3]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <HAL_PCDEx_LPM_Callback+0x18>
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d013      	beq.n	800effa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800efd2:	e023      	b.n	800f01c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d007      	beq.n	800efec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800efdc:	f000 f83c 	bl	800f058 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efe0:	4b10      	ldr	r3, [pc, #64]	; (800f024 <HAL_PCDEx_LPM_Callback+0x68>)
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	4a0f      	ldr	r2, [pc, #60]	; (800f024 <HAL_PCDEx_LPM_Callback+0x68>)
 800efe6:	f023 0306 	bic.w	r3, r3, #6
 800efea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fe fbcc 	bl	800d790 <USBD_LL_Resume>
    break;
 800eff8:	e010      	b.n	800f01c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fbaf 	bl	800d764 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	699b      	ldr	r3, [r3, #24]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d005      	beq.n	800f01a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f00e:	4b05      	ldr	r3, [pc, #20]	; (800f024 <HAL_PCDEx_LPM_Callback+0x68>)
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	4a04      	ldr	r2, [pc, #16]	; (800f024 <HAL_PCDEx_LPM_Callback+0x68>)
 800f014:	f043 0306 	orr.w	r3, r3, #6
 800f018:	6113      	str	r3, [r2, #16]
    break;
 800f01a:	bf00      	nop
}
 800f01c:	bf00      	nop
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	e000ed00 	.word	0xe000ed00

0800f028 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f030:	4b03      	ldr	r3, [pc, #12]	; (800f040 <USBD_static_malloc+0x18>)
}
 800f032:	4618      	mov	r0, r3
 800f034:	370c      	adds	r7, #12
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop
 800f040:	200014d8 	.word	0x200014d8

0800f044 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]

}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f058:	b480      	push	{r7}
 800f05a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800f05c:	bf00      	nop
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <_Znwj>:
 800f066:	2801      	cmp	r0, #1
 800f068:	bf38      	it	cc
 800f06a:	2001      	movcc	r0, #1
 800f06c:	b510      	push	{r4, lr}
 800f06e:	4604      	mov	r4, r0
 800f070:	4620      	mov	r0, r4
 800f072:	f000 f859 	bl	800f128 <malloc>
 800f076:	b930      	cbnz	r0, 800f086 <_Znwj+0x20>
 800f078:	f000 f81c 	bl	800f0b4 <_ZSt15get_new_handlerv>
 800f07c:	b908      	cbnz	r0, 800f082 <_Znwj+0x1c>
 800f07e:	f000 f821 	bl	800f0c4 <abort>
 800f082:	4780      	blx	r0
 800f084:	e7f4      	b.n	800f070 <_Znwj+0xa>
 800f086:	bd10      	pop	{r4, pc}

0800f088 <__cxa_pure_virtual>:
 800f088:	b508      	push	{r3, lr}
 800f08a:	f000 f80d 	bl	800f0a8 <_ZSt9terminatev>

0800f08e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f08e:	b508      	push	{r3, lr}
 800f090:	4780      	blx	r0
 800f092:	f000 f817 	bl	800f0c4 <abort>
	...

0800f098 <_ZSt13get_terminatev>:
 800f098:	4b02      	ldr	r3, [pc, #8]	; (800f0a4 <_ZSt13get_terminatev+0xc>)
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	f3bf 8f5b 	dmb	ish
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	20000190 	.word	0x20000190

0800f0a8 <_ZSt9terminatev>:
 800f0a8:	b508      	push	{r3, lr}
 800f0aa:	f7ff fff5 	bl	800f098 <_ZSt13get_terminatev>
 800f0ae:	f7ff ffee 	bl	800f08e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f0b4 <_ZSt15get_new_handlerv>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	; (800f0c0 <_ZSt15get_new_handlerv+0xc>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	f3bf 8f5b 	dmb	ish
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	200016f8 	.word	0x200016f8

0800f0c4 <abort>:
 800f0c4:	b508      	push	{r3, lr}
 800f0c6:	2006      	movs	r0, #6
 800f0c8:	f000 f90a 	bl	800f2e0 <raise>
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	f7f4 fa93 	bl	80035f8 <_exit>
	...

0800f0d4 <__errno>:
 800f0d4:	4b01      	ldr	r3, [pc, #4]	; (800f0dc <__errno+0x8>)
 800f0d6:	6818      	ldr	r0, [r3, #0]
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	20000194 	.word	0x20000194

0800f0e0 <__libc_init_array>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	4d0d      	ldr	r5, [pc, #52]	; (800f118 <__libc_init_array+0x38>)
 800f0e4:	4c0d      	ldr	r4, [pc, #52]	; (800f11c <__libc_init_array+0x3c>)
 800f0e6:	1b64      	subs	r4, r4, r5
 800f0e8:	10a4      	asrs	r4, r4, #2
 800f0ea:	2600      	movs	r6, #0
 800f0ec:	42a6      	cmp	r6, r4
 800f0ee:	d109      	bne.n	800f104 <__libc_init_array+0x24>
 800f0f0:	4d0b      	ldr	r5, [pc, #44]	; (800f120 <__libc_init_array+0x40>)
 800f0f2:	4c0c      	ldr	r4, [pc, #48]	; (800f124 <__libc_init_array+0x44>)
 800f0f4:	f000 f91e 	bl	800f334 <_init>
 800f0f8:	1b64      	subs	r4, r4, r5
 800f0fa:	10a4      	asrs	r4, r4, #2
 800f0fc:	2600      	movs	r6, #0
 800f0fe:	42a6      	cmp	r6, r4
 800f100:	d105      	bne.n	800f10e <__libc_init_array+0x2e>
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	f855 3b04 	ldr.w	r3, [r5], #4
 800f108:	4798      	blx	r3
 800f10a:	3601      	adds	r6, #1
 800f10c:	e7ee      	b.n	800f0ec <__libc_init_array+0xc>
 800f10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f112:	4798      	blx	r3
 800f114:	3601      	adds	r6, #1
 800f116:	e7f2      	b.n	800f0fe <__libc_init_array+0x1e>
 800f118:	0800f418 	.word	0x0800f418
 800f11c:	0800f418 	.word	0x0800f418
 800f120:	0800f418 	.word	0x0800f418
 800f124:	0800f420 	.word	0x0800f420

0800f128 <malloc>:
 800f128:	4b02      	ldr	r3, [pc, #8]	; (800f134 <malloc+0xc>)
 800f12a:	4601      	mov	r1, r0
 800f12c:	6818      	ldr	r0, [r3, #0]
 800f12e:	f000 b82b 	b.w	800f188 <_malloc_r>
 800f132:	bf00      	nop
 800f134:	20000194 	.word	0x20000194

0800f138 <memset>:
 800f138:	4402      	add	r2, r0
 800f13a:	4603      	mov	r3, r0
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d100      	bne.n	800f142 <memset+0xa>
 800f140:	4770      	bx	lr
 800f142:	f803 1b01 	strb.w	r1, [r3], #1
 800f146:	e7f9      	b.n	800f13c <memset+0x4>

0800f148 <sbrk_aligned>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	4e0e      	ldr	r6, [pc, #56]	; (800f184 <sbrk_aligned+0x3c>)
 800f14c:	460c      	mov	r4, r1
 800f14e:	6831      	ldr	r1, [r6, #0]
 800f150:	4605      	mov	r5, r0
 800f152:	b911      	cbnz	r1, 800f15a <sbrk_aligned+0x12>
 800f154:	f000 f88c 	bl	800f270 <_sbrk_r>
 800f158:	6030      	str	r0, [r6, #0]
 800f15a:	4621      	mov	r1, r4
 800f15c:	4628      	mov	r0, r5
 800f15e:	f000 f887 	bl	800f270 <_sbrk_r>
 800f162:	1c43      	adds	r3, r0, #1
 800f164:	d00a      	beq.n	800f17c <sbrk_aligned+0x34>
 800f166:	1cc4      	adds	r4, r0, #3
 800f168:	f024 0403 	bic.w	r4, r4, #3
 800f16c:	42a0      	cmp	r0, r4
 800f16e:	d007      	beq.n	800f180 <sbrk_aligned+0x38>
 800f170:	1a21      	subs	r1, r4, r0
 800f172:	4628      	mov	r0, r5
 800f174:	f000 f87c 	bl	800f270 <_sbrk_r>
 800f178:	3001      	adds	r0, #1
 800f17a:	d101      	bne.n	800f180 <sbrk_aligned+0x38>
 800f17c:	f04f 34ff 	mov.w	r4, #4294967295
 800f180:	4620      	mov	r0, r4
 800f182:	bd70      	pop	{r4, r5, r6, pc}
 800f184:	20001700 	.word	0x20001700

0800f188 <_malloc_r>:
 800f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18c:	1ccd      	adds	r5, r1, #3
 800f18e:	f025 0503 	bic.w	r5, r5, #3
 800f192:	3508      	adds	r5, #8
 800f194:	2d0c      	cmp	r5, #12
 800f196:	bf38      	it	cc
 800f198:	250c      	movcc	r5, #12
 800f19a:	2d00      	cmp	r5, #0
 800f19c:	4607      	mov	r7, r0
 800f19e:	db01      	blt.n	800f1a4 <_malloc_r+0x1c>
 800f1a0:	42a9      	cmp	r1, r5
 800f1a2:	d905      	bls.n	800f1b0 <_malloc_r+0x28>
 800f1a4:	230c      	movs	r3, #12
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b0:	4e2e      	ldr	r6, [pc, #184]	; (800f26c <_malloc_r+0xe4>)
 800f1b2:	f000 f8b1 	bl	800f318 <__malloc_lock>
 800f1b6:	6833      	ldr	r3, [r6, #0]
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	bb34      	cbnz	r4, 800f20a <_malloc_r+0x82>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4638      	mov	r0, r7
 800f1c0:	f7ff ffc2 	bl	800f148 <sbrk_aligned>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	d14d      	bne.n	800f266 <_malloc_r+0xde>
 800f1ca:	6834      	ldr	r4, [r6, #0]
 800f1cc:	4626      	mov	r6, r4
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	d140      	bne.n	800f254 <_malloc_r+0xcc>
 800f1d2:	6823      	ldr	r3, [r4, #0]
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	eb04 0803 	add.w	r8, r4, r3
 800f1dc:	f000 f848 	bl	800f270 <_sbrk_r>
 800f1e0:	4580      	cmp	r8, r0
 800f1e2:	d13a      	bne.n	800f25a <_malloc_r+0xd2>
 800f1e4:	6821      	ldr	r1, [r4, #0]
 800f1e6:	3503      	adds	r5, #3
 800f1e8:	1a6d      	subs	r5, r5, r1
 800f1ea:	f025 0503 	bic.w	r5, r5, #3
 800f1ee:	3508      	adds	r5, #8
 800f1f0:	2d0c      	cmp	r5, #12
 800f1f2:	bf38      	it	cc
 800f1f4:	250c      	movcc	r5, #12
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	4638      	mov	r0, r7
 800f1fa:	f7ff ffa5 	bl	800f148 <sbrk_aligned>
 800f1fe:	3001      	adds	r0, #1
 800f200:	d02b      	beq.n	800f25a <_malloc_r+0xd2>
 800f202:	6823      	ldr	r3, [r4, #0]
 800f204:	442b      	add	r3, r5
 800f206:	6023      	str	r3, [r4, #0]
 800f208:	e00e      	b.n	800f228 <_malloc_r+0xa0>
 800f20a:	6822      	ldr	r2, [r4, #0]
 800f20c:	1b52      	subs	r2, r2, r5
 800f20e:	d41e      	bmi.n	800f24e <_malloc_r+0xc6>
 800f210:	2a0b      	cmp	r2, #11
 800f212:	d916      	bls.n	800f242 <_malloc_r+0xba>
 800f214:	1961      	adds	r1, r4, r5
 800f216:	42a3      	cmp	r3, r4
 800f218:	6025      	str	r5, [r4, #0]
 800f21a:	bf18      	it	ne
 800f21c:	6059      	strne	r1, [r3, #4]
 800f21e:	6863      	ldr	r3, [r4, #4]
 800f220:	bf08      	it	eq
 800f222:	6031      	streq	r1, [r6, #0]
 800f224:	5162      	str	r2, [r4, r5]
 800f226:	604b      	str	r3, [r1, #4]
 800f228:	4638      	mov	r0, r7
 800f22a:	f104 060b 	add.w	r6, r4, #11
 800f22e:	f000 f879 	bl	800f324 <__malloc_unlock>
 800f232:	f026 0607 	bic.w	r6, r6, #7
 800f236:	1d23      	adds	r3, r4, #4
 800f238:	1af2      	subs	r2, r6, r3
 800f23a:	d0b6      	beq.n	800f1aa <_malloc_r+0x22>
 800f23c:	1b9b      	subs	r3, r3, r6
 800f23e:	50a3      	str	r3, [r4, r2]
 800f240:	e7b3      	b.n	800f1aa <_malloc_r+0x22>
 800f242:	6862      	ldr	r2, [r4, #4]
 800f244:	42a3      	cmp	r3, r4
 800f246:	bf0c      	ite	eq
 800f248:	6032      	streq	r2, [r6, #0]
 800f24a:	605a      	strne	r2, [r3, #4]
 800f24c:	e7ec      	b.n	800f228 <_malloc_r+0xa0>
 800f24e:	4623      	mov	r3, r4
 800f250:	6864      	ldr	r4, [r4, #4]
 800f252:	e7b2      	b.n	800f1ba <_malloc_r+0x32>
 800f254:	4634      	mov	r4, r6
 800f256:	6876      	ldr	r6, [r6, #4]
 800f258:	e7b9      	b.n	800f1ce <_malloc_r+0x46>
 800f25a:	230c      	movs	r3, #12
 800f25c:	603b      	str	r3, [r7, #0]
 800f25e:	4638      	mov	r0, r7
 800f260:	f000 f860 	bl	800f324 <__malloc_unlock>
 800f264:	e7a1      	b.n	800f1aa <_malloc_r+0x22>
 800f266:	6025      	str	r5, [r4, #0]
 800f268:	e7de      	b.n	800f228 <_malloc_r+0xa0>
 800f26a:	bf00      	nop
 800f26c:	200016fc 	.word	0x200016fc

0800f270 <_sbrk_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d06      	ldr	r5, [pc, #24]	; (800f28c <_sbrk_r+0x1c>)
 800f274:	2300      	movs	r3, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	602b      	str	r3, [r5, #0]
 800f27c:	f7f4 f9c6 	bl	800360c <_sbrk>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_sbrk_r+0x1a>
 800f284:	682b      	ldr	r3, [r5, #0]
 800f286:	b103      	cbz	r3, 800f28a <_sbrk_r+0x1a>
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20001704 	.word	0x20001704

0800f290 <_raise_r>:
 800f290:	291f      	cmp	r1, #31
 800f292:	b538      	push	{r3, r4, r5, lr}
 800f294:	4604      	mov	r4, r0
 800f296:	460d      	mov	r5, r1
 800f298:	d904      	bls.n	800f2a4 <_raise_r+0x14>
 800f29a:	2316      	movs	r3, #22
 800f29c:	6003      	str	r3, [r0, #0]
 800f29e:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2a6:	b112      	cbz	r2, 800f2ae <_raise_r+0x1e>
 800f2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2ac:	b94b      	cbnz	r3, 800f2c2 <_raise_r+0x32>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 f830 	bl	800f314 <_getpid_r>
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2be:	f000 b817 	b.w	800f2f0 <_kill_r>
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d00a      	beq.n	800f2dc <_raise_r+0x4c>
 800f2c6:	1c59      	adds	r1, r3, #1
 800f2c8:	d103      	bne.n	800f2d2 <_raise_r+0x42>
 800f2ca:	2316      	movs	r3, #22
 800f2cc:	6003      	str	r3, [r0, #0]
 800f2ce:	2001      	movs	r0, #1
 800f2d0:	e7e7      	b.n	800f2a2 <_raise_r+0x12>
 800f2d2:	2400      	movs	r4, #0
 800f2d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2d8:	4628      	mov	r0, r5
 800f2da:	4798      	blx	r3
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e7e0      	b.n	800f2a2 <_raise_r+0x12>

0800f2e0 <raise>:
 800f2e0:	4b02      	ldr	r3, [pc, #8]	; (800f2ec <raise+0xc>)
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	6818      	ldr	r0, [r3, #0]
 800f2e6:	f7ff bfd3 	b.w	800f290 <_raise_r>
 800f2ea:	bf00      	nop
 800f2ec:	20000194 	.word	0x20000194

0800f2f0 <_kill_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d07      	ldr	r5, [pc, #28]	; (800f310 <_kill_r+0x20>)
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	f7f4 f96b 	bl	80035d8 <_kill>
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	d102      	bne.n	800f30c <_kill_r+0x1c>
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	b103      	cbz	r3, 800f30c <_kill_r+0x1c>
 800f30a:	6023      	str	r3, [r4, #0]
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	bf00      	nop
 800f310:	20001704 	.word	0x20001704

0800f314 <_getpid_r>:
 800f314:	f7f4 b958 	b.w	80035c8 <_getpid>

0800f318 <__malloc_lock>:
 800f318:	4801      	ldr	r0, [pc, #4]	; (800f320 <__malloc_lock+0x8>)
 800f31a:	f000 b809 	b.w	800f330 <__retarget_lock_acquire_recursive>
 800f31e:	bf00      	nop
 800f320:	20001708 	.word	0x20001708

0800f324 <__malloc_unlock>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__malloc_unlock+0x8>)
 800f326:	f000 b804 	b.w	800f332 <__retarget_lock_release_recursive>
 800f32a:	bf00      	nop
 800f32c:	20001708 	.word	0x20001708

0800f330 <__retarget_lock_acquire_recursive>:
 800f330:	4770      	bx	lr

0800f332 <__retarget_lock_release_recursive>:
 800f332:	4770      	bx	lr

0800f334 <_init>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	bf00      	nop
 800f338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33a:	bc08      	pop	{r3}
 800f33c:	469e      	mov	lr, r3
 800f33e:	4770      	bx	lr

0800f340 <_fini>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	bf00      	nop
 800f344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f346:	bc08      	pop	{r3}
 800f348:	469e      	mov	lr, r3
 800f34a:	4770      	bx	lr
