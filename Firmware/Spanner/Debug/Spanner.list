
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db2c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800dcb8  0800dcb8  0001dcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd7c  0800dd7c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd7c  0800dd7c  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd84  0800dd84  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800dd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001498  200001fc  0800df8c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  0800df8c  00021694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034501  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000665e  00000000  00000000  0005472d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0005ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  0005cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025949  00000000  00000000  0005eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ce7  00000000  00000000  000844c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c54  00000000  00000000  000ab1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b0c  00000000  00000000  00171e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800dca0 	.word	0x0800dca0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	0800dca0 	.word	0x0800dca0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_ZN4IComC1Ev>:
#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

#include "stddef.h"

class ICom{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <_ZN4IComC1Ev+0x1c>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	0800dd08 	.word	0x0800dd08

080004e4 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
 80004f0:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffe5 	bl	80004c4 <_ZN4IComC1Ev>
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1d18      	adds	r0, r3, #4
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	68b9      	ldr	r1, [r7, #8]
 8000504:	f000 fa02 	bl	800090c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3328      	adds	r3, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	69ba      	ldr	r2, [r7, #24]
 800051e:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	61da      	str	r2, [r3, #28]
		}
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	0800dd18 	.word	0x0800dd18

08000540 <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	705a      	strb	r2, [r3, #1]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	709a      	strb	r2, [r3, #2]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	70da      	strb	r2, [r3, #3]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	711a      	strb	r2, [r3, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	715a      	strb	r2, [r3, #5]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2201      	movs	r2, #1
 8000570:	719a      	strb	r2, [r3, #6]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	71da      	strb	r2, [r3, #7]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	721a      	strb	r2, [r3, #8]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	725a      	strb	r2, [r3, #9]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	729a      	strb	r2, [r3, #10]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	72da      	strb	r2, [r3, #11]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2220      	movs	r2, #32
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	805a      	strh	r2, [r3, #2]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	809a      	strh	r2, [r3, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	80da      	strh	r2, [r3, #6]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	811a      	strh	r2, [r3, #8]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005ca:	815a      	strh	r2, [r3, #10]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2214      	movs	r2, #20
 80005d0:	819a      	strh	r2, [r3, #12]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	81da      	strh	r2, [r3, #14]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80005de:	821a      	strh	r2, [r3, #16]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80005e6:	825a      	strh	r2, [r3, #18]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2232      	movs	r2, #50	; 0x32
 80005ec:	829a      	strh	r2, [r3, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2264      	movs	r2, #100	; 0x64
 80005f2:	82da      	strh	r2, [r3, #22]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fa:	831a      	strh	r2, [r3, #24]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <_ZN11DriveStatusC1Ev>:
#ifndef SRC_STATUS_DRIVESTATUS_H_
#define SRC_STATUS_DRIVESTATUS_H_

#include "stdint.h"

class DriveStatus
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	731a      	strb	r2, [r3, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	741a      	strb	r2, [r3, #16]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZN7AppMainC1Ev>:

extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

AppMain::AppMain()
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af02      	add	r7, sp, #8
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	819a      	strh	r2, [r3, #12]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff7c 	bl	8000540 <_ZN11TaskHandlerC1Ev>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	739a      	strb	r2, [r3, #14]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3310      	adds	r3, #16
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f980 	bl	8001958 <_ZN10RFM95_LoRaC1Ev>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3330      	adds	r3, #48	; 0x30
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
 800066a:	831a      	strh	r2, [r3, #24]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3330      	adds	r3, #48	; 0x30
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff94 	bl	800059e <_ZN13DriveSettingsC1Ev>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	334a      	adds	r3, #74	; 0x4a
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	821a      	strh	r2, [r3, #16]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	334a      	adds	r3, #74	; 0x4a
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffbd 	bl	800060a <_ZN11DriveStatusC1Ev>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	335c      	adds	r3, #92	; 0x5c
 8000694:	4618      	mov	r0, r3
 8000696:	f001 feca 	bl	800242e <_ZN12DriveCommandC1Ev>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	334a      	adds	r3, #74	; 0x4a
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f001 f861 	bl	800176e <_ZN7EncoderC1EP11DriveStatus>
 80006ac:	2030      	movs	r0, #48	; 0x30
 80006ae:	f00d f9ca 	bl	800da46 <_Znwj>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461c      	mov	r4, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3310      	adds	r3, #16
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4603      	mov	r3, r0
 80006d0:	4620      	mov	r0, r4
 80006d2:	f7ff ff07 	bl	80004e4 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	67dc      	str	r4, [r3, #124]	; 0x7c
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3368      	adds	r3, #104	; 0x68
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4623      	mov	r3, r4
 80006fa:	f000 fe35 	bl	8001368 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8000704:	2300      	movs	r3, #0
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	4903      	ldr	r1, [pc, #12]	; (8000718 <_ZN7AppMainC1Ev+0xec>)
 800070a:	f001 f8f9 	bl	8001900 <_ZN3LEDC1EP12GPIO_TypeDeftb>
{

}
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	48000400 	.word	0x48000400

0800071c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	HAL_SPI_MspInit(&hspi1);
 8000724:	4826      	ldr	r0, [pc, #152]	; (80007c0 <_ZN7AppMain7StartupEv+0xa4>)
 8000726:	f002 fc1d 	bl	8002f64 <HAL_SPI_MspInit>

	HAL_TIM_PWM_MspInit(&htim2);
 800072a:	4826      	ldr	r0, [pc, #152]	; (80007c4 <_ZN7AppMain7StartupEv+0xa8>)
 800072c:	f002 fe9e 	bl	800346c <HAL_TIM_PWM_MspInit>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000730:	2104      	movs	r1, #4
 8000732:	4824      	ldr	r0, [pc, #144]	; (80007c4 <_ZN7AppMain7StartupEv+0xa8>)
 8000734:	f007 fef4 	bl	8008520 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <_ZN7AppMain7StartupEv+0xa8>)
 800073c:	f007 fef0 	bl	8008520 <HAL_TIM_PWM_Start>



	//TIM2->CCR1 = 6400;

	TIM2->CCR1 = 6400;
 8000740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000744:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(7000);
 800074a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800074e:	f002 ffdf 	bl	8003710 <HAL_Delay>
	TIM2->CCR1 = 3200;
 8000752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000756:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800075a:	635a      	str	r2, [r3, #52]	; 0x34



	HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f002 ffd7 	bl	8003710 <HAL_Delay>

	if (!rfm95.InitRFM())
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3310      	adds	r3, #16
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fcfa 	bl	8002160 <_ZN10RFM95_LoRa7InitRFMEv>
 800076c:	4603      	mov	r3, r0
 800076e:	f083 0301 	eor.w	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00a      	beq.n	800078e <_ZN7AppMain7StartupEv+0x72>
	{
		error.setError(Error::COM_ERROR);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	330e      	adds	r3, #14
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f88a 	bl	8001898 <_ZN5Error8setErrorENS_11EERROR_CODEE>
		taskHandler.setDriveTaskEnable(false);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f002 f966 	bl	8002a5a <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3310      	adds	r3, #16
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fb21 	bl	8001ddc <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3368      	adds	r3, #104	; 0x68
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fffe 	bl	80017a0 <_ZN7Encoder4initEv>

	HAL_TIM_Base_MspInit(&htim16);
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <_ZN7AppMain7StartupEv+0xac>)
 80007a6:	f002 fe7f 	bl	80034a8 <HAL_TIM_Base_MspInit>

	HAL_TIM_Base_Start_IT(&htim16);
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <_ZN7AppMain7StartupEv+0xac>)
 80007ac:	f007 fe0c 	bl	80083c8 <HAL_TIM_Base_Start_IT>


	Main();
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f80b 	bl	80007cc <_ZN7AppMain4MainEv>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000550 	.word	0x20000550
 80007c4:	2000064c 	.word	0x2000064c
 80007c8:	20000698 	.word	0x20000698

080007cc <_ZN7AppMain4MainEv>:
	taskHandler.setErrorTaskEnable(true);
	taskHandler.setIoUpdateTaskEnable(true);
}

void AppMain::Main()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f93e 	bl	8002a5a <_ZN11TaskHandler18setDriveTaskEnableEb>
	bool init = true;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
	while (1)
	{

		if(init && startupCounter <= 0){
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d012      	beq.n	800080e <_ZN7AppMain4MainEv+0x42>
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <_ZN7AppMain4MainEv+0x13c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dc0e      	bgt.n	800080e <_ZN7AppMain4MainEv+0x42>
			startupCounter = 1;
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <_ZN7AppMain4MainEv+0x13c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
			TIM2->CCR1 = 3400;
 80007f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fa:	f640 5248 	movw	r2, #3400	; 0xd48
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
			taskHandler.setDriveTaskEnable(true);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f002 f928 	bl	8002a5a <_ZN11TaskHandler18setDriveTaskEnableEb>
			init = false;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]
		}


		if (driveStatus.isReset())
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	334a      	adds	r3, #74	; 0x4a
 8000812:	4618      	mov	r0, r3
 8000814:	f001 ff52 	bl	80026bc <_ZN11DriveStatus7isResetEv>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00a      	beq.n	8000834 <_ZN7AppMain4MainEv+0x68>
		{
			drive.Reset();
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3380      	adds	r3, #128	; 0x80
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fdc0 	bl	80013a8 <_ZN5Drive5ResetEv>
			driveStatus.setReset(false);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	334a      	adds	r3, #74	; 0x4a
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff50 	bl	80026d4 <_ZN11DriveStatus8setResetEb>
		}

		if (taskHandler.isADCUpdateTask())
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f8ce 	bl	80029d8 <_ZN11TaskHandler15isADCUpdateTaskEv>
		{
			//read from ADC DMA register
		}

		if (taskHandler.isComTask())
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f866 	bl	8002910 <_ZN11TaskHandler9isComTaskEv>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d009      	beq.n	800085e <_ZN7AppMain4MainEv+0x92>
		{
			rfm95COM->Receive();
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	4798      	blx	r3
		}

		if (taskHandler.isDriveTask())
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f002 f86e 	bl	8002942 <_ZN11TaskHandler11isDriveTaskEv>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d009      	beq.n	8000880 <_ZN7AppMain4MainEv+0xb4>
		{
			encoder.update();
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3368      	adds	r3, #104	; 0x68
 8000870:	4618      	mov	r0, r3
 8000872:	f000 ffcd 	bl	8001810 <_ZN7Encoder6updateEv>
			drive.updateDrive();
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3380      	adds	r3, #128	; 0x80
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fda1 	bl	80013c2 <_ZN5Drive11updateDriveEv>
		}

		if (taskHandler.isErrorTask())
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f876 	bl	8002974 <_ZN11TaskHandler11isErrorTaskEv>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d029      	beq.n	80008e2 <_ZN7AppMain4MainEv+0x116>
		{
			if (driveStatus.getError() != Error::NO_ERROR)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	334a      	adds	r3, #74	; 0x4a
 8000892:	4618      	mov	r0, r3
 8000894:	f001 ff7b 	bl	800278e <_ZN11DriveStatus8getErrorEv>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00e      	beq.n	80008c6 <_ZN7AppMain4MainEv+0xfa>
			{
				drive.Stop();
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3380      	adds	r3, #128	; 0x80
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fe14 	bl	80014da <_ZN5Drive4StopEv>
				taskHandler.setAdcUpdateTaskEnable(false);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f8c0 	bl	8002a3c <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>
				taskHandler.setDriveTaskEnable(false);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 f8ca 	bl	8002a5a <_ZN11TaskHandler18setDriveTaskEnableEb>
			}

			error.error2LED();
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	330e      	adds	r3, #14
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fff4 	bl	80018b8 <_ZN5Error9error2LEDEv>

			if(startupCounter > 0){
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <_ZN7AppMain4MainEv+0x13c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd04      	ble.n	80008e2 <_ZN7AppMain4MainEv+0x116>
				startupCounter--;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <_ZN7AppMain4MainEv+0x13c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <_ZN7AppMain4MainEv+0x13c>)
 80008e0:	6013      	str	r3, [r2, #0]
			}
		}

		if (taskHandler.isIoUpdateTask())
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f85e 	bl	80029a6 <_ZN11TaskHandler14isIoUpdateTaskEv>
		{

		}

		if (taskHandler.isLEDTask())
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 f88c 	bl	8002a0a <_ZN11TaskHandler9isLEDTaskEv>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f43f af74 	beq.w	80007e2 <_ZN7AppMain4MainEv+0x16>
		{
			this->led.Toggle();
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3394      	adds	r3, #148	; 0x94
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f819 	bl	8001936 <_ZN3LED6ToggleEv>
		if(init && startupCounter <= 0){
 8000904:	e76d      	b.n	80007e2 <_ZN7AppMain4MainEv+0x16>
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000

0800090c <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:

#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	609a      	str	r2, [r3, #8]
}
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	221f      	movs	r2, #31
 800094c:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fc6c 	bl	8002230 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2212      	movs	r2, #18
 8000964:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	73da      	strb	r2, [r3, #15]

	switch (addr)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	3b10      	subs	r3, #16
 8000970:	2b10      	cmp	r3, #16
 8000972:	f200 80d3 	bhi.w	8000b1c <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009c1 	.word	0x080009c1
 8000980:	080009df 	.word	0x080009df
 8000984:	080009fd 	.word	0x080009fd
 8000988:	08000a1b 	.word	0x08000a1b
 800098c:	08000a39 	.word	0x08000a39
 8000990:	08000a57 	.word	0x08000a57
 8000994:	08000a73 	.word	0x08000a73
 8000998:	08000a91 	.word	0x08000a91
 800099c:	08000aaf 	.word	0x08000aaf
 80009a0:	08000acd 	.word	0x08000acd
 80009a4:	08000aeb 	.word	0x08000aeb
 80009a8:	08000b1d 	.word	0x08000b1d
 80009ac:	08000b1d 	.word	0x08000b1d
 80009b0:	08000b1d 	.word	0x08000b1d
 80009b4:	08000b1d 	.word	0x08000b1d
 80009b8:	08000b1d 	.word	0x08000b1d
 80009bc:	08000b09 	.word	0x08000b09
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fcde 	bl	800238c <_ZNK13DriveSettings14getTeachTroqueEv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2204      	movs	r2, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4620      	mov	r0, r4
 80009d8:	f002 f84e 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 80009dc:	e0a2      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fcb4 	bl	8002356 <_ZNK13DriveSettings13getTeachSpeedEv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2204      	movs	r2, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4620      	mov	r0, r4
 80009f6:	f002 f83f 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 80009fa:	e093      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fbf7 	bl	80021fa <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4620      	mov	r0, r4
 8000a14:	f002 f830 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a18:	e084      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fbcd 	bl	80021c4 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4620      	mov	r0, r4
 8000a32:	f002 f821 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a36:	e075      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fc6c 	bl	8002320 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f002 f812 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a54:	e066      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fbf1 	bl	8002248 <_ZNK13DriveSettings12getInPosDiffEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f002 f803 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fbfe 	bl	800227e <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2204      	movs	r2, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f001 fff5 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a8e:	e049      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fcac 	bl	80023f8 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f001 ffe6 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000aac:	e03a      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fc82 	bl	80023c2 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f001 ffd7 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000aca:	e02b      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fbec 	bl	80022b4 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f001 ffc8 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ae8:	e01c      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fbf8 	bl	80022ea <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4620      	mov	r0, r4
 8000b02:	f001 ffb9 	bl	8002a78 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b06:	e00d      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fb8f 	bl	8002230 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	741a      	strb	r2, [r3, #16]
			break;
 8000b1a:	e003      	b.n	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	221d      	movs	r2, #29
 8000b20:	735a      	strb	r2, [r3, #13]
			break;
 8000b22:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	330c      	adds	r3, #12
 8000b28:	2206      	movs	r2, #6
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 fac9 	bl	80010c4 <_ZN7BaseCOM4CRC8EPhh>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	330c      	adds	r3, #12
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop

08000b48 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	221f      	movs	r2, #31
 8000b58:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fb66 	bl	8002230 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2213      	movs	r2, #19
 8000b70:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	78fa      	ldrb	r2, [r7, #3]
 8000b76:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d86e      	bhi.n	8000c5e <_ZN7BaseCOM9GetStatusEh+0x116>
 8000b80:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b86:	bf00      	nop
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bc1 	.word	0x08000bc1
 8000b90:	08000bd5 	.word	0x08000bd5
 8000b94:	08000be9 	.word	0x08000be9
 8000b98:	08000bfd 	.word	0x08000bfd
 8000b9c:	08000c11 	.word	0x08000c11
 8000ba0:	08000c25 	.word	0x08000c25
 8000ba4:	08000c39 	.word	0x08000c39
 8000ba8:	08000c4d 	.word	0x08000c4d
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 fcf7 	bl	80025a4 <_ZN11DriveStatus7isCloseEv>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	741a      	strb	r2, [r3, #16]
			break;
 8000bbe:	e052      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fd10 	bl	80025ea <_ZN11DriveStatus6isOpenEv>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	741a      	strb	r2, [r3, #16]
			break;
 8000bd2:	e048      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fdb5 	bl	8002748 <_ZN11DriveStatus7isTeachEv>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	741a      	strb	r2, [r3, #16]
			break;
 8000be6:	e03e      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fd65 	bl	80026bc <_ZN11DriveStatus7isResetEv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	741a      	strb	r2, [r3, #16]
			break;
 8000bfa:	e034      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fd38 	bl	8002676 <_ZN11DriveStatus8isEnableEv>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	741a      	strb	r2, [r3, #16]
			break;
 8000c0e:	e02a      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fd0b 	bl	8002630 <_ZN11DriveStatus9isDisableEv>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	741a      	strb	r2, [r3, #16]
			break;
 8000c22:	e020      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fd6a 	bl	8002702 <_ZN11DriveStatus6isStopEv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	741a      	strb	r2, [r3, #16]
			break;
 8000c36:	e016      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fda6 	bl	800278e <_ZN11DriveStatus8getErrorEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	741a      	strb	r2, [r3, #16]
			break;
 8000c4a:	e00c      	b.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fda8 	bl	80027a6 <_ZNK11DriveStatus9getStatusEv>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	221d      	movs	r2, #29
 8000c62:	731a      	strb	r2, [r3, #12]
			break;
 8000c64:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	330c      	adds	r3, #12
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 fa28 	bl	80010c4 <_ZN7BaseCOM4CRC8EPhh>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	330c      	adds	r3, #12
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZN7BaseCOM11SetSettingsEPh>:
}



void BaseCOM::SetSettings(uint8_t *data)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3303      	adds	r3, #3
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3b10      	subs	r3, #16
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	f200 80f6 	bhi.w	8000e90 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000ca4:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000cd9 	.word	0x08000cd9
 8000cb0:	08000d01 	.word	0x08000d01
 8000cb4:	08000d29 	.word	0x08000d29
 8000cb8:	08000d51 	.word	0x08000d51
 8000cbc:	08000e19 	.word	0x08000e19
 8000cc0:	08000d79 	.word	0x08000d79
 8000cc4:	08000da1 	.word	0x08000da1
 8000cc8:	08000e41 	.word	0x08000e41
 8000ccc:	08000e69 	.word	0x08000e69
 8000cd0:	08000dc9 	.word	0x08000dc9
 8000cd4:	08000df1 	.word	0x08000df1
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3305      	adds	r3, #5
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	01db      	lsls	r3, r3, #7
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fb53 	bl	80023a4 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000cfe:	e0c8      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3305      	adds	r3, #5
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	01db      	lsls	r3, r3, #7
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 fb24 	bl	800236e <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000d26:	e0b4      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	3305      	adds	r3, #5
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	01db      	lsls	r3, r3, #7
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	3304      	adds	r3, #4
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	89fa      	ldrh	r2, [r7, #14]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fa62 	bl	8002212 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000d4e:	e0a0      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3305      	adds	r3, #5
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	01db      	lsls	r3, r3, #7
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	89fa      	ldrh	r2, [r7, #14]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fa33 	bl	80021dc <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000d76:	e08c      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3305      	adds	r3, #5
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3304      	adds	r3, #4
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	89fa      	ldrh	r2, [r7, #14]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fa61 	bl	8002260 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8000d9e:	e078      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3305      	adds	r3, #5
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	3304      	adds	r3, #4
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fa68 	bl	8002296 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 8000dc6:	e064      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	3305      	adds	r3, #5
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	89fa      	ldrh	r2, [r7, #14]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fa6f 	bl	80022cc <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8000dee:	e050      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3305      	adds	r3, #5
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	89fa      	ldrh	r2, [r7, #14]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fa76 	bl	8002302 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 8000e16:	e03c      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3305      	adds	r3, #5
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3304      	adds	r3, #4
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	89fa      	ldrh	r2, [r7, #14]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fa7d 	bl	8002338 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 8000e3e:	e028      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3305      	adds	r3, #5
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	89fa      	ldrh	r2, [r7, #14]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fad5 	bl	8002410 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 8000e66:	e014      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3305      	adds	r3, #5
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	01db      	lsls	r3, r3, #7
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3304      	adds	r3, #4
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	89fa      	ldrh	r2, [r7, #14]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 faa6 	bl	80023da <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8000e8e:	e000      	b.n	8000e92 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8000e90:	bf00      	nop
	}
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop

08000e9c <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3303      	adds	r3, #3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d879      	bhi.n	8000fa6 <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8000eb2:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000ed5 	.word	0x08000ed5
 8000ebc:	08000ef3 	.word	0x08000ef3
 8000ec0:	08000f11 	.word	0x08000f11
 8000ec4:	08000f2f 	.word	0x08000f2f
 8000ec8:	08000f4d 	.word	0x08000f4d
 8000ecc:	08000f6b 	.word	0x08000f6b
 8000ed0:	08000f89 	.word	0x08000f89
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	2300      	movne	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f001 fb66 	bl	80025bc <_ZN11DriveStatus8setCloseEb>
			break;
 8000ef0:	e05a      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f001 fb7a 	bl	8002602 <_ZN11DriveStatus7setOpenEb>
			break;
 8000f0e:	e04b      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	bf0c      	ite	eq
 8000f1e:	2301      	moveq	r3, #1
 8000f20:	2300      	movne	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f001 fc1a 	bl	8002760 <_ZN11DriveStatus8setTeachEb>
			break;
 8000f2c:	e03c      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3304      	adds	r3, #4
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4619      	mov	r1, r3
 8000f44:	4610      	mov	r0, r2
 8000f46:	f001 fbc5 	bl	80026d4 <_ZN11DriveStatus8setResetEb>
			break;
 8000f4a:	e02d      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3304      	adds	r3, #4
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f001 fb93 	bl	800268e <_ZN11DriveStatus9setEnableEb>
			break;
 8000f68:	e01e      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	bf0c      	ite	eq
 8000f78:	2301      	moveq	r3, #1
 8000f7a:	2300      	movne	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f001 fb61 	bl	8002648 <_ZN11DriveStatus10setDisableEb>
			break;
 8000f86:	e00f      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f001 fbbb 	bl	800271a <_ZN11DriveStatus7setStopEb>
			break;
 8000fa4:	e000      	b.n	8000fa8 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8000fa6:	bf00      	nop
	}
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d879      	bhi.n	80010ba <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fe9 	.word	0x08000fe9
 8000fd0:	08001007 	.word	0x08001007
 8000fd4:	08001025 	.word	0x08001025
 8000fd8:	08001043 	.word	0x08001043
 8000fdc:	08001061 	.word	0x08001061
 8000fe0:	0800107f 	.word	0x0800107f
 8000fe4:	0800109d 	.word	0x0800109d
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f001 fa4a 	bl	8002498 <_ZN12DriveCommand8setCloseEb>
			break;
 8001004:	e05a      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fa56 	bl	80024ce <_ZN12DriveCommand7setOpenEb>
			break;
 8001022:	e04b      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3304      	adds	r3, #4
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f001 fa9e 	bl	800257c <_ZN12DriveCommand8setTeachEb>
			break;
 8001040:	e03c      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	4610      	mov	r0, r2
 800105a:	f001 fa65 	bl	8002528 <_ZN12DriveCommand8setResetEb>
			break;
 800105e:	e02d      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3304      	adds	r3, #4
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f001 fa47 	bl	800250a <_ZN12DriveCommand9setEnableEb>
			break;
 800107c:	e01e      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3304      	adds	r3, #4
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 fa29 	bl	80024ec <_ZN12DriveCommand10setDisableEb>
			break;
 800109a:	e00f      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3304      	adds	r3, #4
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f001 fa53 	bl	800255e <_ZN12DriveCommand7setStopEb>
			break;
 80010b8:	e000      	b.n	80010bc <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 80010ba:	bf00      	nop
	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d222      	bcs.n	8001128 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4413      	add	r3, r2
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	7ffb      	ldrb	r3, [r7, #31]
 80010ec:	4053      	eors	r3, r2
 80010ee:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d812      	bhi.n	8001120 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80010fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da07      	bge.n	8001112 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800110c:	b25b      	sxtb	r3, r3
 800110e:	77fb      	strb	r3, [r7, #31]
 8001110:	e002      	b.n	8001118 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e7e9      	b.n	80010f4 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	3301      	adds	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	e7d8      	b.n	80010da <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001128:	7ffb      	ldrb	r3, [r7, #31]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	4613      	mov	r3, r2
 8001142:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 800114a:	2300      	movs	r3, #0
 800114c:	e015      	b.n	800117a <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fce6 	bl	8001b26 <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, 7);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6998      	ldr	r0, [r3, #24]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2207      	movs	r2, #7
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	4798      	blx	r3
	rfm95->endPacket();
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcf8 	bl	8001b68 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	4613      	mov	r3, r2
 8001190:	71fb      	strb	r3, [r7, #7]

	uint8_t* txDataTemp;

	uint8_t rxData[7];

	uint8_t packetSize = rfm95->parsePacket();
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fd07 	bl	8001bac <_ZN10RFM95_LoRa11parsePacketEi>
 800119e:	4603      	mov	r3, r0
 80011a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 80011a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80d7 	beq.w	800135c <_ZN8RFM95Com7ReceiveEPhh+0x1d8>
	{
		uint8_t counter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3308      	adds	r3, #8
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4610      	mov	r0, r2
 80011c4:	4798      	blx	r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01d      	beq.n	8001212 <_ZN8RFM95Com7ReceiveEPhh+0x8e>
		{
			rxData[counter] = rfm95->read();
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	330c      	adds	r3, #12
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4610      	mov	r0, r2
 80011e6:	4798      	blx	r3
 80011e8:	4602      	mov	r2, r0
 80011ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011f4:	440b      	add	r3, r1
 80011f6:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 80011fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d901      	bls.n	8001206 <_ZN8RFM95Com7ReceiveEPhh+0x82>
			{
				return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e0ab      	b.n	800135e <_ZN8RFM95Com7ReceiveEPhh+0x1da>
			}
			counter++;
 8001206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800120a:	3301      	adds	r3, #1
 800120c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001210:	e7d0      	b.n	80011b4 <_ZN8RFM95Com7ReceiveEPhh+0x30>
		}

		//check CRC
		if (CRC8(rxData, 6) != rxData[6])
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	f107 0118 	add.w	r1, r7, #24
 800121a:	2206      	movs	r2, #6
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff51 	bl	80010c4 <_ZN7BaseCOM4CRC8EPhh>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	7fbb      	ldrb	r3, [r7, #30]
 8001228:	429a      	cmp	r2, r3
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <_ZN8RFM95Com7ReceiveEPhh+0xb6>
		{
			//error crc error //ToDO
			return false;
 8001236:	2300      	movs	r3, #0
 8001238:	e091      	b.n	800135e <_ZN8RFM95Com7ReceiveEPhh+0x1da>
		}

		uint8_t txData[] =
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f8c3 2003 	str.w	r2, [r3, #3]
 8001246:	231f      	movs	r3, #31
 8001248:	743b      	strb	r3, [r7, #16]
 800124a:	2301      	movs	r3, #1
 800124c:	753b      	strb	r3, [r7, #20]
 800124e:	2301      	movs	r3, #1
 8001250:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 ffea 	bl	8002230 <_ZNK13DriveSettings16getDeviceAddressEv>
 800125c:	4603      	mov	r3, r0
				rxData[2],
				rxData[3],
				0x01,
				0x01,
				0x00
		};
 800125e:	747b      	strb	r3, [r7, #17]
				rxData[2],
 8001260:	7ebb      	ldrb	r3, [r7, #26]
		};
 8001262:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 8001264:	7efb      	ldrb	r3, [r7, #27]
		};
 8001266:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3304      	adds	r3, #4
 800126c:	f107 0110 	add.w	r1, r7, #16
 8001270:	2206      	movs	r2, #6
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff26 	bl	80010c4 <_ZN7BaseCOM4CRC8EPhh>
 8001278:	4603      	mov	r3, r0
 800127a:	75bb      	strb	r3, [r7, #22]

		switch (rxData[2])
 800127c:	7ebb      	ldrb	r3, [r7, #26]
 800127e:	3b01      	subs	r3, #1
 8001280:	2b12      	cmp	r3, #18
 8001282:	d85f      	bhi.n	8001344 <_ZN8RFM95Com7ReceiveEPhh+0x1c0>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <_ZN8RFM95Com7ReceiveEPhh+0x108>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012d9 	.word	0x080012d9
 8001290:	080012f1 	.word	0x080012f1
 8001294:	08001309 	.word	0x08001309
 8001298:	08001345 	.word	0x08001345
 800129c:	08001345 	.word	0x08001345
 80012a0:	08001345 	.word	0x08001345
 80012a4:	08001345 	.word	0x08001345
 80012a8:	08001345 	.word	0x08001345
 80012ac:	08001345 	.word	0x08001345
 80012b0:	08001345 	.word	0x08001345
 80012b4:	08001345 	.word	0x08001345
 80012b8:	08001345 	.word	0x08001345
 80012bc:	08001345 	.word	0x08001345
 80012c0:	08001345 	.word	0x08001345
 80012c4:	08001345 	.word	0x08001345
 80012c8:	08001345 	.word	0x08001345
 80012cc:	08001321 	.word	0x08001321
 80012d0:	08001345 	.word	0x08001345
 80012d4:	08001333 	.word	0x08001333
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3304      	adds	r3, #4
 80012dc:	f107 0218 	add.w	r2, r7, #24
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcd0 	bl	8000c88 <_ZN7BaseCOM11SetSettingsEPh>
				txDataTemp = txData;
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80012ee:	e02e      	b.n	800134e <_ZN8RFM95Com7ReceiveEPhh+0x1ca>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3304      	adds	r3, #4
 80012f4:	f107 0218 	add.w	r2, r7, #24
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe58 	bl	8000fb0 <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001306:	e022      	b.n	800134e <_ZN8RFM95Com7ReceiveEPhh+0x1ca>
			case SEND_STATUS:
				this->SetStatus(rxData);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3304      	adds	r3, #4
 800130c:	f107 0218 	add.w	r2, r7, #24
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fdc2 	bl	8000e9c <_ZN7BaseCOM9SetStatusEPh>
				txDataTemp = txData;
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800131e:	e016      	b.n	800134e <_ZN8RFM95Com7ReceiveEPhh+0x1ca>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3304      	adds	r3, #4
 8001324:	7efa      	ldrb	r2, [r7, #27]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fb07 	bl	800093c <_ZN7BaseCOM11GetSettingsEh>
 800132e:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 8001330:	e00d      	b.n	800134e <_ZN8RFM95Com7ReceiveEPhh+0x1ca>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	7efa      	ldrb	r2, [r7, #27]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fc04 	bl	8000b48 <_ZN7BaseCOM9GetStatusEh>
 8001340:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 8001342:	e004      	b.n	800134e <_ZN8RFM95Com7ReceiveEPhh+0x1ca>
			default:
				//not sported command
				txData[4] = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	757b      	strb	r3, [r7, #21]
				break;
 800134c:	bf00      	nop
		}


		Transmitt(txDataTemp , 7);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2207      	movs	r2, #7
 8001356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	4798      	blx	r3
	}
	return true;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop

08001368 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>:
 */

#include "Drive.h"
#include "../IO/IO.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus,
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand, Encoder *encoder)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	745a      	strb	r2, [r3, #17]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	74da      	strb	r2, [r3, #19]
{
	this->driveSettings = driveSettings;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	60da      	str	r2, [r3, #12]
}
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZN5Drive5ResetEv>:

void Drive::Reset()
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	isDriveStoped = false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	74da      	strb	r2, [r3, #19]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN5Drive11updateDriveEv>:

void Drive::updateDrive()
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	switch (driveMode)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7c1b      	ldrb	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <_ZN5Drive11updateDriveEv+0x1c>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <_ZN5Drive11updateDriveEv+0x22>
	{
		case Drive::OP_MODE:
			OpMode();
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f809 	bl	80013ee <_ZN5Drive6OpModeEv>
			break;
 80013dc:	e003      	b.n	80013e6 <_ZN5Drive11updateDriveEv+0x24>
		case Drive::TEACH_MODE:
			TeachMode();
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f88a 	bl	80014f8 <_ZN5Drive9TeachModeEv>
		default:
			break;
 80013e4:	bf00      	nop
	}
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 80013ee:	b590      	push	{r4, r7, lr}
 80013f0:	b087      	sub	sp, #28
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

	if (isDriveStoped)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7cdb      	ldrb	r3, [r3, #19]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <_ZN5Drive6OpModeEv+0x18>
	{
		Stop();
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f86b 	bl	80014da <_ZN5Drive4StopEv>
		return;
 8001404:	e066      	b.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
	}

	int32_t encoderValue = encoder->GetValue();
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f9f3 	bl	80017f6 <_ZN7Encoder8GetValueEv>
 8001410:	6178      	str	r0, [r7, #20]
	uint16_t posOut = driveSettings->getOpeningDistance();
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 ff31 	bl	800227e <_ZNK13DriveSettings18getOpeningDistanceEv>
 800141c:	4603      	mov	r3, r0
 800141e:	827b      	strh	r3, [r7, #18]
	uint16_t posDiff = driveSettings->getInPosDiff();
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 ff0f 	bl	8002248 <_ZNK13DriveSettings12getInPosDiffEv>
 800142a:	4603      	mov	r3, r0
 800142c:	823b      	strh	r3, [r7, #16]

	if (driveCommand->isStop())
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f001 f887 	bl	8002546 <_ZN12DriveCommand6isStopEv>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <_ZN5Drive6OpModeEv+0x58>
	{
		isDriveStoped = true;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	74da      	strb	r2, [r3, #19]
 8001444:	e046      	b.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
	}
	else if (driveCommand->isClose())
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f818 	bl	8002480 <_ZN12DriveCommand7isCloseEv>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d039      	beq.n	80014ca <_ZN5Drive6OpModeEv+0xdc>
	{
		int32_t posAsMM = encoderValue * GEAR_RATIO;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	60fb      	str	r3, [r7, #12]
		if (posAsMM < posDiff || posAsMM > -posDiff)
 800145a:	8a3b      	ldrh	r3, [r7, #16]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	db38      	blt.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
 8001462:	8a3b      	ldrh	r3, [r7, #16]
 8001464:	425b      	negs	r3, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	dc33      	bgt.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
		{
			//in position
		}
		else if (posAsMM > posDiff)
 800146c:	8a3b      	ldrh	r3, [r7, #16]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	dd12      	ble.n	800149a <_ZN5Drive6OpModeEv+0xac>
		{
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 febe 	bl	80021fa <_ZNK13DriveSettings17getClampingTorqueEv>
 800147e:	4603      	mov	r3, r0
 8001480:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 8001486:	4618      	mov	r0, r3
 8001488:	f000 feb7 	bl	80021fa <_ZNK13DriveSettings17getClampingTorqueEv>
 800148c:	4603      	mov	r3, r0
 800148e:	4622      	mov	r2, r4
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f93a 	bl	800170c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001498:	e01c      	b.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
		}
		else if (posAsMM < -posDiff)
 800149a:	8a3b      	ldrh	r3, [r7, #16]
 800149c:	425b      	negs	r3, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	da17      	bge.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
		{
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fea6 	bl	80021fa <_ZNK13DriveSettings17getClampingTorqueEv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fe9f 	bl	80021fa <_ZNK13DriveSettings17getClampingTorqueEv>
 80014bc:	4603      	mov	r3, r0
 80014be:	4622      	mov	r2, r4
 80014c0:	2101      	movs	r1, #1
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f922 	bl	800170c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 80014c8:	e004      	b.n	80014d4 <_ZN5Drive6OpModeEv+0xe6>
		}

	}
	else if (driveCommand->isOpen())
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fff1 	bl	80024b6 <_ZN12DriveCommand6isOpenEv>
	{

	}

}
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}

080014da <_ZN5Drive4StopEv>:
}



void Drive::Stop()
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0;
	static bool InOut = 0;
	currentState = nextState;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7c9a      	ldrb	r2, [r3, #18]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	745a      	strb	r2, [r3, #17]

	switch (currentState)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7c5b      	ldrb	r3, [r3, #17]
 800150c:	2b07      	cmp	r3, #7
 800150e:	f200 80ec 	bhi.w	80016ea <_ZN5Drive9TeachModeEv+0x1f2>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <_ZN5Drive9TeachModeEv+0x20>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001539 	.word	0x08001539
 800151c:	0800155b 	.word	0x0800155b
 8001520:	080016ad 	.word	0x080016ad
 8001524:	08001687 	.word	0x08001687
 8001528:	080016d3 	.word	0x080016d3
 800152c:	0800157d 	.word	0x0800157d
 8001530:	08001601 	.word	0x08001601
 8001534:	08001667 	.word	0x08001667
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == GPIO_PIN_RESET)
 8001538:	2120      	movs	r1, #32
 800153a:	4871      	ldr	r0, [pc, #452]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 800153c:	f003 fb46 	bl	8004bcc <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80ce 	beq.w	80016ee <_ZN5Drive9TeachModeEv+0x1f6>
			{
				nextState = TEACH_RDY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	749a      	strb	r2, [r3, #18]
			}
			break;
 8001558:	e0c9      	b.n	80016ee <_ZN5Drive9TeachModeEv+0x1f6>
		case TEACH_RDY:
			if (IS_EXT_SWITCH)
 800155a:	2120      	movs	r1, #32
 800155c:	4868      	ldr	r0, [pc, #416]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 800155e:	f003 fb35 	bl	8004bcc <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80bf 	beq.w	80016f2 <_ZN5Drive9TeachModeEv+0x1fa>
			{
				nextState = CHECK_CLK;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2205      	movs	r2, #5
 8001578:	749a      	strb	r2, [r3, #18]
			}
			break;
 800157a:	e0ba      	b.n	80016f2 <_ZN5Drive9TeachModeEv+0x1fa>
		case CHECK_CLK:
			if (counter > 2 && IS_EXT_SWITCH)
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d908      	bls.n	8001596 <_ZN5Drive9TeachModeEv+0x9e>
 8001584:	2120      	movs	r1, #32
 8001586:	485e      	ldr	r0, [pc, #376]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 8001588:	f003 fb20 	bl	8004bcc <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_ZN5Drive9TeachModeEv+0x9e>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <_ZN5Drive9TeachModeEv+0xa0>
 8001596:	2300      	movs	r3, #0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d011      	beq.n	80015c0 <_ZN5Drive9TeachModeEv+0xc8>
			{
				if (InOut)
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <_ZN5Drive9TeachModeEv+0x210>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <_ZN5Drive9TeachModeEv+0xb4>
				{
					nextState = DRIVE_IN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	749a      	strb	r2, [r3, #18]
 80015aa:	e002      	b.n	80015b2 <_ZN5Drive9TeachModeEv+0xba>
				}
				else
				{
					nextState = DRIVE_OUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	749a      	strb	r2, [r3, #18]
				}
				InOut = !InOut;
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <_ZN5Drive9TeachModeEv+0x210>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <_ZN5Drive9TeachModeEv+0x210>)
 80015be:	701a      	strb	r2, [r3, #0]
			}

			if (!IS_EXT_SWITCH)
 80015c0:	2120      	movs	r1, #32
 80015c2:	484f      	ldr	r0, [pc, #316]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 80015c4:	f003 fb02 	bl	8004bcc <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <_ZN5Drive9TeachModeEv+0xe6>
			{
				nextState = CLK_1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2206      	movs	r2, #6
 80015dc:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7c9a      	ldrb	r2, [r3, #18]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7c5b      	ldrb	r3, [r3, #17]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d003      	beq.n	80015f2 <_ZN5Drive9TeachModeEv+0xfa>
			{
				counter = 0;
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 80015f0:	e082      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 80015fc:	701a      	strb	r2, [r3, #0]
			break;
 80015fe:	e07b      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
		case CLK_1:
			if (counter > 2 && !IS_EXT_SWITCH)
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d908      	bls.n	800161a <_ZN5Drive9TeachModeEv+0x122>
 8001608:	2120      	movs	r1, #32
 800160a:	483d      	ldr	r0, [pc, #244]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 800160c:	f003 fade 	bl	8004bcc <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <_ZN5Drive9TeachModeEv+0x122>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <_ZN5Drive9TeachModeEv+0x124>
 800161a:	2300      	movs	r3, #0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <_ZN5Drive9TeachModeEv+0x12e>
			{
				nextState = TEACH_RDY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	749a      	strb	r2, [r3, #18]
			}

			if (IS_EXT_SWITCH)
 8001626:	2120      	movs	r1, #32
 8001628:	4835      	ldr	r0, [pc, #212]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 800162a:	f003 facf 	bl	8004bcc <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = CLK_2;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2207      	movs	r2, #7
 8001642:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7c9a      	ldrb	r2, [r3, #18]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7c5b      	ldrb	r3, [r3, #17]
 800164c:	429a      	cmp	r2, r3
 800164e:	d003      	beq.n	8001658 <_ZN5Drive9TeachModeEv+0x160>
			{
				counter = 0;
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 8001656:	e04f      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <_ZN5Drive9TeachModeEv+0x20c>)
 8001662:	701a      	strb	r2, [r3, #0]
			break;
 8001664:	e048      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
		case CLK_2:
			if (IS_EXT_SWITCH)
 8001666:	2120      	movs	r1, #32
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <_ZN5Drive9TeachModeEv+0x208>)
 800166a:	f003 faaf 	bl	8004bcc <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03b      	beq.n	80016f6 <_ZN5Drive9TeachModeEv+0x1fe>
			{
				nextState = TEACH_END;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2204      	movs	r2, #4
 8001682:	749a      	strb	r2, [r3, #18]
			}

			break;
 8001684:	e037      	b.n	80016f6 <_ZN5Drive9TeachModeEv+0x1fe>
		case DRIVE_IN:
			//move drive in
			MoveDrive(IN, driveSettings->getTeachTroque(),
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fe7e 	bl	800238c <_ZNK13DriveSettings14getTeachTroqueEv>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
			MoveDrive(IN, driveSettings->getTeachTroque(),
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fe5c 	bl	8002356 <_ZNK13DriveSettings13getTeachSpeedEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	4622      	mov	r2, r4
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f831 	bl	800170c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 80016aa:	e025      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
		case DRIVE_OUT:
			//move drive out
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fe6b 	bl	800238c <_ZNK13DriveSettings14getTeachTroqueEv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fe49 	bl	8002356 <_ZNK13DriveSettings13getTeachSpeedEv>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4622      	mov	r2, r4
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f81e 	bl	800170c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 80016d0:	e012      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f880 	bl	80017dc <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 ff4a 	bl	800257c <_ZN12DriveCommand8setTeachEb>
			break;
 80016e8:	e006      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
		default:
			break;
 80016ea:	bf00      	nop
 80016ec:	e004      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016ee:	bf00      	nop
 80016f0:	e002      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016f2:	bf00      	nop
 80016f4:	e000      	b.n	80016f8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016f6:	bf00      	nop
	}

}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	48000400 	.word	0x48000400
 8001704:	20000218 	.word	0x20000218
 8001708:	20000219 	.word	0x20000219

0800170c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
{
	this->driveMode = driveMode;
}

void Drive::MoveDrive(DIRECTION direction, uint16_t torque, uint16_t speed)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	72fb      	strb	r3, [r7, #11]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]

	switch (direction)
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x26>
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00b      	beq.n	8001748 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x3c>
 8001730:	e015      	b.n	800175e <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x52>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = 3200;	//direction
 8001732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001736:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800173a:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000;	//speed
 800173c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001740:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001746:	e00e      	b.n	8001766 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		case DIRECTION::OUT:
			TIM2->CCR2 = 6400;	//direction
 8001748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001750:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000; //speed
 8001752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001756:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800175a:	635a      	str	r2, [r3, #52]	; 0x34

			break;
 800175c:	e003      	b.n	8001766 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		default:
			Stop();
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff febb 	bl	80014da <_ZN5Drive4StopEv>
			break;
 8001764:	bf00      	nop
	}

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_ZN7EncoderC1EP11DriveStatus>:
 *      Author: marce
 */

#include "Encoder.h"

Encoder::Encoder(DriveStatus *driveStatus)
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <_ZN7Encoder4initEv+0x38>)
 80017aa:	f001 fe13 	bl	80033d4 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 80017ae:	2104      	movs	r1, #4
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <_ZN7Encoder4initEv+0x38>)
 80017b2:	f007 f839 	bl	8008828 <HAL_TIM_Encoder_Start>

	cValue = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
	lValue = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
	return true;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000600 	.word	0x20000600

080017dc <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN7Encoder8GetValueEv>:

int32_t Encoder::GetValue()
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return this->encoderValue;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_ZN7Encoder6updateEv>:

bool Encoder::update()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <_ZN7Encoder6updateEv+0x84>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	1ad2      	subs	r2, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001838:	da06      	bge.n	8001848 <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001842:	33ff      	adds	r3, #255	; 0xff
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60d3      	str	r3, [r2, #12]
	}

	//backwards overflow
	if (deltaValue > 32768)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001850:	dd06      	ble.n	8001860 <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800185a:	3bff      	subs	r3, #255	; 0xff
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f000 ffb7 	bl	80027f6 <_ZN11DriveStatus11setPositionEt>

	return true;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012c00 	.word	0x40012c00

08001898 <_ZN5Error8setErrorENS_11EERROR_CODEE>:
#include "Error.h"
#include "main.h"
#include "gpio.h"


void Error::setError(EERROR_CODE error) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	this->errorCode = error;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_ZN5Error9error2LEDEv>:
void Error::resetError() {
	this->errorCode = EERROR_CODE::NO_ERROR;
}


void Error::error2LED() {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms
	static uint8_t errorCounter = 0;
	static bool risingEdge = 0;

	if(errorCode != NO_ERROR ){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d010      	beq.n	80018ea <_ZN5Error9error2LEDEv+0x32>

		if(risingEdge){
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <_ZN5Error9error2LEDEv+0x40>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00c      	beq.n	80018ea <_ZN5Error9error2LEDEv+0x32>
			}else{
				//reset LED Error
			}

			//increment error counter by 1
			errorCounter++;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <_ZN5Error9error2LEDEv+0x44>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_ZN5Error9error2LEDEv+0x44>)
 80018da:	701a      	strb	r2, [r3, #0]


			if(errorCounter > 7){
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_ZN5Error9error2LEDEv+0x44>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	d902      	bls.n	80018ea <_ZN5Error9error2LEDEv+0x32>
				errorCounter = 0;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_ZN5Error9error2LEDEv+0x44>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
			}

		}
	}
	risingEdge != risingEdge;
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2000021b 	.word	0x2000021b
 80018fc:	2000021a 	.word	0x2000021a

08001900 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	460b      	mov	r3, r1
 8001910:	80fb      	strh	r3, [r7, #6]
 8001912:	4613      	mov	r3, r2
 8001914:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	797a      	ldrb	r2, [r7, #5]
 8001926:	719a      	strb	r2, [r3, #6]
}
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_ZN3LED6ToggleEv>:
}

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f003 f96f 	bl	8004c2c <HAL_GPIO_TogglePin>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
{

}
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	0800dd28 	.word	0x0800dd28

08001990 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2110      	movs	r1, #16
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f003 f92c 	bl	8004bfc <HAL_GPIO_WritePin>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2110      	movs	r1, #16
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f003 f91e 	bl	8004bfc <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2108      	movs	r1, #8
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f003 f910 	bl	8004bfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f001 fe97 	bl	8003710 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2108      	movs	r1, #8
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f003 f907 	bl	8004bfc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80019ee:	2005      	movs	r0, #5
 80019f0:	f001 fe8e 	bl	8003710 <HAL_Delay>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	733b      	strb	r3, [r7, #12]
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb8 	bl	8001990 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001a20:	f107 010c 	add.w	r1, r7, #12
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	2202      	movs	r2, #2
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001a2a:	f005 ff90 	bl	800794e <HAL_SPI_Transmit>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb4 	bl	80019ac <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e003      	b.n	8001a50 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffaf 	bl	80019ac <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000550 	.word	0x20000550

08001a5c <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001a68:	2300      	movs	r3, #0
 8001a6a:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff8d 	bl	8001990 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001a76:	f107 020c 	add.w	r2, r7, #12
 8001a7a:	f107 0108 	add.w	r1, r7, #8
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2302      	movs	r3, #2
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001a86:	f006 f8d0 	bl	8007c2a <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff8e 	bl	80019ac <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001a90:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000550 	.word	0x20000550

08001aa0 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff8c 	bl	80019c8 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001ab0:	2142      	movs	r1, #66	; 0x42
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffd2 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d001      	beq.n	8001ac6 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e02b      	b.n	8001b1e <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f9b4 	bl	8001e34 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9fa 	bl	8001ec8 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	210e      	movs	r1, #14
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff8f 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff8a 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001ae8:	210c      	movs	r1, #12
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb6 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f043 0303 	orr.w	r3, r3, #3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	210c      	movs	r1, #12
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff7d 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001b02:	2204      	movs	r2, #4
 8001b04:	2126      	movs	r1, #38	; 0x26
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff78 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2114      	movs	r1, #20
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f99c 	bl	8001e4e <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f97f 	bl	8001e1a <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f972 	bl	8001e1a <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 faf6 	bl	800212e <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001b42:	e002      	b.n	8001b4a <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fada 	bl	80020fe <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	210d      	movs	r1, #13
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff54 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2122      	movs	r1, #34	; 0x22
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff4f 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001b70:	2283      	movs	r2, #131	; 0x83
 8001b72:	2101      	movs	r1, #1
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff41 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001b7a:	2112      	movs	r1, #18
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff6d 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d000      	beq.n	8001b98 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001b96:	e7f0      	b.n	8001b7a <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001b98:	2208      	movs	r2, #8
 8001b9a:	2112      	movs	r1, #18
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff2d 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001bba:	2112      	movs	r1, #18
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff4d 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dd0a      	ble.n	8001be2 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 faae 	bl	800212e <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2122      	movs	r1, #34	; 0x22
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff0e 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001be0:	e002      	b.n	8001be8 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa8b 	bl	80020fe <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	2112      	movs	r1, #18
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff03 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d121      	bne.n	8001c4e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c18:	2122      	movs	r1, #34	; 0x22
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff1e 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e005      	b.n	8001c32 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001c26:	2113      	movs	r1, #19
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff17 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001c32:	2110      	movs	r1, #16
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff11 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	210d      	movs	r1, #13
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fedb 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8e7 	bl	8001e1a <_ZN10RFM95_LoRa4idleEv>
 8001c4c:	e015      	b.n	8001c7a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001c4e:	2101      	movs	r1, #1
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff03 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b86      	cmp	r3, #134	; 0x86
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210d      	movs	r1, #13
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fec6 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001c70:	2286      	movs	r2, #134	; 0x86
 8001c72:	2101      	movs	r1, #1
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fec1 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3304      	adds	r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1cf9      	adds	r1, r7, #3
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001cb6:	2122      	movs	r1, #34	; 0x22
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fecf 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	2bff      	cmp	r3, #255	; 0xff
 8001cca:	d903      	bls.n	8001cd4 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001cd2:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d20c      	bcs.n	8001cfa <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fe85 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e7ee      	b.n	8001cd8 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	2122      	movs	r1, #34	; 0x22
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fe76 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001d22:	2113      	movs	r1, #19
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fe99 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	1ad3      	subs	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	e009      	b.n	8001d7a <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe72 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e013      	b.n	8001dd4 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001dac:	210d      	movs	r1, #13
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fe54 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001db8:	2100      	movs	r1, #0
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fe4e 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	210d      	movs	r1, #13
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fe15 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	dd0a      	ble.n	8001e02 <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f99e 	bl	800212e <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	2122      	movs	r1, #34	; 0x22
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fdfe 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001e00:	e002      	b.n	8001e08 <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f97b 	bl	80020fe <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001e08:	2285      	movs	r2, #133	; 0x85
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fdf5 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001e22:	2281      	movs	r2, #129	; 0x81
 8001e24:	2101      	movs	r1, #1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fde8 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZN10RFM95_LoRa5sleepEv>:
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	2101      	movs	r1, #1
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fddb 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d116      	bne.n	8001e8e <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da02      	bge.n	8001e6c <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	e004      	b.n	8001e76 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b0e      	cmp	r3, #14
 8001e70:	dd01      	ble.n	8001e76 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001e72:	230e      	movs	r3, #14
 8001e74:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	2109      	movs	r1, #9
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fdb8 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001e8c:	e018      	b.n	8001ec0 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	dc02      	bgt.n	8001e9a <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	e004      	b.n	8001ea4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b11      	cmp	r3, #17
 8001e9e:	dd01      	ble.n	8001ea4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001ea0:	2311      	movs	r3, #17
 8001ea2:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2109      	movs	r1, #9
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff fd9e 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ee0:	1355      	asrs	r5, r2, #13
 8001ee2:	04d4      	lsls	r4, r2, #19
 8001ee4:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f96d 	bl	80001cc <__aeabi_uldivmod>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	0c02      	lsrs	r2, r0, #16
 8001f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f0c:	0c0b      	lsrs	r3, r1, #16
 8001f0e:	b2d3      	uxtb	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	2106      	movs	r1, #6
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fd71 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	0a02      	lsrs	r2, r0, #8
 8001f28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f2c:	0a0b      	lsrs	r3, r1, #8
 8001f2e:	b2d3      	uxtb	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	2107      	movs	r1, #7
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd61 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001f3a:	7a3b      	ldrb	r3, [r7, #8]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2108      	movs	r1, #8
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fd5b 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	01e84800 	.word	0x01e84800

08001f54 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	dc02      	bgt.n	8001f6a <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001f64:	2306      	movs	r3, #6
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	e004      	b.n	8001f74 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	dd01      	ble.n	8001f74 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001f70:	230c      	movs	r3, #12
 8001f72:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d10a      	bne.n	8001f90 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001f7a:	22c5      	movs	r2, #197	; 0xc5
 8001f7c:	2131      	movs	r1, #49	; 0x31
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fd3c 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001f84:	220c      	movs	r2, #12
 8001f86:	2137      	movs	r1, #55	; 0x37
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fd37 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001f8e:	e009      	b.n	8001fa4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001f90:	22c3      	movs	r2, #195	; 0xc3
 8001f92:	2131      	movs	r1, #49	; 0x31
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fd31 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	2137      	movs	r1, #55	; 0x37
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fd2c 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001fa4:	211e      	movs	r1, #30
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fd58 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	211e      	movs	r1, #30
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fd18 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	dc02      	bgt.n	8001fee <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e03f      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	dc02      	bgt.n	8001ffe <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e037      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002004:	4293      	cmp	r3, r2
 8002006:	dc02      	bgt.n	800200e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8002008:	2302      	movs	r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e02f      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f245 1240 	movw	r2, #20800	; 0x5140
 8002014:	4293      	cmp	r3, r2
 8002016:	dc02      	bgt.n	800201e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8002018:	2303      	movs	r3, #3
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e027      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002024:	4293      	cmp	r3, r2
 8002026:	dc02      	bgt.n	800202e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8002028:	2304      	movs	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e01f      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002034:	4293      	cmp	r3, r2
 8002036:	dc02      	bgt.n	800203e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8002038:	2305      	movs	r3, #5
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e017      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002044:	4293      	cmp	r3, r2
 8002046:	dc02      	bgt.n	800204e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8002048:	2306      	movs	r3, #6
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e00f      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	dc02      	bgt.n	800205c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8002056:	2307      	movs	r3, #7
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e008      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	dc02      	bgt.n	800206a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002064:	2308      	movs	r3, #8
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e001      	b.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800206a:	2309      	movs	r3, #9
 800206c:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 800206e:	211d      	movs	r1, #29
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fcf3 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8002076:	4603      	mov	r3, r0
 8002078:	b25b      	sxtb	r3, r3
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b25a      	sxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	b25b      	sxtb	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b25b      	sxtb	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	211d      	movs	r1, #29
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fcb3 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0001e848 	.word	0x0001e848
 80020a4:	0003d090 	.word	0x0003d090

080020a8 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	dc02      	bgt.n	80020be <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80020b8:	2305      	movs	r3, #5
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	e004      	b.n	80020c8 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	dd01      	ble.n	80020c8 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 80020c4:	2308      	movs	r3, #8
 80020c6:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3b04      	subs	r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80020ce:	211d      	movs	r1, #29
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fcc3 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	f023 030e 	bic.w	r3, r3, #14
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	211d      	movs	r1, #29
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fc83 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800210c:	211d      	movs	r1, #29
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fca4 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8002114:	4603      	mov	r3, r0
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	211d      	movs	r1, #29
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fc6b 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 800213c:	211d      	movs	r1, #29
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fc8c 	bl	8001a5c <_ZN10RFM95_LoRa12readRegisterEh>
 8002144:	4603      	mov	r3, r0
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	211d      	movs	r1, #29
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fc53 	bl	80019fc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 8002168:	4914      	ldr	r1, [pc, #80]	; (80021bc <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff feac 	bl	8001ec8 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002170:	2201      	movs	r2, #1
 8002172:	2111      	movs	r1, #17
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fe6a 	bl	8001e4e <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800217a:	f647 2112 	movw	r1, #31250	; 0x7a12
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff28 	bl	8001fd4 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002184:	210c      	movs	r1, #12
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fee4 	bl	8001f54 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 800218c:	2105      	movs	r1, #5
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff8a 	bl	80020a8 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002194:	490a      	ldr	r1, [pc, #40]	; (80021c0 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fc82 	bl	8001aa0 <_ZN10RFM95_LoRa5beginEl>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	33bca100 	.word	0x33bca100
 80021c0:	339e1c80 	.word	0x339e1c80

080021c4 <_ZNK13DriveSettings16getClampingSpeedEv>:
 *  Created on: 22.10.2022
 *      Author: marce
 */
#include "DriveSettings.h"

uint16_t DriveSettings::getClampingSpeed() const {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	891b      	ldrh	r3, [r3, #8]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	811a      	strh	r2, [r3, #8]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_ZNK13DriveSettings17getClampingTorqueEv>:



uint16_t DriveSettings::getClampingTorque() const {
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	889b      	ldrh	r3, [r3, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	809a      	strh	r2, [r3, #4]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_ZNK13DriveSettings16getDeviceAddressEv>:



uint8_t DriveSettings::getDeviceAddress() const {
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZNK13DriveSettings12getInPosDiffEv>:
	this->deviceAddress = deviceAddress;
}



uint16_t DriveSettings::getInPosDiff() const {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	899b      	ldrh	r3, [r3, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	819a      	strh	r2, [r3, #12]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_ZNK13DriveSettings18getOpeningDistanceEv>:



uint16_t DriveSettings::getOpeningDistance() const {
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	89db      	ldrh	r3, [r3, #14]
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	81da      	strh	r2, [r3, #14]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_ZNK13DriveSettings21getOverCurrentWarningEv>:
void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold) {
	this->overCurrentTimeThreshold = overCurrentTimeThreshold;
}

uint16_t DriveSettings::getOverCurrentWarning() const {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8a9b      	ldrh	r3, [r3, #20]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	829a      	strh	r2, [r3, #20]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8adb      	ldrh	r3, [r3, #22]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	82da      	strh	r2, [r3, #22]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	895b      	ldrh	r3, [r3, #10]
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	815a      	strh	r2, [r3, #10]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	88db      	ldrh	r3, [r3, #6]
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	887a      	ldrh	r2, [r7, #2]
 800237e:	80da      	strh	r2, [r3, #6]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	885b      	ldrh	r3, [r3, #2]
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	805a      	strh	r2, [r3, #2]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8a5b      	ldrh	r3, [r3, #18]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	825a      	strh	r2, [r3, #18]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8a1b      	ldrh	r3, [r3, #16]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	821a      	strh	r2, [r3, #16]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	709a      	strb	r2, [r3, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	70da      	strb	r2, [r3, #3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	711a      	strb	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	715a      	strb	r2, [r3, #5]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	719a      	strb	r2, [r3, #6]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	71da      	strb	r2, [r3, #7]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	721a      	strb	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	725a      	strb	r2, [r3, #9]
{
}
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	return close;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	701a      	strb	r2, [r3, #0]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	return open;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	785b      	ldrb	r3, [r3, #1]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	705a      	strb	r2, [r3, #1]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_ZN12DriveCommand10setDisableEb>:
{
	return disable;
}

void DriveCommand::setDisable(bool disable)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	719a      	strb	r2, [r3, #6]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_ZN12DriveCommand9setEnableEb>:
{
	return enable;
}

void DriveCommand::setEnable(bool enable)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	711a      	strb	r2, [r3, #4]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_ZN12DriveCommand8setResetEb>:
{
	return reset;
}

void DriveCommand::setReset(bool reset)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	70da      	strb	r2, [r3, #3]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	return stop;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	795b      	ldrb	r3, [r3, #5]
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	715a      	strb	r2, [r3, #5]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZN12DriveCommand8setTeachEb>:
{
	return teach;
}

void DriveCommand::setTeach(bool teach)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	789b      	ldrb	r3, [r3, #2]
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	429a      	cmp	r2, r3
 8002590:	d002      	beq.n	8002598 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	709a      	strb	r2, [r3, #2]
	}

}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	return close;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	785b      	ldrb	r3, [r3, #1]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d005      	beq.n	80025de <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	741a      	strb	r2, [r3, #16]
	}
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
	return open;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	789b      	ldrb	r3, [r3, #2]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	741a      	strb	r2, [r3, #16]
	}
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	return disable;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	79db      	ldrb	r3, [r3, #7]
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	79db      	ldrb	r3, [r3, #7]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	429a      	cmp	r2, r3
 800265c:	d005      	beq.n	800266a <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	741a      	strb	r2, [r3, #16]
	}
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return enable;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	795b      	ldrb	r3, [r3, #5]
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	795b      	ldrb	r3, [r3, #5]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	741a      	strb	r2, [r3, #16]
	}
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	return reset;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	791b      	ldrb	r3, [r3, #4]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d005      	beq.n	80026f6 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	741a      	strb	r2, [r3, #16]
	}
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	return stop;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	799b      	ldrb	r3, [r3, #6]
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	799b      	ldrb	r3, [r3, #6]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	429a      	cmp	r2, r3
 800272e:	d005      	beq.n	800273c <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	741a      	strb	r2, [r3, #16]
	}
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	return teach;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	78db      	ldrb	r3, [r3, #3]
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78db      	ldrb	r3, [r3, #3]
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	429a      	cmp	r2, r3
 8002774:	d005      	beq.n	8002782 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	741a      	strb	r2, [r3, #16]
	}
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	return this->error;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_ZNK11DriveStatus9getStatusEv>:
		statusChanged = true;
	}
}

uint8_t DriveStatus::getStatus() const
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t)enable << 7 | (uint8_t)open << 6
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	795b      	ldrb	r3, [r3, #5]
 80027b2:	01db      	lsls	r3, r3, #7
 80027b4:	b25a      	sxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	789b      	ldrb	r3, [r3, #2]
 80027ba:	019b      	lsls	r3, r3, #6
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b25a      	sxtb	r2, r3
			| (uint8_t)close << 5 | (uint8_t)teach << 4 | (uint8_t)stop << 3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	015b      	lsls	r3, r3, #5
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b25a      	sxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	78db      	ldrb	r3, [r3, #3]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	4313      	orrs	r3, r2
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	799b      	ldrb	r3, [r3, #6]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t)enable << 7 | (uint8_t)open << 6
 80027e6:	73fb      	strb	r3, [r7, #15]

		return result;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <_ZN11DriveStatus11setPositionEt>:
{
	return position;
}

void DriveStatus::setPosition(uint16_t position)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	887a      	ldrh	r2, [r7, #2]
 8002806:	815a      	strh	r2, [r3, #10]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	899b      	ldrh	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	711a      	strb	r2, [r3, #4]
	}


	//15ms
	if(counter % 15 == 0){
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	899a      	ldrh	r2, [r3, #12]
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	08d9      	lsrs	r1, r3, #3
 800283a:	460b      	mov	r3, r1
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a5b      	subs	r3, r3, r1
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	709a      	strb	r2, [r3, #2]
	}


	//50ms
	if(counter % 50 == 0){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	899b      	ldrh	r3, [r3, #12]
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800285a:	fba2 1203 	umull	r1, r2, r2, r3
 800285e:	0912      	lsrs	r2, r2, #4
 8002860:	2132      	movs	r1, #50	; 0x32
 8002862:	fb01 f202 	mul.w	r2, r1, r2
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <_ZN11TaskHandler11UpdateTasksEv+0x60>
		comTask = true;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
	}

	//100ms
	if(counter % 100 == 0){
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	899b      	ldrh	r3, [r3, #12]
 8002878:	4a23      	ldr	r2, [pc, #140]	; (8002908 <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800287a:	fba2 1203 	umull	r1, r2, r2, r3
 800287e:	0952      	lsrs	r2, r2, #5
 8002880:	2164      	movs	r1, #100	; 0x64
 8002882:	fb01 f202 	mul.w	r2, r1, r2
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <_ZN11TaskHandler11UpdateTasksEv+0x80>
		errorTask = true;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
	}


	if(counter % 250 == 0){
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	899b      	ldrh	r3, [r3, #12]
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 800289a:	fba2 1203 	umull	r1, r2, r2, r3
 800289e:	0912      	lsrs	r2, r2, #4
 80028a0:	21fa      	movs	r1, #250	; 0xfa
 80028a2:	fb01 f202 	mul.w	r2, r1, r2
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <_ZN11TaskHandler11UpdateTasksEv+0xa0>
		comTask = true;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	899b      	ldrh	r3, [r3, #12]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 80028ba:	fba2 1203 	umull	r1, r2, r2, r3
 80028be:	0952      	lsrs	r2, r2, #5
 80028c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028c4:	fb01 f202 	mul.w	r2, r1, r2
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		ledTask = true;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	899b      	ldrh	r3, [r3, #12]
 80028da:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028de:	4293      	cmp	r3, r2
 80028e0:	d903      	bls.n	80028ea <_ZN11TaskHandler11UpdateTasksEv+0xd6>
		counter = 1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 80028e8:	e005      	b.n	80028f6 <_ZN11TaskHandler11UpdateTasksEv+0xe2>
		counter++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	899b      	ldrh	r3, [r3, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	819a      	strh	r2, [r3, #12]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	88888889 	.word	0x88888889
 8002908:	51eb851f 	.word	0x51eb851f
 800290c:	10624dd3 	.word	0x10624dd3

08002910 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	461a      	mov	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	79db      	ldrb	r3, [r3, #7]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	789b      	ldrb	r3, [r3, #2]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7a1b      	ldrb	r3, [r3, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	799b      	ldrb	r3, [r3, #6]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	78db      	ldrb	r3, [r3, #3]
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7a5b      	ldrb	r3, [r3, #9]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	70da      	strb	r2, [r3, #3]
	return ioUpdateTaskTemp;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_ZN11TaskHandler15isADCUpdateTaskEv>:


bool TaskHandler::isADCUpdateTask() {
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	791b      	ldrb	r3, [r3, #4]
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7a9b      	ldrb	r3, [r3, #10]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
	adcUpdateTask = false;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	711a      	strb	r2, [r3, #4]
	return adcUpdateTaskTemp;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_ZN11TaskHandler9isLEDTaskEv>:

bool TaskHandler::isLEDTask(){
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	795b      	ldrb	r3, [r3, #5]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7adb      	ldrb	r3, [r3, #11]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>:




void TaskHandler::setAdcUpdateTaskEnable(bool adcUpdateTaskEnable ) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
	this->adcUpdateTaskEnable = adcUpdateTaskEnable;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	729a      	strb	r2, [r3, #10]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_ZN11TaskHandler18setDriveTaskEnableEb>:
void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
	this->comTaskEnable = comTaskEnable;
}


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	721a      	strb	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	1219      	asrs	r1, r3, #8
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2ca      	uxtb	r2, r1
 8002aa2:	701a      	strb	r2, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002ad4:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <MX_ADC1_Init+0xe8>)
 8002ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002af2:	2204      	movs	r2, #4
 8002af4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002b10:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b12:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b2e:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b36:	4817      	ldr	r0, [pc, #92]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b38:	f000 ffae 	bl	8003a98 <HAL_ADC_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002b42:	f000 f9ad 	bl	8002ea0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4810      	ldr	r0, [pc, #64]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b52:	f001 fd13 	bl	800457c <HAL_ADCEx_MultiModeConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002b5c:	f000 f9a0 	bl	8002ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_ADC1_Init+0xec>)
 8002b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b64:	2306      	movs	r3, #6
 8002b66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b6c:	237f      	movs	r3, #127	; 0x7f
 8002b6e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b70:	2304      	movs	r3, #4
 8002b72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_ADC1_Init+0xe4>)
 8002b7e:	f001 f8db 	bl	8003d38 <HAL_ADC_ConfigChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002b88:	f000 f98a 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200004ec 	.word	0x200004ec
 8002b98:	50040000 	.word	0x50040000
 8002b9c:	19200040 	.word	0x19200040

08002ba0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <HAL_ADC_MspInit+0x74>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d124      	bne.n	8002c0c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_ADC_MspInit+0x78>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bf6:	230b      	movs	r3, #11
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c08:	f001 fe6e 	bl	80048e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	50040000 	.word	0x50040000
 8002c18:	40021000 	.word	0x40021000

08002c1c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4a4c      	ldr	r2, [pc, #304]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <MX_GPIO_Init+0x14c>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2119      	movs	r1, #25
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f001 ffaf 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2190      	movs	r1, #144	; 0x90
 8002ca2:	4832      	ldr	r0, [pc, #200]	; (8002d6c <MX_GPIO_Init+0x150>)
 8002ca4:	f001 ffaa 	bl	8004bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 8002ca8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	482c      	ldr	r0, [pc, #176]	; (8002d70 <MX_GPIO_Init+0x154>)
 8002cbe:	f001 fe13 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 8002cc2:	2319      	movs	r3, #25
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f001 fe04 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8002ce0:	2323      	movs	r3, #35	; 0x23
 8002ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	481e      	ldr	r0, [pc, #120]	; (8002d6c <MX_GPIO_Init+0x150>)
 8002cf4:	f001 fdf8 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f001 fdea 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 8002d14:	2390      	movs	r3, #144	; 0x90
 8002d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4810      	ldr	r0, [pc, #64]	; (8002d6c <MX_GPIO_Init+0x150>)
 8002d2c:	f001 fddc 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d34:	2303      	movs	r3, #3
 8002d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	480a      	ldr	r0, [pc, #40]	; (8002d6c <MX_GPIO_Init+0x150>)
 8002d44:	f001 fdd0 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4806      	ldr	r0, [pc, #24]	; (8002d74 <MX_GPIO_Init+0x158>)
 8002d5c:	f001 fdc4 	bl	80048e8 <HAL_GPIO_Init>

}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	48000400 	.word	0x48000400
 8002d70:	48000800 	.word	0x48000800
 8002d74:	48001c00 	.word	0x48001c00

08002d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7c:	f000 fc53 	bl	8003626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d80:	f000 f816 	bl	8002db0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d84:	f7ff ff4a 	bl	8002c1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002d88:	f7ff fe92 	bl	8002ab0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002d8c:	f000 f8ac 	bl	8002ee8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002d90:	f000 fa04 	bl	800319c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d94:	f000 fa5c 	bl	8003250 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002d98:	f00a f8a6 	bl	800cee8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8002d9c:	f000 fabe 	bl	800331c <MX_TIM6_Init>
  MX_TIM16_Init();
 8002da0:	f000 faf2 	bl	8003388 <MX_TIM16_Init>


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <main+0x34>)
 8002da6:	f7fd fcb9 	bl	800071c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002daa:	e7fe      	b.n	8002daa <main+0x32>
 8002dac:	2000021c 	.word	0x2000021c

08002db0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b096      	sub	sp, #88	; 0x58
 8002db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	2244      	movs	r2, #68	; 0x44
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f00a feaa 	bl	800db18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dd6:	f003 fcdd 	bl	8006794 <HAL_PWREx_ControlVoltageScaling>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002dea:	f000 f859 	bl	8002ea0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8002dee:	2312      	movs	r3, #18
 8002df0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002e04:	23b0      	movs	r3, #176	; 0xb0
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002e14:	2308      	movs	r3, #8
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fd1b 	bl	8006860 <HAL_RCC_OscConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8002e3a:	f000 f831 	bl	8002ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e3e:	230f      	movs	r3, #15
 8002e40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e42:	2303      	movs	r3, #3
 8002e44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	2103      	movs	r1, #3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f964 	bl	8007124 <HAL_RCC_ClockConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8002e6c:	f000 f818 	bl	8002ea0 <Error_Handler>
  }
}
 8002e70:	bf00      	nop
 8002e72:	3758      	adds	r7, #88	; 0x58
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d102      	bne.n	8002e90 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e8c:	f7ff fcc2 	bl	8002814 <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	2000021c 	.word	0x2000021c

08002ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <Error_Handler+0x8>
	...

08002eac <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d102      	bne.n	8002ecc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002ec8:	f7fd fbb0 	bl	800062c <_ZN7AppMainC1Ev>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	2000021c 	.word	0x2000021c

08002ed8 <_GLOBAL__sub_I_appMain>:
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7ff ffe3 	bl	8002eac <_Z41__static_initialization_and_destruction_0ii>
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <MX_SPI1_Init+0x78>)
 8002ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f1e:	2220      	movs	r2, #32
 8002f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f36:	2207      	movs	r2, #7
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f46:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_SPI1_Init+0x74>)
 8002f48:	f004 fc5e 	bl	8007808 <HAL_SPI_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f52:	f7ff ffa5 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000550 	.word	0x20000550
 8002f60:	40013000 	.word	0x40013000

08002f64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_SPI_MspInit+0x7c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d128      	bne.n	8002fd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f90:	6613      	str	r3, [r2, #96]	; 0x60
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_SPI_MspInit+0x80>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fb6:	23e0      	movs	r3, #224	; 0xe0
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd4:	f001 fc88 	bl	80048e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40013000 	.word	0x40013000
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_MspInit+0x44>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_MspInit+0x44>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_MspInit+0x44>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_MspInit+0x44>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_MspInit+0x44>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_MspInit+0x44>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <NMI_Handler+0x4>

08003036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <HardFault_Handler+0x4>

0800303c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <MemManage_Handler+0x4>

08003042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <BusFault_Handler+0x4>

08003048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <UsageFault_Handler+0x4>

0800304e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307c:	f000 fb28 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800308a:	f005 fc5b 	bl	8008944 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003090:	f005 fc58 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000600 	.word	0x20000600
 800309c:	20000698 	.word	0x20000698

080030a0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM6_IRQHandler+0x10>)
 80030a6:	f005 fc4d 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200005b4 	.word	0x200005b4

080030b4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <USB_IRQHandler+0x10>)
 80030ba:	f001 ff0a 	bl	8004ed2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20001388 	.word	0x20001388

080030c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	return 1;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_kill>:

int _kill(int pid, int sig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030e2:	f00a fce7 	bl	800dab4 <__errno>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2216      	movs	r2, #22
 80030ea:	601a      	str	r2, [r3, #0]
	return -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_exit>:

void _exit (int status)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003100:	f04f 31ff 	mov.w	r1, #4294967295
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffe7 	bl	80030d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800310a:	e7fe      	b.n	800310a <_exit+0x12>

0800310c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <_sbrk+0x5c>)
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <_sbrk+0x60>)
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x64>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <_sbrk+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d207      	bcs.n	800314c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800313c:	f00a fcba 	bl	800dab4 <__errno>
 8003140:	4603      	mov	r3, r0
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e009      	b.n	8003160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <_sbrk+0x64>)
 800315c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000a000 	.word	0x2000a000
 800316c:	00000400 	.word	0x00000400
 8003170:	200002b8 	.word	0x200002b8
 8003174:	20001698 	.word	0x20001698

08003178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SystemInit+0x20>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SystemInit+0x20>)
 8003184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f00a fcb4 	bl	800db18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b0:	463b      	mov	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <MX_TIM1_Init+0xac>)
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <MX_TIM1_Init+0xb0>)
 80031be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <MX_TIM1_Init+0xac>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <MX_TIM1_Init+0xac>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <MX_TIM1_Init+0xac>)
 80031ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <MX_TIM1_Init+0xac>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <MX_TIM1_Init+0xac>)
 80031dc:	2200      	movs	r2, #0
 80031de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <MX_TIM1_Init+0xac>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031ee:	2301      	movs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031fe:	2301      	movs	r3, #1
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	4619      	mov	r1, r3
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <MX_TIM1_Init+0xac>)
 8003212:	f005 fa63 	bl	80086dc <HAL_TIM_Encoder_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800321c:	f7ff fe40 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800322c:	463b      	mov	r3, r7
 800322e:	4619      	mov	r1, r3
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_TIM1_Init+0xac>)
 8003232:	f006 f8eb 	bl	800940c <HAL_TIMEx_MasterConfigSynchronization>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800323c:	f7ff fe30 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003240:	bf00      	nop
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000600 	.word	0x20000600
 800324c:	40012c00 	.word	0x40012c00

08003250 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003262:	463b      	mov	r3, r7
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
 8003270:	615a      	str	r2, [r3, #20]
 8003272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <MX_TIM2_Init+0xc8>)
 8003276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800327a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <MX_TIM2_Init+0xc8>)
 800327e:	2214      	movs	r2, #20
 8003280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <MX_TIM2_Init+0xc8>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <MX_TIM2_Init+0xc8>)
 800328a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800328e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <MX_TIM2_Init+0xc8>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <MX_TIM2_Init+0xc8>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800329c:	481e      	ldr	r0, [pc, #120]	; (8003318 <MX_TIM2_Init+0xc8>)
 800329e:	f005 f8e7 	bl	8008470 <HAL_TIM_PWM_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80032a8:	f7ff fdfa 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4817      	ldr	r0, [pc, #92]	; (8003318 <MX_TIM2_Init+0xc8>)
 80032bc:	f006 f8a6 	bl	800940c <HAL_TIMEx_MasterConfigSynchronization>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80032c6:	f7ff fdeb 	bl	8002ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ca:	2360      	movs	r3, #96	; 0x60
 80032cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 80032ce:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80032d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80032d4:	2302      	movs	r3, #2
 80032d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032dc:	463b      	mov	r3, r7
 80032de:	2200      	movs	r2, #0
 80032e0:	4619      	mov	r1, r3
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <MX_TIM2_Init+0xc8>)
 80032e4:	f005 fc4e 	bl	8008b84 <HAL_TIM_PWM_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80032ee:	f7ff fdd7 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032f2:	463b      	mov	r3, r7
 80032f4:	2204      	movs	r2, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <MX_TIM2_Init+0xc8>)
 80032fa:	f005 fc43 	bl	8008b84 <HAL_TIM_PWM_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003304:	f7ff fdcc 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003308:	4803      	ldr	r0, [pc, #12]	; (8003318 <MX_TIM2_Init+0xc8>)
 800330a:	f000 f90f 	bl	800352c <HAL_TIM_MspPostInit>

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000064c 	.word	0x2000064c

0800331c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <MX_TIM6_Init+0x64>)
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <MX_TIM6_Init+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <MX_TIM6_Init+0x64>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <MX_TIM6_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23999;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <MX_TIM6_Init+0x64>)
 8003340:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8003344:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_TIM6_Init+0x64>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <MX_TIM6_Init+0x64>)
 800334e:	f004 ffe3 	bl	8008318 <HAL_TIM_Base_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003358:	f7ff fda2 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800335c:	2320      	movs	r3, #32
 800335e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_TIM6_Init+0x64>)
 800336a:	f006 f84f 	bl	800940c <HAL_TIMEx_MasterConfigSynchronization>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003374:	f7ff fd94 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200005b4 	.word	0x200005b4
 8003384:	40001000 	.word	0x40001000

08003388 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <MX_TIM16_Init+0x44>)
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <MX_TIM16_Init+0x48>)
 8003390:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_TIM16_Init+0x44>)
 8003394:	2202      	movs	r2, #2
 8003396:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_TIM16_Init+0x44>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 35999;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_TIM16_Init+0x44>)
 80033a0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80033a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_TIM16_Init+0x44>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <MX_TIM16_Init+0x44>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_TIM16_Init+0x44>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80033b8:	4804      	ldr	r0, [pc, #16]	; (80033cc <MX_TIM16_Init+0x44>)
 80033ba:	f004 ffad 	bl	8008318 <HAL_TIM_Base_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80033c4:	f7ff fd6c 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000698 	.word	0x20000698
 80033d0:	40014400 	.word	0x40014400

080033d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIM_Encoder_MspInit+0x90>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d131      	bne.n	800345a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 80033fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003400:	6613      	str	r3, [r2, #96]	; 0x60
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_TIM_Encoder_MspInit+0x94>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003438:	2301      	movs	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003446:	f001 fa4f 	bl	80048e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2019      	movs	r0, #25
 8003450:	f001 fa13 	bl	800487a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003454:	2019      	movs	r0, #25
 8003456:	f001 fa2c 	bl	80048b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d10b      	bne.n	8003496 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_TIM_PWM_MspInit+0x38>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_TIM_PWM_MspInit+0x38>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6593      	str	r3, [r2, #88]	; 0x58
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_TIM_PWM_MspInit+0x38>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_TIM_Base_MspInit+0x78>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d114      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a19      	ldr	r2, [pc, #100]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034c0:	f043 0310 	orr.w	r3, r3, #16
 80034c4:	6593      	str	r3, [r2, #88]	; 0x58
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2036      	movs	r0, #54	; 0x36
 80034d8:	f001 f9cf 	bl	800487a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80034dc:	2036      	movs	r0, #54	; 0x36
 80034de:	f001 f9e8 	bl	80048b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80034e2:	e018      	b.n	8003516 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_TIM_Base_MspInit+0x80>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d113      	bne.n	8003516 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	6613      	str	r3, [r2, #96]	; 0x60
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_TIM_Base_MspInit+0x7c>)
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	2019      	movs	r0, #25
 800350c:	f001 f9b5 	bl	800487a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003510:	2019      	movs	r0, #25
 8003512:	f001 f9ce 	bl	80048b2 <HAL_NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40001000 	.word	0x40001000
 8003524:	40021000 	.word	0x40021000
 8003528:	40014400 	.word	0x40014400

0800352c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d139      	bne.n	80035c2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_TIM_MspPostInit+0xa0>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 800357e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003590:	2301      	movs	r3, #1
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4619      	mov	r1, r3
 800359a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359e:	f001 f9a3 	bl	80048e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 80035a2:	2308      	movs	r3, #8
 80035a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035b2:	2301      	movs	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4804      	ldr	r0, [pc, #16]	; (80035d0 <HAL_TIM_MspPostInit+0xa4>)
 80035be:	f001 f993 	bl	80048e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	48000400 	.word	0x48000400

080035d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800360c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035d8:	f7ff fdce 	bl	8003178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <LoopForever+0x6>)
  ldr r1, =_edata
 80035de:	490d      	ldr	r1, [pc, #52]	; (8003614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <LoopForever+0xe>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e4:	e002      	b.n	80035ec <LoopCopyDataInit>

080035e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ea:	3304      	adds	r3, #4

080035ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f0:	d3f9      	bcc.n	80035e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <LoopForever+0x12>)
  ldr r4, =_ebss
 80035f4:	4c0a      	ldr	r4, [pc, #40]	; (8003620 <LoopForever+0x16>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f8:	e001      	b.n	80035fe <LoopFillZerobss>

080035fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035fc:	3204      	adds	r2, #4

080035fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003600:	d3fb      	bcc.n	80035fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003602:	f00a fa5d 	bl	800dac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003606:	f7ff fbb7 	bl	8002d78 <main>

0800360a <LoopForever>:

LoopForever:
    b LoopForever
 800360a:	e7fe      	b.n	800360a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800360c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003614:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003618:	0800dd90 	.word	0x0800dd90
  ldr r2, =_sbss
 800361c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003620:	20001694 	.word	0x20001694

08003624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003624:	e7fe      	b.n	8003624 <ADC1_2_IRQHandler>

08003626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003630:	2003      	movs	r0, #3
 8003632:	f001 f917 	bl	8004864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003636:	200f      	movs	r0, #15
 8003638:	f000 f80e 	bl	8003658 <HAL_InitTick>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	e001      	b.n	800364c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003648:	f7ff fcce 	bl	8002fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800364c:	79fb      	ldrb	r3, [r7, #7]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_InitTick+0x6c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_InitTick+0x70>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_InitTick+0x6c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	fbb3 f3f1 	udiv	r3, r3, r1
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f923 	bl	80048ce <HAL_SYSTICK_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d809      	bhi.n	80036a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003694:	2200      	movs	r2, #0
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	f001 f8ed 	bl	800487a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_InitTick+0x74>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e007      	b.n	80036b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e004      	b.n	80036b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e001      	b.n	80036b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	20000004 	.word	0x20000004
 80036cc:	20000008 	.word	0x20000008

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	200006e4 	.word	0x200006e4

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200006e4 	.word	0x200006e4

08003710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_Delay+0x44>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000000c 	.word	0x2000000c

08003758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <LL_ADC_SetOffset+0x44>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	03fff000 	.word	0x03fff000

08003808 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3360      	adds	r3, #96	; 0x60
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	431a      	orrs	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	615a      	str	r2, [r3, #20]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3330      	adds	r3, #48	; 0x30
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	4413      	add	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	211f      	movs	r1, #31
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 011f 	and.w	r1, r3, #31
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3314      	adds	r3, #20
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0e5b      	lsrs	r3, r3, #25
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	0d1b      	lsrs	r3, r3, #20
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2107      	movs	r1, #7
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0d1b      	lsrs	r3, r3, #20
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	43db      	mvns	r3, r3
 800395a:	401a      	ands	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0318 	and.w	r3, r3, #24
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003964:	40d9      	lsrs	r1, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	400b      	ands	r3, r1
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0007ffff 	.word	0x0007ffff

08003988 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003998:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6093      	str	r3, [r2, #8]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a10:	d101      	bne.n	8003a16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <LL_ADC_IsEnabled+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_ADC_IsEnabled+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d101      	bne.n	8003a62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d101      	bne.n	8003a88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e131      	b.n	8003d16 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff f86d 	bl	8002ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff67 	bl	80039ac <LL_ADC_IsDeepPowerDownEnabled>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff4d 	bl	8003988 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff82 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff66 	bl	80039d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b08:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_ADC_Init+0x288>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	4a85      	ldr	r2, [pc, #532]	; (8003d24 <HAL_ADC_Init+0x28c>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b1c:	e002      	b.n	8003b24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f9      	bne.n	8003b1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff64 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff75 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003b60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 80ca 	bne.w	8003d04 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80c6 	bne.w	8003d04 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff49 	bl	8003a24 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d110      	bne.n	8003bba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b98:	4863      	ldr	r0, [pc, #396]	; (8003d28 <HAL_ADC_Init+0x290>)
 8003b9a:	f7ff ff43 	bl	8003a24 <LL_ADC_IsEnabled>
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4862      	ldr	r0, [pc, #392]	; (8003d2c <HAL_ADC_Init+0x294>)
 8003ba2:	f7ff ff3f 	bl	8003a24 <LL_ADC_IsEnabled>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4323      	orrs	r3, r4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	485e      	ldr	r0, [pc, #376]	; (8003d30 <HAL_ADC_Init+0x298>)
 8003bb6:	f7ff fdcf 	bl	8003758 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7e5b      	ldrb	r3, [r3, #25]
 8003bbe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bc4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003bca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003bd0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	3b01      	subs	r3, #1
 8003bee:	045b      	lsls	r3, r3, #17
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4b46      	ldr	r3, [pc, #280]	; (8003d34 <HAL_ADC_Init+0x29c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	69b9      	ldr	r1, [r7, #24]
 8003c22:	430b      	orrs	r3, r1
 8003c24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ff0d 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003c30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff1a 	bl	8003a70 <LL_ADC_INJ_IsConversionOngoing>
 8003c3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13d      	bne.n	8003cc0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13a      	bne.n	8003cc0 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c66:	f023 0302 	bic.w	r3, r3, #2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d118      	bne.n	8003cb0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	e007      	b.n	8003cc0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10c      	bne.n	8003ce2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f023 010f 	bic.w	r1, r3, #15
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce0:	e007      	b.n	8003cf2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020f 	bic.w	r2, r2, #15
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
 8003d02:	e007      	b.n	8003d14 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f043 0210 	orr.w	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd90      	pop	{r4, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000004 	.word	0x20000004
 8003d24:	053e2d63 	.word	0x053e2d63
 8003d28:	50040000 	.word	0x50040000
 8003d2c:	50040100 	.word	0x50040100
 8003d30:	50040300 	.word	0x50040300
 8003d34:	fff0c007 	.word	0xfff0c007

08003d38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b0b6      	sub	sp, #216	; 0xd8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x22>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e3d5      	b.n	8004506 <HAL_ADC_ConfigChannel+0x7ce>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe6f 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 83ba 	bne.w	80044e8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d824      	bhi.n	8003dc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	3b02      	subs	r3, #2
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d81b      	bhi.n	8003dbe <HAL_ADC_ConfigChannel+0x86>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_ADC_ConfigChannel+0x54>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003da5 	.word	0x08003da5
 8003d94:	08003dad 	.word	0x08003dad
 8003d98:	08003db5 	.word	0x08003db5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	220c      	movs	r2, #12
 8003da0:	605a      	str	r2, [r3, #4]
          break;
 8003da2:	e011      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2212      	movs	r2, #18
 8003da8:	605a      	str	r2, [r3, #4]
          break;
 8003daa:	e00d      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2218      	movs	r2, #24
 8003db0:	605a      	str	r2, [r3, #4]
          break;
 8003db2:	e009      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dba:	605a      	str	r2, [r3, #4]
          break;
 8003dbc:	e004      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2206      	movs	r2, #6
 8003dc2:	605a      	str	r2, [r3, #4]
          break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003dc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f7ff fd5b 	bl	8003890 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fe33 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003de4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fe3f 	bl	8003a70 <LL_ADC_INJ_IsConversionOngoing>
 8003df2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003df6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 81c1 	bne.w	8004182 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f040 81bc 	bne.w	8004182 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e12:	d10f      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7ff fd62 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fd1c 	bl	800386a <LL_ADC_SetSamplingTimeCommonConfig>
 8003e32:	e00e      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f7ff fd51 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fd0c 	bl	800386a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d00a      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6919      	ldr	r1, [r3, #16]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e84:	f7ff fc9c 	bl	80037c0 <LL_ADC_SetOffset>
 8003e88:	e17b      	b.n	8004182 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fcb9 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x17e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fcae 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	0e9b      	lsrs	r3, r3, #26
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	e01e      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1bc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fca3 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ed4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e004      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x1d4>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	e018      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x206>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e004      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d106      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fc72 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2101      	movs	r1, #1
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fc56 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x244>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fc4b 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	f003 021f 	and.w	r2, r3, #31
 8003f7a:	e01e      	b.n	8003fba <HAL_ADC_ConfigChannel+0x282>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fc40 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e004      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x29a>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0e9b      	lsrs	r3, r3, #26
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	e018      	b.n	8004004 <HAL_ADC_ConfigChannel+0x2cc>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e004      	b.n	8004004 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004004:	429a      	cmp	r2, r3
 8004006:	d106      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fc0f 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fbf3 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8004022:	4603      	mov	r3, r0
 8004024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x30a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fbe8 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8004038:	4603      	mov	r3, r0
 800403a:	0e9b      	lsrs	r3, r3, #26
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	e01e      	b.n	8004080 <HAL_ADC_ConfigChannel+0x348>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fbdd 	bl	8003808 <LL_ADC_GetOffsetChannel>
 800404e:	4603      	mov	r3, r0
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e004      	b.n	800407e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004074:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x360>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0e9b      	lsrs	r3, r3, #26
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	e016      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x38e>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80040b8:	2320      	movs	r3, #32
 80040ba:	e004      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80040bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d106      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fbae 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2103      	movs	r1, #3
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fb92 	bl	8003808 <LL_ADC_GetOffsetChannel>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x3cc>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2103      	movs	r1, #3
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fb87 	bl	8003808 <LL_ADC_GetOffsetChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	f003 021f 	and.w	r2, r3, #31
 8004102:	e017      	b.n	8004134 <HAL_ADC_ConfigChannel+0x3fc>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2103      	movs	r1, #3
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fb7c 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800411c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800411e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e003      	b.n	8004132 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800412a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_ADC_ConfigChannel+0x414>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	e011      	b.n	8004170 <HAL_ADC_ConfigChannel+0x438>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800415a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800415c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004164:	2320      	movs	r3, #32
 8004166:	e003      	b.n	8004170 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004170:	429a      	cmp	r2, r3
 8004172:	d106      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	2103      	movs	r1, #3
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fb59 	bl	8003834 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fc4c 	bl	8003a24 <LL_ADC_IsEnabled>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 8140 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6819      	ldr	r1, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f7ff fbcd 	bl	8003940 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a8f      	ldr	r2, [pc, #572]	; (80043e8 <HAL_ADC_ConfigChannel+0x6b0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	f040 8131 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_ADC_ConfigChannel+0x4a2>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0e9b      	lsrs	r3, r3, #26
 80041c8:	3301      	adds	r3, #1
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	bf94      	ite	ls
 80041d2:	2301      	movls	r3, #1
 80041d4:	2300      	movhi	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e019      	b.n	800420e <HAL_ADC_ConfigChannel+0x4d6>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80041e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80041ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e003      	b.n	80041fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	2b09      	cmp	r3, #9
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800420e:	2b00      	cmp	r3, #0
 8004210:	d079      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_ADC_ConfigChannel+0x4f6>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	0e9b      	lsrs	r3, r3, #26
 8004224:	3301      	adds	r3, #1
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800422c:	e015      	b.n	800425a <HAL_ADC_ConfigChannel+0x522>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	069b      	lsls	r3, r3, #26
 8004256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_ADC_ConfigChannel+0x542>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0e9b      	lsrs	r3, r3, #26
 800426c:	3301      	adds	r3, #1
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	e017      	b.n	80042aa <HAL_ADC_ConfigChannel+0x572>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004292:	2320      	movs	r3, #32
 8004294:	e003      	b.n	800429e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	fab3 f383 	clz	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3301      	adds	r3, #1
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	ea42 0103 	orr.w	r1, r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x598>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	3301      	adds	r3, #1
 80042c2:	f003 021f 	and.w	r2, r3, #31
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	051b      	lsls	r3, r3, #20
 80042ce:	e018      	b.n	8004302 <HAL_ADC_ConfigChannel+0x5ca>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80042ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004302:	430b      	orrs	r3, r1
 8004304:	e081      	b.n	800440a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	2b00      	cmp	r3, #0
 8004310:	d107      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x5ea>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	0e9b      	lsrs	r3, r3, #26
 8004318:	3301      	adds	r3, #1
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004320:	e015      	b.n	800434e <HAL_ADC_ConfigChannel+0x616>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e003      	b.n	8004346 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3301      	adds	r3, #1
 8004348:	069b      	lsls	r3, r3, #26
 800434a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_ADC_ConfigChannel+0x636>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	0e9b      	lsrs	r3, r3, #26
 8004360:	3301      	adds	r3, #1
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	e017      	b.n	800439e <HAL_ADC_ConfigChannel+0x666>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	61fb      	str	r3, [r7, #28]
  return result;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004386:	2320      	movs	r3, #32
 8004388:	e003      	b.n	8004392 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	fab3 f383 	clz	r3, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	ea42 0103 	orr.w	r1, r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x692>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	0e9b      	lsrs	r3, r3, #26
 80043b4:	3301      	adds	r3, #1
 80043b6:	f003 021f 	and.w	r2, r3, #31
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	3b1e      	subs	r3, #30
 80043c2:	051b      	lsls	r3, r3, #20
 80043c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043c8:	e01e      	b.n	8004408 <HAL_ADC_ConfigChannel+0x6d0>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	613b      	str	r3, [r7, #16]
  return result;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e006      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x6bc>
 80043e6:	bf00      	nop
 80043e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f003 021f 	and.w	r2, r3, #31
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	3b1e      	subs	r3, #30
 8004402:	051b      	lsls	r3, r3, #20
 8004404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004408:	430b      	orrs	r3, r1
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	4619      	mov	r1, r3
 8004410:	f7ff fa6a 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_ADC_ConfigChannel+0x7d8>)
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d06c      	beq.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004420:	483c      	ldr	r0, [pc, #240]	; (8004514 <HAL_ADC_ConfigChannel+0x7dc>)
 8004422:	f7ff f9bf 	bl	80037a4 <LL_ADC_GetCommonPathInternalCh>
 8004426:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a3a      	ldr	r2, [pc, #232]	; (8004518 <HAL_ADC_ConfigChannel+0x7e0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d127      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d121      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a35      	ldr	r2, [pc, #212]	; (800451c <HAL_ADC_ConfigChannel+0x7e4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d157      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800444a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800444e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004452:	4619      	mov	r1, r3
 8004454:	482f      	ldr	r0, [pc, #188]	; (8004514 <HAL_ADC_ConfigChannel+0x7dc>)
 8004456:	f7ff f992 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_ADC_ConfigChannel+0x7e8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_ADC_ConfigChannel+0x7ec>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004474:	e002      	b.n	800447c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b01      	subs	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f9      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004482:	e03a      	b.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <HAL_ADC_ConfigChannel+0x7f0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x77e>
 800448e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_ADC_ConfigChannel+0x7e4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d12a      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ac:	4619      	mov	r1, r3
 80044ae:	4819      	ldr	r0, [pc, #100]	; (8004514 <HAL_ADC_ConfigChannel+0x7dc>)
 80044b0:	f7ff f965 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b4:	e021      	b.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_ADC_ConfigChannel+0x7f4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d11c      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_ADC_ConfigChannel+0x7e4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044de:	4619      	mov	r1, r3
 80044e0:	480c      	ldr	r0, [pc, #48]	; (8004514 <HAL_ADC_ConfigChannel+0x7dc>)
 80044e2:	f7ff f94c 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
 80044e6:	e008      	b.n	80044fa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004502:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004506:	4618      	mov	r0, r3
 8004508:	37d8      	adds	r7, #216	; 0xd8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	80080000 	.word	0x80080000
 8004514:	50040300 	.word	0x50040300
 8004518:	c7520000 	.word	0xc7520000
 800451c:	50040000 	.word	0x50040000
 8004520:	20000004 	.word	0x20000004
 8004524:	053e2d63 	.word	0x053e2d63
 8004528:	cb840000 	.word	0xcb840000
 800452c:	80000001 	.word	0x80000001

08004530 <LL_ADC_IsEnabled>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <LL_ADC_IsEnabled+0x18>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_ADC_IsEnabled+0x1a>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_REG_IsConversionOngoing>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d101      	bne.n	800456e <LL_ADC_REG_IsConversionOngoing+0x18>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b09f      	sub	sp, #124	; 0x7c
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e089      	b.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045a2:	2300      	movs	r3, #0
 80045a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80045a6:	2300      	movs	r3, #0
 80045a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a42      	ldr	r2, [pc, #264]	; (80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d102      	bne.n	80045ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	e001      	b.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e068      	b.n	80046ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ffb9 	bl	8004556 <LL_ADC_REG_IsConversionOngoing>
 80045e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ffb3 	bl	8004556 <LL_ADC_REG_IsConversionOngoing>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d14a      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d147      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045fc:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80045fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d027      	beq.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800461a:	035b      	lsls	r3, r3, #13
 800461c:	430b      	orrs	r3, r1
 800461e:	431a      	orrs	r2, r3
 8004620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004622:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004624:	4824      	ldr	r0, [pc, #144]	; (80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004626:	f7ff ff83 	bl	8004530 <LL_ADC_IsEnabled>
 800462a:	4604      	mov	r4, r0
 800462c:	4823      	ldr	r0, [pc, #140]	; (80046bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800462e:	f7ff ff7f 	bl	8004530 <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	4323      	orrs	r3, r4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d132      	bne.n	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004642:	f023 030f 	bic.w	r3, r3, #15
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	6811      	ldr	r1, [r2, #0]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	430a      	orrs	r2, r1
 8004650:	431a      	orrs	r2, r3
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004656:	e023      	b.n	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004664:	4814      	ldr	r0, [pc, #80]	; (80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004666:	f7ff ff63 	bl	8004530 <LL_ADC_IsEnabled>
 800466a:	4604      	mov	r4, r0
 800466c:	4813      	ldr	r0, [pc, #76]	; (80046bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800466e:	f7ff ff5f 	bl	8004530 <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	4323      	orrs	r3, r4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d112      	bne.n	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004682:	f023 030f 	bic.w	r3, r3, #15
 8004686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004688:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800468a:	e009      	b.n	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800469e:	e000      	b.n	80046a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	377c      	adds	r7, #124	; 0x7c
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
 80046b6:	bf00      	nop
 80046b8:	50040000 	.word	0x50040000
 80046bc:	50040100 	.word	0x50040100
 80046c0:	50040300 	.word	0x50040300

080046c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <__NVIC_SetPriorityGrouping+0x44>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046e0:	4013      	ands	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046f6:	4a04      	ldr	r2, [pc, #16]	; (8004708 <__NVIC_SetPriorityGrouping+0x44>)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	60d3      	str	r3, [r2, #12]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <__NVIC_GetPriorityGrouping+0x18>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f003 0307 	and.w	r3, r3, #7
}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	2b00      	cmp	r3, #0
 8004738:	db0b      	blt.n	8004752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	4907      	ldr	r1, [pc, #28]	; (8004760 <__NVIC_EnableIRQ+0x38>)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2001      	movs	r0, #1
 800474a:	fa00 f202 	lsl.w	r2, r0, r2
 800474e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e100 	.word	0xe000e100

08004764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db0a      	blt.n	800478e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	490c      	ldr	r1, [pc, #48]	; (80047b0 <__NVIC_SetPriority+0x4c>)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	0112      	lsls	r2, r2, #4
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	440b      	add	r3, r1
 8004788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800478c:	e00a      	b.n	80047a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4908      	ldr	r1, [pc, #32]	; (80047b4 <__NVIC_SetPriority+0x50>)
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	3b04      	subs	r3, #4
 800479c:	0112      	lsls	r2, r2, #4
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	440b      	add	r3, r1
 80047a2:	761a      	strb	r2, [r3, #24]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000e100 	.word	0xe000e100
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f1c3 0307 	rsb	r3, r3, #7
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	bf28      	it	cs
 80047d6:	2304      	movcs	r3, #4
 80047d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3304      	adds	r3, #4
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d902      	bls.n	80047e8 <NVIC_EncodePriority+0x30>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3b03      	subs	r3, #3
 80047e6:	e000      	b.n	80047ea <NVIC_EncodePriority+0x32>
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	401a      	ands	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004800:	f04f 31ff 	mov.w	r1, #4294967295
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	43d9      	mvns	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004810:	4313      	orrs	r3, r2
         );
}
 8004812:	4618      	mov	r0, r3
 8004814:	3724      	adds	r7, #36	; 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3b01      	subs	r3, #1
 800482c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004830:	d301      	bcc.n	8004836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004832:	2301      	movs	r3, #1
 8004834:	e00f      	b.n	8004856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <SysTick_Config+0x40>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800483e:	210f      	movs	r1, #15
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	f7ff ff8e 	bl	8004764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <SysTick_Config+0x40>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <SysTick_Config+0x40>)
 8004850:	2207      	movs	r2, #7
 8004852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	e000e010 	.word	0xe000e010

08004864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ff29 	bl	80046c4 <__NVIC_SetPriorityGrouping>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800488c:	f7ff ff3e 	bl	800470c <__NVIC_GetPriorityGrouping>
 8004890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	6978      	ldr	r0, [r7, #20]
 8004898:	f7ff ff8e 	bl	80047b8 <NVIC_EncodePriority>
 800489c:	4602      	mov	r2, r0
 800489e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff5d 	bl	8004764 <__NVIC_SetPriority>
}
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ff31 	bl	8004728 <__NVIC_EnableIRQ>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ffa2 	bl	8004820 <SysTick_Config>
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f6:	e14e      	b.n	8004b96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2101      	movs	r1, #1
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8140 	beq.w	8004b90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d005      	beq.n	8004928 <HAL_GPIO_Init+0x40>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d130      	bne.n	800498a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2203      	movs	r2, #3
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800495e:	2201      	movs	r2, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0201 	and.w	r2, r3, #1
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b03      	cmp	r3, #3
 8004994:	d017      	beq.n	80049c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	2203      	movs	r2, #3
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d123      	bne.n	8004a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	08da      	lsrs	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3208      	adds	r2, #8
 80049da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	220f      	movs	r2, #15
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	08da      	lsrs	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3208      	adds	r2, #8
 8004a14:	6939      	ldr	r1, [r7, #16]
 8004a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f003 0203 	and.w	r2, r3, #3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 809a 	beq.w	8004b90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5c:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <HAL_GPIO_Init+0x2cc>)
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	4a54      	ldr	r2, [pc, #336]	; (8004bb4 <HAL_GPIO_Init+0x2cc>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6613      	str	r3, [r2, #96]	; 0x60
 8004a68:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <HAL_GPIO_Init+0x2cc>)
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a74:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <HAL_GPIO_Init+0x2d0>)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	220f      	movs	r2, #15
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a9e:	d013      	beq.n	8004ac8 <HAL_GPIO_Init+0x1e0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a46      	ldr	r2, [pc, #280]	; (8004bbc <HAL_GPIO_Init+0x2d4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_GPIO_Init+0x1dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a45      	ldr	r2, [pc, #276]	; (8004bc0 <HAL_GPIO_Init+0x2d8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <HAL_GPIO_Init+0x1d8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a44      	ldr	r2, [pc, #272]	; (8004bc4 <HAL_GPIO_Init+0x2dc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_GPIO_Init+0x1d4>
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <HAL_GPIO_Init+0x1e2>
 8004abc:	2307      	movs	r3, #7
 8004abe:	e004      	b.n	8004aca <HAL_GPIO_Init+0x1e2>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e002      	b.n	8004aca <HAL_GPIO_Init+0x1e2>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_GPIO_Init+0x1e2>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	f002 0203 	and.w	r2, r2, #3
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	4093      	lsls	r3, r2
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ada:	4937      	ldr	r1, [pc, #220]	; (8004bb8 <HAL_GPIO_Init+0x2d0>)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4013      	ands	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b0c:	4a2e      	ldr	r2, [pc, #184]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b36:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b60:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b8a:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <HAL_GPIO_Init+0x2e0>)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3301      	adds	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f aea9 	bne.w	80048f8 <HAL_GPIO_Init+0x10>
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	48000400 	.word	0x48000400
 8004bc0:	48000800 	.word	0x48000800
 8004bc4:	48000c00 	.word	0x48000c00
 8004bc8:	40010400 	.word	0x40010400

08004bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
 8004be8:	e001      	b.n	8004bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c0c:	787b      	ldrb	r3, [r7, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c12:	887a      	ldrh	r2, [r7, #2]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c18:	e002      	b.n	8004c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	041a      	lsls	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43d9      	mvns	r1, r3
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	400b      	ands	r3, r1
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c62:	b08b      	sub	sp, #44	; 0x2c
 8004c64:	af06      	add	r7, sp, #24
 8004c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e109      	b.n	8004e86 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f008 fb20 	bl	800d2cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 fc63 	bl	8009564 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	687e      	ldr	r6, [r7, #4]
 8004ca6:	466d      	mov	r5, sp
 8004ca8:	f106 0410 	add.w	r4, r6, #16
 8004cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cb8:	1d33      	adds	r3, r6, #4
 8004cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f004 fc29 	bl	8009514 <USB_CoreInit>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0d8      	b.n	8004e86 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 fc5d 	bl	800959a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e04d      	b.n	8004d82 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3305      	adds	r3, #5
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	7bfa      	ldrb	r2, [r7, #15]
 8004d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	b298      	uxth	r0, r3
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	440b      	add	r3, r1
 8004d24:	333a      	adds	r3, #58	; 0x3a
 8004d26:	4602      	mov	r2, r0
 8004d28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	3307      	adds	r3, #7
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	333c      	adds	r3, #60	; 0x3c
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	3340      	adds	r3, #64	; 0x40
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	440b      	add	r3, r1
 8004d76:	3344      	adds	r3, #68	; 0x44
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3ac      	bcc.n	8004ce6 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e044      	b.n	8004e1c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d92:	7bfa      	ldrb	r2, [r7, #15]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	440b      	add	r3, r1
 8004db6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	440b      	add	r3, r1
 8004dcc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dd4:	7bfa      	ldrb	r2, [r7, #15]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e00:	7bfa      	ldrb	r2, [r7, #15]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	440b      	add	r3, r1
 8004e0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d3b5      	bcc.n	8004d92 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	687e      	ldr	r6, [r7, #4]
 8004e2e:	466d      	mov	r5, sp
 8004e30:	f106 0410 	add.w	r4, r6, #16
 8004e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e40:	1d33      	adds	r3, r6, #4
 8004e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f004 fbb5 	bl	80095b4 <USB_DevInit>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e014      	b.n	8004e86 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fc55 	bl	8006724 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f006 fb5d 	bl	800b53e <USB_DevDisconnect>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_PCD_Start+0x16>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e012      	b.n	8004eca <HAL_PCD_Start+0x3c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f004 fb40 	bl	8009536 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f006 fb28 	bl	800b510 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f006 fb42 	bl	800b568 <USB_ReadInterrupts>
 8004ee4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb3e 	bl	8005572 <PCD_EP_ISR_Handler>

    return;
 8004ef6:	e110      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	b292      	uxth	r2, r2
 8004f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f008 fa8d 	bl	800d43a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f20:	2100      	movs	r1, #0
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8fc 	bl	8005120 <HAL_PCD_SetAddress>

    return;
 8004f28:	e0f7      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f46:	b292      	uxth	r2, r2
 8004f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004f4c:	e0e5      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004f70:	e0d3      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d034      	beq.n	8004fe6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	b292      	uxth	r2, r2
 8004f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0208 	bic.w	r2, r2, #8
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f008 fceb 	bl	800d99c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f008 fa70 	bl	800d4ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004fe4:	e099      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d027      	beq.n	8005040 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	b292      	uxth	r2, r2
 8005004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501a:	b292      	uxth	r2, r2
 800501c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0204 	orr.w	r2, r2, #4
 8005032:	b292      	uxth	r2, r2
 8005034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f008 fa1d 	bl	800d478 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800503e:	e06c      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d040      	beq.n	80050cc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505c:	b292      	uxth	r2, r2
 800505e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d12b      	bne.n	80050c4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0204 	orr.w	r2, r2, #4
 800507e:	b292      	uxth	r2, r2
 8005080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	b292      	uxth	r2, r2
 8005098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050ba:	2101      	movs	r1, #1
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f008 fc6d 	bl	800d99c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050c2:	e02a      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f008 f9d7 	bl	800d478 <HAL_PCD_SuspendCallback>
    return;
 80050ca:	e026      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050e8:	b292      	uxth	r2, r2
 80050ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f008 f995 	bl	800d41e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050f4:	e011      	b.n	800511a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00c      	beq.n	800511a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005112:	b292      	uxth	r2, r2
 8005114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005118:	bf00      	nop
  }
}
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_PCD_SetAddress+0x1a>
 8005136:	2302      	movs	r3, #2
 8005138:	e013      	b.n	8005162 <HAL_PCD_SetAddress+0x42>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f006 f9c8 	bl	800b4e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	4608      	mov	r0, r1
 8005174:	4611      	mov	r1, r2
 8005176:	461a      	mov	r2, r3
 8005178:	4603      	mov	r3, r0
 800517a:	70fb      	strb	r3, [r7, #3]
 800517c:	460b      	mov	r3, r1
 800517e:	803b      	strh	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	da0f      	bge.n	80051b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4413      	add	r3, r2
 80051a4:	3304      	adds	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	705a      	strb	r2, [r3, #1]
 80051ae:	e00f      	b.n	80051d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 0207 	and.w	r2, r3, #7
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	3304      	adds	r3, #4
 80051c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051dc:	883a      	ldrh	r2, [r7, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	78ba      	ldrb	r2, [r7, #2]
 80051e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051fa:	78bb      	ldrb	r3, [r7, #2]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d102      	bne.n	8005206 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_PCD_EP_Open+0xaa>
 8005210:	2302      	movs	r3, #2
 8005212:	e00e      	b.n	8005232 <HAL_PCD_EP_Open+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	4618      	mov	r0, r3
 8005224:	f004 f9e8 	bl	80095f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005230:	7afb      	ldrb	r3, [r7, #11]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	460b      	mov	r3, r1
 8005244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da0f      	bge.n	800526e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	3304      	adds	r3, #4
 8005264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	705a      	strb	r2, [r3, #1]
 800526c:	e00f      	b.n	800528e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	f003 0207 	and.w	r2, r3, #7
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_PCD_EP_Close+0x6e>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e00e      	b.n	80052c6 <HAL_PCD_EP_Close+0x8c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f004 fd58 	bl	8009d6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	460b      	mov	r3, r1
 80052dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	f003 0207 	and.w	r2, r3, #7
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005310:	7afb      	ldrb	r3, [r7, #11]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	b2da      	uxtb	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800531c:	7afb      	ldrb	r3, [r7, #11]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 ff0a 	bl	800a146 <USB_EPStartXfer>
 8005332:	e005      	b.n	8005340 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	4618      	mov	r0, r3
 800533c:	f004 ff03 	bl	800a146 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 0207 	and.w	r2, r3, #7
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800536c:	681b      	ldr	r3, [r3, #0]
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	460b      	mov	r3, r1
 8005388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538a:	7afb      	ldrb	r3, [r7, #11]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	3304      	adds	r3, #4
 80053a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2201      	movs	r2, #1
 80053c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f004 feae 	bl	800a146 <USB_EPStartXfer>
 80053ea:	e005      	b.n	80053f8 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 fea7 	bl	800a146 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	f003 0207 	and.w	r2, r3, #7
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	d901      	bls.n	8005420 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e04e      	b.n	80054be <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da0f      	bge.n	8005448 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	3304      	adds	r3, #4
 800543e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	705a      	strb	r2, [r3, #1]
 8005446:	e00d      	b.n	8005464 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	3304      	adds	r3, #4
 800545c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_PCD_EP_SetStall+0x82>
 8005480:	2302      	movs	r3, #2
 8005482:	e01c      	b.n	80054be <HAL_PCD_EP_SetStall+0xbc>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	4618      	mov	r0, r3
 8005494:	f005 ff29 	bl	800b2ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f006 f86a 	bl	800b588 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e042      	b.n	800556a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da0f      	bge.n	800550c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	705a      	strb	r2, [r3, #1]
 800550a:	e00f      	b.n	800552c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	f003 0207 	and.w	r2, r3, #7
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_PCD_EP_ClrStall+0x86>
 8005548:	2302      	movs	r3, #2
 800554a:	e00e      	b.n	800556a <HAL_PCD_EP_ClrStall+0xa4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	4618      	mov	r0, r3
 800555c:	f005 ff16 	bl	800b38c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b096      	sub	sp, #88	; 0x58
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800557a:	e3a9      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005588:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005596:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 8169 	bne.w	8005872 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d150      	bne.n	800564e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	81fb      	strh	r3, [r7, #14]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	89fb      	ldrh	r3, [r7, #14]
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	332c      	adds	r3, #44	; 0x2c
 80055d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80055fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	441a      	add	r2, r3
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800560c:	2100      	movs	r1, #0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f007 feeb 	bl	800d3ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8357 	beq.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 8352 	bne.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	b292      	uxth	r2, r2
 8005640:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800564c:	e340      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005654:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005660:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	2b00      	cmp	r3, #0
 800566a:	d032      	beq.n	80056d2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	4413      	add	r3, r2
 8005686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005692:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f005 ffbc 	bl	800b624 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056b8:	4013      	ands	r3, r2
 80056ba:	823b      	strh	r3, [r7, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	8a3a      	ldrh	r2, [r7, #16]
 80056c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056c6:	b292      	uxth	r2, r2
 80056c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f007 fe60 	bl	800d390 <HAL_PCD_SetupStageCallback>
 80056d0:	e2fe      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056d2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f280 82fa 	bge.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056e8:	4013      	ands	r3, r2
 80056ea:	83fb      	strh	r3, [r7, #30]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	8bfa      	ldrh	r2, [r7, #30]
 80056f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056f6:	b292      	uxth	r2, r2
 80056f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	4413      	add	r3, r2
 8005714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d019      	beq.n	800575e <PCD_EP_ISR_Handler+0x1ec>
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d015      	beq.n	800575e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005742:	b29b      	uxth	r3, r3
 8005744:	f005 ff6e 	bl	800b624 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	441a      	add	r2, r3
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005756:	2100      	movs	r1, #0
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f007 fe2b 	bl	800d3b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005768:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800576c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 82ad 	bne.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
 8005776:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800577a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800577e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005782:	f000 82a5 	beq.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	4413      	add	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b3e      	cmp	r3, #62	; 0x3e
 80057ac:	d918      	bls.n	80057e0 <PCD_EP_ISR_Handler+0x26e>
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	647b      	str	r3, [r7, #68]	; 0x44
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <PCD_EP_ISR_Handler+0x256>
 80057c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c4:	3b01      	subs	r3, #1
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44
 80057c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d8:	b29a      	uxth	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e029      	b.n	8005834 <PCD_EP_ISR_Handler+0x2c2>
 80057e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d112      	bne.n	800580e <PCD_EP_ISR_Handler+0x29c>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e012      	b.n	8005834 <PCD_EP_ISR_Handler+0x2c2>
 800580e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <PCD_EP_ISR_Handler+0x2b6>
 8005822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005824:	3301      	adds	r3, #1
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
 8005828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582a:	b29b      	uxth	r3, r3
 800582c:	029b      	lsls	r3, r3, #10
 800582e:	b29a      	uxth	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	827b      	strh	r3, [r7, #18]
 8005846:	8a7b      	ldrh	r3, [r7, #18]
 8005848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800584c:	827b      	strh	r3, [r7, #18]
 800584e:	8a7b      	ldrh	r3, [r7, #18]
 8005850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005854:	827b      	strh	r3, [r7, #18]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	8a7b      	ldrh	r3, [r7, #18]
 800585c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]
 8005870:	e22e      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005886:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800588a:	2b00      	cmp	r3, #0
 800588c:	f280 80f7 	bge.w	8005a7e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058a6:	4013      	ands	r3, r2
 80058a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80058be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058c2:	b292      	uxth	r2, r2
 80058c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058c6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e0:	7b1b      	ldrb	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d123      	bne.n	800592e <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	4413      	add	r3, r2
 8005900:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800590e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 808e 	beq.w	8005a34 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591e:	6959      	ldr	r1, [r3, #20]
 8005920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005922:	88da      	ldrh	r2, [r3, #6]
 8005924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005928:	f005 fe7c 	bl	800b624 <USB_ReadPMA>
 800592c:	e082      	b.n	8005a34 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d10a      	bne.n	800594c <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005936:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800593a:	461a      	mov	r2, r3
 800593c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f9d4 	bl	8005cec <HAL_PCD_EP_DB_Receive>
 8005944:	4603      	mov	r3, r0
 8005946:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800594a:	e073      	b.n	8005a34 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800597c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800598c:	b29b      	uxth	r3, r3
 800598e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d022      	beq.n	80059f0 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80059d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02c      	beq.n	8005a34 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	6959      	ldr	r1, [r3, #20]
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	891a      	ldrh	r2, [r3, #8]
 80059e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059ea:	f005 fe1b 	bl	800b624 <USB_ReadPMA>
 80059ee:	e021      	b.n	8005a34 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005a18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	895a      	ldrh	r2, [r3, #10]
 8005a2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a30:	f005 fdf8 	bl	800b624 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a3c:	441a      	add	r2, r3
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a4a:	441a      	add	r2, r3
 8005a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <PCD_EP_ISR_Handler+0x4f2>
 8005a58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d206      	bcs.n	8005a72 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f007 fca2 	bl	800d3b4 <HAL_PCD_DataOutStageCallback>
 8005a70:	e005      	b.n	8005a7e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 fb64 	bl	800a146 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a7e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8122 	beq.w	8005cd0 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae0:	78db      	ldrb	r3, [r3, #3]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	f040 80a2 	bne.w	8005c2c <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8093 	beq.w	8005c1e <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005af8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d046      	beq.n	8005b92 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d126      	bne.n	8005b5a <PCD_EP_ISR_Handler+0x5e8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	4413      	add	r3, r2
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	00da      	lsls	r2, r3, #3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b32:	623b      	str	r3, [r7, #32]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e061      	b.n	8005c1e <PCD_EP_ISR_Handler+0x6ac>
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d15d      	bne.n	8005c1e <PCD_EP_ISR_Handler+0x6ac>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	4413      	add	r3, r2
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00da      	lsls	r2, r3, #3
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e045      	b.n	8005c1e <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d126      	bne.n	8005bee <PCD_EP_ISR_Handler+0x67c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	4413      	add	r3, r2
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00da      	lsls	r2, r3, #3
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	e017      	b.n	8005c1e <PCD_EP_ISR_Handler+0x6ac>
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d113      	bne.n	8005c1e <PCD_EP_ISR_Handler+0x6ac>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c04:	4413      	add	r3, r2
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	00da      	lsls	r2, r3, #3
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f007 fbe0 	bl	800d3ea <HAL_PCD_DataInStageCallback>
 8005c2a:	e051      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d144      	bne.n	8005cc2 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d907      	bls.n	8005c7c <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c74:	1ad2      	subs	r2, r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	619a      	str	r2, [r3, #24]
 8005c7a:	e002      	b.n	8005c82 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7e:	2200      	movs	r2, #0
 8005c80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f007 fbaa 	bl	800d3ea <HAL_PCD_DataInStageCallback>
 8005c96:	e01b      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ca0:	441a      	add	r2, r3
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cae:	441a      	add	r2, r3
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 fa43 	bl	800a146 <USB_EPStartXfer>
 8005cc0:	e006      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005cc2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f917 	bl	8005efe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f6ff ac4d 	blt.w	800557c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3758      	adds	r7, #88	; 0x58
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d07c      	beq.n	8005dfe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	8b7b      	ldrh	r3, [r7, #26]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d306      	bcc.n	8005d42 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	8b7b      	ldrh	r3, [r7, #26]
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	619a      	str	r2, [r3, #24]
 8005d40:	e002      	b.n	8005d48 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d123      	bne.n	8005d98 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	833b      	strh	r3, [r7, #24]
 8005d6c:	8b3b      	ldrh	r3, [r7, #24]
 8005d6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d72:	833b      	strh	r3, [r7, #24]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	8b3b      	ldrh	r3, [r7, #24]
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01f      	beq.n	8005de2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbc:	82fb      	strh	r3, [r7, #22]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8afb      	ldrh	r3, [r7, #22]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005de2:	8b7b      	ldrh	r3, [r7, #26]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8085 	beq.w	8005ef4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6959      	ldr	r1, [r3, #20]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	891a      	ldrh	r2, [r3, #8]
 8005df6:	8b7b      	ldrh	r3, [r7, #26]
 8005df8:	f005 fc14 	bl	800b624 <USB_ReadPMA>
 8005dfc:	e07a      	b.n	8005ef4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	8b7b      	ldrh	r3, [r7, #26]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d306      	bcc.n	8005e3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	8b7b      	ldrh	r3, [r7, #26]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	619a      	str	r2, [r3, #24]
 8005e3a:	e002      	b.n	8005e42 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d123      	bne.n	8005e92 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	83fb      	strh	r3, [r7, #30]
 8005e66:	8bfb      	ldrh	r3, [r7, #30]
 8005e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e6c:	83fb      	strh	r3, [r7, #30]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	8bfb      	ldrh	r3, [r7, #30]
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11f      	bne.n	8005edc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	83bb      	strh	r3, [r7, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	8bbb      	ldrh	r3, [r7, #28]
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005edc:	8b7b      	ldrh	r3, [r7, #26]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6959      	ldr	r1, [r3, #20]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	895a      	ldrh	r2, [r3, #10]
 8005eee:	8b7b      	ldrh	r3, [r7, #26]
 8005ef0:	f005 fb98 	bl	800b624 <USB_ReadPMA>
    }
  }

  return count;
 8005ef4:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b0a2      	sub	sp, #136	; 0x88
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 81c5 	beq.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d907      	bls.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	619a      	str	r2, [r3, #24]
 8005f5a:	e002      	b.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80b9 	bne.w	80060de <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d126      	bne.n	8005fc2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	4413      	add	r3, r2
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	00da      	lsls	r2, r3, #3
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	e01a      	b.n	8005ff8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d116      	bne.n	8005ff8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	4413      	add	r3, r2
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	00da      	lsls	r2, r3, #3
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d126      	bne.n	8006054 <HAL_PCD_EP_DB_Transmit+0x156>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	4413      	add	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	00da      	lsls	r2, r3, #3
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4413      	add	r3, r2
 8006028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006038:	b29a      	uxth	r2, r3
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e017      	b.n	8006084 <HAL_PCD_EP_DB_Transmit+0x186>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d113      	bne.n	8006084 <HAL_PCD_EP_DB_Transmit+0x186>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	4413      	add	r3, r2
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00da      	lsls	r2, r3, #3
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	4413      	add	r3, r2
 8006078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2200      	movs	r2, #0
 8006082:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	4619      	mov	r1, r3
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f007 f9ad 	bl	800d3ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 82d2 	beq.w	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	827b      	strh	r3, [r7, #18]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	8a7b      	ldrh	r3, [r7, #18]
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	8013      	strh	r3, [r2, #0]
 80060dc:	e2b0      	b.n	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d021      	beq.n	800612c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	b29b      	uxth	r3, r3
 800612a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006132:	2b01      	cmp	r3, #1
 8006134:	f040 8284 	bne.w	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006140:	441a      	add	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800614e:	441a      	add	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d309      	bcc.n	8006174 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a1a      	ldr	r2, [r3, #32]
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	621a      	str	r2, [r3, #32]
 8006172:	e015      	b.n	80061a0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800617c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006180:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800618a:	e009      	b.n	80061a0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d155      	bne.n	8006254 <HAL_PCD_EP_DB_Transmit+0x356>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	4413      	add	r3, r2
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	00da      	lsls	r2, r3, #3
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	2b3e      	cmp	r3, #62	; 0x3e
 80061d4:	d916      	bls.n	8006204 <HAL_PCD_EP_DB_Transmit+0x306>
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	64bb      	str	r3, [r7, #72]	; 0x48
 80061dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_PCD_EP_DB_Transmit+0x2ee>
 80061e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e8:	3b01      	subs	r3, #1
 80061ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	029b      	lsls	r3, r3, #10
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e043      	b.n	800628c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006206:	2b00      	cmp	r3, #0
 8006208:	d112      	bne.n	8006230 <HAL_PCD_EP_DB_Transmit+0x332>
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006214:	b29a      	uxth	r2, r3
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e02d      	b.n	800628c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	64bb      	str	r3, [r7, #72]	; 0x48
 8006236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_PCD_EP_DB_Transmit+0x348>
 8006240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006242:	3301      	adds	r3, #1
 8006244:	64bb      	str	r3, [r7, #72]	; 0x48
 8006246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29a      	uxth	r2, r3
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e01b      	b.n	800628c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d117      	bne.n	800628c <HAL_PCD_EP_DB_Transmit+0x38e>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626a:	b29b      	uxth	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006270:	4413      	add	r3, r2
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	00da      	lsls	r2, r3, #3
 800627a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627c:	4413      	add	r3, r2
 800627e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006286:	b29a      	uxth	r2, r3
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6959      	ldr	r1, [r3, #20]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	891a      	ldrh	r2, [r3, #8]
 8006298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629a:	b29b      	uxth	r3, r3
 800629c:	f005 f980 	bl	800b5a0 <USB_WritePMA>
 80062a0:	e1ce      	b.n	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d307      	bcc.n	80062e6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	619a      	str	r2, [r3, #24]
 80062e4:	e002      	b.n	80062ec <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 80c4 	bne.w	800647e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d126      	bne.n	800634c <HAL_PCD_EP_DB_Transmit+0x44e>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	66bb      	str	r3, [r7, #104]	; 0x68
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006312:	4413      	add	r3, r2
 8006314:	66bb      	str	r3, [r7, #104]	; 0x68
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	00da      	lsls	r2, r3, #3
 800631c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631e:	4413      	add	r3, r2
 8006320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006324:	667b      	str	r3, [r7, #100]	; 0x64
 8006326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006330:	b29a      	uxth	r2, r3
 8006332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e01a      	b.n	8006382 <HAL_PCD_EP_DB_Transmit+0x484>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d116      	bne.n	8006382 <HAL_PCD_EP_DB_Transmit+0x484>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	673b      	str	r3, [r7, #112]	; 0x70
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006368:	4413      	add	r3, r2
 800636a:	673b      	str	r3, [r7, #112]	; 0x70
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00da      	lsls	r2, r3, #3
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	4413      	add	r3, r2
 8006376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800637a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637e:	2200      	movs	r2, #0
 8006380:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d12f      	bne.n	80063f0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	00da      	lsls	r2, r3, #3
 80063b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e017      	b.n	8006420 <HAL_PCD_EP_DB_Transmit+0x522>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d113      	bne.n	8006420 <HAL_PCD_EP_DB_Transmit+0x522>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006406:	4413      	add	r3, r2
 8006408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006412:	4413      	add	r3, r2
 8006414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006418:	67bb      	str	r3, [r7, #120]	; 0x78
 800641a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641c:	2200      	movs	r2, #0
 800641e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f006 ffdf 	bl	800d3ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 8104 	bne.w	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
 800647c:	e0e0      	b.n	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d121      	bne.n	80064cc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	f040 80b4 	bne.w	8006640 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064e0:	441a      	add	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064ee:	441a      	add	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d309      	bcc.n	8006514 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650c:	1ad2      	subs	r2, r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	621a      	str	r2, [r3, #32]
 8006512:	e015      	b.n	8006540 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800651c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006520:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800652a:	e009      	b.n	8006540 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	663b      	str	r3, [r7, #96]	; 0x60
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d155      	bne.n	80065fa <HAL_PCD_EP_DB_Transmit+0x6fc>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	65bb      	str	r3, [r7, #88]	; 0x58
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006562:	4413      	add	r3, r2
 8006564:	65bb      	str	r3, [r7, #88]	; 0x58
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00da      	lsls	r2, r3, #3
 800656c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800656e:	4413      	add	r3, r2
 8006570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006574:	657b      	str	r3, [r7, #84]	; 0x54
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	2b3e      	cmp	r3, #62	; 0x3e
 800657a:	d916      	bls.n	80065aa <HAL_PCD_EP_DB_Transmit+0x6ac>
 800657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	677b      	str	r3, [r7, #116]	; 0x74
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <HAL_PCD_EP_DB_Transmit+0x694>
 800658c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800658e:	3b01      	subs	r3, #1
 8006590:	677b      	str	r3, [r7, #116]	; 0x74
 8006592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006594:	b29b      	uxth	r3, r3
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	b29b      	uxth	r3, r3
 800659a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e040      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x72e>
 80065aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d112      	bne.n	80065d6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80065b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	e02a      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x72e>
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	677b      	str	r3, [r7, #116]	; 0x74
 80065dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_PCD_EP_DB_Transmit+0x6ee>
 80065e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e8:	3301      	adds	r3, #1
 80065ea:	677b      	str	r3, [r7, #116]	; 0x74
 80065ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e018      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x72e>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d114      	bne.n	800662c <HAL_PCD_EP_DB_Transmit+0x72e>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006610:	4413      	add	r3, r2
 8006612:	663b      	str	r3, [r7, #96]	; 0x60
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661c:	4413      	add	r3, r2
 800661e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	b29a      	uxth	r2, r3
 8006628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6959      	ldr	r1, [r3, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	895a      	ldrh	r2, [r3, #10]
 8006638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	f004 ffb0 	bl	800b5a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665a:	823b      	strh	r3, [r7, #16]
 800665c:	8a3b      	ldrh	r3, [r7, #16]
 800665e:	f083 0310 	eor.w	r3, r3, #16
 8006662:	823b      	strh	r3, [r7, #16]
 8006664:	8a3b      	ldrh	r3, [r7, #16]
 8006666:	f083 0320 	eor.w	r3, r3, #32
 800666a:	823b      	strh	r3, [r7, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8a3b      	ldrh	r3, [r7, #16]
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3788      	adds	r7, #136	; 0x88
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800669a:	b480      	push	{r7}
 800669c:	b087      	sub	sp, #28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	817b      	strh	r3, [r7, #10]
 80066a8:	4613      	mov	r3, r2
 80066aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066ac:	897b      	ldrh	r3, [r7, #10]
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066b8:	897b      	ldrh	r3, [r7, #10]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e00a      	b.n	80066e8 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066d2:	897a      	ldrh	r2, [r7, #10]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	3304      	adds	r3, #4
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066e8:	893b      	ldrh	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d107      	bne.n	80066fe <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2200      	movs	r2, #0
 80066f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	80da      	strh	r2, [r3, #6]
 80066fc:	e00b      	b.n	8006716 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2201      	movs	r2, #1
 8006702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	b29a      	uxth	r2, r3
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	b29a      	uxth	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006748:	b29b      	uxth	r3, r3
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800675c:	b29b      	uxth	r3, r3
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <HAL_PWREx_GetVoltageRange+0x18>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40007000 	.word	0x40007000

08006794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a2:	d130      	bne.n	8006806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b0:	d038      	beq.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2232      	movs	r2, #50	; 0x32
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	0c9b      	lsrs	r3, r3, #18
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d8:	e002      	b.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b01      	subs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ec:	d102      	bne.n	80067f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f2      	bne.n	80067da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006800:	d110      	bne.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e00f      	b.n	8006826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800680e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006812:	d007      	beq.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800681c:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800681e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40007000 	.word	0x40007000
 8006838:	20000004 	.word	0x20000004
 800683c:	431bde83 	.word	0x431bde83

08006840 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4a04      	ldr	r2, [pc, #16]	; (800685c <HAL_PWREx_EnableVddUSB+0x1c>)
 800684a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800684e:	6053      	str	r3, [r2, #4]
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40007000 	.word	0x40007000

08006860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f000 bc52 	b.w	8007118 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006874:	4ba1      	ldr	r3, [pc, #644]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800687e:	4b9f      	ldr	r3, [pc, #636]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80e6 	beq.w	8006a62 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_RCC_OscConfig+0x4c>
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	f040 808d 	bne.w	80069be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	f040 8089 	bne.w	80069be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068ac:	4b93      	ldr	r3, [pc, #588]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d006      	beq.n	80068c6 <HAL_RCC_OscConfig+0x66>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f000 bc29 	b.w	8007118 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ca:	4b8c      	ldr	r3, [pc, #560]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <HAL_RCC_OscConfig+0x80>
 80068d6:	4b89      	ldr	r3, [pc, #548]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068de:	e005      	b.n	80068ec <HAL_RCC_OscConfig+0x8c>
 80068e0:	4b86      	ldr	r3, [pc, #536]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d224      	bcs.n	800693a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fda1 	bl	800743c <RCC_SetFlashLatencyFromMSIRange>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f000 bc09 	b.w	8007118 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006906:	4b7d      	ldr	r3, [pc, #500]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7c      	ldr	r2, [pc, #496]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b7a      	ldr	r3, [pc, #488]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	4977      	ldr	r1, [pc, #476]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006924:	4b75      	ldr	r3, [pc, #468]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	4972      	ldr	r1, [pc, #456]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]
 8006938:	e025      	b.n	8006986 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800693a:	4b70      	ldr	r3, [pc, #448]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6f      	ldr	r2, [pc, #444]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006940:	f043 0308 	orr.w	r3, r3, #8
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b6d      	ldr	r3, [pc, #436]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	496a      	ldr	r1, [pc, #424]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006958:	4b68      	ldr	r3, [pc, #416]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	4965      	ldr	r1, [pc, #404]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fd60 	bl	800743c <RCC_SetFlashLatencyFromMSIRange>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e3c8      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006986:	f000 fccd 	bl	8007324 <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b5b      	ldr	r3, [pc, #364]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	495a      	ldr	r1, [pc, #360]	; (8006b00 <HAL_RCC_OscConfig+0x2a0>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	4a58      	ldr	r2, [pc, #352]	; (8006b04 <HAL_RCC_OscConfig+0x2a4>)
 80069a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069a6:	4b58      	ldr	r3, [pc, #352]	; (8006b08 <HAL_RCC_OscConfig+0x2a8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fc fe54 	bl	8003658 <HAL_InitTick>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d052      	beq.n	8006a60 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	e3ac      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d032      	beq.n	8006a2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069c6:	4b4d      	ldr	r3, [pc, #308]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4c      	ldr	r2, [pc, #304]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069d2:	f7fc fe91 	bl	80036f8 <HAL_GetTick>
 80069d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069da:	f7fc fe8d 	bl	80036f8 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e395      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069ec:	4b43      	ldr	r3, [pc, #268]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0f0      	beq.n	80069da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069f8:	4b40      	ldr	r3, [pc, #256]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3f      	ldr	r2, [pc, #252]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 80069fe:	f043 0308 	orr.w	r3, r3, #8
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	493a      	ldr	r1, [pc, #232]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a16:	4b39      	ldr	r3, [pc, #228]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	4935      	ldr	r1, [pc, #212]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
 8006a2a:	e01a      	b.n	8006a62 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a2c:	4b33      	ldr	r3, [pc, #204]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a32      	ldr	r2, [pc, #200]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a38:	f7fc fe5e 	bl	80036f8 <HAL_GetTick>
 8006a3c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a40:	f7fc fe5a 	bl	80036f8 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e362      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x1e0>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d073      	beq.n	8006b56 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_OscConfig+0x220>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d10e      	bne.n	8006a98 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d10b      	bne.n	8006a98 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a80:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d063      	beq.n	8006b54 <HAL_RCC_OscConfig+0x2f4>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d15f      	bne.n	8006b54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e33f      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa0:	d106      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x250>
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e01d      	b.n	8006aec <HAL_RCC_OscConfig+0x28c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x274>
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a0f      	ldr	r2, [pc, #60]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e00b      	b.n	8006aec <HAL_RCC_OscConfig+0x28c>
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a08      	ldr	r2, [pc, #32]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a05      	ldr	r2, [pc, #20]	; (8006afc <HAL_RCC_OscConfig+0x29c>)
 8006ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fc fe00 	bl	80036f8 <HAL_GetTick>
 8006af8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006afa:	e010      	b.n	8006b1e <HAL_RCC_OscConfig+0x2be>
 8006afc:	40021000 	.word	0x40021000
 8006b00:	0800dd3c 	.word	0x0800dd3c
 8006b04:	20000004 	.word	0x20000004
 8006b08:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7fc fdf4 	bl	80036f8 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e2fc      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b1e:	4ba0      	ldr	r3, [pc, #640]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x2ac>
 8006b2a:	e014      	b.n	8006b56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fc fde4 	bl	80036f8 <HAL_GetTick>
 8006b30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b34:	f7fc fde0 	bl	80036f8 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	; 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e2e8      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b46:	4b96      	ldr	r3, [pc, #600]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x2d4>
 8006b52:	e000      	b.n	8006b56 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d060      	beq.n	8006c24 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_OscConfig+0x314>
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b0c      	cmp	r3, #12
 8006b6c:	d119      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d116      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b74:	4b8a      	ldr	r3, [pc, #552]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_OscConfig+0x32c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e2c5      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b84      	ldr	r3, [pc, #528]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	4981      	ldr	r1, [pc, #516]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ba0:	e040      	b.n	8006c24 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d023      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006baa:	4b7d      	ldr	r3, [pc, #500]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a7c      	ldr	r2, [pc, #496]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb6:	f7fc fd9f 	bl	80036f8 <HAL_GetTick>
 8006bba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bbe:	f7fc fd9b 	bl	80036f8 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e2a3      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bd0:	4b73      	ldr	r3, [pc, #460]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bdc:	4b70      	ldr	r3, [pc, #448]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	496d      	ldr	r1, [pc, #436]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
 8006bf0:	e018      	b.n	8006c24 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf2:	4b6b      	ldr	r3, [pc, #428]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6a      	ldr	r2, [pc, #424]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fc fd7b 	bl	80036f8 <HAL_GetTick>
 8006c02:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c06:	f7fc fd77 	bl	80036f8 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e27f      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c18:	4b61      	ldr	r3, [pc, #388]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f0      	bne.n	8006c06 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d07f      	beq.n	8006d30 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05f      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006c38:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d037      	beq.n	8006cbe <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e258      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01b      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c76:	4a4a      	ldr	r2, [pc, #296]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c80:	f7fc fd3a 	bl	80036f8 <HAL_GetTick>
 8006c84:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c88:	f7fc fd36 	bl	80036f8 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b11      	cmp	r3, #17
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e23e      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1ef      	bne.n	8006c88 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	f023 0210 	bic.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	493a      	ldr	r1, [pc, #232]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cbe:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cc4:	4a36      	ldr	r2, [pc, #216]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fc fd13 	bl	80036f8 <HAL_GetTick>
 8006cd2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd6:	f7fc fd0f 	bl	80036f8 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b11      	cmp	r3, #17
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e217      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ce8:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0ef      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x476>
 8006cf6:	e01b      	b.n	8006d30 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf8:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cfe:	4a28      	ldr	r2, [pc, #160]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fc fcf6 	bl	80036f8 <HAL_GetTick>
 8006d0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d10:	f7fc fcf2 	bl	80036f8 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b11      	cmp	r3, #17
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e1fa      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d22:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1ef      	bne.n	8006d10 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80c1 	beq.w	8006ec0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d44:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10e      	bne.n	8006d6e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d50:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <HAL_RCC_OscConfig+0x540>)
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <HAL_RCC_OscConfig+0x544>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_RCC_OscConfig+0x544>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <HAL_RCC_OscConfig+0x544>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d86:	f7fc fcb7 	bl	80036f8 <HAL_GetTick>
 8006d8a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d8c:	e00c      	b.n	8006da8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8e:	f7fc fcb3 	bl	80036f8 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d905      	bls.n	8006da8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e1bb      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
 8006da0:	40021000 	.word	0x40021000
 8006da4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006da8:	4bb1      	ldr	r3, [pc, #708]	; (8007070 <HAL_RCC_OscConfig+0x810>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ec      	beq.n	8006d8e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02c      	beq.n	8006e1a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006dc0:	4bac      	ldr	r3, [pc, #688]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	49a8      	ldr	r1, [pc, #672]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d010      	beq.n	8006e08 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006de6:	4ba3      	ldr	r3, [pc, #652]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dec:	4aa1      	ldr	r2, [pc, #644]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006dee:	f043 0304 	orr.w	r3, r3, #4
 8006df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006df6:	4b9f      	ldr	r3, [pc, #636]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfc:	4a9d      	ldr	r2, [pc, #628]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e06:	e018      	b.n	8006e3a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e08:	4b9a      	ldr	r3, [pc, #616]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0e:	4a99      	ldr	r2, [pc, #612]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e18:	e00f      	b.n	8006e3a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e1a:	4b96      	ldr	r3, [pc, #600]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	4a94      	ldr	r2, [pc, #592]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006e2a:	4b92      	ldr	r3, [pc, #584]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	4a90      	ldr	r2, [pc, #576]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e32:	f023 0304 	bic.w	r3, r3, #4
 8006e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d016      	beq.n	8006e70 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e42:	f7fc fc59 	bl	80036f8 <HAL_GetTick>
 8006e46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fc fc55 	bl	80036f8 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e15b      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e60:	4b84      	ldr	r3, [pc, #528]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0ed      	beq.n	8006e4a <HAL_RCC_OscConfig+0x5ea>
 8006e6e:	e01d      	b.n	8006eac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fc fc42 	bl	80036f8 <HAL_GetTick>
 8006e74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e78:	f7fc fc3e 	bl	80036f8 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e144      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e8e:	4b79      	ldr	r3, [pc, #484]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ed      	bne.n	8006e78 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006e9c:	4b75      	ldr	r3, [pc, #468]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	4a74      	ldr	r2, [pc, #464]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb4:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	4a6e      	ldr	r2, [pc, #440]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d03c      	beq.n	8006f46 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01c      	beq.n	8006f0e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ed4:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eda:	4a66      	ldr	r2, [pc, #408]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fc fc08 	bl	80036f8 <HAL_GetTick>
 8006ee8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eec:	f7fc fc04 	bl	80036f8 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e10c      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006efe:	4b5d      	ldr	r3, [pc, #372]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0ef      	beq.n	8006eec <HAL_RCC_OscConfig+0x68c>
 8006f0c:	e01b      	b.n	8006f46 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f0e:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f14:	4a57      	ldr	r2, [pc, #348]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1e:	f7fc fbeb 	bl	80036f8 <HAL_GetTick>
 8006f22:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f26:	f7fc fbe7 	bl	80036f8 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e0ef      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f38:	4b4e      	ldr	r3, [pc, #312]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1ef      	bne.n	8006f26 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80e3 	beq.w	8007116 <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	f040 80b7 	bne.w	80070c8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f5a:	4b46      	ldr	r3, [pc, #280]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0203 	and.w	r2, r3, #3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d124      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d113      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d109      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d061      	beq.n	800707c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b0c      	cmp	r3, #12
 8006fbc:	d056      	beq.n	800706c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006fbe:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006fca:	f7fc fb95 	bl	80036f8 <HAL_GetTick>
 8006fce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd2:	f7fc fb91 	bl	80036f8 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e099      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fe4:	4b23      	ldr	r3, [pc, #140]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ff0:	4b20      	ldr	r3, [pc, #128]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <HAL_RCC_OscConfig+0x818>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007000:	3a01      	subs	r2, #1
 8007002:	0112      	lsls	r2, r2, #4
 8007004:	4311      	orrs	r1, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800700a:	0212      	lsls	r2, r2, #8
 800700c:	4311      	orrs	r1, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007012:	0852      	lsrs	r2, r2, #1
 8007014:	3a01      	subs	r2, #1
 8007016:	0552      	lsls	r2, r2, #21
 8007018:	4311      	orrs	r1, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800701e:	0852      	lsrs	r2, r2, #1
 8007020:	3a01      	subs	r2, #1
 8007022:	0652      	lsls	r2, r2, #25
 8007024:	430a      	orrs	r2, r1
 8007026:	4913      	ldr	r1, [pc, #76]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8007028:	4313      	orrs	r3, r2
 800702a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a10      	ldr	r2, [pc, #64]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8007032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 800703e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007044:	f7fc fb58 	bl	80036f8 <HAL_GetTick>
 8007048:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800704c:	f7fc fb54 	bl	80036f8 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e05c      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCC_OscConfig+0x814>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800706a:	e054      	b.n	8007116 <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e053      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
 8007070:	40007000 	.word	0x40007000
 8007074:	40021000 	.word	0x40021000
 8007078:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d146      	bne.n	8007116 <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a24      	ldr	r2, [pc, #144]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 800708e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007094:	4b22      	ldr	r3, [pc, #136]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 800709a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800709e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a0:	f7fc fb2a 	bl	80036f8 <HAL_GetTick>
 80070a4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fc fb26 	bl	80036f8 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e02e      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ba:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x848>
 80070c6:	e026      	b.n	8007116 <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	2b0c      	cmp	r3, #12
 80070cc:	d021      	beq.n	8007112 <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ce:	4b14      	ldr	r3, [pc, #80]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a13      	ldr	r2, [pc, #76]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 80070d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070da:	f7fc fb0d 	bl	80036f8 <HAL_GetTick>
 80070de:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e2:	f7fc fb09 	bl	80036f8 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e011      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f0      	bne.n	80070e2 <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a06      	ldr	r2, [pc, #24]	; (8007120 <HAL_RCC_OscConfig+0x8c0>)
 8007106:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	60d3      	str	r3, [r2, #12]
 8007110:	e001      	b.n	8007116 <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40021000 	.word	0x40021000

08007124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0e7      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007138:	4b75      	ldr	r3, [pc, #468]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d910      	bls.n	8007168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b72      	ldr	r3, [pc, #456]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f023 0207 	bic.w	r2, r3, #7
 800714e:	4970      	ldr	r1, [pc, #448]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	4313      	orrs	r3, r2
 8007154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007156:	4b6e      	ldr	r3, [pc, #440]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0cf      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d010      	beq.n	8007196 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	4b66      	ldr	r3, [pc, #408]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007180:	429a      	cmp	r2, r3
 8007182:	d908      	bls.n	8007196 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007184:	4b63      	ldr	r3, [pc, #396]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4960      	ldr	r1, [pc, #384]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 8007192:	4313      	orrs	r3, r2
 8007194:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d04c      	beq.n	800723c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d107      	bne.n	80071ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071aa:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d121      	bne.n	80071fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e0a6      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d107      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071c2:	4b54      	ldr	r3, [pc, #336]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d115      	bne.n	80071fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e09a      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071da:	4b4e      	ldr	r3, [pc, #312]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e08e      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ea:	4b4a      	ldr	r3, [pc, #296]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e086      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071fa:	4b46      	ldr	r3, [pc, #280]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f023 0203 	bic.w	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	4943      	ldr	r1, [pc, #268]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 8007208:	4313      	orrs	r3, r2
 800720a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720c:	f7fc fa74 	bl	80036f8 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007212:	e00a      	b.n	800722a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007214:	f7fc fa70 	bl	80036f8 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007222:	4293      	cmp	r3, r2
 8007224:	d901      	bls.n	800722a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e06e      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722a:	4b3a      	ldr	r3, [pc, #232]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 020c 	and.w	r2, r3, #12
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	429a      	cmp	r2, r3
 800723a:	d1eb      	bne.n	8007214 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007254:	429a      	cmp	r2, r3
 8007256:	d208      	bcs.n	800726a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007258:	4b2e      	ldr	r3, [pc, #184]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	492b      	ldr	r1, [pc, #172]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 8007266:	4313      	orrs	r3, r2
 8007268:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800726a:	4b29      	ldr	r3, [pc, #164]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d210      	bcs.n	800729a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007278:	4b25      	ldr	r3, [pc, #148]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 0207 	bic.w	r2, r3, #7
 8007280:	4923      	ldr	r1, [pc, #140]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007288:	4b21      	ldr	r3, [pc, #132]	; (8007310 <HAL_RCC_ClockConfig+0x1ec>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d001      	beq.n	800729a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e036      	b.n	8007308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072a6:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	4918      	ldr	r1, [pc, #96]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072c4:	4b13      	ldr	r3, [pc, #76]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4910      	ldr	r1, [pc, #64]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072d8:	f000 f824 	bl	8007324 <HAL_RCC_GetSysClockFreq>
 80072dc:	4602      	mov	r2, r0
 80072de:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <HAL_RCC_ClockConfig+0x1f0>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	490b      	ldr	r1, [pc, #44]	; (8007318 <HAL_RCC_ClockConfig+0x1f4>)
 80072ea:	5ccb      	ldrb	r3, [r1, r3]
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
 80072f4:	4a09      	ldr	r2, [pc, #36]	; (800731c <HAL_RCC_ClockConfig+0x1f8>)
 80072f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072f8:	4b09      	ldr	r3, [pc, #36]	; (8007320 <HAL_RCC_ClockConfig+0x1fc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fc f9ab 	bl	8003658 <HAL_InitTick>
 8007302:	4603      	mov	r3, r0
 8007304:	72fb      	strb	r3, [r7, #11]

  return status;
 8007306:	7afb      	ldrb	r3, [r7, #11]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40022000 	.word	0x40022000
 8007314:	40021000 	.word	0x40021000
 8007318:	0800dd3c 	.word	0x0800dd3c
 800731c:	20000004 	.word	0x20000004
 8007320:	20000008 	.word	0x20000008

08007324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	2300      	movs	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007332:	4b3e      	ldr	r3, [pc, #248]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 030c 	and.w	r3, r3, #12
 800733a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800733c:	4b3b      	ldr	r3, [pc, #236]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_RCC_GetSysClockFreq+0x34>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b0c      	cmp	r3, #12
 8007350:	d121      	bne.n	8007396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d11e      	bne.n	8007396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007358:	4b34      	ldr	r3, [pc, #208]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d107      	bne.n	8007374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007364:	4b31      	ldr	r3, [pc, #196]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 8007366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	e005      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007374:	4b2d      	ldr	r3, [pc, #180]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	091b      	lsrs	r3, r3, #4
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007380:	4a2b      	ldr	r2, [pc, #172]	; (8007430 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10d      	bne.n	80073ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d102      	bne.n	80073a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <HAL_RCC_GetSysClockFreq+0x110>)
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e004      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073a8:	4b23      	ldr	r3, [pc, #140]	; (8007438 <HAL_RCC_GetSysClockFreq+0x114>)
 80073aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b0c      	cmp	r3, #12
 80073b0:	d134      	bne.n	800741c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073b2:	4b1e      	ldr	r3, [pc, #120]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d003      	beq.n	80073ca <HAL_RCC_GetSysClockFreq+0xa6>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d003      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0xac>
 80073c8:	e005      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80073ca:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <HAL_RCC_GetSysClockFreq+0x110>)
 80073cc:	617b      	str	r3, [r7, #20]
      break;
 80073ce:	e005      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <HAL_RCC_GetSysClockFreq+0x114>)
 80073d2:	617b      	str	r3, [r7, #20]
      break;
 80073d4:	e002      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	617b      	str	r3, [r7, #20]
      break;
 80073da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073dc:	4b13      	ldr	r3, [pc, #76]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	3301      	adds	r3, #1
 80073e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073ea:	4b10      	ldr	r3, [pc, #64]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	fb02 f203 	mul.w	r2, r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <HAL_RCC_GetSysClockFreq+0x108>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	0e5b      	lsrs	r3, r3, #25
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	3301      	adds	r3, #1
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	fbb2 f3f3 	udiv	r3, r2, r3
 800741a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800741c:	69bb      	ldr	r3, [r7, #24]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3724      	adds	r7, #36	; 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40021000 	.word	0x40021000
 8007430:	0800dd4c 	.word	0x0800dd4c
 8007434:	00f42400 	.word	0x00f42400
 8007438:	007a1200 	.word	0x007a1200

0800743c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007448:	4b2a      	ldr	r3, [pc, #168]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007454:	f7ff f990 	bl	8006778 <HAL_PWREx_GetVoltageRange>
 8007458:	6178      	str	r0, [r7, #20]
 800745a:	e014      	b.n	8007486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800745c:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007466:	6593      	str	r3, [r2, #88]	; 0x58
 8007468:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800746a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007474:	f7ff f980 	bl	8006778 <HAL_PWREx_GetVoltageRange>
 8007478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007484:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748c:	d10b      	bne.n	80074a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b80      	cmp	r3, #128	; 0x80
 8007492:	d919      	bls.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2ba0      	cmp	r3, #160	; 0xa0
 8007498:	d902      	bls.n	80074a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800749a:	2302      	movs	r3, #2
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	e013      	b.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074a0:	2301      	movs	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	e010      	b.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b80      	cmp	r3, #128	; 0x80
 80074aa:	d902      	bls.n	80074b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80074ac:	2303      	movs	r3, #3
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	e00a      	b.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d102      	bne.n	80074be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074b8:	2302      	movs	r3, #2
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	e004      	b.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b70      	cmp	r3, #112	; 0x70
 80074c2:	d101      	bne.n	80074c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074c4:	2301      	movs	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f023 0207 	bic.w	r2, r3, #7
 80074d0:	4909      	ldr	r1, [pc, #36]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074d8:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d001      	beq.n	80074ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40021000 	.word	0x40021000
 80074f8:	40022000 	.word	0x40022000

080074fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007504:	2300      	movs	r3, #0
 8007506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007508:	2300      	movs	r3, #0
 800750a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 809e 	beq.w	8007656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751a:	2300      	movs	r3, #0
 800751c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800751e:	4b46      	ldr	r3, [pc, #280]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753e:	6593      	str	r3, [r2, #88]	; 0x58
 8007540:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754c:	2301      	movs	r3, #1
 800754e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007550:	4b3a      	ldr	r3, [pc, #232]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a39      	ldr	r2, [pc, #228]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800755c:	f7fc f8cc 	bl	80036f8 <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007562:	e009      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007564:	f7fc f8c8 	bl	80036f8 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d902      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	74fb      	strb	r3, [r7, #19]
        break;
 8007576:	e005      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007578:	4b30      	ldr	r3, [pc, #192]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8007584:	7cfb      	ldrb	r3, [r7, #19]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d15a      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800758a:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d019      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075c2:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075d2:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d016      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fc f888 	bl	80036f8 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ea:	e00b      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ec:	f7fc f884 	bl	80036f8 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d902      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	74fb      	strb	r3, [r7, #19]
            break;
 8007602:	e006      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0ec      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8007612:	7cfb      	ldrb	r3, [r7, #19]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	4904      	ldr	r1, [pc, #16]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800762e:	e009      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	74bb      	strb	r3, [r7, #18]
 8007634:	e006      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8007636:	bf00      	nop
 8007638:	40021000 	.word	0x40021000
 800763c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007640:	7cfb      	ldrb	r3, [r7, #19]
 8007642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007644:	7c7b      	ldrb	r3, [r7, #17]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800764a:	4b6e      	ldr	r3, [pc, #440]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	4a6d      	ldr	r2, [pc, #436]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007662:	4b68      	ldr	r3, [pc, #416]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	f023 0203 	bic.w	r2, r3, #3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4964      	ldr	r1, [pc, #400]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007684:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768a:	f023 020c 	bic.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	495c      	ldr	r1, [pc, #368]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076a6:	4b57      	ldr	r3, [pc, #348]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4953      	ldr	r1, [pc, #332]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076c8:	4b4e      	ldr	r3, [pc, #312]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	494b      	ldr	r1, [pc, #300]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ea:	4b46      	ldr	r3, [pc, #280]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	4942      	ldr	r1, [pc, #264]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800770c:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	493a      	ldr	r1, [pc, #232]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800772e:	4b35      	ldr	r3, [pc, #212]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	4931      	ldr	r1, [pc, #196]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007750:	4b2c      	ldr	r3, [pc, #176]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	4929      	ldr	r1, [pc, #164]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	4920      	ldr	r1, [pc, #128]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	4918      	ldr	r1, [pc, #96]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a12      	ldr	r2, [pc, #72]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	490a      	ldr	r1, [pc, #40]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a04      	ldr	r2, [pc, #16]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000

08007808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e095      	b.n	8007946 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d009      	beq.n	8007840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	61da      	str	r2, [r3, #28]
 8007832:	e005      	b.n	8007840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fb fb82 	bl	8002f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007880:	d902      	bls.n	8007888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e002      	b.n	800788e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800788c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007896:	d007      	beq.n	80078a8 <HAL_SPI_Init+0xa0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a0:	d002      	beq.n	80078a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	ea42 0103 	orr.w	r1, r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	0c1b      	lsrs	r3, r3, #16
 8007904:	f003 0204 	and.w	r2, r3, #4
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007924:	ea42 0103 	orr.w	r1, r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_SPI_Transmit+0x22>
 800796c:	2302      	movs	r3, #2
 800796e:	e158      	b.n	8007c22 <HAL_SPI_Transmit+0x2d4>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007978:	f7fb febe 	bl	80036f8 <HAL_GetTick>
 800797c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b01      	cmp	r3, #1
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800798e:	2302      	movs	r3, #2
 8007990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007992:	e13d      	b.n	8007c10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_Transmit+0x52>
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079a4:	e134      	b.n	8007c10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2203      	movs	r2, #3
 80079aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f0:	d10f      	bne.n	8007a12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d007      	beq.n	8007a30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a38:	d94b      	bls.n	8007ad2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <HAL_SPI_Transmit+0xfa>
 8007a42:	8afb      	ldrh	r3, [r7, #22]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d13e      	bne.n	8007ac6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	881a      	ldrh	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	1c9a      	adds	r2, r3, #2
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a6c:	e02b      	b.n	8007ac6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d112      	bne.n	8007aa2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	881a      	ldrh	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	1c9a      	adds	r2, r3, #2
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa0:	e011      	b.n	8007ac6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa2:	f7fb fe29 	bl	80036f8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_Transmit+0x16c>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Transmit+0x172>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ac4:	e0a4      	b.n	8007c10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1ce      	bne.n	8007a6e <HAL_SPI_Transmit+0x120>
 8007ad0:	e07c      	b.n	8007bcc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_SPI_Transmit+0x192>
 8007ada:	8afb      	ldrh	r3, [r7, #22]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d170      	bne.n	8007bc2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d912      	bls.n	8007b10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	881a      	ldrh	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	1c9a      	adds	r2, r3, #2
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b02      	subs	r3, #2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b0e:	e058      	b.n	8007bc2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b36:	e044      	b.n	8007bc2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d12b      	bne.n	8007b9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d912      	bls.n	8007b76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	1c9a      	adds	r2, r3, #2
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b02      	subs	r3, #2
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b74:	e025      	b.n	8007bc2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b9c:	e011      	b.n	8007bc2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b9e:	f7fb fdab 	bl	80036f8 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d803      	bhi.n	8007bb6 <HAL_SPI_Transmit+0x268>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d102      	bne.n	8007bbc <HAL_SPI_Transmit+0x26e>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bc0:	e026      	b.n	8007c10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1b5      	bne.n	8007b38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fb5b 	bl	800828c <SPI_EndRxTxTransaction>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e000      	b.n	8007c10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08a      	sub	sp, #40	; 0x28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_SPI_TransmitReceive+0x26>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e1fb      	b.n	8008048 <HAL_SPI_TransmitReceive+0x41e>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c58:	f7fb fd4e 	bl	80036f8 <HAL_GetTick>
 8007c5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c6c:	887b      	ldrh	r3, [r7, #2]
 8007c6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c70:	887b      	ldrh	r3, [r7, #2]
 8007c72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c74:	7efb      	ldrb	r3, [r7, #27]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d00e      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x6e>
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c80:	d106      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x66>
 8007c8a:	7efb      	ldrb	r3, [r7, #27]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d003      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c90:	2302      	movs	r3, #2
 8007c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c96:	e1cd      	b.n	8008034 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <HAL_SPI_TransmitReceive+0x80>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_SPI_TransmitReceive+0x80>
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cb0:	e1c0      	b.n	8008034 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d003      	beq.n	8007cc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2205      	movs	r2, #5
 8007cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	887a      	ldrh	r2, [r7, #2]
 8007cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	887a      	ldrh	r2, [r7, #2]
 8007cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	887a      	ldrh	r2, [r7, #2]
 8007cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	887a      	ldrh	r2, [r7, #2]
 8007cf2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d08:	d802      	bhi.n	8007d10 <HAL_SPI_TransmitReceive+0xe6>
 8007d0a:	8a3b      	ldrh	r3, [r7, #16]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d908      	bls.n	8007d22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d1e:	605a      	str	r2, [r3, #4]
 8007d20:	e007      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d007      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d58:	d97c      	bls.n	8007e54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x13e>
 8007d62:	8a7b      	ldrh	r3, [r7, #18]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d169      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	881a      	ldrh	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	1c9a      	adds	r2, r3, #2
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d8c:	e056      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d11b      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d113      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	1c9a      	adds	r2, r3, #2
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d11c      	bne.n	8007e1c <HAL_SPI_TransmitReceive+0x1f2>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d016      	beq.n	8007e1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e1c:	f7fb fc6c 	bl	80036f8 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d807      	bhi.n	8007e3c <HAL_SPI_TransmitReceive+0x212>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d003      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e3a:	e0fb      	b.n	8008034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1a3      	bne.n	8007d8e <HAL_SPI_TransmitReceive+0x164>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d19d      	bne.n	8007d8e <HAL_SPI_TransmitReceive+0x164>
 8007e52:	e0df      	b.n	8008014 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x23a>
 8007e5c:	8a7b      	ldrh	r3, [r7, #18]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	f040 80cb 	bne.w	8007ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d912      	bls.n	8007e94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	881a      	ldrh	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b02      	subs	r3, #2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e92:	e0b2      	b.n	8007ffa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eba:	e09e      	b.n	8007ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d134      	bne.n	8007f34 <HAL_SPI_TransmitReceive+0x30a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02f      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x30a>
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d12c      	bne.n	8007f34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d912      	bls.n	8007f0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee8:	881a      	ldrh	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	1c9a      	adds	r2, r3, #2
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b02      	subs	r3, #2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f08:	e012      	b.n	8007f30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	330c      	adds	r3, #12
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d148      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x3aa>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d042      	beq.n	8007fd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d923      	bls.n	8007fa2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	b292      	uxth	r2, r2
 8007f66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b02      	subs	r3, #2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d81f      	bhi.n	8007fd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	e016      	b.n	8007fd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f103 020c 	add.w	r2, r3, #12
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fd4:	f7fb fb90 	bl	80036f8 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d803      	bhi.n	8007fec <HAL_SPI_TransmitReceive+0x3c2>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fea:	d102      	bne.n	8007ff2 <HAL_SPI_TransmitReceive+0x3c8>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007ff8:	e01c      	b.n	8008034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	f47f af5b 	bne.w	8007ebc <HAL_SPI_TransmitReceive+0x292>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	f47f af54 	bne.w	8007ebc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f937 	bl	800828c <SPI_EndRxTxTransaction>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d006      	beq.n	8008032 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	661a      	str	r2, [r3, #96]	; 0x60
 8008030:	e000      	b.n	8008034 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008048:	4618      	mov	r0, r3
 800804a:	3728      	adds	r7, #40	; 0x28
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008060:	f7fb fb4a 	bl	80036f8 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4413      	add	r3, r2
 800806e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008070:	f7fb fb42 	bl	80036f8 <HAL_GetTick>
 8008074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008076:	4b39      	ldr	r3, [pc, #228]	; (800815c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	015b      	lsls	r3, r3, #5
 800807c:	0d1b      	lsrs	r3, r3, #20
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008086:	e054      	b.n	8008132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d050      	beq.n	8008132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008090:	f7fb fb32 	bl	80036f8 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	429a      	cmp	r2, r3
 800809e:	d902      	bls.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d13d      	bne.n	8008122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080be:	d111      	bne.n	80080e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c8:	d004      	beq.n	80080d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d2:	d107      	bne.n	80080e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ec:	d10f      	bne.n	800810e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e017      	b.n	8008152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	3b01      	subs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4013      	ands	r3, r2
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	429a      	cmp	r2, r3
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	429a      	cmp	r2, r3
 800814e:	d19b      	bne.n	8008088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3720      	adds	r7, #32
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000004 	.word	0x20000004

08008160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008172:	f7fb fac1 	bl	80036f8 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	4413      	add	r3, r2
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008182:	f7fb fab9 	bl	80036f8 <HAL_GetTick>
 8008186:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008190:	4b3d      	ldr	r3, [pc, #244]	; (8008288 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	00da      	lsls	r2, r3, #3
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	0d1b      	lsrs	r3, r3, #20
 80081a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081a8:	e060      	b.n	800826c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081b0:	d107      	bne.n	80081c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d050      	beq.n	800826c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081ca:	f7fb fa95 	bl	80036f8 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d902      	bls.n	80081e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d13d      	bne.n	800825c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f8:	d111      	bne.n	800821e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008202:	d004      	beq.n	800820e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800820c:	d107      	bne.n	800821e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800821c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	d10f      	bne.n	8008248 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e010      	b.n	800827e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	3b01      	subs	r3, #1
 800826a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4013      	ands	r3, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	429a      	cmp	r2, r3
 800827a:	d196      	bne.n	80081aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000004 	.word	0x20000004

0800828c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ff5b 	bl	8008160 <SPI_WaitFifoStateUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e027      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	2180      	movs	r1, #128	; 0x80
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff fec0 	bl	8008050 <SPI_WaitFlagStateUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e014      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7ff ff34 	bl	8008160 <SPI_WaitFifoStateUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008302:	f043 0220 	orr.w	r2, r3, #32
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e000      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e049      	b.n	80083be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7fb f8b2 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f000 fd50 	bl	8008dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d001      	beq.n	80083e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e03b      	b.n	8008458 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0201 	orr.w	r2, r2, #1
 80083f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <HAL_TIM_Base_Start_IT+0x9c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d009      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x4e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840a:	d004      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x4e>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a15      	ldr	r2, [pc, #84]	; (8008468 <HAL_TIM_Base_Start_IT+0xa0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d115      	bne.n	8008442 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <HAL_TIM_Base_Start_IT+0xa4>)
 800841e:	4013      	ands	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b06      	cmp	r3, #6
 8008426:	d015      	beq.n	8008454 <HAL_TIM_Base_Start_IT+0x8c>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d011      	beq.n	8008454 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008440:	e008      	b.n	8008454 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e000      	b.n	8008456 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008454:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40014000 	.word	0x40014000
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e049      	b.n	8008516 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fa ffe8 	bl	800346c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f000 fca4 	bl	8008dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d109      	bne.n	8008544 <HAL_TIM_PWM_Start+0x24>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	bf14      	ite	ne
 800853c:	2301      	movne	r3, #1
 800853e:	2300      	moveq	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	e03c      	b.n	80085be <HAL_TIM_PWM_Start+0x9e>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d109      	bne.n	800855e <HAL_TIM_PWM_Start+0x3e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	bf14      	ite	ne
 8008556:	2301      	movne	r3, #1
 8008558:	2300      	moveq	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	e02f      	b.n	80085be <HAL_TIM_PWM_Start+0x9e>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d109      	bne.n	8008578 <HAL_TIM_PWM_Start+0x58>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	e022      	b.n	80085be <HAL_TIM_PWM_Start+0x9e>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b0c      	cmp	r3, #12
 800857c:	d109      	bne.n	8008592 <HAL_TIM_PWM_Start+0x72>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b01      	cmp	r3, #1
 8008588:	bf14      	ite	ne
 800858a:	2301      	movne	r3, #1
 800858c:	2300      	moveq	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	e015      	b.n	80085be <HAL_TIM_PWM_Start+0x9e>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b10      	cmp	r3, #16
 8008596:	d109      	bne.n	80085ac <HAL_TIM_PWM_Start+0x8c>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	bf14      	ite	ne
 80085a4:	2301      	movne	r3, #1
 80085a6:	2300      	moveq	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e008      	b.n	80085be <HAL_TIM_PWM_Start+0x9e>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	bf14      	ite	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	2300      	moveq	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e07e      	b.n	80086c4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_PWM_Start+0xb6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d4:	e023      	b.n	800861e <HAL_TIM_PWM_Start+0xfe>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d104      	bne.n	80085e6 <HAL_TIM_PWM_Start+0xc6>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e4:	e01b      	b.n	800861e <HAL_TIM_PWM_Start+0xfe>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_PWM_Start+0xd6>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f4:	e013      	b.n	800861e <HAL_TIM_PWM_Start+0xfe>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b0c      	cmp	r3, #12
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_PWM_Start+0xe6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008604:	e00b      	b.n	800861e <HAL_TIM_PWM_Start+0xfe>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b10      	cmp	r3, #16
 800860a:	d104      	bne.n	8008616 <HAL_TIM_PWM_Start+0xf6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008614:	e003      	b.n	800861e <HAL_TIM_PWM_Start+0xfe>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2201      	movs	r2, #1
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 feca 	bl	80093c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a26      	ldr	r2, [pc, #152]	; (80086cc <HAL_TIM_PWM_Start+0x1ac>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d009      	beq.n	800864a <HAL_TIM_PWM_Start+0x12a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <HAL_TIM_PWM_Start+0x1b0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d004      	beq.n	800864a <HAL_TIM_PWM_Start+0x12a>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a23      	ldr	r2, [pc, #140]	; (80086d4 <HAL_TIM_PWM_Start+0x1b4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d101      	bne.n	800864e <HAL_TIM_PWM_Start+0x12e>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <HAL_TIM_PWM_Start+0x130>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008662:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a18      	ldr	r2, [pc, #96]	; (80086cc <HAL_TIM_PWM_Start+0x1ac>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_TIM_PWM_Start+0x162>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008676:	d004      	beq.n	8008682 <HAL_TIM_PWM_Start+0x162>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <HAL_TIM_PWM_Start+0x1b0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d115      	bne.n	80086ae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <HAL_TIM_PWM_Start+0x1b8>)
 800868a:	4013      	ands	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d015      	beq.n	80086c0 <HAL_TIM_PWM_Start+0x1a0>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869a:	d011      	beq.n	80086c0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ac:	e008      	b.n	80086c0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e000      	b.n	80086c2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	00010007 	.word	0x00010007

080086dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e097      	b.n	8008820 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fa fe65 	bl	80033d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f000 fb63 	bl	8008dfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	4313      	orrs	r3, r2
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800877c:	f023 030c 	bic.w	r3, r3, #12
 8008780:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800878c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	4313      	orrs	r3, r2
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	011a      	lsls	r2, r3, #4
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	031b      	lsls	r3, r3, #12
 80087ac:	4313      	orrs	r3, r2
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80087ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	4313      	orrs	r3, r2
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008838:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008840:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008848:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008850:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d110      	bne.n	800887a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d102      	bne.n	8008864 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800885e:	7b7b      	ldrb	r3, [r7, #13]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d001      	beq.n	8008868 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e069      	b.n	800893c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008878:	e031      	b.n	80088de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b04      	cmp	r3, #4
 800887e:	d110      	bne.n	80088a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d102      	bne.n	800888c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008886:	7b3b      	ldrb	r3, [r7, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d001      	beq.n	8008890 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e055      	b.n	800893c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a0:	e01d      	b.n	80088de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d108      	bne.n	80088ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d105      	bne.n	80088ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088ae:	7b7b      	ldrb	r3, [r7, #13]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d102      	bne.n	80088ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088b4:	7b3b      	ldrb	r3, [r7, #12]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d001      	beq.n	80088be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e03e      	b.n	800893c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_TIM_Encoder_Start+0xc4>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d008      	beq.n	80088fc <HAL_TIM_Encoder_Start+0xd4>
 80088ea:	e00f      	b.n	800890c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2201      	movs	r2, #1
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fd63 	bl	80093c0 <TIM_CCxChannelCmd>
      break;
 80088fa:	e016      	b.n	800892a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2201      	movs	r2, #1
 8008902:	2104      	movs	r1, #4
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fd5b 	bl	80093c0 <TIM_CCxChannelCmd>
      break;
 800890a:	e00e      	b.n	800892a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2201      	movs	r2, #1
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fd53 	bl	80093c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2201      	movs	r2, #1
 8008920:	2104      	movs	r1, #4
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fd4c 	bl	80093c0 <TIM_CCxChannelCmd>
      break;
 8008928:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b02      	cmp	r3, #2
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0202 	mvn.w	r2, #2
 8008970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa1a 	bl	8008dc0 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa0c 	bl	8008dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa1d 	bl	8008dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0204 	mvn.w	r2, #4
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9f0 	bl	8008dc0 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9e2 	bl	8008dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f9f3 	bl	8008dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0208 	mvn.w	r2, #8
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9c6 	bl	8008dc0 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9b8 	bl	8008dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f9c9 	bl	8008dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0210 	mvn.w	r2, #16
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2208      	movs	r2, #8
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f99c 	bl	8008dc0 <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f98e 	bl	8008dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f99f 	bl	8008dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10e      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d107      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0201 	mvn.w	r2, #1
 8008ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7fa f9d8 	bl	8002e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d10e      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fcfc 	bl	80094ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b02:	d10e      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d107      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fcef 	bl	8009500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f94d 	bl	8008de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0220 	mvn.w	r2, #32
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fcaf 	bl	80094d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e0ff      	b.n	8008da2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b14      	cmp	r3, #20
 8008bae:	f200 80f0 	bhi.w	8008d92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008d93 	.word	0x08008d93
 8008bc0:	08008d93 	.word	0x08008d93
 8008bc4:	08008d93 	.word	0x08008d93
 8008bc8:	08008c4d 	.word	0x08008c4d
 8008bcc:	08008d93 	.word	0x08008d93
 8008bd0:	08008d93 	.word	0x08008d93
 8008bd4:	08008d93 	.word	0x08008d93
 8008bd8:	08008c8f 	.word	0x08008c8f
 8008bdc:	08008d93 	.word	0x08008d93
 8008be0:	08008d93 	.word	0x08008d93
 8008be4:	08008d93 	.word	0x08008d93
 8008be8:	08008ccf 	.word	0x08008ccf
 8008bec:	08008d93 	.word	0x08008d93
 8008bf0:	08008d93 	.word	0x08008d93
 8008bf4:	08008d93 	.word	0x08008d93
 8008bf8:	08008d11 	.word	0x08008d11
 8008bfc:	08008d93 	.word	0x08008d93
 8008c00:	08008d93 	.word	0x08008d93
 8008c04:	08008d93 	.word	0x08008d93
 8008c08:	08008d51 	.word	0x08008d51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f956 	bl	8008ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699a      	ldr	r2, [r3, #24]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0208 	orr.w	r2, r2, #8
 8008c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0204 	bic.w	r2, r2, #4
 8008c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6999      	ldr	r1, [r3, #24]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	619a      	str	r2, [r3, #24]
      break;
 8008c4a:	e0a5      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f9b2 	bl	8008fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6999      	ldr	r1, [r3, #24]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	021a      	lsls	r2, r3, #8
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	619a      	str	r2, [r3, #24]
      break;
 8008c8c:	e084      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68b9      	ldr	r1, [r7, #8]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fa0b 	bl	80090b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69da      	ldr	r2, [r3, #28]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0208 	orr.w	r2, r2, #8
 8008ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0204 	bic.w	r2, r2, #4
 8008cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69d9      	ldr	r1, [r3, #28]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	61da      	str	r2, [r3, #28]
      break;
 8008ccc:	e064      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fa63 	bl	80091a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69da      	ldr	r2, [r3, #28]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	021a      	lsls	r2, r3, #8
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	61da      	str	r2, [r3, #28]
      break;
 8008d0e:	e043      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 faa0 	bl	800925c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0208 	orr.w	r2, r2, #8
 8008d2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0204 	bic.w	r2, r2, #4
 8008d3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d4e:	e023      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fad8 	bl	800930c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	021a      	lsls	r2, r3, #8
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d90:	e002      	b.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	75fb      	strb	r3, [r7, #23]
      break;
 8008d96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop

08008dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	; (8008eb8 <TIM_Base_SetConfig+0xbc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0x20>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1a:	d108      	bne.n	8008e2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <TIM_Base_SetConfig+0xbc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00b      	beq.n	8008e4e <TIM_Base_SetConfig+0x52>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3c:	d007      	beq.n	8008e4e <TIM_Base_SetConfig+0x52>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a1e      	ldr	r2, [pc, #120]	; (8008ebc <TIM_Base_SetConfig+0xc0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d003      	beq.n	8008e4e <TIM_Base_SetConfig+0x52>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1d      	ldr	r2, [pc, #116]	; (8008ec0 <TIM_Base_SetConfig+0xc4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d108      	bne.n	8008e60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <TIM_Base_SetConfig+0xbc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d007      	beq.n	8008e9c <TIM_Base_SetConfig+0xa0>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a0b      	ldr	r2, [pc, #44]	; (8008ebc <TIM_Base_SetConfig+0xc0>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d003      	beq.n	8008e9c <TIM_Base_SetConfig+0xa0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <TIM_Base_SetConfig+0xc4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d103      	bne.n	8008ea4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	615a      	str	r2, [r3, #20]
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40012c00 	.word	0x40012c00
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400

08008ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f023 0201 	bic.w	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f023 0302 	bic.w	r3, r3, #2
 8008f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a24      	ldr	r2, [pc, #144]	; (8008fb0 <TIM_OC1_SetConfig+0xec>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_OC1_SetConfig+0x70>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a23      	ldr	r2, [pc, #140]	; (8008fb4 <TIM_OC1_SetConfig+0xf0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_OC1_SetConfig+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <TIM_OC1_SetConfig+0xf4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d10c      	bne.n	8008f4e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f023 0308 	bic.w	r3, r3, #8
 8008f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 0304 	bic.w	r3, r3, #4
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a17      	ldr	r2, [pc, #92]	; (8008fb0 <TIM_OC1_SetConfig+0xec>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d007      	beq.n	8008f66 <TIM_OC1_SetConfig+0xa2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <TIM_OC1_SetConfig+0xf0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d003      	beq.n	8008f66 <TIM_OC1_SetConfig+0xa2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a15      	ldr	r2, [pc, #84]	; (8008fb8 <TIM_OC1_SetConfig+0xf4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d111      	bne.n	8008f8a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	621a      	str	r2, [r3, #32]
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	40012c00 	.word	0x40012c00
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	40014400 	.word	0x40014400

08008fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f023 0210 	bic.w	r2, r3, #16
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	4313      	orrs	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f023 0320 	bic.w	r3, r3, #32
 800900a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <TIM_OC2_SetConfig+0xe8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d10d      	bne.n	800903c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <TIM_OC2_SetConfig+0xe8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d007      	beq.n	8009054 <TIM_OC2_SetConfig+0x98>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <TIM_OC2_SetConfig+0xec>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_OC2_SetConfig+0x98>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a17      	ldr	r2, [pc, #92]	; (80090ac <TIM_OC2_SetConfig+0xf0>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d113      	bne.n	800907c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800905a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400

080090b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0303 	bic.w	r3, r3, #3
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	4313      	orrs	r3, r2
 8009108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a21      	ldr	r2, [pc, #132]	; (8009194 <TIM_OC3_SetConfig+0xe4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d10d      	bne.n	800912e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800912c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a18      	ldr	r2, [pc, #96]	; (8009194 <TIM_OC3_SetConfig+0xe4>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d007      	beq.n	8009146 <TIM_OC3_SetConfig+0x96>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a17      	ldr	r2, [pc, #92]	; (8009198 <TIM_OC3_SetConfig+0xe8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d003      	beq.n	8009146 <TIM_OC3_SetConfig+0x96>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a16      	ldr	r2, [pc, #88]	; (800919c <TIM_OC3_SetConfig+0xec>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d113      	bne.n	800916e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800914c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	621a      	str	r2, [r3, #32]
}
 8009188:	bf00      	nop
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	40012c00 	.word	0x40012c00
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400

080091a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	031b      	lsls	r3, r3, #12
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a14      	ldr	r2, [pc, #80]	; (8009250 <TIM_OC4_SetConfig+0xb0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d007      	beq.n	8009214 <TIM_OC4_SetConfig+0x74>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a13      	ldr	r2, [pc, #76]	; (8009254 <TIM_OC4_SetConfig+0xb4>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d003      	beq.n	8009214 <TIM_OC4_SetConfig+0x74>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a12      	ldr	r2, [pc, #72]	; (8009258 <TIM_OC4_SetConfig+0xb8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d109      	bne.n	8009228 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800921a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	019b      	lsls	r3, r3, #6
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40012c00 	.word	0x40012c00
 8009254:	40014000 	.word	0x40014000
 8009258:	40014400 	.word	0x40014400

0800925c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	041b      	lsls	r3, r3, #16
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a13      	ldr	r2, [pc, #76]	; (8009300 <TIM_OC5_SetConfig+0xa4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d007      	beq.n	80092c6 <TIM_OC5_SetConfig+0x6a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a12      	ldr	r2, [pc, #72]	; (8009304 <TIM_OC5_SetConfig+0xa8>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d003      	beq.n	80092c6 <TIM_OC5_SetConfig+0x6a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a11      	ldr	r2, [pc, #68]	; (8009308 <TIM_OC5_SetConfig+0xac>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d109      	bne.n	80092da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	621a      	str	r2, [r3, #32]
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	40012c00 	.word	0x40012c00
 8009304:	40014000 	.word	0x40014000
 8009308:	40014400 	.word	0x40014400

0800930c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a14      	ldr	r2, [pc, #80]	; (80093b4 <TIM_OC6_SetConfig+0xa8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d007      	beq.n	8009378 <TIM_OC6_SetConfig+0x6c>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a13      	ldr	r2, [pc, #76]	; (80093b8 <TIM_OC6_SetConfig+0xac>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d003      	beq.n	8009378 <TIM_OC6_SetConfig+0x6c>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a12      	ldr	r2, [pc, #72]	; (80093bc <TIM_OC6_SetConfig+0xb0>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d109      	bne.n	800938c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800937e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	029b      	lsls	r3, r3, #10
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4313      	orrs	r3, r2
 800938a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	621a      	str	r2, [r3, #32]
}
 80093a6:	bf00      	nop
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40012c00 	.word	0x40012c00
 80093b8:	40014000 	.word	0x40014000
 80093bc:	40014400 	.word	0x40014400

080093c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	2201      	movs	r2, #1
 80093d4:	fa02 f303 	lsl.w	r3, r2, r3
 80093d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a1a      	ldr	r2, [r3, #32]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	401a      	ands	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	fa01 f303 	lsl.w	r3, r1, r3
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009420:	2302      	movs	r3, #2
 8009422:	e04f      	b.n	80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d108      	bne.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009454:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a14      	ldr	r2, [pc, #80]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d009      	beq.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948c:	d004      	beq.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d10c      	bne.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800949e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	40012c00 	.word	0x40012c00
 80094d4:	40014000 	.word	0x40014000

080094d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009514:	b084      	sub	sp, #16
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	f107 0014 	add.w	r0, r7, #20
 8009522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	b004      	add	sp, #16
 8009534:	4770      	bx	lr

08009536 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009546:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800954a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800956c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009570:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	b29b      	uxth	r3, r3
 800957e:	43db      	mvns	r3, r3
 8009580:	b29b      	uxth	r3, r3
 8009582:	4013      	ands	r3, r2
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095b4:	b084      	sub	sp, #16
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	f107 0014 	add.w	r0, r7, #20
 80095c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	b004      	add	sp, #16
 80095f4:	4770      	bx	lr
	...

080095f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b09d      	sub	sp, #116	; 0x74
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d81f      	bhi.n	800966a <USB_ActivateEndpoint+0x72>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <USB_ActivateEndpoint+0x38>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009641 	.word	0x08009641
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009673 	.word	0x08009673
 800963c:	0800964f 	.word	0x0800964f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009640:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009648:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800964c:	e012      	b.n	8009674 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800964e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009652:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009656:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800965a:	e00b      	b.n	8009674 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800965c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009664:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009668:	e004      	b.n	8009674 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009670:	e000      	b.n	8009674 <USB_ActivateEndpoint+0x7c>
      break;
 8009672:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	441a      	add	r2, r3
 800967e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800968a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009692:	b29b      	uxth	r3, r3
 8009694:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ae:	b21a      	sxth	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	b21b      	sxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	441a      	add	r2, r3
 80096c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80096cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096dc:	b29b      	uxth	r3, r3
 80096de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	7b1b      	ldrb	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f040 816e 	bne.w	80099c6 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8084 	beq.w	80097fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fe:	b29b      	uxth	r3, r3
 8009700:	461a      	mov	r2, r3
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	4413      	add	r3, r2
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	00da      	lsls	r2, r3, #3
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	88db      	ldrh	r3, [r3, #6]
 800971c:	085b      	lsrs	r3, r3, #1
 800971e:	b29b      	uxth	r3, r3
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	827b      	strh	r3, [r7, #18]
 8009736:	8a7b      	ldrh	r3, [r7, #18]
 8009738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01b      	beq.n	8009778 <USB_ActivateEndpoint+0x180>
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29b      	uxth	r3, r3
 800974e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009756:	823b      	strh	r3, [r7, #16]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	441a      	add	r2, r3
 8009762:	8a3b      	ldrh	r3, [r7, #16]
 8009764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009774:	b29b      	uxth	r3, r3
 8009776:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d020      	beq.n	80097c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009796:	81bb      	strh	r3, [r7, #12]
 8009798:	89bb      	ldrh	r3, [r7, #12]
 800979a:	f083 0320 	eor.w	r3, r3, #32
 800979e:	81bb      	strh	r3, [r7, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	441a      	add	r2, r3
 80097aa:	89bb      	ldrh	r3, [r7, #12]
 80097ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]
 80097c0:	e2cb      	b.n	8009d5a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d8:	81fb      	strh	r3, [r7, #14]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	441a      	add	r2, r3
 80097e4:	89fb      	ldrh	r3, [r7, #14]
 80097e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	8013      	strh	r3, [r2, #0]
 80097fa:	e2ae      	b.n	8009d5a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009806:	b29b      	uxth	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	4413      	add	r3, r2
 800980e:	633b      	str	r3, [r7, #48]	; 0x30
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	00da      	lsls	r2, r3, #3
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	4413      	add	r3, r2
 800981a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	88db      	ldrh	r3, [r3, #6]
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	4413      	add	r3, r2
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00da      	lsls	r2, r3, #3
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	4413      	add	r3, r2
 800984e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b3e      	cmp	r3, #62	; 0x3e
 800985a:	d918      	bls.n	800988e <USB_ActivateEndpoint+0x296>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	095b      	lsrs	r3, r3, #5
 8009862:	66bb      	str	r3, [r7, #104]	; 0x68
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	2b00      	cmp	r3, #0
 800986e:	d102      	bne.n	8009876 <USB_ActivateEndpoint+0x27e>
 8009870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009872:	3b01      	subs	r3, #1
 8009874:	66bb      	str	r3, [r7, #104]	; 0x68
 8009876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009878:	b29b      	uxth	r3, r3
 800987a:	029b      	lsls	r3, r3, #10
 800987c:	b29b      	uxth	r3, r3
 800987e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009886:	b29a      	uxth	r2, r3
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e029      	b.n	80098e2 <USB_ActivateEndpoint+0x2ea>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d112      	bne.n	80098bc <USB_ActivateEndpoint+0x2c4>
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	b29b      	uxth	r3, r3
 800989c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	801a      	strh	r2, [r3, #0]
 80098ba:	e012      	b.n	80098e2 <USB_ActivateEndpoint+0x2ea>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	085b      	lsrs	r3, r3, #1
 80098c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <USB_ActivateEndpoint+0x2de>
 80098d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d2:	3301      	adds	r3, #1
 80098d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80098d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d8:	b29b      	uxth	r3, r3
 80098da:	029b      	lsls	r3, r3, #10
 80098dc:	b29a      	uxth	r2, r3
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80098f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01b      	beq.n	8009932 <USB_ActivateEndpoint+0x33a>
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800990c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009910:	843b      	strh	r3, [r7, #32]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	441a      	add	r2, r3
 800991c:	8c3b      	ldrh	r3, [r7, #32]
 800991e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800992a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992e:	b29b      	uxth	r3, r3
 8009930:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d124      	bne.n	8009984 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800994c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009950:	83bb      	strh	r3, [r7, #28]
 8009952:	8bbb      	ldrh	r3, [r7, #28]
 8009954:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009958:	83bb      	strh	r3, [r7, #28]
 800995a:	8bbb      	ldrh	r3, [r7, #28]
 800995c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009960:	83bb      	strh	r3, [r7, #28]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	441a      	add	r2, r3
 800996c:	8bbb      	ldrh	r3, [r7, #28]
 800996e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997e:	b29b      	uxth	r3, r3
 8009980:	8013      	strh	r3, [r2, #0]
 8009982:	e1ea      	b.n	8009d5a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999a:	83fb      	strh	r3, [r7, #30]
 800999c:	8bfb      	ldrh	r3, [r7, #30]
 800999e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099a2:	83fb      	strh	r3, [r7, #30]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	441a      	add	r2, r3
 80099ae:	8bfb      	ldrh	r3, [r7, #30]
 80099b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	8013      	strh	r3, [r2, #0]
 80099c4:	e1c9      	b.n	8009d5a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	78db      	ldrb	r3, [r3, #3]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d11e      	bne.n	8009a0c <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80099f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	8013      	strh	r3, [r2, #0]
 8009a0a:	e01d      	b.n	8009a48 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	461a      	mov	r2, r3
 8009a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a58:	4413      	add	r3, r2
 8009a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	00da      	lsls	r2, r3, #3
 8009a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	891b      	ldrh	r3, [r3, #8]
 8009a70:	085b      	lsrs	r3, r3, #1
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a7a:	801a      	strh	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8c:	4413      	add	r3, r2
 8009a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	00da      	lsls	r2, r3, #3
 8009a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a98:	4413      	add	r3, r2
 8009a9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	895b      	ldrh	r3, [r3, #10]
 8009aa4:	085b      	lsrs	r3, r3, #1
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	785b      	ldrb	r3, [r3, #1]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f040 8093 	bne.w	8009be0 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01b      	beq.n	8009b0e <USB_ActivateEndpoint+0x516>
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	441a      	add	r2, r3
 8009af8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01b      	beq.n	8009b5e <USB_ActivateEndpoint+0x566>
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b74:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b7c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b84:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	441a      	add	r2, r3
 8009b90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]
 8009bde:	e0bc      	b.n	8009d5a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01d      	beq.n	8009c38 <USB_ActivateEndpoint+0x640>
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	441a      	add	r2, r3
 8009c20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01d      	beq.n	8009c90 <USB_ActivateEndpoint+0x698>
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	441a      	add	r2, r3
 8009c78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	78db      	ldrb	r3, [r3, #3]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d024      	beq.n	8009ce2 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cb6:	f083 0320 	eor.w	r3, r3, #32
 8009cba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	441a      	add	r2, r3
 8009cc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	8013      	strh	r3, [r2, #0]
 8009ce0:	e01d      	b.n	8009d1e <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	441a      	add	r2, r3
 8009d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3774      	adds	r7, #116	; 0x74
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop

08009d6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b08d      	sub	sp, #52	; 0x34
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	7b1b      	ldrb	r3, [r3, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 808e 	bne.w	8009e9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d044      	beq.n	8009e12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	81bb      	strh	r3, [r7, #12]
 8009d96:	89bb      	ldrh	r3, [r7, #12]
 8009d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01b      	beq.n	8009dd8 <USB_DeactivateEndpoint+0x6c>
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db6:	817b      	strh	r3, [r7, #10]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	441a      	add	r2, r3
 8009dc2:	897b      	ldrh	r3, [r7, #10]
 8009dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dee:	813b      	strh	r3, [r7, #8]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	441a      	add	r2, r3
 8009dfa:	893b      	ldrh	r3, [r7, #8]
 8009dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	8013      	strh	r3, [r2, #0]
 8009e10:	e192      	b.n	800a138 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	827b      	strh	r3, [r7, #18]
 8009e20:	8a7b      	ldrh	r3, [r7, #18]
 8009e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d01b      	beq.n	8009e62 <USB_DeactivateEndpoint+0xf6>
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e40:	823b      	strh	r3, [r7, #16]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	441a      	add	r2, r3
 8009e4c:	8a3b      	ldrh	r3, [r7, #16]
 8009e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	81fb      	strh	r3, [r7, #14]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	441a      	add	r2, r3
 8009e84:	89fb      	ldrh	r3, [r7, #14]
 8009e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	8013      	strh	r3, [r2, #0]
 8009e9a:	e14d      	b.n	800a138 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	785b      	ldrb	r3, [r3, #1]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 80a5 	bne.w	8009ff0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	843b      	strh	r3, [r7, #32]
 8009eb4:	8c3b      	ldrh	r3, [r7, #32]
 8009eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01b      	beq.n	8009ef6 <USB_DeactivateEndpoint+0x18a>
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed4:	83fb      	strh	r3, [r7, #30]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	8bfb      	ldrh	r3, [r7, #30]
 8009ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	83bb      	strh	r3, [r7, #28]
 8009f04:	8bbb      	ldrh	r3, [r7, #28]
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01b      	beq.n	8009f46 <USB_DeactivateEndpoint+0x1da>
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f24:	837b      	strh	r3, [r7, #26]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	441a      	add	r2, r3
 8009f30:	8b7b      	ldrh	r3, [r7, #26]
 8009f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5c:	833b      	strh	r3, [r7, #24]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	441a      	add	r2, r3
 8009f68:	8b3b      	ldrh	r3, [r7, #24]
 8009f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f94:	82fb      	strh	r3, [r7, #22]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8afb      	ldrh	r3, [r7, #22]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fcc:	82bb      	strh	r3, [r7, #20]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	441a      	add	r2, r3
 8009fd8:	8abb      	ldrh	r3, [r7, #20]
 8009fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	8013      	strh	r3, [r2, #0]
 8009fee:	e0a3      	b.n	800a138 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d01b      	beq.n	800a040 <USB_DeactivateEndpoint+0x2d4>
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	441a      	add	r2, r3
 800a02a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a02c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a04e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01b      	beq.n	800a090 <USB_DeactivateEndpoint+0x324>
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	441a      	add	r2, r3
 800a07a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a07c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	441a      	add	r2, r3
 800a0b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0de:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	441a      	add	r2, r3
 800a0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a116:	847b      	strh	r3, [r7, #34]	; 0x22
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	441a      	add	r2, r3
 800a122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a134:	b29b      	uxth	r3, r3
 800a136:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3734      	adds	r7, #52	; 0x34
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b0c2      	sub	sp, #264	; 0x108
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	1d3b      	adds	r3, r7, #4
 800a14e:	6018      	str	r0, [r3, #0]
 800a150:	463b      	mov	r3, r7
 800a152:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a154:	463b      	mov	r3, r7
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	f040 8509 	bne.w	800ab72 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a160:	463b      	mov	r3, r7
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	463b      	mov	r3, r7
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d905      	bls.n	800a17c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a170:	463b      	mov	r3, r7
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a17a:	e004      	b.n	800a186 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a17c:	463b      	mov	r3, r7
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a186:	463b      	mov	r3, r7
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	7b1b      	ldrb	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d128      	bne.n	800a1e2 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a190:	463b      	mov	r3, r7
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6959      	ldr	r1, [r3, #20]
 800a196:	463b      	mov	r3, r7
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	88da      	ldrh	r2, [r3, #6]
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	1d38      	adds	r0, r7, #4
 800a1a4:	6800      	ldr	r0, [r0, #0]
 800a1a6:	f001 f9fb 	bl	800b5a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1aa:	1d3b      	adds	r3, r7, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	00da      	lsls	r2, r3, #3
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	801a      	strh	r2, [r3, #0]
 800a1de:	f000 bc9f 	b.w	800ab20 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a1e2:	463b      	mov	r3, r7
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	78db      	ldrb	r3, [r3, #3]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	f040 8347 	bne.w	800a87c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6a1a      	ldr	r2, [r3, #32]
 800a1f4:	463b      	mov	r3, r7
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	f240 82eb 	bls.w	800a7d6 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a200:	1d3b      	adds	r3, r7, #4
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	463b      	mov	r3, r7
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a21e:	1d3b      	adds	r3, r7, #4
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	463b      	mov	r3, r7
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	441a      	add	r2, r3
 800a22c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a238:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a240:	b29b      	uxth	r3, r3
 800a242:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a244:	463b      	mov	r3, r7
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	463b      	mov	r3, r7
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a256:	1d3b      	adds	r3, r7, #4
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	463b      	mov	r3, r7
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8159 	beq.w	800a524 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a272:	1d3b      	adds	r3, r7, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	633b      	str	r3, [r7, #48]	; 0x30
 800a278:	463b      	mov	r3, r7
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d164      	bne.n	800a34c <USB_EPStartXfer+0x206>
 800a282:	1d3b      	adds	r3, r7, #4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	62bb      	str	r3, [r7, #40]	; 0x28
 800a288:	1d3b      	adds	r3, r7, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a290:	b29b      	uxth	r3, r3
 800a292:	461a      	mov	r2, r3
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	4413      	add	r3, r2
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
 800a29a:	463b      	mov	r3, r7
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	00da      	lsls	r2, r3, #3
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a2b2:	d91c      	bls.n	800a2ee <USB_EPStartXfer+0x1a8>
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b8:	095b      	lsrs	r3, r3, #5
 800a2ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c2:	f003 031f 	and.w	r3, r3, #31
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d104      	bne.n	800a2d4 <USB_EPStartXfer+0x18e>
 800a2ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a2d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	029b      	lsls	r3, r3, #10
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	801a      	strh	r2, [r3, #0]
 800a2ec:	e04a      	b.n	800a384 <USB_EPStartXfer+0x23e>
 800a2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d112      	bne.n	800a31c <USB_EPStartXfer+0x1d6>
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a300:	b29a      	uxth	r2, r3
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a314:	b29a      	uxth	r2, r3
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	801a      	strh	r2, [r3, #0]
 800a31a:	e033      	b.n	800a384 <USB_EPStartXfer+0x23e>
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <USB_EPStartXfer+0x1f6>
 800a332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a336:	3301      	adds	r3, #1
 800a338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a33c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a340:	b29b      	uxth	r3, r3
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	b29a      	uxth	r2, r3
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	801a      	strh	r2, [r3, #0]
 800a34a:	e01b      	b.n	800a384 <USB_EPStartXfer+0x23e>
 800a34c:	463b      	mov	r3, r7
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	785b      	ldrb	r3, [r3, #1]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d116      	bne.n	800a384 <USB_EPStartXfer+0x23e>
 800a356:	1d3b      	adds	r3, r7, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35e:	b29b      	uxth	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	4413      	add	r3, r2
 800a366:	633b      	str	r3, [r7, #48]	; 0x30
 800a368:	463b      	mov	r3, r7
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	00da      	lsls	r2, r3, #3
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	4413      	add	r3, r2
 800a374:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a37e:	b29a      	uxth	r2, r3
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a384:	463b      	mov	r3, r7
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	895b      	ldrh	r3, [r3, #10]
 800a38a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a38e:	463b      	mov	r3, r7
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6959      	ldr	r1, [r3, #20]
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a39e:	1d38      	adds	r0, r7, #4
 800a3a0:	6800      	ldr	r0, [r0, #0]
 800a3a2:	f001 f8fd 	bl	800b5a0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	695a      	ldr	r2, [r3, #20]
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b0:	441a      	add	r2, r3
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	463b      	mov	r3, r7
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d909      	bls.n	800a3dc <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a3c8:	463b      	mov	r3, r7
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6a1a      	ldr	r2, [r3, #32]
 800a3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	621a      	str	r2, [r3, #32]
 800a3da:	e008      	b.n	800a3ee <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3dc:	463b      	mov	r3, r7
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d164      	bne.n	800a4c2 <USB_EPStartXfer+0x37c>
 800a3f8:	1d3b      	adds	r3, r7, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	61bb      	str	r3, [r7, #24]
 800a3fe:	1d3b      	adds	r3, r7, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a406:	b29b      	uxth	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	4413      	add	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
 800a410:	463b      	mov	r3, r7
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	00da      	lsls	r2, r3, #3
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	4413      	add	r3, r2
 800a41c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a426:	2b3e      	cmp	r3, #62	; 0x3e
 800a428:	d91c      	bls.n	800a464 <USB_EPStartXfer+0x31e>
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42e:	095b      	lsrs	r3, r3, #5
 800a430:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a438:	f003 031f 	and.w	r3, r3, #31
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <USB_EPStartXfer+0x304>
 800a440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a444:	3b01      	subs	r3, #1
 800a446:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a44a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a44e:	b29b      	uxth	r3, r3
 800a450:	029b      	lsls	r3, r3, #10
 800a452:	b29b      	uxth	r3, r3
 800a454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	e04d      	b.n	800a500 <USB_EPStartXfer+0x3ba>
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d112      	bne.n	800a492 <USB_EPStartXfer+0x34c>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b29b      	uxth	r3, r3
 800a472:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a476:	b29a      	uxth	r2, r3
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	801a      	strh	r2, [r3, #0]
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	b29b      	uxth	r3, r3
 800a482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	e036      	b.n	800a500 <USB_EPStartXfer+0x3ba>
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <USB_EPStartXfer+0x36c>
 800a4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	029b      	lsls	r3, r3, #10
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	e01e      	b.n	800a500 <USB_EPStartXfer+0x3ba>
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	785b      	ldrb	r3, [r3, #1]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d119      	bne.n	800a500 <USB_EPStartXfer+0x3ba>
 800a4cc:	1d3b      	adds	r3, r7, #4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	623b      	str	r3, [r7, #32]
 800a4d2:	1d3b      	adds	r3, r7, #4
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	623b      	str	r3, [r7, #32]
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	00da      	lsls	r2, r3, #3
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	891b      	ldrh	r3, [r3, #8]
 800a506:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a50a:	463b      	mov	r3, r7
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6959      	ldr	r1, [r3, #20]
 800a510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a514:	b29b      	uxth	r3, r3
 800a516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a51a:	1d38      	adds	r0, r7, #4
 800a51c:	6800      	ldr	r0, [r0, #0]
 800a51e:	f001 f83f 	bl	800b5a0 <USB_WritePMA>
 800a522:	e2fd      	b.n	800ab20 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a524:	463b      	mov	r3, r7
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d164      	bne.n	800a5f8 <USB_EPStartXfer+0x4b2>
 800a52e:	1d3b      	adds	r3, r7, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	64bb      	str	r3, [r7, #72]	; 0x48
 800a534:	1d3b      	adds	r3, r7, #4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a542:	4413      	add	r3, r2
 800a544:	64bb      	str	r3, [r7, #72]	; 0x48
 800a546:	463b      	mov	r3, r7
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	00da      	lsls	r2, r3, #3
 800a54e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a550:	4413      	add	r3, r2
 800a552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a556:	647b      	str	r3, [r7, #68]	; 0x44
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	2b3e      	cmp	r3, #62	; 0x3e
 800a55e:	d91c      	bls.n	800a59a <USB_EPStartXfer+0x454>
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a564:	095b      	lsrs	r3, r3, #5
 800a566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56e:	f003 031f 	and.w	r3, r3, #31
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <USB_EPStartXfer+0x43a>
 800a576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a57a:	3b01      	subs	r3, #1
 800a57c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a584:	b29b      	uxth	r3, r3
 800a586:	029b      	lsls	r3, r3, #10
 800a588:	b29b      	uxth	r3, r3
 800a58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a592:	b29a      	uxth	r2, r3
 800a594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a596:	801a      	strh	r2, [r3, #0]
 800a598:	e04d      	b.n	800a636 <USB_EPStartXfer+0x4f0>
 800a59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d112      	bne.n	800a5c8 <USB_EPStartXfer+0x482>
 800a5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b0:	801a      	strh	r2, [r3, #0]
 800a5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c4:	801a      	strh	r2, [r3, #0]
 800a5c6:	e036      	b.n	800a636 <USB_EPStartXfer+0x4f0>
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <USB_EPStartXfer+0x4a2>
 800a5de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	029b      	lsls	r3, r3, #10
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f4:	801a      	strh	r2, [r3, #0]
 800a5f6:	e01e      	b.n	800a636 <USB_EPStartXfer+0x4f0>
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d119      	bne.n	800a636 <USB_EPStartXfer+0x4f0>
 800a602:	1d3b      	adds	r3, r7, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	653b      	str	r3, [r7, #80]	; 0x50
 800a608:	1d3b      	adds	r3, r7, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a610:	b29b      	uxth	r3, r3
 800a612:	461a      	mov	r2, r3
 800a614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a616:	4413      	add	r3, r2
 800a618:	653b      	str	r3, [r7, #80]	; 0x50
 800a61a:	463b      	mov	r3, r7
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	00da      	lsls	r2, r3, #3
 800a622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a624:	4413      	add	r3, r2
 800a626:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a62a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a630:	b29a      	uxth	r2, r3
 800a632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a636:	463b      	mov	r3, r7
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	891b      	ldrh	r3, [r3, #8]
 800a63c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a640:	463b      	mov	r3, r7
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6959      	ldr	r1, [r3, #20]
 800a646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a650:	1d38      	adds	r0, r7, #4
 800a652:	6800      	ldr	r0, [r0, #0]
 800a654:	f000 ffa4 	bl	800b5a0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a658:	463b      	mov	r3, r7
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695a      	ldr	r2, [r3, #20]
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a662:	441a      	add	r2, r3
 800a664:	463b      	mov	r3, r7
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a66a:	463b      	mov	r3, r7
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6a1a      	ldr	r2, [r3, #32]
 800a670:	463b      	mov	r3, r7
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	429a      	cmp	r2, r3
 800a678:	d909      	bls.n	800a68e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a67a:	463b      	mov	r3, r7
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1a      	ldr	r2, [r3, #32]
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a684:	1ad2      	subs	r2, r2, r3
 800a686:	463b      	mov	r3, r7
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	621a      	str	r2, [r3, #32]
 800a68c:	e008      	b.n	800a6a0 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a68e:	463b      	mov	r3, r7
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a698:	463b      	mov	r3, r7
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2200      	movs	r2, #0
 800a69e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6a0:	1d3b      	adds	r3, r7, #4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	785b      	ldrb	r3, [r3, #1]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d164      	bne.n	800a77a <USB_EPStartXfer+0x634>
 800a6b0:	1d3b      	adds	r3, r7, #4
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	4413      	add	r3, r2
 800a6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	00da      	lsls	r2, r3, #3
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6de:	2b3e      	cmp	r3, #62	; 0x3e
 800a6e0:	d91c      	bls.n	800a71c <USB_EPStartXfer+0x5d6>
 800a6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e6:	095b      	lsrs	r3, r3, #5
 800a6e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f0:	f003 031f 	and.w	r3, r3, #31
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <USB_EPStartXfer+0x5bc>
 800a6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a706:	b29b      	uxth	r3, r3
 800a708:	029b      	lsls	r3, r3, #10
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a714:	b29a      	uxth	r2, r3
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	801a      	strh	r2, [r3, #0]
 800a71a:	e04a      	b.n	800a7b2 <USB_EPStartXfer+0x66c>
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a720:	2b00      	cmp	r3, #0
 800a722:	d112      	bne.n	800a74a <USB_EPStartXfer+0x604>
 800a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a73e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a742:	b29a      	uxth	r2, r3
 800a744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a746:	801a      	strh	r2, [r3, #0]
 800a748:	e033      	b.n	800a7b2 <USB_EPStartXfer+0x66c>
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <USB_EPStartXfer+0x624>
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a764:	3301      	adds	r3, #1
 800a766:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76e:	b29b      	uxth	r3, r3
 800a770:	029b      	lsls	r3, r3, #10
 800a772:	b29a      	uxth	r2, r3
 800a774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a776:	801a      	strh	r2, [r3, #0]
 800a778:	e01b      	b.n	800a7b2 <USB_EPStartXfer+0x66c>
 800a77a:	463b      	mov	r3, r7
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	785b      	ldrb	r3, [r3, #1]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d116      	bne.n	800a7b2 <USB_EPStartXfer+0x66c>
 800a784:	1d3b      	adds	r3, r7, #4
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a792:	4413      	add	r3, r2
 800a794:	643b      	str	r3, [r7, #64]	; 0x40
 800a796:	463b      	mov	r3, r7
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	00da      	lsls	r2, r3, #3
 800a79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	895b      	ldrh	r3, [r3, #10]
 800a7b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7bc:	463b      	mov	r3, r7
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6959      	ldr	r1, [r3, #20]
 800a7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7cc:	1d38      	adds	r0, r7, #4
 800a7ce:	6800      	ldr	r0, [r0, #0]
 800a7d0:	f000 fee6 	bl	800b5a0 <USB_WritePMA>
 800a7d4:	e1a4      	b.n	800ab20 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a7e0:	1d3b      	adds	r3, r7, #4
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a7fe:	1d3b      	adds	r3, r7, #4
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	463b      	mov	r3, r7
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	441a      	add	r2, r3
 800a80c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	b29b      	uxth	r3, r3
 800a822:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a824:	1d3b      	adds	r3, r7, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a832:	b29b      	uxth	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a838:	4413      	add	r3, r2
 800a83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a83c:	463b      	mov	r3, r7
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	00da      	lsls	r2, r3, #3
 800a844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a846:	4413      	add	r3, r2
 800a848:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a84c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a852:	b29a      	uxth	r2, r3
 800a854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a856:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a858:	463b      	mov	r3, r7
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	891b      	ldrh	r3, [r3, #8]
 800a85e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a862:	463b      	mov	r3, r7
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6959      	ldr	r1, [r3, #20]
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a872:	1d38      	adds	r0, r7, #4
 800a874:	6800      	ldr	r0, [r0, #0]
 800a876:	f000 fe93 	bl	800b5a0 <USB_WritePMA>
 800a87a:	e151      	b.n	800ab20 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a87c:	463b      	mov	r3, r7
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a886:	1ad2      	subs	r2, r2, r3
 800a888:	463b      	mov	r3, r7
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a88e:	1d3b      	adds	r3, r7, #4
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	463b      	mov	r3, r7
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 809b 	beq.w	800a9e0 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8aa:	1d3b      	adds	r3, r7, #4
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	673b      	str	r3, [r7, #112]	; 0x70
 800a8b0:	463b      	mov	r3, r7
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d164      	bne.n	800a984 <USB_EPStartXfer+0x83e>
 800a8ba:	1d3b      	adds	r3, r7, #4
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8c0:	1d3b      	adds	r3, r7, #4
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8ce:	4413      	add	r3, r2
 800a8d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	00da      	lsls	r2, r3, #3
 800a8da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8dc:	4413      	add	r3, r2
 800a8de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8e2:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a8ea:	d91c      	bls.n	800a926 <USB_EPStartXfer+0x7e0>
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f0:	095b      	lsrs	r3, r3, #5
 800a8f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fa:	f003 031f 	and.w	r3, r3, #31
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <USB_EPStartXfer+0x7c6>
 800a902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a906:	3b01      	subs	r3, #1
 800a908:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a90c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a910:	b29b      	uxth	r3, r3
 800a912:	029b      	lsls	r3, r3, #10
 800a914:	b29b      	uxth	r3, r3
 800a916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a91a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a91e:	b29a      	uxth	r2, r3
 800a920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a922:	801a      	strh	r2, [r3, #0]
 800a924:	e04a      	b.n	800a9bc <USB_EPStartXfer+0x876>
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d112      	bne.n	800a954 <USB_EPStartXfer+0x80e>
 800a92e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29b      	uxth	r3, r3
 800a934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a938:	b29a      	uxth	r2, r3
 800a93a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a93c:	801a      	strh	r2, [r3, #0]
 800a93e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	e033      	b.n	800a9bc <USB_EPStartXfer+0x876>
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a958:	085b      	lsrs	r3, r3, #1
 800a95a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d004      	beq.n	800a974 <USB_EPStartXfer+0x82e>
 800a96a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a96e:	3301      	adds	r3, #1
 800a970:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a978:	b29b      	uxth	r3, r3
 800a97a:	029b      	lsls	r3, r3, #10
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a980:	801a      	strh	r2, [r3, #0]
 800a982:	e01b      	b.n	800a9bc <USB_EPStartXfer+0x876>
 800a984:	463b      	mov	r3, r7
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d116      	bne.n	800a9bc <USB_EPStartXfer+0x876>
 800a98e:	1d3b      	adds	r3, r7, #4
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a996:	b29b      	uxth	r3, r3
 800a998:	461a      	mov	r2, r3
 800a99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a99c:	4413      	add	r3, r2
 800a99e:	673b      	str	r3, [r7, #112]	; 0x70
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	00da      	lsls	r2, r3, #3
 800a9a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a9bc:	463b      	mov	r3, r7
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	895b      	ldrh	r3, [r3, #10]
 800a9c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6959      	ldr	r1, [r3, #20]
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9d6:	1d38      	adds	r0, r7, #4
 800a9d8:	6800      	ldr	r0, [r0, #0]
 800a9da:	f000 fde1 	bl	800b5a0 <USB_WritePMA>
 800a9de:	e09f      	b.n	800ab20 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	785b      	ldrb	r3, [r3, #1]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d164      	bne.n	800aab4 <USB_EPStartXfer+0x96e>
 800a9ea:	1d3b      	adds	r3, r7, #4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9fe:	4413      	add	r3, r2
 800aa00:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa02:	463b      	mov	r3, r7
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	00da      	lsls	r2, r3, #3
 800aa0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa12:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa18:	2b3e      	cmp	r3, #62	; 0x3e
 800aa1a:	d91c      	bls.n	800aa56 <USB_EPStartXfer+0x910>
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2a:	f003 031f 	and.w	r3, r3, #31
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <USB_EPStartXfer+0x8f6>
 800aa32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aa36:	3b01      	subs	r3, #1
 800aa38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	029b      	lsls	r3, r3, #10
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa52:	801a      	strh	r2, [r3, #0]
 800aa54:	e053      	b.n	800aafe <USB_EPStartXfer+0x9b8>
 800aa56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d112      	bne.n	800aa84 <USB_EPStartXfer+0x93e>
 800aa5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa6c:	801a      	strh	r2, [r3, #0]
 800aa6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa80:	801a      	strh	r2, [r3, #0]
 800aa82:	e03c      	b.n	800aafe <USB_EPStartXfer+0x9b8>
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	085b      	lsrs	r3, r3, #1
 800aa8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <USB_EPStartXfer+0x95e>
 800aa9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aaa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	029b      	lsls	r3, r3, #10
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab0:	801a      	strh	r2, [r3, #0]
 800aab2:	e024      	b.n	800aafe <USB_EPStartXfer+0x9b8>
 800aab4:	463b      	mov	r3, r7
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d11f      	bne.n	800aafe <USB_EPStartXfer+0x9b8>
 800aabe:	1d3b      	adds	r3, r7, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aac6:	1d3b      	adds	r3, r7, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aace:	b29b      	uxth	r3, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aad6:	4413      	add	r3, r2
 800aad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aadc:	463b      	mov	r3, r7
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	00da      	lsls	r2, r3, #3
 800aae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aae8:	4413      	add	r3, r2
 800aaea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aaee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aafc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aafe:	463b      	mov	r3, r7
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	891b      	ldrh	r3, [r3, #8]
 800ab04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab08:	463b      	mov	r3, r7
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6959      	ldr	r1, [r3, #20]
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab18:	1d38      	adds	r0, r7, #4
 800ab1a:	6800      	ldr	r0, [r0, #0]
 800ab1c:	f000 fd40 	bl	800b5a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	463b      	mov	r3, r7
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3a:	817b      	strh	r3, [r7, #10]
 800ab3c:	897b      	ldrh	r3, [r7, #10]
 800ab3e:	f083 0310 	eor.w	r3, r3, #16
 800ab42:	817b      	strh	r3, [r7, #10]
 800ab44:	897b      	ldrh	r3, [r7, #10]
 800ab46:	f083 0320 	eor.w	r3, r3, #32
 800ab4a:	817b      	strh	r3, [r7, #10]
 800ab4c:	1d3b      	adds	r3, r7, #4
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	463b      	mov	r3, r7
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	441a      	add	r2, r3
 800ab5a:	897b      	ldrh	r3, [r7, #10]
 800ab5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	8013      	strh	r3, [r2, #0]
 800ab70:	e3b5      	b.n	800b2de <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab72:	463b      	mov	r3, r7
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	7b1b      	ldrb	r3, [r3, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 8090 	bne.w	800ac9e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ab7e:	463b      	mov	r3, r7
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	699a      	ldr	r2, [r3, #24]
 800ab84:	463b      	mov	r3, r7
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d90e      	bls.n	800abac <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ab8e:	463b      	mov	r3, r7
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ab98:	463b      	mov	r3, r7
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba2:	1ad2      	subs	r2, r2, r3
 800aba4:	463b      	mov	r3, r7
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	619a      	str	r2, [r3, #24]
 800abaa:	e008      	b.n	800abbe <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800abac:	463b      	mov	r3, r7
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800abb6:	463b      	mov	r3, r7
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800abbe:	1d3b      	adds	r3, r7, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abc6:	1d3b      	adds	r3, r7, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abce:	b29b      	uxth	r3, r3
 800abd0:	461a      	mov	r2, r3
 800abd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abd6:	4413      	add	r3, r2
 800abd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abdc:	463b      	mov	r3, r7
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	00da      	lsls	r2, r3, #3
 800abe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abe8:	4413      	add	r3, r2
 800abea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	2b3e      	cmp	r3, #62	; 0x3e
 800abf8:	d91d      	bls.n	800ac36 <USB_EPStartXfer+0xaf0>
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfe:	095b      	lsrs	r3, r3, #5
 800ac00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac08:	f003 031f 	and.w	r3, r3, #31
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d104      	bne.n	800ac1a <USB_EPStartXfer+0xad4>
 800ac10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac14:	3b01      	subs	r3, #1
 800ac16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	029b      	lsls	r3, r3, #10
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac32:	801a      	strh	r2, [r3, #0]
 800ac34:	e325      	b.n	800b282 <USB_EPStartXfer+0x113c>
 800ac36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d116      	bne.n	800ac6c <USB_EPStartXfer+0xb26>
 800ac3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac68:	801a      	strh	r2, [r3, #0]
 800ac6a:	e30a      	b.n	800b282 <USB_EPStartXfer+0x113c>
 800ac6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <USB_EPStartXfer+0xb46>
 800ac82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac86:	3301      	adds	r3, #1
 800ac88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	029b      	lsls	r3, r3, #10
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	e2f1      	b.n	800b282 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ac9e:	463b      	mov	r3, r7
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	78db      	ldrb	r3, [r3, #3]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	f040 818f 	bne.w	800afc8 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800acaa:	463b      	mov	r3, r7
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	785b      	ldrb	r3, [r3, #1]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d175      	bne.n	800ada0 <USB_EPStartXfer+0xc5a>
 800acb4:	1d3b      	adds	r3, r7, #4
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acbc:	1d3b      	adds	r3, r7, #4
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800accc:	4413      	add	r3, r2
 800acce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acd2:	463b      	mov	r3, r7
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	00da      	lsls	r2, r3, #3
 800acda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acde:	4413      	add	r3, r2
 800ace0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ace4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ace8:	463b      	mov	r3, r7
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b3e      	cmp	r3, #62	; 0x3e
 800acf0:	d91f      	bls.n	800ad32 <USB_EPStartXfer+0xbec>
 800acf2:	463b      	mov	r3, r7
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acfe:	463b      	mov	r3, r7
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	f003 031f 	and.w	r3, r3, #31
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d104      	bne.n	800ad16 <USB_EPStartXfer+0xbd0>
 800ad0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad10:	3b01      	subs	r3, #1
 800ad12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	029b      	lsls	r3, r3, #10
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad2e:	801a      	strh	r2, [r3, #0]
 800ad30:	e05c      	b.n	800adec <USB_EPStartXfer+0xca6>
 800ad32:	463b      	mov	r3, r7
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d116      	bne.n	800ad6a <USB_EPStartXfer+0xc24>
 800ad3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad4e:	801a      	strh	r2, [r3, #0]
 800ad50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad66:	801a      	strh	r2, [r3, #0]
 800ad68:	e040      	b.n	800adec <USB_EPStartXfer+0xca6>
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad76:	463b      	mov	r3, r7
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <USB_EPStartXfer+0xc48>
 800ad84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad88:	3301      	adds	r3, #1
 800ad8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	029b      	lsls	r3, r3, #10
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad9c:	801a      	strh	r2, [r3, #0]
 800ad9e:	e025      	b.n	800adec <USB_EPStartXfer+0xca6>
 800ada0:	463b      	mov	r3, r7
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	785b      	ldrb	r3, [r3, #1]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d120      	bne.n	800adec <USB_EPStartXfer+0xca6>
 800adaa:	1d3b      	adds	r3, r7, #4
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adb2:	1d3b      	adds	r3, r7, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adba:	b29b      	uxth	r3, r3
 800adbc:	461a      	mov	r2, r3
 800adbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adc2:	4413      	add	r3, r2
 800adc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adc8:	463b      	mov	r3, r7
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	00da      	lsls	r2, r3, #3
 800add0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800add4:	4413      	add	r3, r2
 800add6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adde:	463b      	mov	r3, r7
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800adea:	801a      	strh	r2, [r3, #0]
 800adec:	1d3b      	adds	r3, r7, #4
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800adf4:	463b      	mov	r3, r7
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d175      	bne.n	800aeea <USB_EPStartXfer+0xda4>
 800adfe:	1d3b      	adds	r3, r7, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	461a      	mov	r2, r3
 800ae12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae16:	4413      	add	r3, r2
 800ae18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	00da      	lsls	r2, r3, #3
 800ae24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae28:	4413      	add	r3, r2
 800ae2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae32:	463b      	mov	r3, r7
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	2b3e      	cmp	r3, #62	; 0x3e
 800ae3a:	d91f      	bls.n	800ae7c <USB_EPStartXfer+0xd36>
 800ae3c:	463b      	mov	r3, r7
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	095b      	lsrs	r3, r3, #5
 800ae44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae48:	463b      	mov	r3, r7
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f003 031f 	and.w	r3, r3, #31
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <USB_EPStartXfer+0xd1a>
 800ae56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	029b      	lsls	r3, r3, #10
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae78:	801a      	strh	r2, [r3, #0]
 800ae7a:	e058      	b.n	800af2e <USB_EPStartXfer+0xde8>
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d116      	bne.n	800aeb4 <USB_EPStartXfer+0xd6e>
 800ae86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae98:	801a      	strh	r2, [r3, #0]
 800ae9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	e03c      	b.n	800af2e <USB_EPStartXfer+0xde8>
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aec0:	463b      	mov	r3, r7
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <USB_EPStartXfer+0xd92>
 800aece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed2:	3301      	adds	r3, #1
 800aed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aedc:	b29b      	uxth	r3, r3
 800aede:	029b      	lsls	r3, r3, #10
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	e021      	b.n	800af2e <USB_EPStartXfer+0xde8>
 800aeea:	463b      	mov	r3, r7
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	785b      	ldrb	r3, [r3, #1]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d11c      	bne.n	800af2e <USB_EPStartXfer+0xde8>
 800aef4:	1d3b      	adds	r3, r7, #4
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	461a      	mov	r2, r3
 800af00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af04:	4413      	add	r3, r2
 800af06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af0a:	463b      	mov	r3, r7
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	00da      	lsls	r2, r3, #3
 800af12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af16:	4413      	add	r3, r2
 800af18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af20:	463b      	mov	r3, r7
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	b29a      	uxth	r2, r3
 800af28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af2c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800af2e:	463b      	mov	r3, r7
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 81a4 	beq.w	800b282 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800af3a:	1d3b      	adds	r3, r7, #4
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	463b      	mov	r3, r7
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <USB_EPStartXfer+0xe20>
 800af5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10d      	bne.n	800af82 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f040 8187 	bne.w	800b282 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f040 8180 	bne.w	800b282 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800af82:	1d3b      	adds	r3, r7, #4
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	463b      	mov	r3, r7
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af9c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800afa0:	1d3b      	adds	r3, r7, #4
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	463b      	mov	r3, r7
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	441a      	add	r2, r3
 800afae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800afb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	8013      	strh	r3, [r2, #0]
 800afc6:	e15c      	b.n	800b282 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800afc8:	463b      	mov	r3, r7
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	78db      	ldrb	r3, [r3, #3]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	f040 8155 	bne.w	800b27e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800afd4:	463b      	mov	r3, r7
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	463b      	mov	r3, r7
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d90e      	bls.n	800b002 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800afe4:	463b      	mov	r3, r7
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800afee:	463b      	mov	r3, r7
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	699a      	ldr	r2, [r3, #24]
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff8:	1ad2      	subs	r2, r2, r3
 800affa:	463b      	mov	r3, r7
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	619a      	str	r2, [r3, #24]
 800b000:	e008      	b.n	800b014 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b002:	463b      	mov	r3, r7
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b00c:	463b      	mov	r3, r7
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2200      	movs	r2, #0
 800b012:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b014:	463b      	mov	r3, r7
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	785b      	ldrb	r3, [r3, #1]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d16f      	bne.n	800b0fe <USB_EPStartXfer+0xfb8>
 800b01e:	1d3b      	adds	r3, r7, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b026:	1d3b      	adds	r3, r7, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b02e:	b29b      	uxth	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b036:	4413      	add	r3, r2
 800b038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b03c:	463b      	mov	r3, r7
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	00da      	lsls	r2, r3, #3
 800b044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b048:	4413      	add	r3, r2
 800b04a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b04e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b056:	2b3e      	cmp	r3, #62	; 0x3e
 800b058:	d91d      	bls.n	800b096 <USB_EPStartXfer+0xf50>
 800b05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05e:	095b      	lsrs	r3, r3, #5
 800b060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	f003 031f 	and.w	r3, r3, #31
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d104      	bne.n	800b07a <USB_EPStartXfer+0xf34>
 800b070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b074:	3b01      	subs	r3, #1
 800b076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b07a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b07e:	b29b      	uxth	r3, r3
 800b080:	029b      	lsls	r3, r3, #10
 800b082:	b29b      	uxth	r3, r3
 800b084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b092:	801a      	strh	r2, [r3, #0]
 800b094:	e058      	b.n	800b148 <USB_EPStartXfer+0x1002>
 800b096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d116      	bne.n	800b0cc <USB_EPStartXfer+0xf86>
 800b09e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0b0:	801a      	strh	r2, [r3, #0]
 800b0b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	e03d      	b.n	800b148 <USB_EPStartXfer+0x1002>
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d0:	085b      	lsrs	r3, r3, #1
 800b0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <USB_EPStartXfer+0xfa6>
 800b0e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	029b      	lsls	r3, r3, #10
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	e024      	b.n	800b148 <USB_EPStartXfer+0x1002>
 800b0fe:	463b      	mov	r3, r7
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	785b      	ldrb	r3, [r3, #1]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d11f      	bne.n	800b148 <USB_EPStartXfer+0x1002>
 800b108:	1d3b      	adds	r3, r7, #4
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b110:	1d3b      	adds	r3, r7, #4
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b118:	b29b      	uxth	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b120:	4413      	add	r3, r2
 800b122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b126:	463b      	mov	r3, r7
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	00da      	lsls	r2, r3, #3
 800b12e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b132:	4413      	add	r3, r2
 800b134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b140:	b29a      	uxth	r2, r3
 800b142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b146:	801a      	strh	r2, [r3, #0]
 800b148:	1d3b      	adds	r3, r7, #4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b150:	463b      	mov	r3, r7
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	785b      	ldrb	r3, [r3, #1]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d16f      	bne.n	800b23a <USB_EPStartXfer+0x10f4>
 800b15a:	1d3b      	adds	r3, r7, #4
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b162:	1d3b      	adds	r3, r7, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	461a      	mov	r2, r3
 800b16e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b172:	4413      	add	r3, r2
 800b174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b178:	463b      	mov	r3, r7
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	00da      	lsls	r2, r3, #3
 800b180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b184:	4413      	add	r3, r2
 800b186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b18a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b192:	2b3e      	cmp	r3, #62	; 0x3e
 800b194:	d91d      	bls.n	800b1d2 <USB_EPStartXfer+0x108c>
 800b196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19a:	095b      	lsrs	r3, r3, #5
 800b19c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a4:	f003 031f 	and.w	r3, r3, #31
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d104      	bne.n	800b1b6 <USB_EPStartXfer+0x1070>
 800b1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	029b      	lsls	r3, r3, #10
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1ce:	801a      	strh	r2, [r3, #0]
 800b1d0:	e057      	b.n	800b282 <USB_EPStartXfer+0x113c>
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d116      	bne.n	800b208 <USB_EPStartXfer+0x10c2>
 800b1da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b204:	801a      	strh	r2, [r3, #0]
 800b206:	e03c      	b.n	800b282 <USB_EPStartXfer+0x113c>
 800b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20c:	085b      	lsrs	r3, r3, #1
 800b20e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d004      	beq.n	800b228 <USB_EPStartXfer+0x10e2>
 800b21e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b222:	3301      	adds	r3, #1
 800b224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	b29a      	uxth	r2, r3
 800b232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b236:	801a      	strh	r2, [r3, #0]
 800b238:	e023      	b.n	800b282 <USB_EPStartXfer+0x113c>
 800b23a:	463b      	mov	r3, r7
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d11e      	bne.n	800b282 <USB_EPStartXfer+0x113c>
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	461a      	mov	r2, r3
 800b250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b254:	4413      	add	r3, r2
 800b256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b25a:	463b      	mov	r3, r7
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	00da      	lsls	r2, r3, #3
 800b262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b266:	4413      	add	r3, r2
 800b268:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b26c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b274:	b29a      	uxth	r2, r3
 800b276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b27a:	801a      	strh	r2, [r3, #0]
 800b27c:	e001      	b.n	800b282 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e02e      	b.n	800b2e0 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b282:	1d3b      	adds	r3, r7, #4
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	463b      	mov	r3, r7
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	b29b      	uxth	r3, r3
 800b294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b29c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b2a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b2b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b2b8:	1d3b      	adds	r3, r7, #4
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	463b      	mov	r3, r7
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	441a      	add	r2, r3
 800b2c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	785b      	ldrb	r3, [r3, #1]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d020      	beq.n	800b33e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b312:	81bb      	strh	r3, [r7, #12]
 800b314:	89bb      	ldrh	r3, [r7, #12]
 800b316:	f083 0310 	eor.w	r3, r3, #16
 800b31a:	81bb      	strh	r3, [r7, #12]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	441a      	add	r2, r3
 800b326:	89bb      	ldrh	r3, [r7, #12]
 800b328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	b29b      	uxth	r3, r3
 800b33a:	8013      	strh	r3, [r2, #0]
 800b33c:	e01f      	b.n	800b37e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b354:	81fb      	strh	r3, [r7, #14]
 800b356:	89fb      	ldrh	r3, [r7, #14]
 800b358:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b35c:	81fb      	strh	r3, [r7, #14]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	441a      	add	r2, r3
 800b368:	89fb      	ldrh	r3, [r7, #14]
 800b36a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b36e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	7b1b      	ldrb	r3, [r3, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 809d 	bne.w	800b4da <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d04c      	beq.n	800b442 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	823b      	strh	r3, [r7, #16]
 800b3b6:	8a3b      	ldrh	r3, [r7, #16]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d01b      	beq.n	800b3f8 <USB_EPClearStall+0x6c>
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d6:	81fb      	strh	r3, [r7, #14]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	441a      	add	r2, r3
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	78db      	ldrb	r3, [r3, #3]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d06c      	beq.n	800b4da <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b416:	81bb      	strh	r3, [r7, #12]
 800b418:	89bb      	ldrh	r3, [r7, #12]
 800b41a:	f083 0320 	eor.w	r3, r3, #32
 800b41e:	81bb      	strh	r3, [r7, #12]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	441a      	add	r2, r3
 800b42a:	89bb      	ldrh	r3, [r7, #12]
 800b42c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	8013      	strh	r3, [r2, #0]
 800b440:	e04b      	b.n	800b4da <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	82fb      	strh	r3, [r7, #22]
 800b450:	8afb      	ldrh	r3, [r7, #22]
 800b452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d01b      	beq.n	800b492 <USB_EPClearStall+0x106>
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b46c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b470:	82bb      	strh	r3, [r7, #20]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	441a      	add	r2, r3
 800b47c:	8abb      	ldrh	r3, [r7, #20]
 800b47e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b48e:	b29b      	uxth	r3, r3
 800b490:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a8:	827b      	strh	r3, [r7, #18]
 800b4aa:	8a7b      	ldrh	r3, [r7, #18]
 800b4ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b4b0:	827b      	strh	r3, [r7, #18]
 800b4b2:	8a7b      	ldrh	r3, [r7, #18]
 800b4b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b4b8:	827b      	strh	r3, [r7, #18]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	441a      	add	r2, r3
 800b4c4:	8a7b      	ldrh	r3, [r7, #18]
 800b4c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b4f4:	78fb      	ldrb	r3, [r7, #3]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2280      	movs	r2, #128	; 0x80
 800b4fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b51e:	b29b      	uxth	r3, r3
 800b520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b53e:	b480      	push	{r7}
 800b540:	b083      	sub	sp, #12
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b576:	b29b      	uxth	r3, r3
 800b578:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b57a:	68fb      	ldr	r3, [r7, #12]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b08b      	sub	sp, #44	; 0x2c
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	80fb      	strh	r3, [r7, #6]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b5b6:	88bb      	ldrh	r3, [r7, #4]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	085b      	lsrs	r3, r3, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b5c6:	88fa      	ldrh	r2, [r7, #6]
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d6:	e01b      	b.n	800b610 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	021b      	lsls	r3, r3, #8
 800b5e6:	b21a      	sxth	r2, r3
 800b5e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	8a7a      	ldrh	r2, [r7, #18]
 800b5f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	3301      	adds	r3, #1
 800b602:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	3301      	adds	r3, #1
 800b608:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	3b01      	subs	r3, #1
 800b60e:	627b      	str	r3, [r7, #36]	; 0x24
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e0      	bne.n	800b5d8 <USB_WritePMA+0x38>
  }
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	372c      	adds	r7, #44	; 0x2c
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b624:	b480      	push	{r7}
 800b626:	b08b      	sub	sp, #44	; 0x2c
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4611      	mov	r1, r2
 800b630:	461a      	mov	r2, r3
 800b632:	460b      	mov	r3, r1
 800b634:	80fb      	strh	r3, [r7, #6]
 800b636:	4613      	mov	r3, r2
 800b638:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b63a:	88bb      	ldrh	r3, [r7, #4]
 800b63c:	085b      	lsrs	r3, r3, #1
 800b63e:	b29b      	uxth	r3, r3
 800b640:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b64a:	88fa      	ldrh	r2, [r7, #6]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b654:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
 800b65a:	e018      	b.n	800b68e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	b29b      	uxth	r3, r3
 800b662:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	3302      	adds	r3, #2
 800b668:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	3301      	adds	r3, #1
 800b676:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	3301      	adds	r3, #1
 800b686:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	3b01      	subs	r3, #1
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e3      	bne.n	800b65c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b694:	88bb      	ldrh	r3, [r7, #4]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d007      	beq.n	800b6b0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	701a      	strb	r2, [r3, #0]
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	372c      	adds	r7, #44	; 0x2c
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b6cc:	f002 f99c 	bl	800da08 <USBD_static_malloc>
 800b6d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d105      	bne.n	800b6e4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e066      	b.n	800b7b2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	7c1b      	ldrb	r3, [r3, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d119      	bne.n	800b728 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	2181      	movs	r1, #129	; 0x81
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 ff85 	bl	800d60c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b70c:	2202      	movs	r2, #2
 800b70e:	2101      	movs	r1, #1
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 ff7b 	bl	800d60c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2210      	movs	r2, #16
 800b722:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b726:	e016      	b.n	800b756 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	2202      	movs	r2, #2
 800b72c:	2181      	movs	r1, #129	; 0x81
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 ff6c 	bl	800d60c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b73a:	2340      	movs	r3, #64	; 0x40
 800b73c:	2202      	movs	r2, #2
 800b73e:	2101      	movs	r1, #1
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 ff63 	bl	800d60c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2210      	movs	r2, #16
 800b752:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b756:	2308      	movs	r3, #8
 800b758:	2203      	movs	r2, #3
 800b75a:	2182      	movs	r1, #130	; 0x82
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f001 ff55 	bl	800d60c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7c1b      	ldrb	r3, [r3, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d109      	bne.n	800b7a0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b796:	2101      	movs	r1, #1
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f002 f8b3 	bl	800d904 <USBD_LL_PrepareReceive>
 800b79e:	e007      	b.n	800b7b0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7a6:	2340      	movs	r3, #64	; 0x40
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f002 f8aa 	bl	800d904 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b7c6:	2181      	movs	r1, #129	; 0x81
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 ff5d 	bl	800d688 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f001 ff56 	bl	800d688 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b7e4:	2182      	movs	r1, #130	; 0x82
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 ff4e 	bl	800d688 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00e      	beq.n	800b824 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b816:	4618      	mov	r0, r3
 800b818:	f002 f904 	bl	800da24 <USBD_static_free>
    pdev->pClassData = NULL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b840:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b854:	2303      	movs	r3, #3
 800b856:	e0af      	b.n	800b9b8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b860:	2b00      	cmp	r3, #0
 800b862:	d03f      	beq.n	800b8e4 <USBD_CDC_Setup+0xb4>
 800b864:	2b20      	cmp	r3, #32
 800b866:	f040 809f 	bne.w	800b9a8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	88db      	ldrh	r3, [r3, #6]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d02e      	beq.n	800b8d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	b25b      	sxtb	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	da16      	bge.n	800b8aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b888:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	88d2      	ldrh	r2, [r2, #6]
 800b88e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	88db      	ldrh	r3, [r3, #6]
 800b894:	2b07      	cmp	r3, #7
 800b896:	bf28      	it	cs
 800b898:	2307      	movcs	r3, #7
 800b89a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	89fa      	ldrh	r2, [r7, #14]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 fa9f 	bl	800cde6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b8a8:	e085      	b.n	800b9b6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	785a      	ldrb	r2, [r3, #1]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8c0:	6939      	ldr	r1, [r7, #16]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	88db      	ldrh	r3, [r3, #6]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 fab8 	bl	800ce3e <USBD_CtlPrepareRx>
      break;
 800b8ce:	e072      	b.n	800b9b6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	7850      	ldrb	r0, [r2, #1]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	4798      	blx	r3
      break;
 800b8e2:	e068      	b.n	800b9b6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	2b0b      	cmp	r3, #11
 800b8ea:	d852      	bhi.n	800b992 <USBD_CDC_Setup+0x162>
 800b8ec:	a201      	add	r2, pc, #4	; (adr r2, 800b8f4 <USBD_CDC_Setup+0xc4>)
 800b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f2:	bf00      	nop
 800b8f4:	0800b925 	.word	0x0800b925
 800b8f8:	0800b9a1 	.word	0x0800b9a1
 800b8fc:	0800b993 	.word	0x0800b993
 800b900:	0800b993 	.word	0x0800b993
 800b904:	0800b993 	.word	0x0800b993
 800b908:	0800b993 	.word	0x0800b993
 800b90c:	0800b993 	.word	0x0800b993
 800b910:	0800b993 	.word	0x0800b993
 800b914:	0800b993 	.word	0x0800b993
 800b918:	0800b993 	.word	0x0800b993
 800b91c:	0800b94f 	.word	0x0800b94f
 800b920:	0800b979 	.word	0x0800b979
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d107      	bne.n	800b940 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b930:	f107 030a 	add.w	r3, r7, #10
 800b934:	2202      	movs	r2, #2
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f001 fa54 	bl	800cde6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b93e:	e032      	b.n	800b9a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f001 f9de 	bl	800cd04 <USBD_CtlError>
            ret = USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	75fb      	strb	r3, [r7, #23]
          break;
 800b94c:	e02b      	b.n	800b9a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b03      	cmp	r3, #3
 800b958:	d107      	bne.n	800b96a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b95a:	f107 030d 	add.w	r3, r7, #13
 800b95e:	2201      	movs	r2, #1
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f001 fa3f 	bl	800cde6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b968:	e01d      	b.n	800b9a6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f9c9 	bl	800cd04 <USBD_CtlError>
            ret = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	75fb      	strb	r3, [r7, #23]
          break;
 800b976:	e016      	b.n	800b9a6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b03      	cmp	r3, #3
 800b982:	d00f      	beq.n	800b9a4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 f9bc 	bl	800cd04 <USBD_CtlError>
            ret = USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b990:	e008      	b.n	800b9a4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 f9b5 	bl	800cd04 <USBD_CtlError>
          ret = USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	75fb      	strb	r3, [r7, #23]
          break;
 800b99e:	e002      	b.n	800b9a6 <USBD_CDC_Setup+0x176>
          break;
 800b9a0:	bf00      	nop
 800b9a2:	e008      	b.n	800b9b6 <USBD_CDC_Setup+0x186>
          break;
 800b9a4:	bf00      	nop
      }
      break;
 800b9a6:	e006      	b.n	800b9b6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 f9aa 	bl	800cd04 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e04f      	b.n	800ba82 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9ea:	78fa      	ldrb	r2, [r7, #3]
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	3318      	adds	r3, #24
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d029      	beq.n	800ba54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba00:	78fa      	ldrb	r2, [r7, #3]
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	3318      	adds	r3, #24
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	78f9      	ldrb	r1, [r7, #3]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	460b      	mov	r3, r1
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	4403      	add	r3, r0
 800ba20:	333c      	adds	r3, #60	; 0x3c
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba28:	fb03 f301 	mul.w	r3, r3, r1
 800ba2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d110      	bne.n	800ba54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ba32:	78fa      	ldrb	r2, [r7, #3]
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	440b      	add	r3, r1
 800ba40:	3318      	adds	r3, #24
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba46:	78f9      	ldrb	r1, [r7, #3]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 ff21 	bl	800d894 <USBD_LL_Transmit>
 800ba52:	e015      	b.n	800ba80 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba7c:	78fa      	ldrb	r2, [r7, #3]
 800ba7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e015      	b.n	800bad8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 ff5f 	bl	800d974 <USBD_LL_GetRxDataSize>
 800bab6:	4602      	mov	r2, r0
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bad2:	4611      	mov	r1, r2
 800bad4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d101      	bne.n	800bafa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e01b      	b.n	800bb32 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d015      	beq.n	800bb30 <USBD_CDC_EP0_RxReady+0x50>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb0a:	2bff      	cmp	r3, #255	; 0xff
 800bb0c:	d010      	beq.n	800bb30 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bb1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb24:	b292      	uxth	r2, r2
 800bb26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	22ff      	movs	r2, #255	; 0xff
 800bb2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2243      	movs	r2, #67	; 0x43
 800bb48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bb4a:	4b03      	ldr	r3, [pc, #12]	; (800bb58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	20000098 	.word	0x20000098

0800bb5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2243      	movs	r2, #67	; 0x43
 800bb68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bb6a:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	20000054 	.word	0x20000054

0800bb7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2243      	movs	r2, #67	; 0x43
 800bb88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb8a:	4b03      	ldr	r3, [pc, #12]	; (800bb98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	200000dc 	.word	0x200000dc

0800bb9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	220a      	movs	r2, #10
 800bba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000010 	.word	0x20000010

0800bbbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e004      	b.n	800bbda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b087      	sub	sp, #28
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbf8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e008      	b.n	800bc16 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e004      	b.n	800bc48 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e016      	b.n	800bca0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7c1b      	ldrb	r3, [r3, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc84:	2101      	movs	r1, #1
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f001 fe3c 	bl	800d904 <USBD_LL_PrepareReceive>
 800bc8c:	e007      	b.n	800bc9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc94:	2340      	movs	r3, #64	; 0x40
 800bc96:	2101      	movs	r1, #1
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 fe33 	bl	800d904 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e01f      	b.n	800bd00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	79fa      	ldrb	r2, [r7, #7]
 800bcf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f001 fbf5 	bl	800d4e4 <USBD_LL_Init>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e016      	b.n	800bd4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00b      	beq.n	800bd4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	f107 020e 	add.w	r2, r7, #14
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
 800bd44:	4602      	mov	r2, r0
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f001 fc22 	bl	800d5a8 <USBD_LL_Start>
 800bd64:	4603      	mov	r3, r0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bd90:	2303      	movs	r3, #3
 800bd92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d009      	beq.n	800bdb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	78fa      	ldrb	r2, [r7, #3]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	4798      	blx	r3
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d007      	beq.n	800bde2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	78fa      	ldrb	r2, [r7, #3]
 800bddc:	4611      	mov	r1, r2
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
  }

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 ff46 	bl	800cc90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be12:	461a      	mov	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be20:	f003 031f 	and.w	r3, r3, #31
 800be24:	2b02      	cmp	r3, #2
 800be26:	d01a      	beq.n	800be5e <USBD_LL_SetupStage+0x72>
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d822      	bhi.n	800be72 <USBD_LL_SetupStage+0x86>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <USBD_LL_SetupStage+0x4a>
 800be30:	2b01      	cmp	r3, #1
 800be32:	d00a      	beq.n	800be4a <USBD_LL_SetupStage+0x5e>
 800be34:	e01d      	b.n	800be72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f9ee 	bl	800c220 <USBD_StdDevReq>
 800be44:	4603      	mov	r3, r0
 800be46:	73fb      	strb	r3, [r7, #15]
      break;
 800be48:	e020      	b.n	800be8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fa52 	bl	800c2fc <USBD_StdItfReq>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e016      	b.n	800be8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa91 	bl	800c38e <USBD_StdEPReq>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
      break;
 800be70:	e00c      	b.n	800be8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f001 fc37 	bl	800d6f4 <USBD_LL_StallEP>
 800be86:	4603      	mov	r3, r0
 800be88:	73fb      	strb	r3, [r7, #15]
      break;
 800be8a:	bf00      	nop
  }

  return ret;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b086      	sub	sp, #24
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	460b      	mov	r3, r1
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bea4:	7afb      	ldrb	r3, [r7, #11]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d138      	bne.n	800bf1c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800beb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d14a      	bne.n	800bf52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d913      	bls.n	800bef0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	1ad2      	subs	r2, r2, r3
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	4293      	cmp	r3, r2
 800bee0:	bf28      	it	cs
 800bee2:	4613      	movcs	r3, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 ffc5 	bl	800ce78 <USBD_CtlContinueRx>
 800beee:	e030      	b.n	800bf52 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d10b      	bne.n	800bf14 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d005      	beq.n	800bf14 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 ffc0 	bl	800ce9a <USBD_CtlSendStatus>
 800bf1a:	e01a      	b.n	800bf52 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d114      	bne.n	800bf52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00e      	beq.n	800bf52 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	7afa      	ldrb	r2, [r7, #11]
 800bf3e:	4611      	mov	r1, r2
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	4798      	blx	r3
 800bf44:	4603      	mov	r3, r0
 800bf46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	e000      	b.n	800bf54 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	460b      	mov	r3, r1
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf6a:	7afb      	ldrb	r3, [r7, #11]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d16b      	bne.n	800c048 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3314      	adds	r3, #20
 800bf74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d156      	bne.n	800c02e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	689a      	ldr	r2, [r3, #8]
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d914      	bls.n	800bfb6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	1ad2      	subs	r2, r2, r3
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 ff3a 	bl	800ce1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2100      	movs	r1, #0
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f001 fca8 	bl	800d904 <USBD_LL_PrepareReceive>
 800bfb4:	e03b      	b.n	800c02e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d11c      	bne.n	800bffc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d316      	bcc.n	800bffc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d20f      	bcs.n	800bffc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2100      	movs	r1, #0
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 ff1b 	bl	800ce1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfee:	2300      	movs	r3, #0
 800bff0:	2200      	movs	r2, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f001 fc85 	bl	800d904 <USBD_LL_PrepareReceive>
 800bffa:	e018      	b.n	800c02e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b03      	cmp	r3, #3
 800c006:	d10b      	bne.n	800c020 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c020:	2180      	movs	r1, #128	; 0x80
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f001 fb66 	bl	800d6f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 ff49 	bl	800cec0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c034:	2b01      	cmp	r3, #1
 800c036:	d122      	bne.n	800c07e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff fe98 	bl	800bd6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c046:	e01a      	b.n	800c07e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b03      	cmp	r3, #3
 800c052:	d114      	bne.n	800c07e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05a:	695b      	ldr	r3, [r3, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00e      	beq.n	800c07e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	7afa      	ldrb	r2, [r7, #11]
 800c06a:	4611      	mov	r1, r2
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	4798      	blx	r3
 800c070:	4603      	mov	r3, r0
 800c072:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	e000      	b.n	800c080 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e02f      	b.n	800c11c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00f      	beq.n	800c0e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6852      	ldr	r2, [r2, #4]
 800c0de:	b2d2      	uxtb	r2, r2
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0e6:	2340      	movs	r3, #64	; 0x40
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f001 fa8d 	bl	800d60c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2240      	movs	r2, #64	; 0x40
 800c0fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	2200      	movs	r2, #0
 800c106:	2180      	movs	r1, #128	; 0x80
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 fa7f 	bl	800d60c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2240      	movs	r2, #64	; 0x40
 800c118:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	78fa      	ldrb	r2, [r7, #3]
 800c134:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c152:	b2da      	uxtb	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2204      	movs	r2, #4
 800c15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b04      	cmp	r3, #4
 800c182:	d106      	bne.n	800c192 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e012      	b.n	800c1dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d10b      	bne.n	800c1da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c8:	69db      	ldr	r3, [r3, #28]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c202:	8a3b      	ldrh	r3, [r7, #16]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	b21a      	sxth	r2, r3
 800c208:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	b21b      	sxth	r3, r3
 800c210:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c212:	89fb      	ldrh	r3, [r7, #14]
}
 800c214:	4618      	mov	r0, r3
 800c216:	371c      	adds	r7, #28
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c236:	2b40      	cmp	r3, #64	; 0x40
 800c238:	d005      	beq.n	800c246 <USBD_StdDevReq+0x26>
 800c23a:	2b40      	cmp	r3, #64	; 0x40
 800c23c:	d853      	bhi.n	800c2e6 <USBD_StdDevReq+0xc6>
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00b      	beq.n	800c25a <USBD_StdDevReq+0x3a>
 800c242:	2b20      	cmp	r3, #32
 800c244:	d14f      	bne.n	800c2e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	4798      	blx	r3
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]
      break;
 800c258:	e04a      	b.n	800c2f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b09      	cmp	r3, #9
 800c260:	d83b      	bhi.n	800c2da <USBD_StdDevReq+0xba>
 800c262:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <USBD_StdDevReq+0x48>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c2bd 	.word	0x0800c2bd
 800c26c:	0800c2d1 	.word	0x0800c2d1
 800c270:	0800c2db 	.word	0x0800c2db
 800c274:	0800c2c7 	.word	0x0800c2c7
 800c278:	0800c2db 	.word	0x0800c2db
 800c27c:	0800c29b 	.word	0x0800c29b
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c2db 	.word	0x0800c2db
 800c288:	0800c2b3 	.word	0x0800c2b3
 800c28c:	0800c2a5 	.word	0x0800c2a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f9de 	bl	800c654 <USBD_GetDescriptor>
          break;
 800c298:	e024      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fb6d 	bl	800c97c <USBD_SetAddress>
          break;
 800c2a2:	e01f      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fbac 	bl	800ca04 <USBD_SetConfig>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]
          break;
 800c2b0:	e018      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc4b 	bl	800cb50 <USBD_GetConfig>
          break;
 800c2ba:	e013      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fc7c 	bl	800cbbc <USBD_GetStatus>
          break;
 800c2c4:	e00e      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fcab 	bl	800cc24 <USBD_SetFeature>
          break;
 800c2ce:	e009      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fcba 	bl	800cc4c <USBD_ClrFeature>
          break;
 800c2d8:	e004      	b.n	800c2e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fd11 	bl	800cd04 <USBD_CtlError>
          break;
 800c2e2:	bf00      	nop
      }
      break;
 800c2e4:	e004      	b.n	800c2f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fd0b 	bl	800cd04 <USBD_CtlError>
      break;
 800c2ee:	bf00      	nop
  }

  return ret;
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop

0800c2fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d005      	beq.n	800c322 <USBD_StdItfReq+0x26>
 800c316:	2b40      	cmp	r3, #64	; 0x40
 800c318:	d82f      	bhi.n	800c37a <USBD_StdItfReq+0x7e>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <USBD_StdItfReq+0x26>
 800c31e:	2b20      	cmp	r3, #32
 800c320:	d12b      	bne.n	800c37a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d81d      	bhi.n	800c36c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	889b      	ldrh	r3, [r3, #4]
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b01      	cmp	r3, #1
 800c338:	d813      	bhi.n	800c362 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	4798      	blx	r3
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	88db      	ldrh	r3, [r3, #6]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d110      	bne.n	800c376 <USBD_StdItfReq+0x7a>
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10d      	bne.n	800c376 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fd9d 	bl	800ce9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c360:	e009      	b.n	800c376 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fccd 	bl	800cd04 <USBD_CtlError>
          break;
 800c36a:	e004      	b.n	800c376 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fcc8 	bl	800cd04 <USBD_CtlError>
          break;
 800c374:	e000      	b.n	800c378 <USBD_StdItfReq+0x7c>
          break;
 800c376:	bf00      	nop
      }
      break;
 800c378:	e004      	b.n	800c384 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fcc1 	bl	800cd04 <USBD_CtlError>
      break;
 800c382:	bf00      	nop
  }

  return ret;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	889b      	ldrh	r3, [r3, #4]
 800c3a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3aa:	2b40      	cmp	r3, #64	; 0x40
 800c3ac:	d007      	beq.n	800c3be <USBD_StdEPReq+0x30>
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	f200 8145 	bhi.w	800c63e <USBD_StdEPReq+0x2b0>
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <USBD_StdEPReq+0x44>
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	f040 8140 	bne.w	800c63e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	4798      	blx	r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d0:	e13a      	b.n	800c648 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	785b      	ldrb	r3, [r3, #1]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d007      	beq.n	800c3ea <USBD_StdEPReq+0x5c>
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	f300 8129 	bgt.w	800c632 <USBD_StdEPReq+0x2a4>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d07f      	beq.n	800c4e4 <USBD_StdEPReq+0x156>
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d03c      	beq.n	800c462 <USBD_StdEPReq+0xd4>
 800c3e8:	e123      	b.n	800c632 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d002      	beq.n	800c3fc <USBD_StdEPReq+0x6e>
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d016      	beq.n	800c428 <USBD_StdEPReq+0x9a>
 800c3fa:	e02c      	b.n	800c456 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00d      	beq.n	800c41e <USBD_StdEPReq+0x90>
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	2b80      	cmp	r3, #128	; 0x80
 800c406:	d00a      	beq.n	800c41e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c408:	7bbb      	ldrb	r3, [r7, #14]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 f971 	bl	800d6f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c412:	2180      	movs	r1, #128	; 0x80
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 f96d 	bl	800d6f4 <USBD_LL_StallEP>
 800c41a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c41c:	e020      	b.n	800c460 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 fc6f 	bl	800cd04 <USBD_CtlError>
              break;
 800c426:	e01b      	b.n	800c460 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	885b      	ldrh	r3, [r3, #2]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10e      	bne.n	800c44e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00b      	beq.n	800c44e <USBD_StdEPReq+0xc0>
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	2b80      	cmp	r3, #128	; 0x80
 800c43a:	d008      	beq.n	800c44e <USBD_StdEPReq+0xc0>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	88db      	ldrh	r3, [r3, #6]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d104      	bne.n	800c44e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 f953 	bl	800d6f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fd23 	bl	800ce9a <USBD_CtlSendStatus>

              break;
 800c454:	e004      	b.n	800c460 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fc53 	bl	800cd04 <USBD_CtlError>
              break;
 800c45e:	bf00      	nop
          }
          break;
 800c460:	e0ec      	b.n	800c63c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d002      	beq.n	800c474 <USBD_StdEPReq+0xe6>
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d016      	beq.n	800c4a0 <USBD_StdEPReq+0x112>
 800c472:	e030      	b.n	800c4d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00d      	beq.n	800c496 <USBD_StdEPReq+0x108>
 800c47a:	7bbb      	ldrb	r3, [r7, #14]
 800c47c:	2b80      	cmp	r3, #128	; 0x80
 800c47e:	d00a      	beq.n	800c496 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f001 f935 	bl	800d6f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c48a:	2180      	movs	r1, #128	; 0x80
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 f931 	bl	800d6f4 <USBD_LL_StallEP>
 800c492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c494:	e025      	b.n	800c4e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fc33 	bl	800cd04 <USBD_CtlError>
              break;
 800c49e:	e020      	b.n	800c4e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	885b      	ldrh	r3, [r3, #2]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d11b      	bne.n	800c4e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d004      	beq.n	800c4bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f001 f952 	bl	800d760 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fcec 	bl	800ce9a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	4798      	blx	r3
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c4d4:	e004      	b.n	800c4e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fc13 	bl	800cd04 <USBD_CtlError>
              break;
 800c4de:	e000      	b.n	800c4e2 <USBD_StdEPReq+0x154>
              break;
 800c4e0:	bf00      	nop
          }
          break;
 800c4e2:	e0ab      	b.n	800c63c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d002      	beq.n	800c4f6 <USBD_StdEPReq+0x168>
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d032      	beq.n	800c55a <USBD_StdEPReq+0x1cc>
 800c4f4:	e097      	b.n	800c626 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d007      	beq.n	800c50c <USBD_StdEPReq+0x17e>
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	2b80      	cmp	r3, #128	; 0x80
 800c500:	d004      	beq.n	800c50c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fbfd 	bl	800cd04 <USBD_CtlError>
                break;
 800c50a:	e091      	b.n	800c630 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c50c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da0b      	bge.n	800c52c <USBD_StdEPReq+0x19e>
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	3310      	adds	r3, #16
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4413      	add	r3, r2
 800c528:	3304      	adds	r3, #4
 800c52a:	e00b      	b.n	800c544 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c532:	4613      	mov	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4413      	add	r3, r2
 800c542:	3304      	adds	r3, #4
 800c544:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2202      	movs	r2, #2
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fc47 	bl	800cde6 <USBD_CtlSendData>
              break;
 800c558:	e06a      	b.n	800c630 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c55a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	da11      	bge.n	800c586 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c562:	7bbb      	ldrb	r3, [r7, #14]
 800c564:	f003 020f 	and.w	r2, r3, #15
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	4613      	mov	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	440b      	add	r3, r1
 800c574:	3324      	adds	r3, #36	; 0x24
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d117      	bne.n	800c5ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fbc0 	bl	800cd04 <USBD_CtlError>
                  break;
 800c584:	e054      	b.n	800c630 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c586:	7bbb      	ldrb	r3, [r7, #14]
 800c588:	f003 020f 	and.w	r2, r3, #15
 800c58c:	6879      	ldr	r1, [r7, #4]
 800c58e:	4613      	mov	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4413      	add	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	440b      	add	r3, r1
 800c598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d104      	bne.n	800c5ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fbad 	bl	800cd04 <USBD_CtlError>
                  break;
 800c5aa:	e041      	b.n	800c630 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	da0b      	bge.n	800c5cc <USBD_StdEPReq+0x23e>
 800c5b4:	7bbb      	ldrb	r3, [r7, #14]
 800c5b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4413      	add	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	3310      	adds	r3, #16
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	e00b      	b.n	800c5e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <USBD_StdEPReq+0x264>
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	2b80      	cmp	r3, #128	; 0x80
 800c5f0:	d103      	bne.n	800c5fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	e00e      	b.n	800c618 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 f8e4 	bl	800d7cc <USBD_LL_IsStallEP>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2201      	movs	r2, #1
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e002      	b.n	800c618 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2200      	movs	r2, #0
 800c616:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2202      	movs	r2, #2
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fbe1 	bl	800cde6 <USBD_CtlSendData>
              break;
 800c624:	e004      	b.n	800c630 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fb6b 	bl	800cd04 <USBD_CtlError>
              break;
 800c62e:	bf00      	nop
          }
          break;
 800c630:	e004      	b.n	800c63c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fb65 	bl	800cd04 <USBD_CtlError>
          break;
 800c63a:	bf00      	nop
      }
      break;
 800c63c:	e004      	b.n	800c648 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fb5f 	bl	800cd04 <USBD_CtlError>
      break;
 800c646:	bf00      	nop
  }

  return ret;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	0a1b      	lsrs	r3, r3, #8
 800c670:	b29b      	uxth	r3, r3
 800c672:	3b01      	subs	r3, #1
 800c674:	2b0e      	cmp	r3, #14
 800c676:	f200 8152 	bhi.w	800c91e <USBD_GetDescriptor+0x2ca>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <USBD_GetDescriptor+0x2c>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c6f1 	.word	0x0800c6f1
 800c684:	0800c709 	.word	0x0800c709
 800c688:	0800c749 	.word	0x0800c749
 800c68c:	0800c91f 	.word	0x0800c91f
 800c690:	0800c91f 	.word	0x0800c91f
 800c694:	0800c8bf 	.word	0x0800c8bf
 800c698:	0800c8eb 	.word	0x0800c8eb
 800c69c:	0800c91f 	.word	0x0800c91f
 800c6a0:	0800c91f 	.word	0x0800c91f
 800c6a4:	0800c91f 	.word	0x0800c91f
 800c6a8:	0800c91f 	.word	0x0800c91f
 800c6ac:	0800c91f 	.word	0x0800c91f
 800c6b0:	0800c91f 	.word	0x0800c91f
 800c6b4:	0800c91f 	.word	0x0800c91f
 800c6b8:	0800c6bd 	.word	0x0800c6bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ce:	69db      	ldr	r3, [r3, #28]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	7c12      	ldrb	r2, [r2, #16]
 800c6d4:	f107 0108 	add.w	r1, r7, #8
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4798      	blx	r3
 800c6dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6de:	e126      	b.n	800c92e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fb0e 	bl	800cd04 <USBD_CtlError>
        err++;
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	72fb      	strb	r3, [r7, #11]
      break;
 800c6ee:	e11e      	b.n	800c92e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	7c12      	ldrb	r2, [r2, #16]
 800c6fc:	f107 0108 	add.w	r1, r7, #8
 800c700:	4610      	mov	r0, r2
 800c702:	4798      	blx	r3
 800c704:	60f8      	str	r0, [r7, #12]
      break;
 800c706:	e112      	b.n	800c92e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7c1b      	ldrb	r3, [r3, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10d      	bne.n	800c72c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	f107 0208 	add.w	r2, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3301      	adds	r3, #1
 800c726:	2202      	movs	r2, #2
 800c728:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c72a:	e100      	b.n	800c92e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	f107 0208 	add.w	r2, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3301      	adds	r3, #1
 800c742:	2202      	movs	r2, #2
 800c744:	701a      	strb	r2, [r3, #0]
      break;
 800c746:	e0f2      	b.n	800c92e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	885b      	ldrh	r3, [r3, #2]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b05      	cmp	r3, #5
 800c750:	f200 80ac 	bhi.w	800c8ac <USBD_GetDescriptor+0x258>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_GetDescriptor+0x108>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c775 	.word	0x0800c775
 800c760:	0800c7a9 	.word	0x0800c7a9
 800c764:	0800c7dd 	.word	0x0800c7dd
 800c768:	0800c811 	.word	0x0800c811
 800c76c:	0800c845 	.word	0x0800c845
 800c770:	0800c879 	.word	0x0800c879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00b      	beq.n	800c798 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	7c12      	ldrb	r2, [r2, #16]
 800c78c:	f107 0108 	add.w	r1, r7, #8
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
 800c794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c796:	e091      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fab2 	bl	800cd04 <USBD_CtlError>
            err++;
 800c7a0:	7afb      	ldrb	r3, [r7, #11]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7a6:	e089      	b.n	800c8bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	7c12      	ldrb	r2, [r2, #16]
 800c7c0:	f107 0108 	add.w	r1, r7, #8
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	4798      	blx	r3
 800c7c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7ca:	e077      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fa98 	bl	800cd04 <USBD_CtlError>
            err++;
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7da:	e06f      	b.n	800c8bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	7c12      	ldrb	r2, [r2, #16]
 800c7f4:	f107 0108 	add.w	r1, r7, #8
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7fe:	e05d      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fa7e 	bl	800cd04 <USBD_CtlError>
            err++;
 800c808:	7afb      	ldrb	r3, [r7, #11]
 800c80a:	3301      	adds	r3, #1
 800c80c:	72fb      	strb	r3, [r7, #11]
          break;
 800c80e:	e055      	b.n	800c8bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00b      	beq.n	800c834 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	7c12      	ldrb	r2, [r2, #16]
 800c828:	f107 0108 	add.w	r1, r7, #8
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c832:	e043      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fa64 	bl	800cd04 <USBD_CtlError>
            err++;
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	3301      	adds	r3, #1
 800c840:	72fb      	strb	r3, [r7, #11]
          break;
 800c842:	e03b      	b.n	800c8bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	7c12      	ldrb	r2, [r2, #16]
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c866:	e029      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fa4a 	bl	800cd04 <USBD_CtlError>
            err++;
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	3301      	adds	r3, #1
 800c874:	72fb      	strb	r3, [r7, #11]
          break;
 800c876:	e021      	b.n	800c8bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7c12      	ldrb	r2, [r2, #16]
 800c890:	f107 0108 	add.w	r1, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c89a:	e00f      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fa30 	bl	800cd04 <USBD_CtlError>
            err++;
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8aa:	e007      	b.n	800c8bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa28 	bl	800cd04 <USBD_CtlError>
          err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c8ba:	bf00      	nop
      }
      break;
 800c8bc:	e037      	b.n	800c92e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7c1b      	ldrb	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d109      	bne.n	800c8da <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ce:	f107 0208 	add.w	r2, r7, #8
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	4798      	blx	r3
 800c8d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8d8:	e029      	b.n	800c92e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fa11 	bl	800cd04 <USBD_CtlError>
        err++;
 800c8e2:	7afb      	ldrb	r3, [r7, #11]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c8e8:	e021      	b.n	800c92e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7c1b      	ldrb	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10d      	bne.n	800c90e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fa:	f107 0208 	add.w	r2, r7, #8
 800c8fe:	4610      	mov	r0, r2
 800c900:	4798      	blx	r3
 800c902:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	3301      	adds	r3, #1
 800c908:	2207      	movs	r2, #7
 800c90a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c90c:	e00f      	b.n	800c92e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f9f7 	bl	800cd04 <USBD_CtlError>
        err++;
 800c916:	7afb      	ldrb	r3, [r7, #11]
 800c918:	3301      	adds	r3, #1
 800c91a:	72fb      	strb	r3, [r7, #11]
      break;
 800c91c:	e007      	b.n	800c92e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f9ef 	bl	800cd04 <USBD_CtlError>
      err++;
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	3301      	adds	r3, #1
 800c92a:	72fb      	strb	r3, [r7, #11]
      break;
 800c92c:	bf00      	nop
  }

  if (err != 0U)
 800c92e:	7afb      	ldrb	r3, [r7, #11]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d11e      	bne.n	800c972 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	88db      	ldrh	r3, [r3, #6]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d016      	beq.n	800c96a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c93c:	893b      	ldrh	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	88da      	ldrh	r2, [r3, #6]
 800c946:	893b      	ldrh	r3, [r7, #8]
 800c948:	4293      	cmp	r3, r2
 800c94a:	bf28      	it	cs
 800c94c:	4613      	movcs	r3, r2
 800c94e:	b29b      	uxth	r3, r3
 800c950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c952:	893b      	ldrh	r3, [r7, #8]
 800c954:	461a      	mov	r2, r3
 800c956:	68f9      	ldr	r1, [r7, #12]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa44 	bl	800cde6 <USBD_CtlSendData>
 800c95e:	e009      	b.n	800c974 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f9ce 	bl	800cd04 <USBD_CtlError>
 800c968:	e004      	b.n	800c974 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 fa95 	bl	800ce9a <USBD_CtlSendStatus>
 800c970:	e000      	b.n	800c974 <USBD_GetDescriptor+0x320>
    return;
 800c972:	bf00      	nop
  }
}
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop

0800c97c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	889b      	ldrh	r3, [r3, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d131      	bne.n	800c9f2 <USBD_SetAddress+0x76>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	88db      	ldrh	r3, [r3, #6]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d12d      	bne.n	800c9f2 <USBD_SetAddress+0x76>
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	885b      	ldrh	r3, [r3, #2]
 800c99a:	2b7f      	cmp	r3, #127	; 0x7f
 800c99c:	d829      	bhi.n	800c9f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	885b      	ldrh	r3, [r3, #2]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b03      	cmp	r3, #3
 800c9b4:	d104      	bne.n	800c9c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f9a3 	bl	800cd04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9be:	e01d      	b.n	800c9fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	7bfa      	ldrb	r2, [r7, #15]
 800c9c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 ff2b 	bl	800d828 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fa61 	bl	800ce9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d004      	beq.n	800c9e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e6:	e009      	b.n	800c9fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f0:	e004      	b.n	800c9fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f985 	bl	800cd04 <USBD_CtlError>
  }
}
 800c9fa:	bf00      	nop
 800c9fc:	bf00      	nop
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	885b      	ldrh	r3, [r3, #2]
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	4b4c      	ldr	r3, [pc, #304]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca1c:	4b4b      	ldr	r3, [pc, #300]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d905      	bls.n	800ca30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f96c 	bl	800cd04 <USBD_CtlError>
    return USBD_FAIL;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e088      	b.n	800cb42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d002      	beq.n	800ca42 <USBD_SetConfig+0x3e>
 800ca3c:	2b03      	cmp	r3, #3
 800ca3e:	d025      	beq.n	800ca8c <USBD_SetConfig+0x88>
 800ca40:	e071      	b.n	800cb26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca42:	4b42      	ldr	r3, [pc, #264]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d01c      	beq.n	800ca84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ca4a:	4b40      	ldr	r3, [pc, #256]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca54:	4b3d      	ldr	r3, [pc, #244]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff f992 	bl	800bd84 <USBD_SetClassConfig>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d004      	beq.n	800ca74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f949 	bl	800cd04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca72:	e065      	b.n	800cb40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fa10 	bl	800ce9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2203      	movs	r2, #3
 800ca7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca82:	e05d      	b.n	800cb40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fa08 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800ca8a:	e059      	b.n	800cb40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca8c:	4b2f      	ldr	r3, [pc, #188]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d112      	bne.n	800caba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2202      	movs	r2, #2
 800ca98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ca9c:	4b2b      	ldr	r3, [pc, #172]	; (800cb4c <USBD_SetConfig+0x148>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800caa6:	4b29      	ldr	r3, [pc, #164]	; (800cb4c <USBD_SetConfig+0x148>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff f985 	bl	800bdbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f9f1 	bl	800ce9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cab8:	e042      	b.n	800cb40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800caba:	4b24      	ldr	r3, [pc, #144]	; (800cb4c <USBD_SetConfig+0x148>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d02a      	beq.n	800cb1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff f973 	bl	800bdbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cad6:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <USBD_SetConfig+0x148>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cae0:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <USBD_SetConfig+0x148>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff f94c 	bl	800bd84 <USBD_SetClassConfig>
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00f      	beq.n	800cb16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f903 	bl	800cd04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff f958 	bl	800bdbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb14:	e014      	b.n	800cb40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f9bf 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800cb1c:	e010      	b.n	800cb40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f9bb 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800cb24:	e00c      	b.n	800cb40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f8eb 	bl	800cd04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb2e:	4b07      	ldr	r3, [pc, #28]	; (800cb4c <USBD_SetConfig+0x148>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff f941 	bl	800bdbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3e:	bf00      	nop
  }

  return ret;
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200002bc 	.word	0x200002bc

0800cb50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	88db      	ldrh	r3, [r3, #6]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d004      	beq.n	800cb6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f8cd 	bl	800cd04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb6a:	e023      	b.n	800cbb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	dc02      	bgt.n	800cb7e <USBD_GetConfig+0x2e>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	dc03      	bgt.n	800cb84 <USBD_GetConfig+0x34>
 800cb7c:	e015      	b.n	800cbaa <USBD_GetConfig+0x5a>
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d00b      	beq.n	800cb9a <USBD_GetConfig+0x4a>
 800cb82:	e012      	b.n	800cbaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	2201      	movs	r2, #1
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f927 	bl	800cde6 <USBD_CtlSendData>
        break;
 800cb98:	e00c      	b.n	800cbb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	2201      	movs	r2, #1
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f91f 	bl	800cde6 <USBD_CtlSendData>
        break;
 800cba8:	e004      	b.n	800cbb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f8a9 	bl	800cd04 <USBD_CtlError>
        break;
 800cbb2:	bf00      	nop
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d81e      	bhi.n	800cc12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	88db      	ldrh	r3, [r3, #6]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d004      	beq.n	800cbe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f890 	bl	800cd04 <USBD_CtlError>
        break;
 800cbe4:	e01a      	b.n	800cc1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d005      	beq.n	800cc02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f043 0202 	orr.w	r2, r3, #2
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	330c      	adds	r3, #12
 800cc06:	2202      	movs	r2, #2
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f8eb 	bl	800cde6 <USBD_CtlSendData>
      break;
 800cc10:	e004      	b.n	800cc1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f875 	bl	800cd04 <USBD_CtlError>
      break;
 800cc1a:	bf00      	nop
  }
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	885b      	ldrh	r3, [r3, #2]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d106      	bne.n	800cc44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f92b 	bl	800ce9a <USBD_CtlSendStatus>
  }
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d80b      	bhi.n	800cc7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	885b      	ldrh	r3, [r3, #2]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d10c      	bne.n	800cc86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f910 	bl	800ce9a <USBD_CtlSendStatus>
      }
      break;
 800cc7a:	e004      	b.n	800cc86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f840 	bl	800cd04 <USBD_CtlError>
      break;
 800cc84:	e000      	b.n	800cc88 <USBD_ClrFeature+0x3c>
      break;
 800cc86:	bf00      	nop
  }
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	781a      	ldrb	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	781a      	ldrb	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7ff fa92 	bl	800c1e4 <SWAPBYTE>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	3301      	adds	r3, #1
 800cccc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff fa85 	bl	800c1e4 <SWAPBYTE>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3301      	adds	r3, #1
 800cce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3301      	adds	r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff fa78 	bl	800c1e4 <SWAPBYTE>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	80da      	strh	r2, [r3, #6]
}
 800ccfc:	bf00      	nop
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd0e:	2180      	movs	r1, #128	; 0x80
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 fcef 	bl	800d6f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd16:	2100      	movs	r1, #0
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fceb 	bl	800d6f4 <USBD_LL_StallEP>
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d036      	beq.n	800cdaa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd40:	6938      	ldr	r0, [r7, #16]
 800cd42:	f000 f836 	bl	800cdb2 <USBD_GetLen>
 800cd46:	4603      	mov	r3, r0
 800cd48:	3301      	adds	r3, #1
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	7812      	ldrb	r2, [r2, #0]
 800cd5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	3301      	adds	r3, #1
 800cd64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	3301      	adds	r3, #1
 800cd74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd76:	e013      	b.n	800cda0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	7812      	ldrb	r2, [r2, #0]
 800cd82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	3301      	adds	r3, #1
 800cd88:	613b      	str	r3, [r7, #16]
    idx++;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	4413      	add	r3, r2
 800cd96:	2200      	movs	r2, #0
 800cd98:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1e7      	bne.n	800cd78 <USBD_GetString+0x52>
 800cda8:	e000      	b.n	800cdac <USBD_GetString+0x86>
    return;
 800cdaa:	bf00      	nop
  }
}
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cdc2:	e005      	b.n	800cdd0 <USBD_GetLen+0x1e>
  {
    len++;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1f5      	bne.n	800cdc4 <USBD_GetLen+0x12>
  }

  return len;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 fd41 	bl	800d894 <USBD_LL_Transmit>

  return USBD_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 fd30 	bl	800d894 <USBD_LL_Transmit>

  return USBD_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	2100      	movs	r1, #0
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 fd4b 	bl	800d904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	2100      	movs	r1, #0
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 fd3a 	bl	800d904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2204      	movs	r2, #4
 800cea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ceaa:	2300      	movs	r3, #0
 800ceac:	2200      	movs	r2, #0
 800ceae:	2100      	movs	r1, #0
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fcef 	bl	800d894 <USBD_LL_Transmit>

  return USBD_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2205      	movs	r2, #5
 800cecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ced0:	2300      	movs	r3, #0
 800ced2:	2200      	movs	r2, #0
 800ced4:	2100      	movs	r1, #0
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fd14 	bl	800d904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ceec:	2200      	movs	r2, #0
 800ceee:	4912      	ldr	r1, [pc, #72]	; (800cf38 <MX_USB_DEVICE_Init+0x50>)
 800cef0:	4812      	ldr	r0, [pc, #72]	; (800cf3c <MX_USB_DEVICE_Init+0x54>)
 800cef2:	f7fe fed9 	bl	800bca8 <USBD_Init>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cefc:	f7f5 ffd0 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf00:	490f      	ldr	r1, [pc, #60]	; (800cf40 <MX_USB_DEVICE_Init+0x58>)
 800cf02:	480e      	ldr	r0, [pc, #56]	; (800cf3c <MX_USB_DEVICE_Init+0x54>)
 800cf04:	f7fe ff00 	bl	800bd08 <USBD_RegisterClass>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf0e:	f7f5 ffc7 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf12:	490c      	ldr	r1, [pc, #48]	; (800cf44 <MX_USB_DEVICE_Init+0x5c>)
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <MX_USB_DEVICE_Init+0x54>)
 800cf16:	f7fe fe51 	bl	800bbbc <USBD_CDC_RegisterInterface>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf20:	f7f5 ffbe 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf24:	4805      	ldr	r0, [pc, #20]	; (800cf3c <MX_USB_DEVICE_Init+0x54>)
 800cf26:	f7fe ff16 	bl	800bd56 <USBD_Start>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf30:	f7f5 ffb6 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf34:	bf00      	nop
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20000134 	.word	0x20000134
 800cf3c:	200006e8 	.word	0x200006e8
 800cf40:	2000001c 	.word	0x2000001c
 800cf44:	20000120 	.word	0x20000120

0800cf48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	4905      	ldr	r1, [pc, #20]	; (800cf64 <CDC_Init_FS+0x1c>)
 800cf50:	4805      	ldr	r0, [pc, #20]	; (800cf68 <CDC_Init_FS+0x20>)
 800cf52:	f7fe fe48 	bl	800bbe6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf56:	4905      	ldr	r1, [pc, #20]	; (800cf6c <CDC_Init_FS+0x24>)
 800cf58:	4803      	ldr	r0, [pc, #12]	; (800cf68 <CDC_Init_FS+0x20>)
 800cf5a:	f7fe fe62 	bl	800bc22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	20000da0 	.word	0x20000da0
 800cf68:	200006e8 	.word	0x200006e8
 800cf6c:	200009b8 	.word	0x200009b8

0800cf70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	71fb      	strb	r3, [r7, #7]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	2b23      	cmp	r3, #35	; 0x23
 800cf94:	d84a      	bhi.n	800d02c <CDC_Control_FS+0xac>
 800cf96:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <CDC_Control_FS+0x1c>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800d02d 	.word	0x0800d02d
 800cfa0:	0800d02d 	.word	0x0800d02d
 800cfa4:	0800d02d 	.word	0x0800d02d
 800cfa8:	0800d02d 	.word	0x0800d02d
 800cfac:	0800d02d 	.word	0x0800d02d
 800cfb0:	0800d02d 	.word	0x0800d02d
 800cfb4:	0800d02d 	.word	0x0800d02d
 800cfb8:	0800d02d 	.word	0x0800d02d
 800cfbc:	0800d02d 	.word	0x0800d02d
 800cfc0:	0800d02d 	.word	0x0800d02d
 800cfc4:	0800d02d 	.word	0x0800d02d
 800cfc8:	0800d02d 	.word	0x0800d02d
 800cfcc:	0800d02d 	.word	0x0800d02d
 800cfd0:	0800d02d 	.word	0x0800d02d
 800cfd4:	0800d02d 	.word	0x0800d02d
 800cfd8:	0800d02d 	.word	0x0800d02d
 800cfdc:	0800d02d 	.word	0x0800d02d
 800cfe0:	0800d02d 	.word	0x0800d02d
 800cfe4:	0800d02d 	.word	0x0800d02d
 800cfe8:	0800d02d 	.word	0x0800d02d
 800cfec:	0800d02d 	.word	0x0800d02d
 800cff0:	0800d02d 	.word	0x0800d02d
 800cff4:	0800d02d 	.word	0x0800d02d
 800cff8:	0800d02d 	.word	0x0800d02d
 800cffc:	0800d02d 	.word	0x0800d02d
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	0800d02d 	.word	0x0800d02d
 800d008:	0800d02d 	.word	0x0800d02d
 800d00c:	0800d02d 	.word	0x0800d02d
 800d010:	0800d02d 	.word	0x0800d02d
 800d014:	0800d02d 	.word	0x0800d02d
 800d018:	0800d02d 	.word	0x0800d02d
 800d01c:	0800d02d 	.word	0x0800d02d
 800d020:	0800d02d 	.word	0x0800d02d
 800d024:	0800d02d 	.word	0x0800d02d
 800d028:	0800d02d 	.word	0x0800d02d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d02c:	bf00      	nop
  }

  return (USBD_OK);
 800d02e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	4805      	ldr	r0, [pc, #20]	; (800d060 <CDC_Receive_FS+0x24>)
 800d04a:	f7fe fdea 	bl	800bc22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d04e:	4804      	ldr	r0, [pc, #16]	; (800d060 <CDC_Receive_FS+0x24>)
 800d050:	f7fe fe00 	bl	800bc54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d054:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	200006e8 	.word	0x200006e8

0800d064 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	4613      	mov	r3, r2
 800d070:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
	...

0800d088 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	6039      	str	r1, [r7, #0]
 800d092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2212      	movs	r2, #18
 800d098:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d09a:	4b03      	ldr	r3, [pc, #12]	; (800d0a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	20000154 	.word	0x20000154

0800d0ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	6039      	str	r1, [r7, #0]
 800d0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2204      	movs	r2, #4
 800d0bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0be:	4b03      	ldr	r3, [pc, #12]	; (800d0cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	20000174 	.word	0x20000174

0800d0d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	6039      	str	r1, [r7, #0]
 800d0da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d105      	bne.n	800d0ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	4907      	ldr	r1, [pc, #28]	; (800d104 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0e6:	4808      	ldr	r0, [pc, #32]	; (800d108 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0e8:	f7ff fe1d 	bl	800cd26 <USBD_GetString>
 800d0ec:	e004      	b.n	800d0f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4904      	ldr	r1, [pc, #16]	; (800d104 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0f2:	4805      	ldr	r0, [pc, #20]	; (800d108 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0f4:	f7ff fe17 	bl	800cd26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20001188 	.word	0x20001188
 800d108:	0800dcb8 	.word	0x0800dcb8

0800d10c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	6039      	str	r1, [r7, #0]
 800d116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	4904      	ldr	r1, [pc, #16]	; (800d12c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d11c:	4804      	ldr	r0, [pc, #16]	; (800d130 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d11e:	f7ff fe02 	bl	800cd26 <USBD_GetString>
  return USBD_StrDesc;
 800d122:	4b02      	ldr	r3, [pc, #8]	; (800d12c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	20001188 	.word	0x20001188
 800d130:	0800dcd0 	.word	0x0800dcd0

0800d134 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	4603      	mov	r3, r0
 800d13c:	6039      	str	r1, [r7, #0]
 800d13e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	221a      	movs	r2, #26
 800d144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d146:	f000 f855 	bl	800d1f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d14a:	4b02      	ldr	r3, [pc, #8]	; (800d154 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20000178 	.word	0x20000178

0800d158 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	6039      	str	r1, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d105      	bne.n	800d176 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	4907      	ldr	r1, [pc, #28]	; (800d18c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d16e:	4808      	ldr	r0, [pc, #32]	; (800d190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d170:	f7ff fdd9 	bl	800cd26 <USBD_GetString>
 800d174:	e004      	b.n	800d180 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	4904      	ldr	r1, [pc, #16]	; (800d18c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d17a:	4805      	ldr	r0, [pc, #20]	; (800d190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d17c:	f7ff fdd3 	bl	800cd26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d180:	4b02      	ldr	r3, [pc, #8]	; (800d18c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20001188 	.word	0x20001188
 800d190:	0800dce4 	.word	0x0800dce4

0800d194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d105      	bne.n	800d1b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	4907      	ldr	r1, [pc, #28]	; (800d1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1aa:	4808      	ldr	r0, [pc, #32]	; (800d1cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1ac:	f7ff fdbb 	bl	800cd26 <USBD_GetString>
 800d1b0:	e004      	b.n	800d1bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4904      	ldr	r1, [pc, #16]	; (800d1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1b6:	4805      	ldr	r0, [pc, #20]	; (800d1cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1b8:	f7ff fdb5 	bl	800cd26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1bc:	4b02      	ldr	r3, [pc, #8]	; (800d1c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20001188 	.word	0x20001188
 800d1cc:	0800dcf0 	.word	0x0800dcf0

0800d1d0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	220c      	movs	r2, #12
 800d1e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d1e2:	4b03      	ldr	r3, [pc, #12]	; (800d1f0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	20000168 	.word	0x20000168

0800d1f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <Get_SerialNum+0x44>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d200:	4b0e      	ldr	r3, [pc, #56]	; (800d23c <Get_SerialNum+0x48>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d206:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <Get_SerialNum+0x4c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d009      	beq.n	800d22e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d21a:	2208      	movs	r2, #8
 800d21c:	4909      	ldr	r1, [pc, #36]	; (800d244 <Get_SerialNum+0x50>)
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f814 	bl	800d24c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d224:	2204      	movs	r2, #4
 800d226:	4908      	ldr	r1, [pc, #32]	; (800d248 <Get_SerialNum+0x54>)
 800d228:	68b8      	ldr	r0, [r7, #8]
 800d22a:	f000 f80f 	bl	800d24c <IntToUnicode>
  }
}
 800d22e:	bf00      	nop
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	1fff7590 	.word	0x1fff7590
 800d23c:	1fff7594 	.word	0x1fff7594
 800d240:	1fff7598 	.word	0x1fff7598
 800d244:	2000017a 	.word	0x2000017a
 800d248:	2000018a 	.word	0x2000018a

0800d24c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d25e:	2300      	movs	r3, #0
 800d260:	75fb      	strb	r3, [r7, #23]
 800d262:	e027      	b.n	800d2b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	0f1b      	lsrs	r3, r3, #28
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d80b      	bhi.n	800d284 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	0f1b      	lsrs	r3, r3, #28
 800d270:	b2da      	uxtb	r2, r3
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	4619      	mov	r1, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	440b      	add	r3, r1
 800d27c:	3230      	adds	r2, #48	; 0x30
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	e00a      	b.n	800d29a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	0f1b      	lsrs	r3, r3, #28
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4619      	mov	r1, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	440b      	add	r3, r1
 800d294:	3237      	adds	r2, #55	; 0x37
 800d296:	b2d2      	uxtb	r2, r2
 800d298:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	011b      	lsls	r3, r3, #4
 800d29e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	75fb      	strb	r3, [r7, #23]
 800d2b4:	7dfa      	ldrb	r2, [r7, #23]
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d3d3      	bcc.n	800d264 <IntToUnicode+0x18>
  }
}
 800d2bc:	bf00      	nop
 800d2be:	bf00      	nop
 800d2c0:	371c      	adds	r7, #28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
	...

0800d2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b096      	sub	sp, #88	; 0x58
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	605a      	str	r2, [r3, #4]
 800d2de:	609a      	str	r2, [r3, #8]
 800d2e0:	60da      	str	r2, [r3, #12]
 800d2e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d2e4:	f107 0310 	add.w	r3, r7, #16
 800d2e8:	2234      	movs	r2, #52	; 0x34
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 fc13 	bl	800db18 <memset>
  if(pcdHandle->Instance==USB)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a24      	ldr	r2, [pc, #144]	; (800d388 <HAL_PCD_MspInit+0xbc>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d141      	bne.n	800d380 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d2fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d300:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800d302:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800d306:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d308:	f107 0310 	add.w	r3, r7, #16
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fa f8f5 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d318:	f7f5 fdc2 	bl	8002ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d31c:	4b1b      	ldr	r3, [pc, #108]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d320:	4a1a      	ldr	r2, [pc, #104]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d322:	f043 0301 	orr.w	r3, r3, #1
 800d326:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d328:	4b18      	ldr	r3, [pc, #96]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	60fb      	str	r3, [r7, #12]
 800d332:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d334:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d338:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d33a:	2302      	movs	r3, #2
 800d33c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d342:	2303      	movs	r3, #3
 800d344:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800d346:	230a      	movs	r3, #10
 800d348:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d34a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d34e:	4619      	mov	r1, r3
 800d350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d354:	f7f7 fac8 	bl	80048e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d358:	4b0c      	ldr	r3, [pc, #48]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35c:	4a0b      	ldr	r2, [pc, #44]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d35e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d362:	6593      	str	r3, [r2, #88]	; 0x58
 800d364:	4b09      	ldr	r3, [pc, #36]	; (800d38c <HAL_PCD_MspInit+0xc0>)
 800d366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d36c:	60bb      	str	r3, [r7, #8]
 800d36e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d370:	2200      	movs	r2, #0
 800d372:	2100      	movs	r1, #0
 800d374:	2043      	movs	r0, #67	; 0x43
 800d376:	f7f7 fa80 	bl	800487a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d37a:	2043      	movs	r0, #67	; 0x43
 800d37c:	f7f7 fa99 	bl	80048b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d380:	bf00      	nop
 800d382:	3758      	adds	r7, #88	; 0x58
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	40006800 	.word	0x40006800
 800d38c:	40021000 	.word	0x40021000

0800d390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	f7fe fd20 	bl	800bdec <USBD_LL_SetupStage>
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d3c6:	78fa      	ldrb	r2, [r7, #3]
 800d3c8:	6879      	ldr	r1, [r7, #4]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4413      	add	r3, r2
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	440b      	add	r3, r1
 800d3d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f7fe fd5a 	bl	800be96 <USBD_LL_DataOutStage>
}
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d3fc:	78fa      	ldrb	r2, [r7, #3]
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	440b      	add	r3, r1
 800d40a:	3340      	adds	r3, #64	; 0x40
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	78fb      	ldrb	r3, [r7, #3]
 800d410:	4619      	mov	r1, r3
 800d412:	f7fe fda3 	bl	800bf5c <USBD_LL_DataInStage>
}
 800d416:	bf00      	nop
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe feb7 	bl	800c1a0 <USBD_LL_SOF>
}
 800d432:	bf00      	nop
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d442:	2301      	movs	r3, #1
 800d444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d001      	beq.n	800d452 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d44e:	f7f5 fd27 	bl	8002ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d458:	7bfa      	ldrb	r2, [r7, #15]
 800d45a:	4611      	mov	r1, r2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe fe61 	bl	800c124 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fe fe0d 	bl	800c088 <USBD_LL_Reset>
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe fe5c 	bl	800c144 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	699b      	ldr	r3, [r3, #24]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d005      	beq.n	800d4a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d494:	4b04      	ldr	r3, [pc, #16]	; (800d4a8 <HAL_PCD_SuspendCallback+0x30>)
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	4a03      	ldr	r2, [pc, #12]	; (800d4a8 <HAL_PCD_SuspendCallback+0x30>)
 800d49a:	f043 0306 	orr.w	r3, r3, #6
 800d49e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	e000ed00 	.word	0xe000ed00

0800d4ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d007      	beq.n	800d4cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4bc:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <HAL_PCD_ResumeCallback+0x34>)
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	4a07      	ldr	r2, [pc, #28]	; (800d4e0 <HAL_PCD_ResumeCallback+0x34>)
 800d4c2:	f023 0306 	bic.w	r3, r3, #6
 800d4c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4c8:	f000 fab6 	bl	800da38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fe4c 	bl	800c170 <USBD_LL_Resume>
}
 800d4d8:	bf00      	nop
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	e000ed00 	.word	0xe000ed00

0800d4e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d4ec:	f7f9 f9a8 	bl	8006840 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d4f0:	4a2b      	ldr	r2, [pc, #172]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a29      	ldr	r2, [pc, #164]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d4fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d500:	4b27      	ldr	r3, [pc, #156]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d502:	4a28      	ldr	r2, [pc, #160]	; (800d5a4 <USBD_LL_Init+0xc0>)
 800d504:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d506:	4b26      	ldr	r3, [pc, #152]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d508:	2208      	movs	r2, #8
 800d50a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d50c:	4b24      	ldr	r3, [pc, #144]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d50e:	2202      	movs	r2, #2
 800d510:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d512:	4b23      	ldr	r3, [pc, #140]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d514:	2202      	movs	r2, #2
 800d516:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d518:	4b21      	ldr	r3, [pc, #132]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d51e:	4b20      	ldr	r3, [pc, #128]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d520:	2200      	movs	r2, #0
 800d522:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d524:	4b1e      	ldr	r3, [pc, #120]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d526:	2200      	movs	r2, #0
 800d528:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d52a:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d530:	481b      	ldr	r0, [pc, #108]	; (800d5a0 <USBD_LL_Init+0xbc>)
 800d532:	f7f7 fb95 	bl	8004c60 <HAL_PCD_Init>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d53c:	f7f5 fcb0 	bl	8002ea0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d546:	2318      	movs	r3, #24
 800d548:	2200      	movs	r2, #0
 800d54a:	2100      	movs	r1, #0
 800d54c:	f7f9 f8a5 	bl	800669a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d556:	2358      	movs	r3, #88	; 0x58
 800d558:	2200      	movs	r2, #0
 800d55a:	2180      	movs	r1, #128	; 0x80
 800d55c:	f7f9 f89d 	bl	800669a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d566:	23c0      	movs	r3, #192	; 0xc0
 800d568:	2200      	movs	r2, #0
 800d56a:	2181      	movs	r1, #129	; 0x81
 800d56c:	f7f9 f895 	bl	800669a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d576:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d57a:	2200      	movs	r2, #0
 800d57c:	2101      	movs	r1, #1
 800d57e:	f7f9 f88c 	bl	800669a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d58c:	2200      	movs	r2, #0
 800d58e:	2182      	movs	r1, #130	; 0x82
 800d590:	f7f9 f883 	bl	800669a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20001388 	.word	0x20001388
 800d5a4:	40006800 	.word	0x40006800

0800d5a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f7 fc65 	bl	8004e8e <HAL_PCD_Start>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d816      	bhi.n	800d5fc <USBD_LL_Start+0x54>
 800d5ce:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <USBD_LL_Start+0x2c>)
 800d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d4:	0800d5e5 	.word	0x0800d5e5
 800d5d8:	0800d5eb 	.word	0x0800d5eb
 800d5dc:	0800d5f1 	.word	0x0800d5f1
 800d5e0:	0800d5f7 	.word	0x0800d5f7
    case HAL_OK :
      usb_status = USBD_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e8:	e00b      	b.n	800d602 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ee:	e008      	b.n	800d602 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f4:	e005      	b.n	800d602 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fa:	e002      	b.n	800d602 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d600:	bf00      	nop
  }
  return usb_status;
 800d602:	7bfb      	ldrb	r3, [r7, #15]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	70fb      	strb	r3, [r7, #3]
 800d61e:	460b      	mov	r3, r1
 800d620:	70bb      	strb	r3, [r7, #2]
 800d622:	4613      	mov	r3, r2
 800d624:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d634:	78bb      	ldrb	r3, [r7, #2]
 800d636:	883a      	ldrh	r2, [r7, #0]
 800d638:	78f9      	ldrb	r1, [r7, #3]
 800d63a:	f7f7 fd96 	bl	800516a <HAL_PCD_EP_Open>
 800d63e:	4603      	mov	r3, r0
 800d640:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	2b03      	cmp	r3, #3
 800d646:	d817      	bhi.n	800d678 <USBD_LL_OpenEP+0x6c>
 800d648:	a201      	add	r2, pc, #4	; (adr r2, 800d650 <USBD_LL_OpenEP+0x44>)
 800d64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64e:	bf00      	nop
 800d650:	0800d661 	.word	0x0800d661
 800d654:	0800d667 	.word	0x0800d667
 800d658:	0800d66d 	.word	0x0800d66d
 800d65c:	0800d673 	.word	0x0800d673
    case HAL_OK :
      usb_status = USBD_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]
    break;
 800d664:	e00b      	b.n	800d67e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d666:	2303      	movs	r3, #3
 800d668:	73fb      	strb	r3, [r7, #15]
    break;
 800d66a:	e008      	b.n	800d67e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d66c:	2301      	movs	r3, #1
 800d66e:	73fb      	strb	r3, [r7, #15]
    break;
 800d670:	e005      	b.n	800d67e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d672:	2303      	movs	r3, #3
 800d674:	73fb      	strb	r3, [r7, #15]
    break;
 800d676:	e002      	b.n	800d67e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d678:	2303      	movs	r3, #3
 800d67a:	73fb      	strb	r3, [r7, #15]
    break;
 800d67c:	bf00      	nop
  }
  return usb_status;
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3710      	adds	r7, #16
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d698:	2300      	movs	r3, #0
 800d69a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6a2:	78fa      	ldrb	r2, [r7, #3]
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7f7 fdc7 	bl	800523a <HAL_PCD_EP_Close>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	d816      	bhi.n	800d6e4 <USBD_LL_CloseEP+0x5c>
 800d6b6:	a201      	add	r2, pc, #4	; (adr r2, 800d6bc <USBD_LL_CloseEP+0x34>)
 800d6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6bc:	0800d6cd 	.word	0x0800d6cd
 800d6c0:	0800d6d3 	.word	0x0800d6d3
 800d6c4:	0800d6d9 	.word	0x0800d6d9
 800d6c8:	0800d6df 	.word	0x0800d6df
    case HAL_OK :
      usb_status = USBD_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d0:	e00b      	b.n	800d6ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d6:	e008      	b.n	800d6ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	e005      	b.n	800d6ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e2:	e002      	b.n	800d6ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e8:	bf00      	nop
  }
  return usb_status;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d70e:	78fa      	ldrb	r2, [r7, #3]
 800d710:	4611      	mov	r1, r2
 800d712:	4618      	mov	r0, r3
 800d714:	f7f7 fe75 	bl	8005402 <HAL_PCD_EP_SetStall>
 800d718:	4603      	mov	r3, r0
 800d71a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d71c:	7bbb      	ldrb	r3, [r7, #14]
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d816      	bhi.n	800d750 <USBD_LL_StallEP+0x5c>
 800d722:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <USBD_LL_StallEP+0x34>)
 800d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d728:	0800d739 	.word	0x0800d739
 800d72c:	0800d73f 	.word	0x0800d73f
 800d730:	0800d745 	.word	0x0800d745
 800d734:	0800d74b 	.word	0x0800d74b
    case HAL_OK :
      usb_status = USBD_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]
    break;
 800d73c:	e00b      	b.n	800d756 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d73e:	2303      	movs	r3, #3
 800d740:	73fb      	strb	r3, [r7, #15]
    break;
 800d742:	e008      	b.n	800d756 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d744:	2301      	movs	r3, #1
 800d746:	73fb      	strb	r3, [r7, #15]
    break;
 800d748:	e005      	b.n	800d756 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d74a:	2303      	movs	r3, #3
 800d74c:	73fb      	strb	r3, [r7, #15]
    break;
 800d74e:	e002      	b.n	800d756 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d750:	2303      	movs	r3, #3
 800d752:	73fb      	strb	r3, [r7, #15]
    break;
 800d754:	bf00      	nop
  }
  return usb_status;
 800d756:	7bfb      	ldrb	r3, [r7, #15]
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	4611      	mov	r1, r2
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f7 fea1 	bl	80054c6 <HAL_PCD_EP_ClrStall>
 800d784:	4603      	mov	r3, r0
 800d786:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d816      	bhi.n	800d7bc <USBD_LL_ClearStallEP+0x5c>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <USBD_LL_ClearStallEP+0x34>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d7a5 	.word	0x0800d7a5
 800d798:	0800d7ab 	.word	0x0800d7ab
 800d79c:	0800d7b1 	.word	0x0800d7b1
 800d7a0:	0800d7b7 	.word	0x0800d7b7
    case HAL_OK :
      usb_status = USBD_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a8:	e00b      	b.n	800d7c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ae:	e008      	b.n	800d7c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b4:	e005      	b.n	800d7c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ba:	e002      	b.n	800d7c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c0:	bf00      	nop
  }
  return usb_status;
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d7de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	da0c      	bge.n	800d802 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7e8:	78fb      	ldrb	r3, [r7, #3]
 800d7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ee:	68f9      	ldr	r1, [r7, #12]
 800d7f0:	1c5a      	adds	r2, r3, #1
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	440b      	add	r3, r1
 800d7fc:	3306      	adds	r3, #6
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	e00b      	b.n	800d81a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d802:	78fb      	ldrb	r3, [r7, #3]
 800d804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d808:	68f9      	ldr	r1, [r7, #12]
 800d80a:	4613      	mov	r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	440b      	add	r3, r1
 800d814:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800d818:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
	...

0800d828 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d842:	78fa      	ldrb	r2, [r7, #3]
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f7f7 fc6a 	bl	8005120 <HAL_PCD_SetAddress>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b03      	cmp	r3, #3
 800d854:	d816      	bhi.n	800d884 <USBD_LL_SetUSBAddress+0x5c>
 800d856:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <USBD_LL_SetUSBAddress+0x34>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d86d 	.word	0x0800d86d
 800d860:	0800d873 	.word	0x0800d873
 800d864:	0800d879 	.word	0x0800d879
 800d868:	0800d87f 	.word	0x0800d87f
    case HAL_OK :
      usb_status = USBD_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]
    break;
 800d870:	e00b      	b.n	800d88a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d872:	2303      	movs	r3, #3
 800d874:	73fb      	strb	r3, [r7, #15]
    break;
 800d876:	e008      	b.n	800d88a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d878:	2301      	movs	r3, #1
 800d87a:	73fb      	strb	r3, [r7, #15]
    break;
 800d87c:	e005      	b.n	800d88a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d87e:	2303      	movs	r3, #3
 800d880:	73fb      	strb	r3, [r7, #15]
    break;
 800d882:	e002      	b.n	800d88a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d884:	2303      	movs	r3, #3
 800d886:	73fb      	strb	r3, [r7, #15]
    break;
 800d888:	bf00      	nop
  }
  return usb_status;
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	607a      	str	r2, [r7, #4]
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8b2:	7af9      	ldrb	r1, [r7, #11]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	f7f7 fd5f 	bl	800537a <HAL_PCD_EP_Transmit>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d8c0:	7dbb      	ldrb	r3, [r7, #22]
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d816      	bhi.n	800d8f4 <USBD_LL_Transmit+0x60>
 800d8c6:	a201      	add	r2, pc, #4	; (adr r2, 800d8cc <USBD_LL_Transmit+0x38>)
 800d8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8cc:	0800d8dd 	.word	0x0800d8dd
 800d8d0:	0800d8e3 	.word	0x0800d8e3
 800d8d4:	0800d8e9 	.word	0x0800d8e9
 800d8d8:	0800d8ef 	.word	0x0800d8ef
    case HAL_OK :
      usb_status = USBD_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e0:	e00b      	b.n	800d8fa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e6:	e008      	b.n	800d8fa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d8ec:	e005      	b.n	800d8fa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8ee:	2303      	movs	r3, #3
 800d8f0:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f2:	e002      	b.n	800d8fa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f8:	bf00      	nop
  }
  return usb_status;
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	607a      	str	r2, [r7, #4]
 800d90e:	603b      	str	r3, [r7, #0]
 800d910:	460b      	mov	r3, r1
 800d912:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d922:	7af9      	ldrb	r1, [r7, #11]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	f7f7 fcd1 	bl	80052ce <HAL_PCD_EP_Receive>
 800d92c:	4603      	mov	r3, r0
 800d92e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d930:	7dbb      	ldrb	r3, [r7, #22]
 800d932:	2b03      	cmp	r3, #3
 800d934:	d816      	bhi.n	800d964 <USBD_LL_PrepareReceive+0x60>
 800d936:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <USBD_LL_PrepareReceive+0x38>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d94d 	.word	0x0800d94d
 800d940:	0800d953 	.word	0x0800d953
 800d944:	0800d959 	.word	0x0800d959
 800d948:	0800d95f 	.word	0x0800d95f
    case HAL_OK :
      usb_status = USBD_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	75fb      	strb	r3, [r7, #23]
    break;
 800d950:	e00b      	b.n	800d96a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d952:	2303      	movs	r3, #3
 800d954:	75fb      	strb	r3, [r7, #23]
    break;
 800d956:	e008      	b.n	800d96a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d958:	2301      	movs	r3, #1
 800d95a:	75fb      	strb	r3, [r7, #23]
    break;
 800d95c:	e005      	b.n	800d96a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d95e:	2303      	movs	r3, #3
 800d960:	75fb      	strb	r3, [r7, #23]
    break;
 800d962:	e002      	b.n	800d96a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d964:	2303      	movs	r3, #3
 800d966:	75fb      	strb	r3, [r7, #23]
    break;
 800d968:	bf00      	nop
  }
  return usb_status;
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	4611      	mov	r1, r2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7f7 fcdd 	bl	800534a <HAL_PCD_EP_GetRxCount>
 800d990:	4603      	mov	r3, r0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <HAL_PCDEx_LPM_Callback+0x18>
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d013      	beq.n	800d9da <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d9b2:	e023      	b.n	800d9fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d007      	beq.n	800d9cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d9bc:	f000 f83c 	bl	800da38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9c0:	4b10      	ldr	r3, [pc, #64]	; (800da04 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	4a0f      	ldr	r2, [pc, #60]	; (800da04 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9c6:	f023 0306 	bic.w	r3, r3, #6
 800d9ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe fbcc 	bl	800c170 <USBD_LL_Resume>
    break;
 800d9d8:	e010      	b.n	800d9fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fbaf 	bl	800c144 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	699b      	ldr	r3, [r3, #24]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d005      	beq.n	800d9fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ee:	4b05      	ldr	r3, [pc, #20]	; (800da04 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	4a04      	ldr	r2, [pc, #16]	; (800da04 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9f4:	f043 0306 	orr.w	r3, r3, #6
 800d9f8:	6113      	str	r3, [r2, #16]
    break;
 800d9fa:	bf00      	nop
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	e000ed00 	.word	0xe000ed00

0800da08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da10:	4b03      	ldr	r3, [pc, #12]	; (800da20 <USBD_static_malloc+0x18>)
}
 800da12:	4618      	mov	r0, r3
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	200002c0 	.word	0x200002c0

0800da24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]

}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800da38:	b480      	push	{r7}
 800da3a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800da3c:	bf00      	nop
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <_Znwj>:
 800da46:	2801      	cmp	r0, #1
 800da48:	bf38      	it	cc
 800da4a:	2001      	movcc	r0, #1
 800da4c:	b510      	push	{r4, lr}
 800da4e:	4604      	mov	r4, r0
 800da50:	4620      	mov	r0, r4
 800da52:	f000 f859 	bl	800db08 <malloc>
 800da56:	b930      	cbnz	r0, 800da66 <_Znwj+0x20>
 800da58:	f000 f81c 	bl	800da94 <_ZSt15get_new_handlerv>
 800da5c:	b908      	cbnz	r0, 800da62 <_Znwj+0x1c>
 800da5e:	f000 f821 	bl	800daa4 <abort>
 800da62:	4780      	blx	r0
 800da64:	e7f4      	b.n	800da50 <_Znwj+0xa>
 800da66:	bd10      	pop	{r4, pc}

0800da68 <__cxa_pure_virtual>:
 800da68:	b508      	push	{r3, lr}
 800da6a:	f000 f80d 	bl	800da88 <_ZSt9terminatev>

0800da6e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800da6e:	b508      	push	{r3, lr}
 800da70:	4780      	blx	r0
 800da72:	f000 f817 	bl	800daa4 <abort>
	...

0800da78 <_ZSt13get_terminatev>:
 800da78:	4b02      	ldr	r3, [pc, #8]	; (800da84 <_ZSt13get_terminatev+0xc>)
 800da7a:	6818      	ldr	r0, [r3, #0]
 800da7c:	f3bf 8f5b 	dmb	ish
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000194 	.word	0x20000194

0800da88 <_ZSt9terminatev>:
 800da88:	b508      	push	{r3, lr}
 800da8a:	f7ff fff5 	bl	800da78 <_ZSt13get_terminatev>
 800da8e:	f7ff ffee 	bl	800da6e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800da94 <_ZSt15get_new_handlerv>:
 800da94:	4b02      	ldr	r3, [pc, #8]	; (800daa0 <_ZSt15get_new_handlerv+0xc>)
 800da96:	6818      	ldr	r0, [r3, #0]
 800da98:	f3bf 8f5b 	dmb	ish
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	200004e0 	.word	0x200004e0

0800daa4 <abort>:
 800daa4:	b508      	push	{r3, lr}
 800daa6:	2006      	movs	r0, #6
 800daa8:	f000 f8d0 	bl	800dc4c <raise>
 800daac:	2001      	movs	r0, #1
 800daae:	f7f5 fb23 	bl	80030f8 <_exit>
	...

0800dab4 <__errno>:
 800dab4:	4b01      	ldr	r3, [pc, #4]	; (800dabc <__errno+0x8>)
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20000198 	.word	0x20000198

0800dac0 <__libc_init_array>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	4d0d      	ldr	r5, [pc, #52]	; (800daf8 <__libc_init_array+0x38>)
 800dac4:	4c0d      	ldr	r4, [pc, #52]	; (800dafc <__libc_init_array+0x3c>)
 800dac6:	1b64      	subs	r4, r4, r5
 800dac8:	10a4      	asrs	r4, r4, #2
 800daca:	2600      	movs	r6, #0
 800dacc:	42a6      	cmp	r6, r4
 800dace:	d109      	bne.n	800dae4 <__libc_init_array+0x24>
 800dad0:	4d0b      	ldr	r5, [pc, #44]	; (800db00 <__libc_init_array+0x40>)
 800dad2:	4c0c      	ldr	r4, [pc, #48]	; (800db04 <__libc_init_array+0x44>)
 800dad4:	f000 f8e4 	bl	800dca0 <_init>
 800dad8:	1b64      	subs	r4, r4, r5
 800dada:	10a4      	asrs	r4, r4, #2
 800dadc:	2600      	movs	r6, #0
 800dade:	42a6      	cmp	r6, r4
 800dae0:	d105      	bne.n	800daee <__libc_init_array+0x2e>
 800dae2:	bd70      	pop	{r4, r5, r6, pc}
 800dae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae8:	4798      	blx	r3
 800daea:	3601      	adds	r6, #1
 800daec:	e7ee      	b.n	800dacc <__libc_init_array+0xc>
 800daee:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf2:	4798      	blx	r3
 800daf4:	3601      	adds	r6, #1
 800daf6:	e7f2      	b.n	800dade <__libc_init_array+0x1e>
 800daf8:	0800dd84 	.word	0x0800dd84
 800dafc:	0800dd84 	.word	0x0800dd84
 800db00:	0800dd84 	.word	0x0800dd84
 800db04:	0800dd8c 	.word	0x0800dd8c

0800db08 <malloc>:
 800db08:	4b02      	ldr	r3, [pc, #8]	; (800db14 <malloc+0xc>)
 800db0a:	4601      	mov	r1, r0
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	f000 b80b 	b.w	800db28 <_malloc_r>
 800db12:	bf00      	nop
 800db14:	20000198 	.word	0x20000198

0800db18 <memset>:
 800db18:	4402      	add	r2, r0
 800db1a:	4603      	mov	r3, r0
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d100      	bne.n	800db22 <memset+0xa>
 800db20:	4770      	bx	lr
 800db22:	f803 1b01 	strb.w	r1, [r3], #1
 800db26:	e7f9      	b.n	800db1c <memset+0x4>

0800db28 <_malloc_r>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	1ccd      	adds	r5, r1, #3
 800db2c:	f025 0503 	bic.w	r5, r5, #3
 800db30:	3508      	adds	r5, #8
 800db32:	2d0c      	cmp	r5, #12
 800db34:	bf38      	it	cc
 800db36:	250c      	movcc	r5, #12
 800db38:	2d00      	cmp	r5, #0
 800db3a:	4606      	mov	r6, r0
 800db3c:	db01      	blt.n	800db42 <_malloc_r+0x1a>
 800db3e:	42a9      	cmp	r1, r5
 800db40:	d903      	bls.n	800db4a <_malloc_r+0x22>
 800db42:	230c      	movs	r3, #12
 800db44:	6033      	str	r3, [r6, #0]
 800db46:	2000      	movs	r0, #0
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4a:	f000 f89b 	bl	800dc84 <__malloc_lock>
 800db4e:	4921      	ldr	r1, [pc, #132]	; (800dbd4 <_malloc_r+0xac>)
 800db50:	680a      	ldr	r2, [r1, #0]
 800db52:	4614      	mov	r4, r2
 800db54:	b99c      	cbnz	r4, 800db7e <_malloc_r+0x56>
 800db56:	4f20      	ldr	r7, [pc, #128]	; (800dbd8 <_malloc_r+0xb0>)
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	b923      	cbnz	r3, 800db66 <_malloc_r+0x3e>
 800db5c:	4621      	mov	r1, r4
 800db5e:	4630      	mov	r0, r6
 800db60:	f000 f83c 	bl	800dbdc <_sbrk_r>
 800db64:	6038      	str	r0, [r7, #0]
 800db66:	4629      	mov	r1, r5
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 f837 	bl	800dbdc <_sbrk_r>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d123      	bne.n	800dbba <_malloc_r+0x92>
 800db72:	230c      	movs	r3, #12
 800db74:	6033      	str	r3, [r6, #0]
 800db76:	4630      	mov	r0, r6
 800db78:	f000 f88a 	bl	800dc90 <__malloc_unlock>
 800db7c:	e7e3      	b.n	800db46 <_malloc_r+0x1e>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	1b5b      	subs	r3, r3, r5
 800db82:	d417      	bmi.n	800dbb4 <_malloc_r+0x8c>
 800db84:	2b0b      	cmp	r3, #11
 800db86:	d903      	bls.n	800db90 <_malloc_r+0x68>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	441c      	add	r4, r3
 800db8c:	6025      	str	r5, [r4, #0]
 800db8e:	e004      	b.n	800db9a <_malloc_r+0x72>
 800db90:	6863      	ldr	r3, [r4, #4]
 800db92:	42a2      	cmp	r2, r4
 800db94:	bf0c      	ite	eq
 800db96:	600b      	streq	r3, [r1, #0]
 800db98:	6053      	strne	r3, [r2, #4]
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 f878 	bl	800dc90 <__malloc_unlock>
 800dba0:	f104 000b 	add.w	r0, r4, #11
 800dba4:	1d23      	adds	r3, r4, #4
 800dba6:	f020 0007 	bic.w	r0, r0, #7
 800dbaa:	1ac2      	subs	r2, r0, r3
 800dbac:	d0cc      	beq.n	800db48 <_malloc_r+0x20>
 800dbae:	1a1b      	subs	r3, r3, r0
 800dbb0:	50a3      	str	r3, [r4, r2]
 800dbb2:	e7c9      	b.n	800db48 <_malloc_r+0x20>
 800dbb4:	4622      	mov	r2, r4
 800dbb6:	6864      	ldr	r4, [r4, #4]
 800dbb8:	e7cc      	b.n	800db54 <_malloc_r+0x2c>
 800dbba:	1cc4      	adds	r4, r0, #3
 800dbbc:	f024 0403 	bic.w	r4, r4, #3
 800dbc0:	42a0      	cmp	r0, r4
 800dbc2:	d0e3      	beq.n	800db8c <_malloc_r+0x64>
 800dbc4:	1a21      	subs	r1, r4, r0
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	f000 f808 	bl	800dbdc <_sbrk_r>
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d1dd      	bne.n	800db8c <_malloc_r+0x64>
 800dbd0:	e7cf      	b.n	800db72 <_malloc_r+0x4a>
 800dbd2:	bf00      	nop
 800dbd4:	200004e4 	.word	0x200004e4
 800dbd8:	200004e8 	.word	0x200004e8

0800dbdc <_sbrk_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d06      	ldr	r5, [pc, #24]	; (800dbf8 <_sbrk_r+0x1c>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	602b      	str	r3, [r5, #0]
 800dbe8:	f7f5 fa90 	bl	800310c <_sbrk>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_sbrk_r+0x1a>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_sbrk_r+0x1a>
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	20001684 	.word	0x20001684

0800dbfc <_raise_r>:
 800dbfc:	291f      	cmp	r1, #31
 800dbfe:	b538      	push	{r3, r4, r5, lr}
 800dc00:	4604      	mov	r4, r0
 800dc02:	460d      	mov	r5, r1
 800dc04:	d904      	bls.n	800dc10 <_raise_r+0x14>
 800dc06:	2316      	movs	r3, #22
 800dc08:	6003      	str	r3, [r0, #0]
 800dc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0e:	bd38      	pop	{r3, r4, r5, pc}
 800dc10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc12:	b112      	cbz	r2, 800dc1a <_raise_r+0x1e>
 800dc14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc18:	b94b      	cbnz	r3, 800dc2e <_raise_r+0x32>
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 f830 	bl	800dc80 <_getpid_r>
 800dc20:	462a      	mov	r2, r5
 800dc22:	4601      	mov	r1, r0
 800dc24:	4620      	mov	r0, r4
 800dc26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc2a:	f000 b817 	b.w	800dc5c <_kill_r>
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d00a      	beq.n	800dc48 <_raise_r+0x4c>
 800dc32:	1c59      	adds	r1, r3, #1
 800dc34:	d103      	bne.n	800dc3e <_raise_r+0x42>
 800dc36:	2316      	movs	r3, #22
 800dc38:	6003      	str	r3, [r0, #0]
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	e7e7      	b.n	800dc0e <_raise_r+0x12>
 800dc3e:	2400      	movs	r4, #0
 800dc40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc44:	4628      	mov	r0, r5
 800dc46:	4798      	blx	r3
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7e0      	b.n	800dc0e <_raise_r+0x12>

0800dc4c <raise>:
 800dc4c:	4b02      	ldr	r3, [pc, #8]	; (800dc58 <raise+0xc>)
 800dc4e:	4601      	mov	r1, r0
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	f7ff bfd3 	b.w	800dbfc <_raise_r>
 800dc56:	bf00      	nop
 800dc58:	20000198 	.word	0x20000198

0800dc5c <_kill_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4d07      	ldr	r5, [pc, #28]	; (800dc7c <_kill_r+0x20>)
 800dc60:	2300      	movs	r3, #0
 800dc62:	4604      	mov	r4, r0
 800dc64:	4608      	mov	r0, r1
 800dc66:	4611      	mov	r1, r2
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	f7f5 fa35 	bl	80030d8 <_kill>
 800dc6e:	1c43      	adds	r3, r0, #1
 800dc70:	d102      	bne.n	800dc78 <_kill_r+0x1c>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b103      	cbz	r3, 800dc78 <_kill_r+0x1c>
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20001684 	.word	0x20001684

0800dc80 <_getpid_r>:
 800dc80:	f7f5 ba22 	b.w	80030c8 <_getpid>

0800dc84 <__malloc_lock>:
 800dc84:	4801      	ldr	r0, [pc, #4]	; (800dc8c <__malloc_lock+0x8>)
 800dc86:	f000 b809 	b.w	800dc9c <__retarget_lock_acquire_recursive>
 800dc8a:	bf00      	nop
 800dc8c:	2000168c 	.word	0x2000168c

0800dc90 <__malloc_unlock>:
 800dc90:	4801      	ldr	r0, [pc, #4]	; (800dc98 <__malloc_unlock+0x8>)
 800dc92:	f000 b804 	b.w	800dc9e <__retarget_lock_release_recursive>
 800dc96:	bf00      	nop
 800dc98:	2000168c 	.word	0x2000168c

0800dc9c <__retarget_lock_acquire_recursive>:
 800dc9c:	4770      	bx	lr

0800dc9e <__retarget_lock_release_recursive>:
 800dc9e:	4770      	bx	lr

0800dca0 <_init>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	bf00      	nop
 800dca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca6:	bc08      	pop	{r3}
 800dca8:	469e      	mov	lr, r3
 800dcaa:	4770      	bx	lr

0800dcac <_fini>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	bf00      	nop
 800dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb2:	bc08      	pop	{r3}
 800dcb4:	469e      	mov	lr, r3
 800dcb6:	4770      	bx	lr
