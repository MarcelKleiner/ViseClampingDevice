
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f004  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800f190  0800f190  0001f190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f254  0800f254  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f254  0800f254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f25c  0800f25c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f264  0800f264  0001f264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f4  200001fc  0800f464  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016f0  0800f464  000216f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd74  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006329  00000000  00000000  0004bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  000522d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e40  00000000  00000000  00054408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d84  00000000  00000000  00056248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b80  00000000  00000000  0007bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6bff  00000000  00000000  000a4b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b74b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e64  00000000  00000000  0016b79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800f178 	.word	0x0800f178

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	0800f178 	.word	0x0800f178

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

#include "stddef.h"

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800f1e0 	.word	0x0800f1e0

080004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fadc 	bl	8000acc <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3328      	adds	r3, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	61da      	str	r2, [r3, #28]
		}
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800f1f0 	.word	0x0800f1f0

0800054c <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	705a      	strb	r2, [r3, #1]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	70da      	strb	r2, [r3, #3]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	711a      	strb	r2, [r3, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	715a      	strb	r2, [r3, #5]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	719a      	strb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	71da      	strb	r2, [r3, #7]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	721a      	strb	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	725a      	strb	r2, [r3, #9]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	729a      	strb	r2, [r3, #10]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	72da      	strb	r2, [r3, #11]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2220      	movs	r2, #32
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	805a      	strh	r2, [r3, #2]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	809a      	strh	r2, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	80da      	strh	r2, [r3, #6]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	811a      	strh	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005d6:	815a      	strh	r2, [r3, #10]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2214      	movs	r2, #20
 80005dc:	819a      	strh	r2, [r3, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	81da      	strh	r2, [r3, #14]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80005ea:	821a      	strh	r2, [r3, #16]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80005f2:	825a      	strh	r2, [r3, #18]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2232      	movs	r2, #50	; 0x32
 80005f8:	829a      	strh	r2, [r3, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	82da      	strh	r2, [r3, #22]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000606:	831a      	strh	r2, [r3, #24]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_ZN11DriveStatusC1Ev>:

#define ADC_2_VOLTAGE		2
#define ADC_2_CURRENT		2


class DriveStatus
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	741a      	strb	r2, [r3, #16]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	751a      	strb	r2, [r3, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_ZN7AppMainC1Ev>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

extern ADC_HandleTypeDef hadc1;

AppMain::AppMain()
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	819a      	strh	r2, [r3, #12]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7c 	bl	800054c <_ZN11TaskHandlerC1Ev>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	739a      	strb	r2, [r3, #14]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3310      	adds	r3, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fa76 	bl	8001b50 <_ZN10RFM95_LoRaC1Ev>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3330      	adds	r3, #48	; 0x30
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]
 8000676:	831a      	strh	r2, [r3, #24]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3330      	adds	r3, #48	; 0x30
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff94 	bl	80005aa <_ZN13DriveSettingsC1Ev>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	334a      	adds	r3, #74	; 0x4a
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	829a      	strh	r2, [r3, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	334a      	adds	r3, #74	; 0x4a
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffbc 	bl	8000616 <_ZN11DriveStatusC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3360      	adds	r3, #96	; 0x60
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ffbf 	bl	8002626 <_ZN12DriveCommandC1Ev>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	334a      	adds	r3, #74	; 0x4a
 80006b2:	4619      	mov	r1, r3
 80006b4:	4610      	mov	r0, r2
 80006b6:	f001 f93a 	bl	800192e <_ZN7EncoderC1EP11DriveStatus>
 80006ba:	2030      	movs	r0, #48	; 0x30
 80006bc:	f00e fbf5 	bl	800eeaa <_Znwj>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461c      	mov	r4, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3310      	adds	r3, #16
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4603      	mov	r3, r0
 80006de:	4620      	mov	r0, r4
 80006e0:	f7ff ff06 	bl	80004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	336c      	adds	r3, #108	; 0x6c
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4623      	mov	r3, r4
 800070a:	f000 ff0d 	bl	8001528 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8000714:	2300      	movs	r3, #0
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	490f      	ldr	r1, [pc, #60]	; (8000758 <_ZN7AppMainC1Ev+0x120>)
 800071a:	f001 f9d1 	bl	8001ac0 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8000724:	2300      	movs	r3, #0
 8000726:	2210      	movs	r2, #16
 8000728:	490b      	ldr	r1, [pc, #44]	; (8000758 <_ZN7AppMainC1Ev+0x120>)
 800072a:	f001 f9c9 	bl	8001ac0 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
{

}
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	48000400 	.word	0x48000400

0800075c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	//Set "self power on" to turn on the external Mosfet.
	HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f005 fa14 	bl	8005b98 <HAL_GPIO_WritePin>
	//turn ext led on
	ledExt.ON();
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	33a0      	adds	r3, #160	; 0xa0
 8000774:	4618      	mov	r0, r3
 8000776:	f001 f9be 	bl	8001af6 <_ZN3LED2ONEv>

	//inti SPI
	HAL_SPI_MspInit(&hspi1);
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <_ZN7AppMain7StartupEv+0xd4>)
 800077c:	f002 fd8a 	bl	8003294 <HAL_SPI_MspInit>

	//init and start Timer
	HAL_TIM_PWM_MspInit(&htim2);	//PWM timer
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <_ZN7AppMain7StartupEv+0xd8>)
 8000782:	f003 f815 	bl	80037b0 <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_MspInit(&htim16);	//task handler timer
 8000786:	482c      	ldr	r0, [pc, #176]	; (8000838 <_ZN7AppMain7StartupEv+0xdc>)
 8000788:	f003 f830 	bl	80037ec <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim6);	//ADC trigger timer
 800078c:	482b      	ldr	r0, [pc, #172]	; (800083c <_ZN7AppMain7StartupEv+0xe0>)
 800078e:	f003 f82d 	bl	80037ec <HAL_TIM_Base_MspInit>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//start PWM CH2
 8000792:	2104      	movs	r1, #4
 8000794:	4827      	ldr	r0, [pc, #156]	; (8000834 <_ZN7AppMain7StartupEv+0xd8>)
 8000796:	f008 fe91 	bl	80094bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//start PWM CH1
 800079a:	2100      	movs	r1, #0
 800079c:	4825      	ldr	r0, [pc, #148]	; (8000834 <_ZN7AppMain7StartupEv+0xd8>)
 800079e:	f008 fe8d 	bl	80094bc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);				//start task handler in IT mode
 80007a2:	4825      	ldr	r0, [pc, #148]	; (8000838 <_ZN7AppMain7StartupEv+0xdc>)
 80007a4:	f008 fdde 	bl	8009364 <HAL_TIM_Base_Start_IT>

	//init and start ADC
	HAL_ADC_MspInit(&hadc1);
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <_ZN7AppMain7StartupEv+0xe4>)
 80007aa:	f002 fb27 	bl	8002dfc <HAL_ADC_MspInit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	33a8      	adds	r3, #168	; 0xa8
 80007b2:	2204      	movs	r2, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <_ZN7AppMain7StartupEv+0xe4>)
 80007b8:	f003 fcf6 	bl	80041a8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <_ZN7AppMain7StartupEv+0xe0>)
 80007be:	f008 fdd1 	bl	8009364 <HAL_TIM_Base_Start_IT>

	//configure Motor throttle
	TIM2->CCR1 = 6400;
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c6:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(7000);
 80007cc:	f641 3058 	movw	r0, #7000	; 0x1b58
 80007d0:	f003 f940 	bl	8003a54 <HAL_Delay>
	TIM2->CCR1 = 3200;
 80007d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34

	if (!rfm95.InitRFM())
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3310      	adds	r3, #16
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fdb8 	bl	8002358 <_ZN10RFM95_LoRa7InitRFMEv>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00a      	beq.n	800080a <_ZN7AppMain7StartupEv+0xae>
	{
		error.setError(Error::COM_ERROR);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	330e      	adds	r3, #14
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f92c 	bl	8001a58 <_ZN5Error8setErrorENS_11EERROR_CODEE>
		taskHandler.setDriveTaskEnable(false);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fa44 	bl	8002c92 <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3310      	adds	r3, #16
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fbdf 	bl	8001fd4 <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	336c      	adds	r3, #108	; 0x6c
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f8a0 	bl	8001960 <_ZN7Encoder4initEv>

	Main();
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f80f 	bl	8000844 <_ZN7AppMain4MainEv>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000380 	.word	0x20000380
 8000834:	20000434 	.word	0x20000434
 8000838:	200004cc 	.word	0x200004cc
 800083c:	20000480 	.word	0x20000480
 8000840:	2000021c 	.word	0x2000021c

08000844 <_ZN7AppMain4MainEv>:
	taskHandler.setErrorTaskEnable(true);
	taskHandler.setIoUpdateTaskEnable(true);
}

void AppMain::Main()
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fa1e 	bl	8002c92 <_ZN11TaskHandler18setDriveTaskEnableEb>

	while (1)
	{

		if (init && startupCounter <= 0)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d014      	beq.n	800088a <_ZN7AppMain4MainEv+0x46>
 8000860:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <_ZN7AppMain4MainEv+0x198>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dc10      	bgt.n	800088a <_ZN7AppMain4MainEv+0x46>
		{
			startupCounter = 1;
 8000868:	4b5c      	ldr	r3, [pc, #368]	; (80009dc <_ZN7AppMain4MainEv+0x198>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
			taskHandler.setDriveTaskEnable(true);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2101      	movs	r1, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fa0d 	bl	8002c92 <_ZN11TaskHandler18setDriveTaskEnableEb>
			TIM2->CCR1 = 3600;
 8000878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800087c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
			init = false;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}

		if (driveStatus.isReset())
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	334a      	adds	r3, #74	; 0x4a
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f810 	bl	80028b4 <_ZN11DriveStatus7isResetEv>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00a      	beq.n	80008b0 <_ZN7AppMain4MainEv+0x6c>
		{
			drive.Reset();
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3384      	adds	r3, #132	; 0x84
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fe62 	bl	8001568 <_ZN5Drive5ResetEv>
			driveStatus.setReset(false);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	334a      	adds	r3, #74	; 0x4a
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f80e 	bl	80028cc <_ZN11DriveStatus8setResetEb>
		}

		if (taskHandler.isADCUpdateTask())
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f9ac 	bl	8002c10 <_ZN11TaskHandler15isADCUpdateTaskEv>
		{
			//read from ADC DMA register
		}

		if (taskHandler.isComTask())
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 f944 	bl	8002b48 <_ZN11TaskHandler9isComTaskEv>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d036      	beq.n	8000934 <_ZN7AppMain4MainEv+0xf0>
		{
			if (!rfm95COM->Receive())
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3304      	adds	r3, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	4798      	blx	r3
 80008de:	4603      	mov	r3, r0
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d008      	beq.n	80008fc <_ZN7AppMain4MainEv+0xb8>
			{
				comLoseCounter++;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80008f0:	3301      	adds	r3, #1
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80008fa:	e003      	b.n	8000904 <_ZN7AppMain4MainEv+0xc0>
			}
			else
			{
				comLoseCounter = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

			}

			if (comLoseCounter == (driveSettings.getSelfShutdownDelay() * 4))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800090a:	461c      	mov	r4, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3330      	adds	r3, #48	; 0x30
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fe01 	bl	8002518 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000916:	4603      	mov	r3, r0
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	429c      	cmp	r4, r3
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <_ZN7AppMain4MainEv+0xf0>
			{
				//Self-shutdown when the delay time for self-shutdown has elapsed
				HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin,
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f005 f932 	bl	8005b98 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}
		}

		if (taskHandler.isDriveTask())
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f91f 	bl	8002b7a <_ZN11TaskHandler11isDriveTaskEv>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d009      	beq.n	8000956 <_ZN7AppMain4MainEv+0x112>
		{
			encoder.update();
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	336c      	adds	r3, #108	; 0x6c
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f842 	bl	80019d0 <_ZN7Encoder6updateEv>
			drive.updateDrive();
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3384      	adds	r3, #132	; 0x84
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fe16 	bl	8001582 <_ZN5Drive11updateDriveEv>
		}

		if (taskHandler.isErrorTask())
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f002 f927 	bl	8002bac <_ZN11TaskHandler11isErrorTaskEv>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d029      	beq.n	80009b8 <_ZN7AppMain4MainEv+0x174>
		{
			if (driveStatus.getError() != DriveStatus::E_NO_ERROR)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	334a      	adds	r3, #74	; 0x4a
 8000968:	4618      	mov	r0, r3
 800096a:	f002 f80c 	bl	8002986 <_ZN11DriveStatus8getErrorEv>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00e      	beq.n	800099c <_ZN7AppMain4MainEv+0x158>
			{
				drive.Stop();
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3384      	adds	r3, #132	; 0x84
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fe89 	bl	800169a <_ZN5Drive4StopEv>
				taskHandler.setAdcUpdateTaskEnable(false);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f971 	bl	8002c74 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>
				taskHandler.setDriveTaskEnable(false);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f97b 	bl	8002c92 <_ZN11TaskHandler18setDriveTaskEnableEb>
			}

			error.error2LED();
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	330e      	adds	r3, #14
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 f869 	bl	8001a78 <_ZN5Error9error2LEDEv>

			if (startupCounter > 0)
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <_ZN7AppMain4MainEv+0x198>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dd04      	ble.n	80009b8 <_ZN7AppMain4MainEv+0x174>
			{
				startupCounter--;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <_ZN7AppMain4MainEv+0x198>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <_ZN7AppMain4MainEv+0x198>)
 80009b6:	6013      	str	r3, [r2, #0]
			}
		}

		if (taskHandler.isIoUpdateTask())
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 f90f 	bl	8002bde <_ZN11TaskHandler14isIoUpdateTaskEv>
		{

		}

		if (taskHandler.isLEDTask())
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 f93d 	bl	8002c42 <_ZN11TaskHandler9isLEDTaskEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f43f af43 	beq.w	8000856 <_ZN7AppMain4MainEv+0x12>
		{
			led.Toggle();
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3398      	adds	r3, #152	; 0x98
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 f8ab 	bl	8001b30 <_ZN3LED6ToggleEv>
		if (init && startupCounter <= 0)
 80009da:	e73c      	b.n	8000856 <_ZN7AppMain4MainEv+0x12>
 80009dc:	20000000 	.word	0x20000000

080009e0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>:

	}
}

void AppMain::ADCRead(ADC_HandleTypeDef *hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	uint16_t current = 0; //1/3
 80009ea:	2300      	movs	r3, #0
 80009ec:	81fb      	strh	r3, [r7, #14]
	uint16_t voltage = 0; //0/2
 80009ee:	2300      	movs	r3, #0
 80009f0:	81bb      	strh	r3, [r7, #12]

	current = (adc1Buffer[1] + adc1Buffer[3]) / 2;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	0fda      	lsrs	r2, r3, #31
 8000a08:	4413      	add	r3, r2
 8000a0a:	105b      	asrs	r3, r3, #1
 8000a0c:	81fb      	strh	r3, [r7, #14]
	voltage = (adc1Buffer[0] + adc1Buffer[2]) / 2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	0fda      	lsrs	r2, r3, #31
 8000a24:	4413      	add	r3, r2
 8000a26:	105b      	asrs	r3, r3, #1
 8000a28:	81bb      	strh	r3, [r7, #12]

	if (init && zCurrentCounter < 16)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d02e      	beq.n	8000a92 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb2>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d829      	bhi.n	8000a92 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb2>
	{
		if (zCurrentCounter == 15)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d113      	bne.n	8000a70 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x90>
		{
			driveStatus.setZCurrent(zCurrent / 15);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8000a54:	491b      	ldr	r1, [pc, #108]	; (8000ac4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xe4>)
 8000a56:	fba1 1303 	umull	r1, r3, r1, r3
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f001 ffd3 	bl	8002a0c <_ZN11DriveStatus11setZCurrentEt>
			zCurrentCounter = 16;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2210      	movs	r2, #16
 8000a6a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8000a6e:	e010      	b.n	8000a92 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb2>
		}
		else
		{
			zCurrent += current;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
			zCurrentCounter++;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
	}



	driveStatus.setCurrent(current);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	334a      	adds	r3, #74	; 0x4a
 8000a96:	89fa      	ldrh	r2, [r7, #14]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 ffa7 	bl	80029ee <_ZN11DriveStatus10setCurrentEt>
	driveStatus.setVoltage(voltage);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	334a      	adds	r3, #74	; 0x4a
 8000aa4:	89ba      	ldrh	r2, [r7, #12]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 ffbf 	bl	8002a2c <_ZN11DriveStatus10setVoltageEt>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	33a8      	adds	r3, #168	; 0xa8
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xe8>)
 8000ab8:	f003 fb76 	bl	80041a8 <HAL_ADC_Start_DMA>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	88888889 	.word	0x88888889
 8000ac8:	2000021c 	.word	0x2000021c

08000acc <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:

#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	609a      	str	r2, [r3, #8]
}
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fc88 	bl	8002428 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2212      	movs	r2, #18
 8000b24:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	78fa      	ldrb	r2, [r7, #3]
 8000b2a:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	3b10      	subs	r3, #16
 8000b30:	2b10      	cmp	r3, #16
 8000b32:	f200 80d3 	bhi.w	8000cdc <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000b36:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000b81 	.word	0x08000b81
 8000b40:	08000b9f 	.word	0x08000b9f
 8000b44:	08000bbd 	.word	0x08000bbd
 8000b48:	08000bdb 	.word	0x08000bdb
 8000b4c:	08000bf9 	.word	0x08000bf9
 8000b50:	08000c17 	.word	0x08000c17
 8000b54:	08000c33 	.word	0x08000c33
 8000b58:	08000c51 	.word	0x08000c51
 8000b5c:	08000c6f 	.word	0x08000c6f
 8000b60:	08000c8d 	.word	0x08000c8d
 8000b64:	08000cab 	.word	0x08000cab
 8000b68:	08000cdd 	.word	0x08000cdd
 8000b6c:	08000cdd 	.word	0x08000cdd
 8000b70:	08000cdd 	.word	0x08000cdd
 8000b74:	08000cdd 	.word	0x08000cdd
 8000b78:	08000cdd 	.word	0x08000cdd
 8000b7c:	08000cc9 	.word	0x08000cc9
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fcfa 	bl	8002584 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2204      	movs	r2, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4620      	mov	r0, r4
 8000b98:	f002 f88a 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b9c:	e0a2      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fcd0 	bl	800254e <_ZNK13DriveSettings13getTeachSpeedEv>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f002 f87b 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000bba:	e093      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fc13 	bl	80023f2 <_ZNK13DriveSettings17getClampingTorqueEv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f002 f86c 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000bd8:	e084      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fbe9 	bl	80023bc <_ZNK13DriveSettings16getClampingSpeedEv>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2204      	movs	r2, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f002 f85d 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000bf6:	e075      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fc88 	bl	8002518 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f002 f84e 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c14:	e066      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fc0d 	bl	8002440 <_ZNK13DriveSettings12getInPosDiffEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2204      	movs	r2, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f002 f83f 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fc1a 	bl	8002476 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f002 f831 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c4e:	e049      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fcc8 	bl	80025f0 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2204      	movs	r2, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4620      	mov	r0, r4
 8000c68:	f002 f822 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c6c:	e03a      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fc9e 	bl	80025ba <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2204      	movs	r2, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4620      	mov	r0, r4
 8000c86:	f002 f813 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c8a:	e02b      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fc08 	bl	80024ac <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f002 f804 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ca8:	e01c      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fc14 	bl	80024e2 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f001 fff5 	bl	8002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cc6:	e00d      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fbab 	bl	8002428 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	741a      	strb	r2, [r3, #16]
			break;
 8000cda:	e003      	b.n	8000ce4 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	221d      	movs	r2, #29
 8000ce0:	735a      	strb	r2, [r3, #13]
			break;
 8000ce2:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	330c      	adds	r3, #12
 8000ce8:	2206      	movs	r2, #6
 8000cea:	4619      	mov	r1, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fac9 	bl	8001284 <_ZN7BaseCOM4CRC8EPhh>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	330c      	adds	r3, #12
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	bf00      	nop

08000d08 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	221f      	movs	r2, #31
 8000d18:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fb82 	bl	8002428 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2213      	movs	r2, #19
 8000d30:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d86e      	bhi.n	8000e1e <_ZN7BaseCOM9GetStatusEh+0x116>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000d6d 	.word	0x08000d6d
 8000d4c:	08000d81 	.word	0x08000d81
 8000d50:	08000d95 	.word	0x08000d95
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000dbd 	.word	0x08000dbd
 8000d5c:	08000dd1 	.word	0x08000dd1
 8000d60:	08000de5 	.word	0x08000de5
 8000d64:	08000df9 	.word	0x08000df9
 8000d68:	08000e0d 	.word	0x08000e0d
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fd13 	bl	800279c <_ZN11DriveStatus7isCloseEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	741a      	strb	r2, [r3, #16]
			break;
 8000d7e:	e052      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fd2c 	bl	80027e2 <_ZN11DriveStatus6isOpenEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	741a      	strb	r2, [r3, #16]
			break;
 8000d92:	e048      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fdd1 	bl	8002940 <_ZN11DriveStatus7isTeachEv>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	741a      	strb	r2, [r3, #16]
			break;
 8000da6:	e03e      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fd81 	bl	80028b4 <_ZN11DriveStatus7isResetEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	741a      	strb	r2, [r3, #16]
			break;
 8000dba:	e034      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fd54 	bl	800286e <_ZN11DriveStatus8isEnableEv>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	741a      	strb	r2, [r3, #16]
			break;
 8000dce:	e02a      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fd27 	bl	8002828 <_ZN11DriveStatus9isDisableEv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	741a      	strb	r2, [r3, #16]
			break;
 8000de2:	e020      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fd86 	bl	80028fa <_ZN11DriveStatus6isStopEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	741a      	strb	r2, [r3, #16]
			break;
 8000df6:	e016      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fdc2 	bl	8002986 <_ZN11DriveStatus8getErrorEv>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	741a      	strb	r2, [r3, #16]
			break;
 8000e0a:	e00c      	b.n	8000e26 <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fdc4 	bl	800299e <_ZNK11DriveStatus9getStatusEv>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	221d      	movs	r2, #29
 8000e22:	731a      	strb	r2, [r3, #12]
			break;
 8000e24:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fa28 	bl	8001284 <_ZN7BaseCOM4CRC8EPhh>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	330c      	adds	r3, #12
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_ZN7BaseCOM11SetSettingsEPh>:
}



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	3303      	adds	r3, #3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3b10      	subs	r3, #16
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	f200 80f6 	bhi.w	8001050 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e99 	.word	0x08000e99
 8000e70:	08000ec1 	.word	0x08000ec1
 8000e74:	08000ee9 	.word	0x08000ee9
 8000e78:	08000f11 	.word	0x08000f11
 8000e7c:	08000fd9 	.word	0x08000fd9
 8000e80:	08000f39 	.word	0x08000f39
 8000e84:	08000f61 	.word	0x08000f61
 8000e88:	08001001 	.word	0x08001001
 8000e8c:	08001029 	.word	0x08001029
 8000e90:	08000f89 	.word	0x08000f89
 8000e94:	08000fb1 	.word	0x08000fb1
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3305      	adds	r3, #5
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	89fa      	ldrh	r2, [r7, #14]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fb6f 	bl	800259c <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000ebe:	e0c8      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3305      	adds	r3, #5
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	89fa      	ldrh	r2, [r7, #14]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fb40 	bl	8002566 <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000ee6:	e0b4      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3305      	adds	r3, #5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	89fa      	ldrh	r2, [r7, #14]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fa7e 	bl	800240a <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000f0e:	e0a0      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3305      	adds	r3, #5
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	01db      	lsls	r3, r3, #7
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	89fa      	ldrh	r2, [r7, #14]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fa4f 	bl	80023d4 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000f36:	e08c      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3304      	adds	r3, #4
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	89fa      	ldrh	r2, [r7, #14]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fa7d 	bl	8002458 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8000f5e:	e078      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	3305      	adds	r3, #5
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	01db      	lsls	r3, r3, #7
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	89fa      	ldrh	r2, [r7, #14]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fa84 	bl	800248e <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 8000f86:	e064      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3305      	adds	r3, #5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	01db      	lsls	r3, r3, #7
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	3304      	adds	r3, #4
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	89fa      	ldrh	r2, [r7, #14]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fa8b 	bl	80024c4 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8000fae:	e050      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3305      	adds	r3, #5
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	89fa      	ldrh	r2, [r7, #14]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fa92 	bl	80024fa <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 8000fd6:	e03c      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3305      	adds	r3, #5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	89fa      	ldrh	r2, [r7, #14]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fa99 	bl	8002530 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 8000ffe:	e028      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3305      	adds	r3, #5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	01db      	lsls	r3, r3, #7
 8001008:	b21a      	sxth	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	89fa      	ldrh	r2, [r7, #14]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f001 faf1 	bl	8002608 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 8001026:	e014      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3305      	adds	r3, #5
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	b21a      	sxth	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3304      	adds	r3, #4
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	89fa      	ldrh	r2, [r7, #14]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fac2 	bl	80025d2 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 800104e:	e000      	b.n	8001052 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8001050:	bf00      	nop
	}
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop

0800105c <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3303      	adds	r3, #3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b06      	cmp	r3, #6
 8001070:	d879      	bhi.n	8001166 <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001095 	.word	0x08001095
 800107c:	080010b3 	.word	0x080010b3
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010ef 	.word	0x080010ef
 8001088:	0800110d 	.word	0x0800110d
 800108c:	0800112b 	.word	0x0800112b
 8001090:	08001149 	.word	0x08001149
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3304      	adds	r3, #4
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	4610      	mov	r0, r2
 80010ac:	f001 fb82 	bl	80027b4 <_ZN11DriveStatus8setCloseEb>
			break;
 80010b0:	e05a      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	bf0c      	ite	eq
 80010c0:	2301      	moveq	r3, #1
 80010c2:	2300      	movne	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4610      	mov	r0, r2
 80010ca:	f001 fb96 	bl	80027fa <_ZN11DriveStatus7setOpenEb>
			break;
 80010ce:	e04b      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3304      	adds	r3, #4
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f001 fc36 	bl	8002958 <_ZN11DriveStatus8setTeachEb>
			break;
 80010ec:	e03c      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	4610      	mov	r0, r2
 8001106:	f001 fbe1 	bl	80028cc <_ZN11DriveStatus8setResetEb>
			break;
 800110a:	e02d      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f001 fbaf 	bl	8002886 <_ZN11DriveStatus9setEnableEb>
			break;
 8001128:	e01e      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3304      	adds	r3, #4
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	4610      	mov	r0, r2
 8001142:	f001 fb7d 	bl	8002840 <_ZN11DriveStatus10setDisableEb>
			break;
 8001146:	e00f      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3304      	adds	r3, #4
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	bf0c      	ite	eq
 8001156:	2301      	moveq	r3, #1
 8001158:	2300      	movne	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4619      	mov	r1, r3
 800115e:	4610      	mov	r0, r2
 8001160:	f001 fbd7 	bl	8002912 <_ZN11DriveStatus7setStopEb>
			break;
 8001164:	e000      	b.n	8001168 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8001166:	bf00      	nop
	}
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3303      	adds	r3, #3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	2b06      	cmp	r3, #6
 8001184:	d879      	bhi.n	800127a <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011a9 	.word	0x080011a9
 8001190:	080011c7 	.word	0x080011c7
 8001194:	080011e5 	.word	0x080011e5
 8001198:	08001203 	.word	0x08001203
 800119c:	08001221 	.word	0x08001221
 80011a0:	0800123f 	.word	0x0800123f
 80011a4:	0800125d 	.word	0x0800125d
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f001 fa66 	bl	8002690 <_ZN12DriveCommand8setCloseEb>
			break;
 80011c4:	e05a      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f001 fa72 	bl	80026c6 <_ZN12DriveCommand7setOpenEb>
			break;
 80011e2:	e04b      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f001 faba 	bl	8002774 <_ZN12DriveCommand8setTeachEb>
			break;
 8001200:	e03c      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	4610      	mov	r0, r2
 800121a:	f001 fa81 	bl	8002720 <_ZN12DriveCommand8setResetEb>
			break;
 800121e:	e02d      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	4610      	mov	r0, r2
 8001238:	f001 fa63 	bl	8002702 <_ZN12DriveCommand9setEnableEb>
			break;
 800123c:	e01e      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f001 fa45 	bl	80026e4 <_ZN12DriveCommand10setDisableEb>
			break;
 800125a:	e00f      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3304      	adds	r3, #4
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	4610      	mov	r0, r2
 8001274:	f001 fa6f 	bl	8002756 <_ZN12DriveCommand7setStopEb>
			break;
 8001278:	e000      	b.n	800127c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 800127a:	bf00      	nop
	}
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	4613      	mov	r3, r2
 8001290:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 8001292:	23ff      	movs	r3, #255	; 0xff
 8001294:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d222      	bcs.n	80012e8 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	4413      	add	r3, r2
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	4053      	eors	r3, r2
 80012ae:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d812      	bhi.n	80012e0 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80012ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da07      	bge.n	80012d2 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	77fb      	strb	r3, [r7, #31]
 80012d0:	e002      	b.n	80012d8 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e7e9      	b.n	80012b4 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3301      	adds	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	e7d8      	b.n	800129a <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	4613      	mov	r3, r2
 8001302:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 800130a:	2300      	movs	r3, #0
 800130c:	e015      	b.n	800133a <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fd02 	bl	8001d1e <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, 7);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6998      	ldr	r0, [r3, #24]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2207      	movs	r2, #7
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	4798      	blx	r3
	rfm95->endPacket();
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd14 	bl	8001d60 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]

	uint8_t* txDataTemp;

	uint8_t rxData[7];

	uint8_t packetSize = rfm95->parsePacket();
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fd23 	bl	8001da4 <_ZN10RFM95_LoRa11parsePacketEi>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 8001364:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80d7 	beq.w	800151c <_ZN8RFM95Com7ReceiveEPhh+0x1d8>
	{
		uint8_t counter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3308      	adds	r3, #8
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4610      	mov	r0, r2
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01c      	beq.n	80013d0 <_ZN8RFM95Com7ReceiveEPhh+0x8c>
		{
			rxData[counter] = rfm95->read();
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	330c      	adds	r3, #12
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4610      	mov	r0, r2
 80013a6:	4798      	blx	r3
 80013a8:	4602      	mov	r2, r0
 80013aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	3328      	adds	r3, #40	; 0x28
 80013b2:	443b      	add	r3, r7
 80013b4:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 80013b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d901      	bls.n	80013c4 <_ZN8RFM95Com7ReceiveEPhh+0x80>
			{
				return false;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e0ac      	b.n	800151e <_ZN8RFM95Com7ReceiveEPhh+0x1da>
			}
			counter++;
 80013c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013c8:	3301      	adds	r3, #1
 80013ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 80013ce:	e7d1      	b.n	8001374 <_ZN8RFM95Com7ReceiveEPhh+0x30>
		}

		//check CRC
		if (CRC8(rxData, 6) != rxData[6])
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3304      	adds	r3, #4
 80013d4:	f107 0118 	add.w	r1, r7, #24
 80013d8:	2206      	movs	r2, #6
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff52 	bl	8001284 <_ZN7BaseCOM4CRC8EPhh>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	7fbb      	ldrb	r3, [r7, #30]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <_ZN8RFM95Com7ReceiveEPhh+0xb4>
		{
			//error crc error //ToDO
			return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e092      	b.n	800151e <_ZN8RFM95Com7ReceiveEPhh+0x1da>
		}

		uint8_t txData[] =
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f8c3 2003 	str.w	r2, [r3, #3]
 8001404:	231f      	movs	r3, #31
 8001406:	743b      	strb	r3, [r7, #16]
 8001408:	2301      	movs	r3, #1
 800140a:	753b      	strb	r3, [r7, #20]
 800140c:	2301      	movs	r3, #1
 800140e:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f807 	bl	8002428 <_ZNK13DriveSettings16getDeviceAddressEv>
 800141a:	4603      	mov	r3, r0
				rxData[2],
				rxData[3],
				0x01,
				0x01,
				0x00
		};
 800141c:	747b      	strb	r3, [r7, #17]
				rxData[2],
 800141e:	7ebb      	ldrb	r3, [r7, #26]
		};
 8001420:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 8001422:	7efb      	ldrb	r3, [r7, #27]
		};
 8001424:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	f107 0110 	add.w	r1, r7, #16
 800142e:	2206      	movs	r2, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff27 	bl	8001284 <_ZN7BaseCOM4CRC8EPhh>
 8001436:	4603      	mov	r3, r0
 8001438:	75bb      	strb	r3, [r7, #22]

		switch (rxData[2])
 800143a:	7ebb      	ldrb	r3, [r7, #26]
 800143c:	3b01      	subs	r3, #1
 800143e:	2b12      	cmp	r3, #18
 8001440:	d85e      	bhi.n	8001500 <_ZN8RFM95Com7ReceiveEPhh+0x1bc>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <_ZN8RFM95Com7ReceiveEPhh+0x104>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001495 	.word	0x08001495
 800144c:	080014ad 	.word	0x080014ad
 8001450:	080014c5 	.word	0x080014c5
 8001454:	08001501 	.word	0x08001501
 8001458:	08001501 	.word	0x08001501
 800145c:	08001501 	.word	0x08001501
 8001460:	08001501 	.word	0x08001501
 8001464:	08001501 	.word	0x08001501
 8001468:	08001501 	.word	0x08001501
 800146c:	08001501 	.word	0x08001501
 8001470:	08001501 	.word	0x08001501
 8001474:	08001501 	.word	0x08001501
 8001478:	08001501 	.word	0x08001501
 800147c:	08001501 	.word	0x08001501
 8001480:	08001501 	.word	0x08001501
 8001484:	08001501 	.word	0x08001501
 8001488:	080014dd 	.word	0x080014dd
 800148c:	08001501 	.word	0x08001501
 8001490:	080014ef 	.word	0x080014ef
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3304      	adds	r3, #4
 8001498:	f107 0218 	add.w	r2, r7, #24
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcd2 	bl	8000e48 <_ZN7BaseCOM11SetSettingsEPh>
				txDataTemp = txData;
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014aa:	e02e      	b.n	800150a <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3304      	adds	r3, #4
 80014b0:	f107 0218 	add.w	r2, r7, #24
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe5a 	bl	8001170 <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014c2:	e022      	b.n	800150a <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case SEND_STATUS:
				this->SetStatus(rxData);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3304      	adds	r3, #4
 80014c8:	f107 0218 	add.w	r2, r7, #24
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fdc4 	bl	800105c <_ZN7BaseCOM9SetStatusEPh>
				txDataTemp = txData;
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014da:	e016      	b.n	800150a <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3304      	adds	r3, #4
 80014e0:	7efa      	ldrb	r2, [r7, #27]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb09 	bl	8000afc <_ZN7BaseCOM11GetSettingsEh>
 80014ea:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80014ec:	e00d      	b.n	800150a <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	7efa      	ldrb	r2, [r7, #27]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc06 	bl	8000d08 <_ZN7BaseCOM9GetStatusEh>
 80014fc:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80014fe:	e004      	b.n	800150a <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			default:
				//not sported command
				txData[4] = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	757b      	strb	r3, [r7, #21]
				break;
 8001508:	bf00      	nop
		}


		Transmitt(txDataTemp , 7);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2207      	movs	r2, #7
 8001512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	4798      	blx	r3
		return true;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <_ZN8RFM95Com7ReceiveEPhh+0x1da>
	}
	return false;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>:
 */

#include "Drive.h"
#include "../IO/IO.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus,
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand, Encoder *encoder)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	745a      	strb	r2, [r3, #17]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	74da      	strb	r2, [r3, #19]
{
	this->driveSettings = driveSettings;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	60da      	str	r2, [r3, #12]
}
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZN5Drive5ResetEv>:

void Drive::Reset()
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	isDriveStoped = false;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	74da      	strb	r2, [r3, #19]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_ZN5Drive11updateDriveEv>:

void Drive::updateDrive()
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	switch (driveMode)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7c1b      	ldrb	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <_ZN5Drive11updateDriveEv+0x1c>
 8001592:	2b01      	cmp	r3, #1
 8001594:	d106      	bne.n	80015a4 <_ZN5Drive11updateDriveEv+0x22>
	{
		case Drive::OP_MODE:
			OpMode();
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f809 	bl	80015ae <_ZN5Drive6OpModeEv>
			break;
 800159c:	e003      	b.n	80015a6 <_ZN5Drive11updateDriveEv+0x24>
		case Drive::TEACH_MODE:
			TeachMode();
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f88a 	bl	80016b8 <_ZN5Drive9TeachModeEv>
		default:
			break;
 80015a4:	bf00      	nop
	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

	if (isDriveStoped)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7cdb      	ldrb	r3, [r3, #19]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <_ZN5Drive6OpModeEv+0x18>
	{
		Stop();
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f86b 	bl	800169a <_ZN5Drive4StopEv>
		return;
 80015c4:	e066      	b.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
	}

	int32_t encoderValue = encoder->GetValue();
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f9f3 	bl	80019b6 <_ZN7Encoder8GetValueEv>
 80015d0:	6178      	str	r0, [r7, #20]
	uint16_t posOut = driveSettings->getOpeningDistance();
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 ff4d 	bl	8002476 <_ZNK13DriveSettings18getOpeningDistanceEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	827b      	strh	r3, [r7, #18]
	uint16_t posDiff = driveSettings->getInPosDiff();
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 ff2b 	bl	8002440 <_ZNK13DriveSettings12getInPosDiffEv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	823b      	strh	r3, [r7, #16]

	if (driveCommand->isStop())
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 f8a3 	bl	800273e <_ZN12DriveCommand6isStopEv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <_ZN5Drive6OpModeEv+0x58>
	{
		isDriveStoped = true;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	74da      	strb	r2, [r3, #19]
 8001604:	e046      	b.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
	}
	else if (driveCommand->isClose())
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f834 	bl	8002678 <_ZN12DriveCommand7isCloseEv>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d039      	beq.n	800168a <_ZN5Drive6OpModeEv+0xdc>
	{
		int32_t posAsMM = encoderValue * GEAR_RATIO;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	60fb      	str	r3, [r7, #12]
		if (posAsMM < posDiff || posAsMM > -posDiff)
 800161a:	8a3b      	ldrh	r3, [r7, #16]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	db38      	blt.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
 8001622:	8a3b      	ldrh	r3, [r7, #16]
 8001624:	425b      	negs	r3, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	dc33      	bgt.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
		{
			//in position
		}
		else if (posAsMM > posDiff)
 800162c:	8a3b      	ldrh	r3, [r7, #16]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	dd12      	ble.n	800165a <_ZN5Drive6OpModeEv+0xac>
		{
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 feda 	bl	80023f2 <_ZNK13DriveSettings17getClampingTorqueEv>
 800163e:	4603      	mov	r3, r0
 8001640:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fed3 	bl	80023f2 <_ZNK13DriveSettings17getClampingTorqueEv>
 800164c:	4603      	mov	r3, r0
 800164e:	4622      	mov	r2, r4
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f93a 	bl	80018cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001658:	e01c      	b.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
		}
		else if (posAsMM < -posDiff)
 800165a:	8a3b      	ldrh	r3, [r7, #16]
 800165c:	425b      	negs	r3, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	da17      	bge.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
		{
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fec2 	bl	80023f2 <_ZNK13DriveSettings17getClampingTorqueEv>
 800166e:	4603      	mov	r3, r0
 8001670:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 8001676:	4618      	mov	r0, r3
 8001678:	f000 febb 	bl	80023f2 <_ZNK13DriveSettings17getClampingTorqueEv>
 800167c:	4603      	mov	r3, r0
 800167e:	4622      	mov	r2, r4
 8001680:	2101      	movs	r1, #1
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f922 	bl	80018cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001688:	e004      	b.n	8001694 <_ZN5Drive6OpModeEv+0xe6>
		}

	}
	else if (driveCommand->isOpen())
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f80d 	bl	80026ae <_ZN12DriveCommand6isOpenEv>
	{

	}

}
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <_ZN5Drive4StopEv>:
}



void Drive::Stop()
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 80016a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0;
	static bool InOut = 0;
	currentState = nextState;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7c9a      	ldrb	r2, [r3, #18]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	745a      	strb	r2, [r3, #17]

	switch (currentState)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7c5b      	ldrb	r3, [r3, #17]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	f200 80ec 	bhi.w	80018aa <_ZN5Drive9TeachModeEv+0x1f2>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <_ZN5Drive9TeachModeEv+0x20>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080016f9 	.word	0x080016f9
 80016dc:	0800171b 	.word	0x0800171b
 80016e0:	0800186d 	.word	0x0800186d
 80016e4:	08001847 	.word	0x08001847
 80016e8:	08001893 	.word	0x08001893
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	080017c1 	.word	0x080017c1
 80016f4:	08001827 	.word	0x08001827
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == GPIO_PIN_RESET)
 80016f8:	2120      	movs	r1, #32
 80016fa:	4871      	ldr	r0, [pc, #452]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 80016fc:	f004 fa34 	bl	8005b68 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ce 	beq.w	80018ae <_ZN5Drive9TeachModeEv+0x1f6>
			{
				nextState = TEACH_RDY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	749a      	strb	r2, [r3, #18]
			}
			break;
 8001718:	e0c9      	b.n	80018ae <_ZN5Drive9TeachModeEv+0x1f6>
		case TEACH_RDY:
			if (IS_EXT_SWITCH)
 800171a:	2120      	movs	r1, #32
 800171c:	4868      	ldr	r0, [pc, #416]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 800171e:	f004 fa23 	bl	8005b68 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80bf 	beq.w	80018b2 <_ZN5Drive9TeachModeEv+0x1fa>
			{
				nextState = CHECK_CLK;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2205      	movs	r2, #5
 8001738:	749a      	strb	r2, [r3, #18]
			}
			break;
 800173a:	e0ba      	b.n	80018b2 <_ZN5Drive9TeachModeEv+0x1fa>
		case CHECK_CLK:
			if (counter > 2 && IS_EXT_SWITCH)
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d908      	bls.n	8001756 <_ZN5Drive9TeachModeEv+0x9e>
 8001744:	2120      	movs	r1, #32
 8001746:	485e      	ldr	r0, [pc, #376]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 8001748:	f004 fa0e 	bl	8005b68 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <_ZN5Drive9TeachModeEv+0x9e>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <_ZN5Drive9TeachModeEv+0xa0>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d011      	beq.n	8001780 <_ZN5Drive9TeachModeEv+0xc8>
			{
				if (InOut)
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <_ZN5Drive9TeachModeEv+0x210>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <_ZN5Drive9TeachModeEv+0xb4>
				{
					nextState = DRIVE_IN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	749a      	strb	r2, [r3, #18]
 800176a:	e002      	b.n	8001772 <_ZN5Drive9TeachModeEv+0xba>
				}
				else
				{
					nextState = DRIVE_OUT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	749a      	strb	r2, [r3, #18]
				}
				InOut = !InOut;
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <_ZN5Drive9TeachModeEv+0x210>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f083 0301 	eor.w	r3, r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <_ZN5Drive9TeachModeEv+0x210>)
 800177e:	701a      	strb	r2, [r3, #0]
			}

			if (!IS_EXT_SWITCH)
 8001780:	2120      	movs	r1, #32
 8001782:	484f      	ldr	r0, [pc, #316]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 8001784:	f004 f9f0 	bl	8005b68 <HAL_GPIO_ReadPin>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <_ZN5Drive9TeachModeEv+0xe6>
			{
				nextState = CLK_1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2206      	movs	r2, #6
 800179c:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7c9a      	ldrb	r2, [r3, #18]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7c5b      	ldrb	r3, [r3, #17]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d003      	beq.n	80017b2 <_ZN5Drive9TeachModeEv+0xfa>
			{
				counter = 0;
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 80017b0:	e082      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 80017bc:	701a      	strb	r2, [r3, #0]
			break;
 80017be:	e07b      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
		case CLK_1:
			if (counter > 2 && !IS_EXT_SWITCH)
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d908      	bls.n	80017da <_ZN5Drive9TeachModeEv+0x122>
 80017c8:	2120      	movs	r1, #32
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 80017cc:	f004 f9cc 	bl	8005b68 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <_ZN5Drive9TeachModeEv+0x122>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <_ZN5Drive9TeachModeEv+0x124>
 80017da:	2300      	movs	r3, #0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <_ZN5Drive9TeachModeEv+0x12e>
			{
				nextState = TEACH_RDY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	749a      	strb	r2, [r3, #18]
			}

			if (IS_EXT_SWITCH)
 80017e6:	2120      	movs	r1, #32
 80017e8:	4835      	ldr	r0, [pc, #212]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 80017ea:	f004 f9bd 	bl	8005b68 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = CLK_2;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2207      	movs	r2, #7
 8001802:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7c9a      	ldrb	r2, [r3, #18]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c5b      	ldrb	r3, [r3, #17]
 800180c:	429a      	cmp	r2, r3
 800180e:	d003      	beq.n	8001818 <_ZN5Drive9TeachModeEv+0x160>
			{
				counter = 0;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 8001816:	e04f      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <_ZN5Drive9TeachModeEv+0x20c>)
 8001822:	701a      	strb	r2, [r3, #0]
			break;
 8001824:	e048      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
		case CLK_2:
			if (IS_EXT_SWITCH)
 8001826:	2120      	movs	r1, #32
 8001828:	4825      	ldr	r0, [pc, #148]	; (80018c0 <_ZN5Drive9TeachModeEv+0x208>)
 800182a:	f004 f99d 	bl	8005b68 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03b      	beq.n	80018b6 <_ZN5Drive9TeachModeEv+0x1fe>
			{
				nextState = TEACH_END;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	749a      	strb	r2, [r3, #18]
			}

			break;
 8001844:	e037      	b.n	80018b6 <_ZN5Drive9TeachModeEv+0x1fe>
		case DRIVE_IN:
			//move drive in
			MoveDrive(IN, driveSettings->getTeachTroque(),
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fe9a 	bl	8002584 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001850:	4603      	mov	r3, r0
 8001852:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
			MoveDrive(IN, driveSettings->getTeachTroque(),
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fe78 	bl	800254e <_ZNK13DriveSettings13getTeachSpeedEv>
 800185e:	4603      	mov	r3, r0
 8001860:	4622      	mov	r2, r4
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f831 	bl	80018cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 800186a:	e025      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
		case DRIVE_OUT:
			//move drive out
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fe87 	bl	8002584 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001876:	4603      	mov	r3, r0
 8001878:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fe65 	bl	800254e <_ZNK13DriveSettings13getTeachSpeedEv>
 8001884:	4603      	mov	r3, r0
 8001886:	4622      	mov	r2, r4
 8001888:	2101      	movs	r1, #1
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f81e 	bl	80018cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 8001890:	e012      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f880 	bl	800199c <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 ff66 	bl	8002774 <_ZN12DriveCommand8setTeachEb>
			break;
 80018a8:	e006      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
		default:
			break;
 80018aa:	bf00      	nop
 80018ac:	e004      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80018ae:	bf00      	nop
 80018b0:	e002      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <_ZN5Drive9TeachModeEv+0x200>
			break;
 80018b6:	bf00      	nop
	}

}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20000218 	.word	0x20000218
 80018c8:	20000219 	.word	0x20000219

080018cc <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
{
	this->driveMode = driveMode;
}

void Drive::MoveDrive(DIRECTION direction, uint16_t torque, uint16_t speed)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	72fb      	strb	r3, [r7, #11]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]

	switch (direction)
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x26>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00b      	beq.n	8001908 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x3c>
 80018f0:	e015      	b.n	800191e <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x52>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = 3200;	//direction
 80018f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000;	//speed
 80018fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001900:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001906:	e00e      	b.n	8001926 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		case DIRECTION::OUT:
			TIM2->CCR2 = 6400;	//direction
 8001908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001910:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000; //speed
 8001912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001916:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

			break;
 800191c:	e003      	b.n	8001926 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		default:
			Stop();
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff febb 	bl	800169a <_ZN5Drive4StopEv>
			break;
 8001924:	bf00      	nop
	}

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_ZN7EncoderC1EP11DriveStatus>:
 *      Author: marce
 */

#include "Encoder.h"

Encoder::Encoder(DriveStatus *driveStatus)
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <_ZN7Encoder4initEv+0x38>)
 800196a:	f001 fed5 	bl	8003718 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 800196e:	2104      	movs	r1, #4
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <_ZN7Encoder4initEv+0x38>)
 8001972:	f007 ff27 	bl	80097c4 <HAL_TIM_Encoder_Start>

	cValue = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
	lValue = 0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
	return true;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200003e8 	.word	0x200003e8

0800199c <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_ZN7Encoder8GetValueEv>:

int32_t Encoder::GetValue()
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return this->encoderValue;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_ZN7Encoder6updateEv>:

bool Encoder::update()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <_ZN7Encoder6updateEv+0x84>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019f8:	da06      	bge.n	8001a08 <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a02:	33ff      	adds	r3, #255	; 0xff
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	60d3      	str	r3, [r2, #12]
	}

	//backwards overflow
	if (deltaValue > 32768)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a10:	dd06      	ble.n	8001a20 <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001a1a:	3bff      	subs	r3, #255	; 0xff
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	441a      	add	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f001 f802 	bl	8002a4c <_ZN11DriveStatus11setPositionEt>

	return true;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40012c00 	.word	0x40012c00

08001a58 <_ZN5Error8setErrorENS_11EERROR_CODEE>:
#include "Error.h"
#include "main.h"
#include "gpio.h"


void Error::setError(EERROR_CODE error) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	this->errorCode = error;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN5Error9error2LEDEv>:
void Error::resetError() {
	this->errorCode = EERROR_CODE::NO_ERROR;
}


void Error::error2LED() {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms
	static uint8_t errorCounter = 0;
	static bool risingEdge = 0;

	if(errorCode != NO_ERROR ){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <_ZN5Error9error2LEDEv+0x32>

		if(risingEdge){
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <_ZN5Error9error2LEDEv+0x40>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00c      	beq.n	8001aaa <_ZN5Error9error2LEDEv+0x32>
			}else{
				//reset LED Error
			}

			//increment error counter by 1
			errorCounter++;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <_ZN5Error9error2LEDEv+0x44>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_ZN5Error9error2LEDEv+0x44>)
 8001a9a:	701a      	strb	r2, [r3, #0]


			if(errorCounter > 7){
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_ZN5Error9error2LEDEv+0x44>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d902      	bls.n	8001aaa <_ZN5Error9error2LEDEv+0x32>
				errorCounter = 0;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <_ZN5Error9error2LEDEv+0x44>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
			}

		}
	}
	risingEdge != risingEdge;
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000021b 	.word	0x2000021b
 8001abc:	2000021a 	.word	0x2000021a

08001ac0 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	797a      	ldrb	r2, [r7, #5]
 8001ae6:	719a      	strb	r2, [r3, #6]
}
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_ZN3LED2ONEv>:

/*
 * LED ON method
 */
void LED::ON() {
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <_ZN3LED2ONEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	f004 f841 	bl	8005b98 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	}
}
 8001b16:	e007      	b.n	8001b28 <_ZN3LED2ONEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4619      	mov	r1, r3
 8001b24:	f004 f838 	bl	8005b98 <HAL_GPIO_WritePin>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN3LED6ToggleEv>:
}

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	889b      	ldrh	r3, [r3, #4]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f004 f840 	bl	8005bc8 <HAL_GPIO_TogglePin>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
{

}
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	0800f200 	.word	0x0800f200

08001b88 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2110      	movs	r1, #16
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f003 fffe 	bl	8005b98 <HAL_GPIO_WritePin>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2110      	movs	r1, #16
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f003 fff0 	bl	8005b98 <HAL_GPIO_WritePin>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2108      	movs	r1, #8
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f003 ffe2 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f001 ff3d 	bl	8003a54 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2108      	movs	r1, #8
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f003 ffd9 	bl	8005b98 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001be6:	2005      	movs	r0, #5
 8001be8:	f001 ff34 	bl	8003a54 <HAL_Delay>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	4613      	mov	r3, r2
 8001c02:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	733b      	strb	r3, [r7, #12]
 8001c0e:	78bb      	ldrb	r3, [r7, #2]
 8001c10:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffb8 	bl	8001b88 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001c18:	f107 010c 	add.w	r1, r7, #12
 8001c1c:	2364      	movs	r3, #100	; 0x64
 8001c1e:	2202      	movs	r2, #2
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001c22:	f006 fe62 	bl	80088ea <HAL_SPI_Transmit>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffb4 	bl	8001ba4 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e003      	b.n	8001c48 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffaf 	bl	8001ba4 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000380 	.word	0x20000380

08001c54 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff8d 	bl	8001b88 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	f107 0108 	add.w	r1, r7, #8
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001c7e:	f006 ffa2 	bl	8008bc6 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff8e 	bl	8001ba4 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000380 	.word	0x20000380

08001c98 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff8c 	bl	8001bc0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001ca8:	2142      	movs	r1, #66	; 0x42
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffd2 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d001      	beq.n	8001cbe <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e02b      	b.n	8001d16 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f9b4 	bl	800202c <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f9fa 	bl	80020c0 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	210e      	movs	r1, #14
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff8f 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	210f      	movs	r1, #15
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff8a 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001ce0:	210c      	movs	r1, #12
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb6 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f043 0303 	orr.w	r3, r3, #3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	210c      	movs	r1, #12
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff7d 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	2126      	movs	r1, #38	; 0x26
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff78 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2114      	movs	r1, #20
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f99c 	bl	8002046 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f97f 	bl	8002012 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f972 	bl	8002012 <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 faf6 	bl	8002326 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001d3a:	e002      	b.n	8001d42 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fada 	bl	80022f6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	210d      	movs	r1, #13
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff54 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2122      	movs	r1, #34	; 0x22
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff4f 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001d68:	2283      	movs	r2, #131	; 0x83
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff41 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001d72:	2112      	movs	r1, #18
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff6d 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d000      	beq.n	8001d90 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001d8e:	e7f0      	b.n	8001d72 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001d90:	2208      	movs	r2, #8
 8001d92:	2112      	movs	r1, #18
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff2d 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001db2:	2112      	movs	r1, #18
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff4d 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd0a      	ble.n	8001dda <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 faae 	bl	8002326 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2122      	movs	r1, #34	; 0x22
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ff0e 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001dd8:	e002      	b.n	8001de0 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa8b 	bl	80022f6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	2112      	movs	r1, #18
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff03 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d026      	beq.n	8001e46 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d121      	bne.n	8001e46 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001e10:	2122      	movs	r1, #34	; 0x22
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff1e 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e005      	b.n	8001e2a <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001e1e:	2113      	movs	r1, #19
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff17 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e26:	4603      	mov	r3, r0
 8001e28:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff11 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	210d      	movs	r1, #13
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fedb 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8e7 	bl	8002012 <_ZN10RFM95_LoRa4idleEv>
 8001e44:	e015      	b.n	8001e72 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001e46:	2101      	movs	r1, #1
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff03 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b86      	cmp	r3, #134	; 0x86
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210d      	movs	r1, #13
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fec6 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001e68:	2286      	movs	r2, #134	; 0x86
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fec1 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	1cf9      	adds	r1, r7, #3
 8001e92:	2201      	movs	r2, #1
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001eae:	2122      	movs	r1, #34	; 0x22
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff fecf 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2bff      	cmp	r3, #255	; 0xff
 8001ec2:	d903      	bls.n	8001ecc <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001eca:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d20c      	bcs.n	8001ef2 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff fe85 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e7ee      	b.n	8001ed0 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	2122      	movs	r1, #34	; 0x22
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff fe76 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001f1a:	2113      	movs	r1, #19
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fe99 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	1ad3      	subs	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3308      	adds	r3, #8
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e009      	b.n	8001f72 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fe72 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3308      	adds	r3, #8
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e013      	b.n	8001fcc <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001fa4:	210d      	movs	r1, #13
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe54 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fac:	4603      	mov	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe4e 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	210d      	movs	r1, #13
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe15 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001fca:	7afb      	ldrb	r3, [r7, #11]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	dd0a      	ble.n	8001ffa <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f99e 	bl	8002326 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2122      	movs	r1, #34	; 0x22
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fdfe 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001ff8:	e002      	b.n	8002000 <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f97b 	bl	80022f6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8002000:	2285      	movs	r2, #133	; 0x85
 8002002:	2101      	movs	r1, #1
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fdf5 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800201a:	2281      	movs	r2, #129	; 0x81
 800201c:	2101      	movs	r1, #1
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fde8 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZN10RFM95_LoRa5sleepEv>:
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	2101      	movs	r1, #1
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fddb 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d116      	bne.n	8002086 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	da02      	bge.n	8002064 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	e004      	b.n	800206e <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b0e      	cmp	r3, #14
 8002068:	dd01      	ble.n	800206e <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 800206a:	230e      	movs	r3, #14
 800206c:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002076:	b25b      	sxtb	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	2109      	movs	r1, #9
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fdb8 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8002084:	e018      	b.n	80020b8 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	dc02      	bgt.n	8002092 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 800208c:	2302      	movs	r3, #2
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	e004      	b.n	800209c <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b11      	cmp	r3, #17
 8002096:	dd01      	ble.n	800209c <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8002098:	2311      	movs	r3, #17
 800209a:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3b02      	subs	r3, #2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	2109      	movs	r1, #9
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff fd9e 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	17c8      	asrs	r0, r1, #31
 80020d4:	460a      	mov	r2, r1
 80020d6:	4603      	mov	r3, r0
 80020d8:	1355      	asrs	r5, r2, #13
 80020da:	04d4      	lsls	r4, r2, #19
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f871 	bl	80001cc <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80020f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	0c02      	lsrs	r2, r0, #16
 8002100:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002104:	0c0b      	lsrs	r3, r1, #16
 8002106:	b2d3      	uxtb	r3, r2
 8002108:	461a      	mov	r2, r3
 800210a:	2106      	movs	r1, #6
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fd71 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8002112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	0a02      	lsrs	r2, r0, #8
 8002120:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002124:	0a0b      	lsrs	r3, r1, #8
 8002126:	b2d3      	uxtb	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	2107      	movs	r1, #7
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fd61 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8002132:	7a3b      	ldrb	r3, [r7, #8]
 8002134:	461a      	mov	r2, r3
 8002136:	2108      	movs	r1, #8
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd5b 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	01e84800 	.word	0x01e84800

0800214c <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b05      	cmp	r3, #5
 800215a:	dc02      	bgt.n	8002162 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 800215c:	2306      	movs	r3, #6
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	e004      	b.n	800216c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	dd01      	ble.n	800216c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8002168:	230c      	movs	r3, #12
 800216a:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d10a      	bne.n	8002188 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8002172:	22c5      	movs	r2, #197	; 0xc5
 8002174:	2131      	movs	r1, #49	; 0x31
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fd3c 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 800217c:	220c      	movs	r2, #12
 800217e:	2137      	movs	r1, #55	; 0x37
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fd37 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8002186:	e009      	b.n	800219c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8002188:	22c3      	movs	r2, #195	; 0xc3
 800218a:	2131      	movs	r1, #49	; 0x31
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fd31 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8002192:	220a      	movs	r2, #10
 8002194:	2137      	movs	r1, #55	; 0x37
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fd2c 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 800219c:	211e      	movs	r1, #30
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fd58 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	b25a      	sxtb	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	211e      	movs	r1, #30
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fd18 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f641 6278 	movw	r2, #7800	; 0x1e78
 80021dc:	4293      	cmp	r3, r2
 80021de:	dc02      	bgt.n	80021e6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e03f      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80021ec:	4293      	cmp	r3, r2
 80021ee:	dc02      	bgt.n	80021f6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e037      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80021fc:	4293      	cmp	r3, r2
 80021fe:	dc02      	bgt.n	8002206 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8002200:	2302      	movs	r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e02f      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f245 1240 	movw	r2, #20800	; 0x5140
 800220c:	4293      	cmp	r3, r2
 800220e:	dc02      	bgt.n	8002216 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8002210:	2303      	movs	r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e027      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f647 2212 	movw	r2, #31250	; 0x7a12
 800221c:	4293      	cmp	r3, r2
 800221e:	dc02      	bgt.n	8002226 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8002220:	2304      	movs	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e01f      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 800222c:	4293      	cmp	r3, r2
 800222e:	dc02      	bgt.n	8002236 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8002230:	2305      	movs	r3, #5
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e017      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f24f 4224 	movw	r2, #62500	; 0xf424
 800223c:	4293      	cmp	r3, r2
 800223e:	dc02      	bgt.n	8002246 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8002240:	2306      	movs	r3, #6
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e00f      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	dc02      	bgt.n	8002254 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800224e:	2307      	movs	r3, #7
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e008      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	dc02      	bgt.n	8002262 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 800225c:	2308      	movs	r3, #8
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e001      	b.n	8002266 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8002262:	2309      	movs	r3, #9
 8002264:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8002266:	211d      	movs	r1, #29
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fcf3 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 800226e:	4603      	mov	r3, r0
 8002270:	b25b      	sxtb	r3, r3
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	b25a      	sxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	211d      	movs	r1, #29
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fcb3 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0001e848 	.word	0x0001e848
 800229c:	0003d090 	.word	0x0003d090

080022a0 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	dc02      	bgt.n	80022b6 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80022b0:	2305      	movs	r3, #5
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	e004      	b.n	80022c0 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	dd01      	ble.n	80022c0 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 80022bc:	2308      	movs	r3, #8
 80022be:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3b04      	subs	r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80022c6:	211d      	movs	r1, #29
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fcc3 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	f023 030e 	bic.w	r3, r3, #14
 80022d6:	b25a      	sxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	211d      	movs	r1, #29
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fc83 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002304:	211d      	movs	r1, #29
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fca4 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 800230c:	4603      	mov	r3, r0
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	211d      	movs	r1, #29
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fc6b 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002334:	211d      	movs	r1, #29
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fc8c 	bl	8001c54 <_ZN10RFM95_LoRa12readRegisterEh>
 800233c:	4603      	mov	r3, r0
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	211d      	movs	r1, #29
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fc53 	bl	8001bf4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 8002360:	4914      	ldr	r1, [pc, #80]	; (80023b4 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff feac 	bl	80020c0 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002368:	2201      	movs	r2, #1
 800236a:	2111      	movs	r1, #17
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fe6a 	bl	8002046 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8002372:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff28 	bl	80021cc <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 800237c:	210c      	movs	r1, #12
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fee4 	bl	800214c <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002384:	2105      	movs	r1, #5
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff8a 	bl	80022a0 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 800238c:	490a      	ldr	r1, [pc, #40]	; (80023b8 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fc82 	bl	8001c98 <_ZN10RFM95_LoRa5beginEl>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	33bca100 	.word	0x33bca100
 80023b8:	339e1c80 	.word	0x339e1c80

080023bc <_ZNK13DriveSettings16getClampingSpeedEv>:
 *  Created on: 22.10.2022
 *      Author: marce
 */
#include "DriveSettings.h"

uint16_t DriveSettings::getClampingSpeed() const {
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	891b      	ldrh	r3, [r3, #8]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	811a      	strh	r2, [r3, #8]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_ZNK13DriveSettings17getClampingTorqueEv>:



uint16_t DriveSettings::getClampingTorque() const {
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	889b      	ldrh	r3, [r3, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	809a      	strh	r2, [r3, #4]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_ZNK13DriveSettings16getDeviceAddressEv>:



uint8_t DriveSettings::getDeviceAddress() const {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781b      	ldrb	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_ZNK13DriveSettings12getInPosDiffEv>:
	this->deviceAddress = deviceAddress;
}



uint16_t DriveSettings::getInPosDiff() const {
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	899b      	ldrh	r3, [r3, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	819a      	strh	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_ZNK13DriveSettings18getOpeningDistanceEv>:



uint16_t DriveSettings::getOpeningDistance() const {
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	return openingDistance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	89db      	ldrh	r3, [r3, #14]
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	887a      	ldrh	r2, [r7, #2]
 800249e:	81da      	strh	r2, [r3, #14]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZNK13DriveSettings21getOverCurrentWarningEv>:
void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold) {
	this->overCurrentTimeThreshold = overCurrentTimeThreshold;
}

uint16_t DriveSettings::getOverCurrentWarning() const {
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8a9b      	ldrh	r3, [r3, #20]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	829a      	strh	r2, [r3, #20]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8adb      	ldrh	r3, [r3, #22]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	82da      	strh	r2, [r3, #22]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	895b      	ldrh	r3, [r3, #10]
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	815a      	strh	r2, [r3, #10]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	88db      	ldrh	r3, [r3, #6]
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	80da      	strh	r2, [r3, #6]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	return teachTroque;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	885b      	ldrh	r3, [r3, #2]
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	805a      	strh	r2, [r3, #2]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8a5b      	ldrh	r3, [r3, #18]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	825a      	strh	r2, [r3, #18]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8a1b      	ldrh	r3, [r3, #16]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	821a      	strh	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	705a      	strb	r2, [r3, #1]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	709a      	strb	r2, [r3, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	70da      	strb	r2, [r3, #3]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	711a      	strb	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	715a      	strb	r2, [r3, #5]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	719a      	strb	r2, [r3, #6]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	71da      	strb	r2, [r3, #7]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	721a      	strb	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	725a      	strb	r2, [r3, #9]
{
}
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	return close;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	781b      	ldrb	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
	return open;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	785b      	ldrb	r3, [r3, #1]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	705a      	strb	r2, [r3, #1]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_ZN12DriveCommand10setDisableEb>:
{
	return disable;
}

void DriveCommand::setDisable(bool disable)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	719a      	strb	r2, [r3, #6]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <_ZN12DriveCommand9setEnableEb>:
{
	return enable;
}

void DriveCommand::setEnable(bool enable)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	711a      	strb	r2, [r3, #4]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZN12DriveCommand8setResetEb>:
{
	return reset;
}

void DriveCommand::setReset(bool reset)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	70da      	strb	r2, [r3, #3]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	return stop;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	795b      	ldrb	r3, [r3, #5]
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	715a      	strb	r2, [r3, #5]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <_ZN12DriveCommand8setTeachEb>:
{
	return teach;
}

void DriveCommand::setTeach(bool teach)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	789b      	ldrb	r3, [r3, #2]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	429a      	cmp	r2, r3
 8002788:	d002      	beq.n	8002790 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	709a      	strb	r2, [r3, #2]
	}

}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	return close;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	785b      	ldrb	r3, [r3, #1]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d005      	beq.n	80027d6 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	751a      	strb	r2, [r3, #20]
	}
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	return open;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	789b      	ldrb	r3, [r3, #2]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	789b      	ldrb	r3, [r3, #2]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	429a      	cmp	r2, r3
 800280e:	d005      	beq.n	800281c <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	751a      	strb	r2, [r3, #20]
	}
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	return disable;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	79db      	ldrb	r3, [r3, #7]
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	79db      	ldrb	r3, [r3, #7]
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	429a      	cmp	r2, r3
 8002854:	d005      	beq.n	8002862 <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	751a      	strb	r2, [r3, #20]
	}
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
	return enable;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	795b      	ldrb	r3, [r3, #5]
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	795b      	ldrb	r3, [r3, #5]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	429a      	cmp	r2, r3
 800289a:	d005      	beq.n	80028a8 <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	751a      	strb	r2, [r3, #20]
	}
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	return reset;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	791b      	ldrb	r3, [r3, #4]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d005      	beq.n	80028ee <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	751a      	strb	r2, [r3, #20]
	}
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	return stop;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	799b      	ldrb	r3, [r3, #6]
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	799b      	ldrb	r3, [r3, #6]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	429a      	cmp	r2, r3
 8002926:	d005      	beq.n	8002934 <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	751a      	strb	r2, [r3, #20]
	}
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	return teach;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	78db      	ldrb	r3, [r3, #3]
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	429a      	cmp	r2, r3
 800296c:	d005      	beq.n	800297a <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	751a      	strb	r2, [r3, #20]
	}
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	return this->error;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	781b      	ldrb	r3, [r3, #0]
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_ZNK11DriveStatus9getStatusEv>:
		statusChanged = true;
	}
}

uint8_t DriveStatus::getStatus() const
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	795b      	ldrb	r3, [r3, #5]
 80029aa:	01db      	lsls	r3, r3, #7
 80029ac:	b25a      	sxtb	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	789b      	ldrb	r3, [r3, #2]
 80029b2:	019b      	lsls	r3, r3, #6
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b25a      	sxtb	r2, r3
			| (uint8_t) close << 5 | (uint8_t) teach << 4 | (uint8_t) stop << 3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b25a      	sxtb	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	78db      	ldrb	r3, [r3, #3]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	b25a      	sxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	799b      	ldrb	r3, [r3, #6]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 80029de:	73fb      	strb	r3, [r7, #15]

	return result;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_ZN11DriveStatus10setCurrentEt>:
		return (current - zeroCurrentValue) * ADC_2_CURRENT;
	}
}

void DriveStatus::setCurrent(uint16_t current)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
	this->current = current;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	887a      	ldrh	r2, [r7, #2]
 80029fe:	811a      	strh	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN11DriveStatus11setZCurrentEt>:
{
	return zeroCurrentValue;
}

void DriveStatus::setZCurrent(uint16_t zeroCurrentValueADC)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
	this->zeroCurrentValue = zeroCurrentValue;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	895a      	ldrh	r2, [r3, #10]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	815a      	strh	r2, [r3, #10]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_ZN11DriveStatus10setVoltageEt>:
{
	return voltage * ADC_2_VOLTAGE;
}

void DriveStatus::setVoltage(uint16_t voltageADC)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
	this->voltage = voltage;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	899a      	ldrh	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	819a      	strh	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_ZN11DriveStatus11setPositionEt>:
{
	return position;
}

void DriveStatus::setPosition(uint16_t position)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	81da      	strh	r2, [r3, #14]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <_ZN11TaskHandler11UpdateTasksEv>:
#include "TaskHandler.h"
#include "main.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

	//1ms


	//2ms
	if(counter % 2 == 0){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	899b      	ldrh	r3, [r3, #12]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	711a      	strb	r2, [r3, #4]
	}


	//15ms
	if(counter % 15 == 0){
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	899a      	ldrh	r2, [r3, #12]
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	08d9      	lsrs	r1, r3, #3
 8002a92:	460b      	mov	r3, r1
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a5b      	subs	r3, r3, r1
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	709a      	strb	r2, [r3, #2]
	if(counter % 50 == 0){
		//comTask = true;
	}

	//100ms
	if(counter % 100 == 0){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	899b      	ldrh	r3, [r3, #12]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 8002ab2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ab6:	0952      	lsrs	r2, r2, #5
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	fb01 f202 	mul.w	r2, r1, r2
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <_ZN11TaskHandler11UpdateTasksEv+0x60>
		errorTask = true;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
	}

	//250ms
	if(counter % 250 == 0){
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	899b      	ldrh	r3, [r3, #12]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002ad2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ad6:	0912      	lsrs	r2, r2, #4
 8002ad8:	21fa      	movs	r1, #250	; 0xfa
 8002ada:	fb01 f202 	mul.w	r2, r1, r2
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <_ZN11TaskHandler11UpdateTasksEv+0x80>
		comTask = true;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	899b      	ldrh	r3, [r3, #12]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002af2:	fba2 1203 	umull	r1, r2, r2, r3
 8002af6:	0952      	lsrs	r2, r2, #5
 8002af8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002afc:	fb01 f202 	mul.w	r2, r1, r2
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		ledTask = true;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	715a      	strb	r2, [r3, #5]
	}

	//increment counter
	if(counter > 2999){
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	899b      	ldrh	r3, [r3, #12]
 8002b12:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d903      	bls.n	8002b22 <_ZN11TaskHandler11UpdateTasksEv+0xb6>
		counter = 1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 8002b20:	e005      	b.n	8002b2e <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		counter++;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	899b      	ldrh	r3, [r3, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	819a      	strh	r2, [r3, #12]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	88888889 	.word	0x88888889
 8002b40:	51eb851f 	.word	0x51eb851f
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	79db      	ldrb	r3, [r3, #7]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	789b      	ldrb	r3, [r3, #2]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7a1b      	ldrb	r3, [r3, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	799b      	ldrb	r3, [r3, #6]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7a5b      	ldrb	r3, [r3, #9]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	70da      	strb	r2, [r3, #3]
	return ioUpdateTaskTemp;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_ZN11TaskHandler15isADCUpdateTaskEv>:


bool TaskHandler::isADCUpdateTask() {
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7a9b      	ldrb	r3, [r3, #10]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
	adcUpdateTask = false;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	711a      	strb	r2, [r3, #4]
	return adcUpdateTaskTemp;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_ZN11TaskHandler9isLEDTaskEv>:

bool TaskHandler::isLEDTask(){
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	795b      	ldrb	r3, [r3, #5]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7adb      	ldrb	r3, [r3, #11]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>:




void TaskHandler::setAdcUpdateTaskEnable(bool adcUpdateTaskEnable ) {
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
	this->adcUpdateTaskEnable = adcUpdateTaskEnable;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	729a      	strb	r2, [r3, #10]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <_ZN11TaskHandler18setDriveTaskEnableEb>:
void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
	this->comTaskEnable = comTaskEnable;
}


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	721a      	strb	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b299      	uxth	r1, r3
 8002cd2:	787b      	ldrb	r3, [r7, #1]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d10:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <MX_ADC1_Init+0x104>)
 8002d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d2e:	2204      	movs	r2, #4
 8002d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d40:	2202      	movs	r2, #2
 8002d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d4e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d72:	481e      	ldr	r0, [pc, #120]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d74:	f001 f8c8 	bl	8003f08 <HAL_ADC_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002d7e:	f000 fa27 	bl	80031d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4817      	ldr	r0, [pc, #92]	; (8002dec <MX_ADC1_Init+0x100>)
 8002d8e:	f002 f98d 	bl	80050ac <HAL_ADCEx_MultiModeConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002d98:	f000 fa1a 	bl	80031d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_ADC1_Init+0x108>)
 8002d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002da0:	2306      	movs	r3, #6
 8002da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002da4:	2303      	movs	r3, #3
 8002da6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002da8:	237f      	movs	r3, #127	; 0x7f
 8002daa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002dac:	2304      	movs	r3, #4
 8002dae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <MX_ADC1_Init+0x100>)
 8002dba:	f001 fb1f 	bl	80043fc <HAL_ADC_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002dc4:	f000 fa04 	bl	80031d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <MX_ADC1_Init+0x10c>)
 8002dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002dcc:	230c      	movs	r3, #12
 8002dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_ADC1_Init+0x100>)
 8002dd6:	f001 fb11 	bl	80043fc <HAL_ADC_ConfigChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002de0:	f000 f9f6 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000021c 	.word	0x2000021c
 8002df0:	50040000 	.word	0x50040000
 8002df4:	19200040 	.word	0x19200040
 8002df8:	1d500080 	.word	0x1d500080

08002dfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d14f      	bne.n	8002ebe <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 8002e4e:	2306      	movs	r3, #6
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e52:	230b      	movs	r3, #11
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e64:	f002 fd0e 	bl	8005884 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_ADC_MspInit+0xd8>)
 8002e6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ea2:	480b      	ldr	r0, [pc, #44]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002ea4:	f002 fab8 	bl	8005418 <HAL_DMA_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8002eae:	f000 f98f 	bl	80031d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	50040000 	.word	0x50040000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	20000280 	.word	0x20000280
 8002ed4:	40020008 	.word	0x40020008

08002ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_DMA_Init+0x38>)
 8002ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <MX_DMA_Init+0x38>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6493      	str	r3, [r2, #72]	; 0x48
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_DMA_Init+0x38>)
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200b      	movs	r0, #11
 8002efc:	f002 fa55 	bl	80053aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f00:	200b      	movs	r0, #11
 8002f02:	f002 fa6e 	bl	80053e2 <HAL_NVIC_EnableIRQ>

}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4a46      	ldr	r2, [pc, #280]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	4a40      	ldr	r2, [pc, #256]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f7e:	4b38      	ldr	r3, [pc, #224]	; (8003060 <MX_GPIO_Init+0x14c>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2119      	movs	r1, #25
 8002f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f92:	f002 fe01 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2190      	movs	r1, #144	; 0x90
 8002f9a:	4832      	ldr	r0, [pc, #200]	; (8003064 <MX_GPIO_Init+0x150>)
 8002f9c:	f002 fdfc 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 8002fa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	482c      	ldr	r0, [pc, #176]	; (8003068 <MX_GPIO_Init+0x154>)
 8002fb6:	f002 fc65 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 8002fba:	2319      	movs	r3, #25
 8002fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd4:	f002 fc56 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8002fd8:	2323      	movs	r3, #35	; 0x23
 8002fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	481e      	ldr	r0, [pc, #120]	; (8003064 <MX_GPIO_Init+0x150>)
 8002fec:	f002 fc4a 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003008:	f002 fc3c 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 800300c:	2390      	movs	r3, #144	; 0x90
 800300e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	4810      	ldr	r0, [pc, #64]	; (8003064 <MX_GPIO_Init+0x150>)
 8003024:	f002 fc2e 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302c:	2303      	movs	r3, #3
 800302e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <MX_GPIO_Init+0x150>)
 800303c:	f002 fc22 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003040:	2308      	movs	r3, #8
 8003042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003044:	2303      	movs	r3, #3
 8003046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	4806      	ldr	r0, [pc, #24]	; (800306c <MX_GPIO_Init+0x158>)
 8003054:	f002 fc16 	bl	8005884 <HAL_GPIO_Init>

}
 8003058:	bf00      	nop
 800305a:	3728      	adds	r7, #40	; 0x28
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	48000400 	.word	0x48000400
 8003068:	48000800 	.word	0x48000800
 800306c:	48001c00 	.word	0x48001c00

08003070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003074:	f000 fc79 	bl	800396a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003078:	f000 f818 	bl	80030ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800307c:	f7ff ff4a 	bl	8002f14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003080:	f7ff fe34 	bl	8002cec <MX_ADC1_Init>
  MX_DMA_Init();
 8003084:	f7ff ff28 	bl	8002ed8 <MX_DMA_Init>
  MX_SPI1_Init();
 8003088:	f000 f8c6 	bl	8003218 <MX_SPI1_Init>
  MX_TIM1_Init();
 800308c:	f000 fa28 	bl	80034e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003090:	f000 fa80 	bl	8003594 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003094:	f00b f95a 	bl	800e34c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8003098:	f000 fae2 	bl	8003660 <MX_TIM6_Init>
  MX_TIM16_Init();
 800309c:	f000 fb16 	bl	80036cc <MX_TIM16_Init>


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <main+0x38>)
 80030a2:	f7fd fb5b 	bl	800075c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <main+0x36>
 80030a8:	200002c8 	.word	0x200002c8

080030ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b096      	sub	sp, #88	; 0x58
 80030b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	2244      	movs	r2, #68	; 0x44
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00b ff5e 	bl	800ef7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c0:	463b      	mov	r3, r7
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030d2:	f004 fb2d 	bl	8007730 <HAL_PWREx_ControlVoltageScaling>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80030e6:	f000 f873 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80030ea:	2312      	movs	r3, #18
 80030ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030f4:	2340      	movs	r3, #64	; 0x40
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030f8:	2301      	movs	r3, #1
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003100:	23b0      	movs	r3, #176	; 0xb0
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003104:	2302      	movs	r3, #2
 8003106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003108:	2302      	movs	r3, #2
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800310c:	2301      	movs	r3, #1
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003110:	2308      	movs	r3, #8
 8003112:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003114:	2302      	movs	r3, #2
 8003116:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003118:	2302      	movs	r3, #2
 800311a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fb6b 	bl	80077fc <HAL_RCC_OscConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8003136:	f000 f84b 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800313a:	230f      	movs	r3, #15
 800313c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800313e:	2303      	movs	r3, #3
 8003140:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800314e:	463b      	mov	r3, r7
 8003150:	2103      	movs	r1, #3
 8003152:	4618      	mov	r0, r3
 8003154:	f004 ffb4 	bl	80080c0 <HAL_RCC_ClockConfig>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003168:	f000 f832 	bl	80031d0 <Error_Handler>
  }
}
 800316c:	bf00      	nop
 800316e:	3758      	adds	r7, #88	; 0x58
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d102      	bne.n	800318c <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003188:	f7ff fc70 	bl	8002a6c <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40014400 	.word	0x40014400
 8003198:	200002c8 	.word	0x200002c8

0800319c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a06      	ldr	r2, [pc, #24]	; (80031c4 <HAL_ADC_ConvCpltCallback+0x28>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <HAL_ADC_ConvCpltCallback+0x20>
		HAL_ADC_Stop_DMA(&hadc1);
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80031b0:	f001 f8ae 	bl	8004310 <HAL_ADC_Stop_DMA>
		appMain.ADCRead(hadc);
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4805      	ldr	r0, [pc, #20]	; (80031cc <HAL_ADC_ConvCpltCallback+0x30>)
 80031b8:	f7fd fc12 	bl	80009e0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	50040000 	.word	0x50040000
 80031c8:	2000021c 	.word	0x2000021c
 80031cc:	200002c8 	.word	0x200002c8

080031d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <Error_Handler+0x8>
	...

080031dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d102      	bne.n	80031fc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 80031f6:	4803      	ldr	r0, [pc, #12]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80031f8:	f7fd fa1e 	bl	8000638 <_ZN7AppMainC1Ev>
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200002c8 	.word	0x200002c8

08003208 <_GLOBAL__sub_I_appMain>:
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
 800320c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff ffe3 	bl	80031dc <_Z41__static_initialization_and_destruction_0ii>
 8003216:	bd80      	pop	{r7, pc}

08003218 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <MX_SPI1_Init+0x74>)
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <MX_SPI1_Init+0x78>)
 8003220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <MX_SPI1_Init+0x74>)
 8003224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <MX_SPI1_Init+0x74>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <MX_SPI1_Init+0x74>)
 8003232:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003236:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <MX_SPI1_Init+0x74>)
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <MX_SPI1_Init+0x74>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <MX_SPI1_Init+0x74>)
 8003246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <MX_SPI1_Init+0x74>)
 800324e:	2220      	movs	r2, #32
 8003250:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_SPI1_Init+0x74>)
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <MX_SPI1_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <MX_SPI1_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <MX_SPI1_Init+0x74>)
 8003266:	2207      	movs	r2, #7
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <MX_SPI1_Init+0x74>)
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <MX_SPI1_Init+0x74>)
 8003272:	2200      	movs	r2, #0
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003276:	4805      	ldr	r0, [pc, #20]	; (800328c <MX_SPI1_Init+0x74>)
 8003278:	f005 fa94 	bl	80087a4 <HAL_SPI_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003282:	f7ff ffa5 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000380 	.word	0x20000380
 8003290:	40013000 	.word	0x40013000

08003294 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_SPI_MspInit+0x7c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d128      	bne.n	8003308 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c0:	6613      	str	r3, [r2, #96]	; 0x60
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_SPI_MspInit+0x80>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032e6:	23e0      	movs	r3, #224	; 0xe0
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032f6:	2305      	movs	r3, #5
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003304:	f002 fabe 	bl	8005884 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40013000 	.word	0x40013000
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_MspInit+0x44>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_MspInit+0x44>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6613      	str	r3, [r2, #96]	; 0x60
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_MspInit+0x44>)
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_MspInit+0x44>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_MspInit+0x44>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_MspInit+0x44>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x4>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <MemManage_Handler+0x4>

08003372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>

0800337e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 fb32 	bl	8003a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <DMA1_Channel1_IRQHandler+0x10>)
 80033ba:	f002 f983 	bl	80056c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000280 	.word	0x20000280

080033c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80033ce:	f006 fa87 	bl	80098e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80033d2:	4803      	ldr	r0, [pc, #12]	; (80033e0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80033d4:	f006 fa84 	bl	80098e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200003e8 	.word	0x200003e8
 80033e0:	200004cc 	.word	0x200004cc

080033e4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM6_IRQHandler+0x10>)
 80033ea:	f006 fa79 	bl	80098e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000480 	.word	0x20000480

080033f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <USB_IRQHandler+0x10>)
 80033fe:	f002 fd36 	bl	8005e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200011c0 	.word	0x200011c0

0800340c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_kill>:

int _kill(int pid, int sig)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003426:	f00b fd77 	bl	800ef18 <__errno>
 800342a:	4603      	mov	r3, r0
 800342c:	2216      	movs	r2, #22
 800342e:	601a      	str	r2, [r3, #0]
	return -1;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_exit>:

void _exit (int status)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ffe7 	bl	800341c <_kill>
	while (1) {}		/* Make sure we hang here */
 800344e:	e7fe      	b.n	800344e <_exit+0x12>

08003450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <_sbrk+0x5c>)
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <_sbrk+0x60>)
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <_sbrk+0x64>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <_sbrk+0x68>)
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	429a      	cmp	r2, r3
 800347e:	d207      	bcs.n	8003490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003480:	f00b fd4a 	bl	800ef18 <__errno>
 8003484:	4603      	mov	r3, r0
 8003486:	220c      	movs	r2, #12
 8003488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	e009      	b.n	80034a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <_sbrk+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_sbrk+0x64>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <_sbrk+0x64>)
 80034a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000a000 	.word	0x2000a000
 80034b0:	00000400 	.word	0x00000400
 80034b4:	200003e4 	.word	0x200003e4
 80034b8:	200016f0 	.word	0x200016f0

080034bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <SystemInit+0x20>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <SystemInit+0x20>)
 80034c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f00b fd44 	bl	800ef7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f4:	463b      	mov	r3, r7
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <MX_TIM1_Init+0xac>)
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <MX_TIM1_Init+0xb0>)
 8003502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <MX_TIM1_Init+0xac>)
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <MX_TIM1_Init+0xac>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <MX_TIM1_Init+0xac>)
 8003512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <MX_TIM1_Init+0xac>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <MX_TIM1_Init+0xac>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <MX_TIM1_Init+0xac>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800352a:	2301      	movs	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003532:	2301      	movs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003542:	2301      	movs	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4619      	mov	r1, r3
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <MX_TIM1_Init+0xac>)
 8003556:	f006 f88f 	bl	8009678 <HAL_TIM_Encoder_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003560:	f7ff fe36 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003570:	463b      	mov	r3, r7
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_TIM1_Init+0xac>)
 8003576:	f006 ff17 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003580:	f7ff fe26 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3730      	adds	r7, #48	; 0x30
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200003e8 	.word	0x200003e8
 8003590:	40012c00 	.word	0x40012c00

08003594 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a6:	463b      	mov	r3, r7
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <MX_TIM2_Init+0xc8>)
 80035ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <MX_TIM2_Init+0xc8>)
 80035c2:	2214      	movs	r2, #20
 80035c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <MX_TIM2_Init+0xc8>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <MX_TIM2_Init+0xc8>)
 80035ce:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80035d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <MX_TIM2_Init+0xc8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <MX_TIM2_Init+0xc8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035e0:	481e      	ldr	r0, [pc, #120]	; (800365c <MX_TIM2_Init+0xc8>)
 80035e2:	f005 ff13 	bl	800940c <HAL_TIM_PWM_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80035ec:	f7ff fdf0 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035f8:	f107 031c 	add.w	r3, r7, #28
 80035fc:	4619      	mov	r1, r3
 80035fe:	4817      	ldr	r0, [pc, #92]	; (800365c <MX_TIM2_Init+0xc8>)
 8003600:	f006 fed2 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800360a:	f7ff fde1 	bl	80031d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360e:	2360      	movs	r3, #96	; 0x60
 8003610:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 8003612:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003616:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003618:	2302      	movs	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003620:	463b      	mov	r3, r7
 8003622:	2200      	movs	r2, #0
 8003624:	4619      	mov	r1, r3
 8003626:	480d      	ldr	r0, [pc, #52]	; (800365c <MX_TIM2_Init+0xc8>)
 8003628:	f006 fa7a 	bl	8009b20 <HAL_TIM_PWM_ConfigChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003632:	f7ff fdcd 	bl	80031d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003636:	463b      	mov	r3, r7
 8003638:	2204      	movs	r2, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4807      	ldr	r0, [pc, #28]	; (800365c <MX_TIM2_Init+0xc8>)
 800363e:	f006 fa6f 	bl	8009b20 <HAL_TIM_PWM_ConfigChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003648:	f7ff fdc2 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800364c:	4803      	ldr	r0, [pc, #12]	; (800365c <MX_TIM2_Init+0xc8>)
 800364e:	f000 f90f 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000434 	.word	0x20000434

08003660 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <MX_TIM6_Init+0x64>)
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <MX_TIM6_Init+0x68>)
 8003674:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <MX_TIM6_Init+0x64>)
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <MX_TIM6_Init+0x64>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <MX_TIM6_Init+0x64>)
 8003684:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003688:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_TIM6_Init+0x64>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003690:	480c      	ldr	r0, [pc, #48]	; (80036c4 <MX_TIM6_Init+0x64>)
 8003692:	f005 fe0f 	bl	80092b4 <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800369c:	f7ff fd98 	bl	80031d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036a0:	2320      	movs	r3, #32
 80036a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <MX_TIM6_Init+0x64>)
 80036ae:	f006 fe7b 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80036b8:	f7ff fd8a 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000480 	.word	0x20000480
 80036c8:	40001000 	.word	0x40001000

080036cc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <MX_TIM16_Init+0x44>)
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <MX_TIM16_Init+0x48>)
 80036d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <MX_TIM16_Init+0x44>)
 80036d8:	2201      	movs	r2, #1
 80036da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <MX_TIM16_Init+0x44>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 31999;
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <MX_TIM16_Init+0x44>)
 80036e4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80036e8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <MX_TIM16_Init+0x44>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <MX_TIM16_Init+0x44>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <MX_TIM16_Init+0x44>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80036fc:	4804      	ldr	r0, [pc, #16]	; (8003710 <MX_TIM16_Init+0x44>)
 80036fe:	f005 fdd9 	bl	80092b4 <HAL_TIM_Base_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003708:	f7ff fd62 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200004cc 	.word	0x200004cc
 8003714:	40014400 	.word	0x40014400

08003718 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d131      	bne.n	800379e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003744:	6613      	str	r3, [r2, #96]	; 0x60
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_TIM_Encoder_MspInit+0x94>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800376a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800377c:	2301      	movs	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378a:	f002 f87b 	bl	8005884 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2019      	movs	r0, #25
 8003794:	f001 fe09 	bl	80053aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003798:	2019      	movs	r0, #25
 800379a:	f001 fe22 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800379e:	bf00      	nop
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d10b      	bne.n	80037da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_TIM_Base_MspInit+0x78>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d114      	bne.n	8003828 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	2036      	movs	r0, #54	; 0x36
 800381c:	f001 fdc5 	bl	80053aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003820:	2036      	movs	r0, #54	; 0x36
 8003822:	f001 fdde 	bl	80053e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003826:	e018      	b.n	800385a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0f      	ldr	r2, [pc, #60]	; (800386c <HAL_TIM_Base_MspInit+0x80>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d113      	bne.n	800385a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	6613      	str	r3, [r2, #96]	; 0x60
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_TIM_Base_MspInit+0x7c>)
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	2019      	movs	r0, #25
 8003850:	f001 fdab 	bl	80053aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003854:	2019      	movs	r0, #25
 8003856:	f001 fdc4 	bl	80053e2 <HAL_NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40001000 	.word	0x40001000
 8003868:	40021000 	.word	0x40021000
 800386c:	40014400 	.word	0x40014400

08003870 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d139      	bne.n	8003906 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038aa:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_TIM_MspPostInit+0xa0>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 80038c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038d4:	2301      	movs	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e2:	f001 ffcf 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 80038e6:	2308      	movs	r3, #8
 80038e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038f6:	2301      	movs	r3, #1
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4619      	mov	r1, r3
 8003900:	4804      	ldr	r0, [pc, #16]	; (8003914 <HAL_TIM_MspPostInit+0xa4>)
 8003902:	f001 ffbf 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	48000400 	.word	0x48000400

08003918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800391c:	f7ff fdce 	bl	80034bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <LoopForever+0x6>)
  ldr r1, =_edata
 8003922:	490d      	ldr	r1, [pc, #52]	; (8003958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <LoopForever+0xe>)
  movs r3, #0
 8003926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003928:	e002      	b.n	8003930 <LoopCopyDataInit>

0800392a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800392c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392e:	3304      	adds	r3, #4

08003930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003934:	d3f9      	bcc.n	800392a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003938:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <LoopForever+0x16>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800393c:	e001      	b.n	8003942 <LoopFillZerobss>

0800393e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003940:	3204      	adds	r2, #4

08003942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003944:	d3fb      	bcc.n	800393e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003946:	f00b faed 	bl	800ef24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800394a:	f7ff fb91 	bl	8003070 <main>

0800394e <LoopForever>:

LoopForever:
    b LoopForever
 800394e:	e7fe      	b.n	800394e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003950:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003958:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800395c:	0800f268 	.word	0x0800f268
  ldr r2, =_sbss
 8003960:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003964:	200016f0 	.word	0x200016f0

08003968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC1_2_IRQHandler>

0800396a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003974:	2003      	movs	r0, #3
 8003976:	f001 fd0d 	bl	8005394 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800397a:	200f      	movs	r0, #15
 800397c:	f000 f80e 	bl	800399c <HAL_InitTick>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	71fb      	strb	r3, [r7, #7]
 800398a:	e001      	b.n	8003990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800398c:	f7ff fcc4 	bl	8003318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003990:	79fb      	ldrb	r3, [r7, #7]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_InitTick+0x6c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d023      	beq.n	80039f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_InitTick+0x70>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_InitTick+0x6c>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039be:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fd19 	bl	80053fe <HAL_SYSTICK_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d809      	bhi.n	80039ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d8:	2200      	movs	r2, #0
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f001 fce3 	bl	80053aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_InitTick+0x74>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e007      	b.n	80039fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e004      	b.n	80039fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	e001      	b.n	80039fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	2000000c 	.word	0x2000000c
 8003a0c:	20000004 	.word	0x20000004
 8003a10:	20000008 	.word	0x20000008

08003a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x20>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_IncTick+0x24>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c
 8003a38:	20000518 	.word	0x20000518

08003a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_GetTick+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000518 	.word	0x20000518

08003a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff ffee 	bl	8003a3c <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d005      	beq.n	8003a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_Delay+0x44>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a7a:	bf00      	nop
 8003a7c:	f7ff ffde 	bl	8003a3c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8f7      	bhi.n	8003a7c <HAL_Delay+0x28>
  {
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000000c 	.word	0x2000000c

08003a9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <LL_ADC_SetOffset+0x44>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	03fff000 	.word	0x03fff000

08003b4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3360      	adds	r3, #96	; 0x60
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	615a      	str	r2, [r3, #20]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3330      	adds	r3, #48	; 0x30
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	211f      	movs	r1, #31
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	f003 011f 	and.w	r1, r3, #31
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b087      	sub	sp, #28
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3314      	adds	r3, #20
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0e5b      	lsrs	r3, r3, #25
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0d1b      	lsrs	r3, r3, #20
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2107      	movs	r1, #7
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0d1b      	lsrs	r3, r3, #20
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	431a      	orrs	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0318 	and.w	r3, r3, #24
 8003cca:	4908      	ldr	r1, [pc, #32]	; (8003cec <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ccc:	40d9      	lsrs	r1, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	0007ffff 	.word	0x0007ffff

08003cf0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d44:	d101      	bne.n	8003d4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003de4:	f043 0202 	orr.w	r2, r3, #2
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_IsEnabled+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_IsEnabled+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d101      	bne.n	8003e36 <LL_ADC_IsDisableOngoing+0x18>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <LL_ADC_IsDisableOngoing+0x1a>
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d101      	bne.n	8003eac <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d101      	bne.n	8003efa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e131      	b.n	8004186 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fe ff63 	bl	8002dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fef1 	bl	8003d30 <LL_ADC_IsDeepPowerDownEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fed7 	bl	8003d0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff0c 	bl	8003d80 <LL_ADC_IsInternalRegulatorEnabled>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d115      	bne.n	8003f9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fef0 	bl	8003d58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f78:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_ADC_Init+0x288>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	4a85      	ldr	r2, [pc, #532]	; (8004194 <HAL_ADC_Init+0x28c>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f8c:	e002      	b.n	8003f94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f9      	bne.n	8003f8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff feee 	bl	8003d80 <LL_ADC_IsInternalRegulatorEnabled>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff62 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 8003fd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 80ca 	bne.w	8004174 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80c6 	bne.w	8004174 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ff0:	f043 0202 	orr.w	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fefb 	bl	8003df8 <LL_ADC_IsEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d110      	bne.n	800402a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004008:	4863      	ldr	r0, [pc, #396]	; (8004198 <HAL_ADC_Init+0x290>)
 800400a:	f7ff fef5 	bl	8003df8 <LL_ADC_IsEnabled>
 800400e:	4604      	mov	r4, r0
 8004010:	4862      	ldr	r0, [pc, #392]	; (800419c <HAL_ADC_Init+0x294>)
 8004012:	f7ff fef1 	bl	8003df8 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	4323      	orrs	r3, r4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	485e      	ldr	r0, [pc, #376]	; (80041a0 <HAL_ADC_Init+0x298>)
 8004026:	f7ff fd39 	bl	8003a9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7e5b      	ldrb	r3, [r3, #25]
 800402e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004034:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800403a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004040:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004048:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	3b01      	subs	r3, #1
 800405e:	045b      	lsls	r3, r3, #17
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4b46      	ldr	r3, [pc, #280]	; (80041a4 <HAL_ADC_Init+0x29c>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fefa 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 80040a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ff1b 	bl	8003ee2 <LL_ADC_INJ_IsConversionOngoing>
 80040ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d13d      	bne.n	8004130 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d13a      	bne.n	8004130 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	f023 0302 	bic.w	r3, r3, #2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	69b9      	ldr	r1, [r7, #24]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d118      	bne.n	8004120 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004110:	430a      	orrs	r2, r1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e007      	b.n	8004130 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10c      	bne.n	8004152 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f023 010f 	bic.w	r1, r3, #15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
 8004150:	e007      	b.n	8004162 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020f 	bic.w	r2, r2, #15
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
 8004172:	e007      	b.n	8004184 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004184:	7ffb      	ldrb	r3, [r7, #31]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}
 800418e:	bf00      	nop
 8004190:	20000004 	.word	0x20000004
 8004194:	053e2d63 	.word	0x053e2d63
 8004198:	50040000 	.word	0x50040000
 800419c:	50040100 	.word	0x50040100
 80041a0:	50040300 	.word	0x50040300
 80041a4:	fff0c007 	.word	0xfff0c007

080041a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b4:	4850      	ldr	r0, [pc, #320]	; (80042f8 <HAL_ADC_Start_DMA+0x150>)
 80041b6:	f7ff fd9b 	bl	8003cf0 <LL_ADC_GetMultimode>
 80041ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fe67 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 808e 	bne.w	80042ea <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_Start_DMA+0x34>
 80041d8:	2302      	movs	r3, #2
 80041da:	e089      	b.n	80042f0 <HAL_ADC_Start_DMA+0x148>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d002      	beq.n	80041f6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	d172      	bne.n	80042dc <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fdb8 	bl	8004d6c <ADC_Enable>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d165      	bne.n	80042d2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a37      	ldr	r2, [pc, #220]	; (80042fc <HAL_ADC_Start_DMA+0x154>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d002      	beq.n	800422a <HAL_ADC_Start_DMA+0x82>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	e000      	b.n	800422c <HAL_ADC_Start_DMA+0x84>
 800422a:	4b35      	ldr	r3, [pc, #212]	; (8004300 <HAL_ADC_Start_DMA+0x158>)
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4293      	cmp	r3, r2
 8004232:	d002      	beq.n	800423a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f023 0206 	bic.w	r2, r3, #6
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	659a      	str	r2, [r3, #88]	; 0x58
 800425e:	e002      	b.n	8004266 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_ADC_Start_DMA+0x15c>)
 800426c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_ADC_Start_DMA+0x160>)
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_ADC_Start_DMA+0x164>)
 800427c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	221c      	movs	r2, #28
 8004284:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0210 	orr.w	r2, r2, #16
 800429c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3340      	adds	r3, #64	; 0x40
 80042b8:	4619      	mov	r1, r3
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f001 f963 	bl	8005588 <HAL_DMA_Start_IT>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fdba 	bl	8003e44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80042d0:	e00d      	b.n	80042ee <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80042da:	e008      	b.n	80042ee <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80042e8:	e001      	b.n	80042ee <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	50040300 	.word	0x50040300
 80042fc:	50040100 	.word	0x50040100
 8004300:	50040000 	.word	0x50040000
 8004304:	08004f37 	.word	0x08004f37
 8004308:	0800500f 	.word	0x0800500f
 800430c:	0800502b 	.word	0x0800502b

08004310 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_ADC_Stop_DMA+0x16>
 8004322:	2302      	movs	r3, #2
 8004324:	e051      	b.n	80043ca <HAL_ADC_Stop_DMA+0xba>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800432e:	2103      	movs	r1, #3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fc5f 	bl	8004bf4 <ADC_ConversionStop>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d13f      	bne.n	80043c0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d10f      	bne.n	800437e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f970 	bl	8005648 <HAL_DMA_Abort>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0210 	bic.w	r2, r2, #16
 800438c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fd6f 	bl	8004e78 <ADC_Disable>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e002      	b.n	80043a6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fd69 	bl	8004e78 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b0b6      	sub	sp, #216	; 0xd8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_ADC_ConfigChannel+0x22>
 800441a:	2302      	movs	r3, #2
 800441c:	e3d5      	b.n	8004bca <HAL_ADC_ConfigChannel+0x7ce>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fd32 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 83ba 	bne.w	8004bac <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d824      	bhi.n	800448a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	3b02      	subs	r3, #2
 8004446:	2b03      	cmp	r3, #3
 8004448:	d81b      	bhi.n	8004482 <HAL_ADC_ConfigChannel+0x86>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_ADC_ConfigChannel+0x54>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004461 	.word	0x08004461
 8004454:	08004469 	.word	0x08004469
 8004458:	08004471 	.word	0x08004471
 800445c:	08004479 	.word	0x08004479
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	220c      	movs	r2, #12
 8004464:	605a      	str	r2, [r3, #4]
          break;
 8004466:	e011      	b.n	800448c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2212      	movs	r2, #18
 800446c:	605a      	str	r2, [r3, #4]
          break;
 800446e:	e00d      	b.n	800448c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2218      	movs	r2, #24
 8004474:	605a      	str	r2, [r3, #4]
          break;
 8004476:	e009      	b.n	800448c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447e:	605a      	str	r2, [r3, #4]
          break;
 8004480:	e004      	b.n	800448c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2206      	movs	r2, #6
 8004486:	605a      	str	r2, [r3, #4]
          break;
 8004488:	e000      	b.n	800448c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800448a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	f7ff fbae 	bl	8003bfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fcf6 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 80044a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fd16 	bl	8003ee2 <LL_ADC_INJ_IsConversionOngoing>
 80044b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 81c1 	bne.w	8004846 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 81bc 	bne.w	8004846 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d6:	d10f      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	4619      	mov	r1, r3
 80044e4:	f7ff fbb5 	bl	8003c52 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fb5c 	bl	8003bae <LL_ADC_SetSamplingTimeCommonConfig>
 80044f6:	e00e      	b.n	8004516 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	461a      	mov	r2, r3
 8004506:	f7ff fba4 	bl	8003c52 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fb4c 	bl	8003bae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d00a      	beq.n	800454e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6919      	ldr	r1, [r3, #16]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004548:	f7ff fadc 	bl	8003b04 <LL_ADC_SetOffset>
 800454c:	e17b      	b.n	8004846 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff faf9 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 800455a:	4603      	mov	r3, r0
 800455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_ADC_ConfigChannel+0x17e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff faee 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004570:	4603      	mov	r3, r0
 8004572:	0e9b      	lsrs	r3, r3, #26
 8004574:	f003 021f 	and.w	r2, r3, #31
 8004578:	e01e      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x1bc>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fae3 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004586:	4603      	mov	r3, r0
 8004588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004590:	fa93 f3a3 	rbit	r3, r3
 8004594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800459c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e004      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80045ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x1d4>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0e9b      	lsrs	r3, r3, #26
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	e018      	b.n	8004602 <HAL_ADC_ConfigChannel+0x206>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80045e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80045ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80045f4:	2320      	movs	r3, #32
 80045f6:	e004      	b.n	8004602 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80045f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004602:	429a      	cmp	r2, r3
 8004604:	d106      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fab2 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fa96 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004620:	4603      	mov	r3, r0
 8004622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x244>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fa8b 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004636:	4603      	mov	r3, r0
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	f003 021f 	and.w	r2, r3, #31
 800463e:	e01e      	b.n	800467e <HAL_ADC_ConfigChannel+0x282>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fa80 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 800464c:	4603      	mov	r3, r0
 800464e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800465e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e004      	b.n	800467c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x29a>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	0e9b      	lsrs	r3, r3, #26
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	e018      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x2cc>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80046aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80046b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80046ba:	2320      	movs	r3, #32
 80046bc:	e004      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80046be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d106      	bne.n	80046da <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fa4f 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fa33 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x30a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fa28 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80046fc:	4603      	mov	r3, r0
 80046fe:	0e9b      	lsrs	r3, r3, #26
 8004700:	f003 021f 	and.w	r2, r3, #31
 8004704:	e01e      	b.n	8004744 <HAL_ADC_ConfigChannel+0x348>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fa1d 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004712:	4603      	mov	r3, r0
 8004714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800472c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e004      	b.n	8004742 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_ADC_ConfigChannel+0x360>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0e9b      	lsrs	r3, r3, #26
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	e016      	b.n	800478a <HAL_ADC_ConfigChannel+0x38e>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800476e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e004      	b.n	800478a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800478a:	429a      	cmp	r2, r3
 800478c:	d106      	bne.n	800479c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f9ee 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2103      	movs	r1, #3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f9d2 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x3cc>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2103      	movs	r1, #3
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f9c7 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80047be:	4603      	mov	r3, r0
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	f003 021f 	and.w	r2, r3, #31
 80047c6:	e017      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x3fc>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2103      	movs	r1, #3
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff f9bc 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80047e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80047e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e003      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80047ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x414>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	0e9b      	lsrs	r3, r3, #26
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	e011      	b.n	8004834 <HAL_ADC_ConfigChannel+0x438>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800481e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004820:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004828:	2320      	movs	r3, #32
 800482a:	e003      	b.n	8004834 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	fab3 f383 	clz	r3, r3
 8004832:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004834:	429a      	cmp	r2, r3
 8004836:	d106      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2200      	movs	r2, #0
 800483e:	2103      	movs	r1, #3
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff f999 	bl	8003b78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fad4 	bl	8003df8 <LL_ADC_IsEnabled>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 8140 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	461a      	mov	r2, r3
 8004866:	f7ff fa1f 	bl	8003ca8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	4a8f      	ldr	r2, [pc, #572]	; (8004aac <HAL_ADC_ConfigChannel+0x6b0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	f040 8131 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_ADC_ConfigChannel+0x4a2>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	0e9b      	lsrs	r3, r3, #26
 800488c:	3301      	adds	r3, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b09      	cmp	r3, #9
 8004894:	bf94      	ite	ls
 8004896:	2301      	movls	r3, #1
 8004898:	2300      	movhi	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e019      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x4d6>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80048ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80048b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80048b6:	2320      	movs	r3, #32
 80048b8:	e003      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80048ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	bf94      	ite	ls
 80048cc:	2301      	movls	r3, #1
 80048ce:	2300      	movhi	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d079      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x4f6>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	0e9b      	lsrs	r3, r3, #26
 80048e8:	3301      	adds	r3, #1
 80048ea:	069b      	lsls	r3, r3, #26
 80048ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f0:	e015      	b.n	800491e <HAL_ADC_ConfigChannel+0x522>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e003      	b.n	8004916 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3301      	adds	r3, #1
 8004918:	069b      	lsls	r3, r3, #26
 800491a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_ADC_ConfigChannel+0x542>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	0e9b      	lsrs	r3, r3, #26
 8004930:	3301      	adds	r3, #1
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	e017      	b.n	800496e <HAL_ADC_ConfigChannel+0x572>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800494c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e003      	b.n	8004962 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800495a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2101      	movs	r1, #1
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	ea42 0103 	orr.w	r1, r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x598>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	0e9b      	lsrs	r3, r3, #26
 8004984:	3301      	adds	r3, #1
 8004986:	f003 021f 	and.w	r2, r3, #31
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	051b      	lsls	r3, r3, #20
 8004992:	e018      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x5ca>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80049a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e003      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3301      	adds	r3, #1
 80049ba:	f003 021f 	and.w	r2, r3, #31
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c6:	430b      	orrs	r3, r1
 80049c8:	e081      	b.n	8004ace <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d107      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x5ea>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	3301      	adds	r3, #1
 80049de:	069b      	lsls	r3, r3, #26
 80049e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e4:	e015      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x616>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80049fe:	2320      	movs	r3, #32
 8004a00:	e003      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	fab3 f383 	clz	r3, r3
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	069b      	lsls	r3, r3, #26
 8004a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x636>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0e9b      	lsrs	r3, r3, #26
 8004a24:	3301      	adds	r3, #1
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	e017      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x666>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	fa93 f3a3 	rbit	r3, r3
 8004a3e:	61fb      	str	r3, [r7, #28]
  return result;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	e003      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	ea42 0103 	orr.w	r1, r2, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x692>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0e9b      	lsrs	r3, r3, #26
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f003 021f 	and.w	r2, r3, #31
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	3b1e      	subs	r3, #30
 8004a86:	051b      	lsls	r3, r3, #20
 8004a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	e01e      	b.n	8004acc <HAL_ADC_ConfigChannel+0x6d0>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	613b      	str	r3, [r7, #16]
  return result;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	e006      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x6bc>
 8004aaa:	bf00      	nop
 8004aac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b1e      	subs	r3, #30
 8004ac6:	051b      	lsls	r3, r3, #20
 8004ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004acc:	430b      	orrs	r3, r1
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	6892      	ldr	r2, [r2, #8]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7ff f8bd 	bl	8003c52 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d06c      	beq.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ae4:	483c      	ldr	r0, [pc, #240]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004ae6:	f7fe ffff 	bl	8003ae8 <LL_ADC_GetCommonPathInternalCh>
 8004aea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_ADC_ConfigChannel+0x7e0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d127      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d121      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d157      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b16:	4619      	mov	r1, r3
 8004b18:	482f      	ldr	r0, [pc, #188]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b1a:	f7fe ffd2 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_ADC_ConfigChannel+0x7e8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <HAL_ADC_ConfigChannel+0x7ec>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b38:	e002      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f9      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b46:	e03a      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_ADC_ConfigChannel+0x7f0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d113      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x77e>
 8004b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d12a      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b70:	4619      	mov	r1, r3
 8004b72:	4819      	ldr	r0, [pc, #100]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b74:	f7fe ffa5 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b78:	e021      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_ADC_ConfigChannel+0x7f4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d11c      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	480c      	ldr	r0, [pc, #48]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004ba6:	f7fe ff8c 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
 8004baa:	e008      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f043 0220 	orr.w	r2, r3, #32
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004bc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	37d8      	adds	r7, #216	; 0xd8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	80080000 	.word	0x80080000
 8004bd8:	50040300 	.word	0x50040300
 8004bdc:	c7520000 	.word	0xc7520000
 8004be0:	50040000 	.word	0x50040000
 8004be4:	20000004 	.word	0x20000004
 8004be8:	053e2d63 	.word	0x053e2d63
 8004bec:	cb840000 	.word	0xcb840000
 8004bf0:	80000001 	.word	0x80000001

08004bf4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f942 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 8004c10:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f963 	bl	8003ee2 <LL_ADC_INJ_IsConversionOngoing>
 8004c1c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8098 	beq.w	8004d5c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02a      	beq.n	8004c90 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7e5b      	ldrb	r3, [r3, #25]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d126      	bne.n	8004c90 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	7e1b      	ldrb	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d122      	bne.n	8004c90 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c4e:	e014      	b.n	8004c7a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4a45      	ldr	r2, [pc, #276]	; (8004d68 <ADC_ConversionStop+0x174>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d90d      	bls.n	8004c74 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0210 	orr.w	r2, r3, #16
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e074      	b.n	8004d5e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d1e3      	bne.n	8004c50 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2240      	movs	r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d014      	beq.n	8004cc0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff f8fa 	bl	8003e94 <LL_ADC_REG_IsConversionOngoing>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f8b7 	bl	8003e1e <LL_ADC_IsDisableOngoing>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff f8d6 	bl	8003e6c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d014      	beq.n	8004cf0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f909 	bl	8003ee2 <LL_ADC_INJ_IsConversionOngoing>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00c      	beq.n	8004cf0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f89f 	bl	8003e1e <LL_ADC_IsDisableOngoing>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f8e5 	bl	8003eba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d005      	beq.n	8004d02 <ADC_ConversionStop+0x10e>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d105      	bne.n	8004d08 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	617b      	str	r3, [r7, #20]
        break;
 8004d00:	e005      	b.n	8004d0e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d02:	2308      	movs	r3, #8
 8004d04:	617b      	str	r3, [r7, #20]
        break;
 8004d06:	e002      	b.n	8004d0e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d08:	2304      	movs	r3, #4
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d0e:	f7fe fe95 	bl	8003a3c <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d14:	e01b      	b.n	8004d4e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d16:	f7fe fe91 	bl	8003a3c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	d914      	bls.n	8004d4e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0210 	orr.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1dc      	bne.n	8004d16 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	a33fffff 	.word	0xa33fffff

08004d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f83b 	bl	8003df8 <LL_ADC_IsEnabled>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d169      	bne.n	8004e5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <ADC_Enable+0xfc>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f043 0210 	orr.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e055      	b.n	8004e5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fff6 	bl	8003da8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dbc:	482b      	ldr	r0, [pc, #172]	; (8004e6c <ADC_Enable+0x100>)
 8004dbe:	f7fe fe93 	bl	8003ae8 <LL_ADC_GetCommonPathInternalCh>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <ADC_Enable+0x104>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	4a28      	ldr	r2, [pc, #160]	; (8004e74 <ADC_Enable+0x108>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	099b      	lsrs	r3, r3, #6
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004de6:	e002      	b.n	8004dee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f9      	bne.n	8004de8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004df4:	f7fe fe22 	bl	8003a3c <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dfa:	e028      	b.n	8004e4e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe fff9 	bl	8003df8 <LL_ADC_IsEnabled>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe ffc9 	bl	8003da8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e16:	f7fe fe11 	bl	8003a3c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d914      	bls.n	8004e4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d00d      	beq.n	8004e4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f043 0210 	orr.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e007      	b.n	8004e5e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d1cf      	bne.n	8004dfc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	8000003f 	.word	0x8000003f
 8004e6c:	50040300 	.word	0x50040300
 8004e70:	20000004 	.word	0x20000004
 8004e74:	053e2d63 	.word	0x053e2d63

08004e78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe ffca 	bl	8003e1e <LL_ADC_IsDisableOngoing>
 8004e8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe ffb1 	bl	8003df8 <LL_ADC_IsEnabled>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d047      	beq.n	8004f2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d144      	bne.n	8004f2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 030d 	and.w	r3, r3, #13
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10c      	bne.n	8004eca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe ff8b 	bl	8003dd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ec2:	f7fe fdbb 	bl	8003a3c <HAL_GetTick>
 8004ec6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ec8:	e029      	b.n	8004f1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f043 0210 	orr.w	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e023      	b.n	8004f2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ee6:	f7fe fda9 	bl	8003a3c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d914      	bls.n	8004f1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f043 0210 	orr.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e007      	b.n	8004f2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1dc      	bne.n	8004ee6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d14b      	bne.n	8004fe8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d021      	beq.n	8004fae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fe30 	bl	8003bd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d032      	beq.n	8004fe0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d12b      	bne.n	8004fe0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11f      	bne.n	8004fe0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
 8004fac:	e018      	b.n	8004fe0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d111      	bne.n	8004fe0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f043 0201 	orr.w	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7fe f8db 	bl	800319c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fe6:	e00e      	b.n	8005006 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff f9f6 	bl	80043e6 <HAL_ADC_ErrorCallback>
}
 8004ffa:	e004      	b.n	8005006 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff f9d8 	bl	80043d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f043 0204 	orr.w	r2, r3, #4
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff f9c8 	bl	80043e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <LL_ADC_IsEnabled>:
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <LL_ADC_IsEnabled+0x18>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <LL_ADC_IsEnabled+0x1a>
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_ADC_REG_IsConversionOngoing>:
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d101      	bne.n	800509c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b09f      	sub	sp, #124	; 0x7c
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e089      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80050d2:	2300      	movs	r3, #0
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80050d6:	2300      	movs	r3, #0
 80050d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d102      	bne.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050e4:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	e001      	b.n	80050ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e068      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ffb8 	bl	8005084 <LL_ADC_REG_IsConversionOngoing>
 8005114:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff ffb2 	bl	8005084 <LL_ADC_REG_IsConversionOngoing>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d14a      	bne.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005128:	2b00      	cmp	r3, #0
 800512a:	d147      	bne.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800512c:	4b30      	ldr	r3, [pc, #192]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800512e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d027      	beq.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800514a:	035b      	lsls	r3, r3, #13
 800514c:	430b      	orrs	r3, r1
 800514e:	431a      	orrs	r2, r3
 8005150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005152:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005154:	4824      	ldr	r0, [pc, #144]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005156:	f7ff ff82 	bl	800505e <LL_ADC_IsEnabled>
 800515a:	4604      	mov	r4, r0
 800515c:	4823      	ldr	r0, [pc, #140]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800515e:	f7ff ff7e 	bl	800505e <LL_ADC_IsEnabled>
 8005162:	4603      	mov	r3, r0
 8005164:	4323      	orrs	r3, r4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d132      	bne.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005172:	f023 030f 	bic.w	r3, r3, #15
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	6811      	ldr	r1, [r2, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	6892      	ldr	r2, [r2, #8]
 800517e:	430a      	orrs	r2, r1
 8005180:	431a      	orrs	r2, r3
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005186:	e023      	b.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005192:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005194:	4814      	ldr	r0, [pc, #80]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005196:	f7ff ff62 	bl	800505e <LL_ADC_IsEnabled>
 800519a:	4604      	mov	r4, r0
 800519c:	4813      	ldr	r0, [pc, #76]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800519e:	f7ff ff5e 	bl	800505e <LL_ADC_IsEnabled>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4323      	orrs	r3, r4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d112      	bne.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ba:	e009      	b.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80051ce:	e000      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80051de:	4618      	mov	r0, r3
 80051e0:	377c      	adds	r7, #124	; 0x7c
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd90      	pop	{r4, r7, pc}
 80051e6:	bf00      	nop
 80051e8:	50040000 	.word	0x50040000
 80051ec:	50040100 	.word	0x50040100
 80051f0:	50040300 	.word	0x50040300

080051f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <__NVIC_SetPriorityGrouping+0x44>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005210:	4013      	ands	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800521c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005226:	4a04      	ldr	r2, [pc, #16]	; (8005238 <__NVIC_SetPriorityGrouping+0x44>)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	60d3      	str	r3, [r2, #12]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005240:	4b04      	ldr	r3, [pc, #16]	; (8005254 <__NVIC_GetPriorityGrouping+0x18>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	0a1b      	lsrs	r3, r3, #8
 8005246:	f003 0307 	and.w	r3, r3, #7
}
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	2b00      	cmp	r3, #0
 8005268:	db0b      	blt.n	8005282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	f003 021f 	and.w	r2, r3, #31
 8005270:	4907      	ldr	r1, [pc, #28]	; (8005290 <__NVIC_EnableIRQ+0x38>)
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	2001      	movs	r0, #1
 800527a:	fa00 f202 	lsl.w	r2, r0, r2
 800527e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000e100 	.word	0xe000e100

08005294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	6039      	str	r1, [r7, #0]
 800529e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	db0a      	blt.n	80052be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	490c      	ldr	r1, [pc, #48]	; (80052e0 <__NVIC_SetPriority+0x4c>)
 80052ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	440b      	add	r3, r1
 80052b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052bc:	e00a      	b.n	80052d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4908      	ldr	r1, [pc, #32]	; (80052e4 <__NVIC_SetPriority+0x50>)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	3b04      	subs	r3, #4
 80052cc:	0112      	lsls	r2, r2, #4
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	440b      	add	r3, r1
 80052d2:	761a      	strb	r2, [r3, #24]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	e000e100 	.word	0xe000e100
 80052e4:	e000ed00 	.word	0xe000ed00

080052e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f1c3 0307 	rsb	r3, r3, #7
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf28      	it	cs
 8005306:	2304      	movcs	r3, #4
 8005308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3304      	adds	r3, #4
 800530e:	2b06      	cmp	r3, #6
 8005310:	d902      	bls.n	8005318 <NVIC_EncodePriority+0x30>
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	3b03      	subs	r3, #3
 8005316:	e000      	b.n	800531a <NVIC_EncodePriority+0x32>
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	401a      	ands	r2, r3
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005330:	f04f 31ff 	mov.w	r1, #4294967295
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	43d9      	mvns	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005340:	4313      	orrs	r3, r2
         );
}
 8005342:	4618      	mov	r0, r3
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3b01      	subs	r3, #1
 800535c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005360:	d301      	bcc.n	8005366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005362:	2301      	movs	r3, #1
 8005364:	e00f      	b.n	8005386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <SysTick_Config+0x40>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3b01      	subs	r3, #1
 800536c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800536e:	210f      	movs	r1, #15
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	f7ff ff8e 	bl	8005294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <SysTick_Config+0x40>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800537e:	4b04      	ldr	r3, [pc, #16]	; (8005390 <SysTick_Config+0x40>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	e000e010 	.word	0xe000e010

08005394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff29 	bl	80051f4 <__NVIC_SetPriorityGrouping>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	4603      	mov	r3, r0
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053bc:	f7ff ff3e 	bl	800523c <__NVIC_GetPriorityGrouping>
 80053c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	6978      	ldr	r0, [r7, #20]
 80053c8:	f7ff ff8e 	bl	80052e8 <NVIC_EncodePriority>
 80053cc:	4602      	mov	r2, r0
 80053ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff5d 	bl	8005294 <__NVIC_SetPriority>
}
 80053da:	bf00      	nop
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	4603      	mov	r3, r0
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ff31 	bl	8005258 <__NVIC_EnableIRQ>
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ffa2 	bl	8005350 <SysTick_Config>
 800540c:	4603      	mov	r3, r0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e098      	b.n	800555c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_DMA_Init+0x150>)
 8005432:	429a      	cmp	r2, r3
 8005434:	d80f      	bhi.n	8005456 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <HAL_DMA_Init+0x154>)
 800543e:	4413      	add	r3, r2
 8005440:	4a4b      	ldr	r2, [pc, #300]	; (8005570 <HAL_DMA_Init+0x158>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	009a      	lsls	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a48      	ldr	r2, [pc, #288]	; (8005574 <HAL_DMA_Init+0x15c>)
 8005452:	641a      	str	r2, [r3, #64]	; 0x40
 8005454:	e00e      	b.n	8005474 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_DMA_Init+0x160>)
 800545e:	4413      	add	r3, r2
 8005460:	4a43      	ldr	r2, [pc, #268]	; (8005570 <HAL_DMA_Init+0x158>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	009a      	lsls	r2, r3, #2
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a42      	ldr	r2, [pc, #264]	; (800557c <HAL_DMA_Init+0x164>)
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ce:	d039      	beq.n	8005544 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_DMA_Init+0x15c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d11a      	bne.n	8005510 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80054da:	4b29      	ldr	r3, [pc, #164]	; (8005580 <HAL_DMA_Init+0x168>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f003 031c 	and.w	r3, r3, #28
 80054e6:	210f      	movs	r1, #15
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	4924      	ldr	r1, [pc, #144]	; (8005580 <HAL_DMA_Init+0x168>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_DMA_Init+0x168>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f003 031c 	and.w	r3, r3, #28
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	491d      	ldr	r1, [pc, #116]	; (8005580 <HAL_DMA_Init+0x168>)
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
 800550e:	e019      	b.n	8005544 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <HAL_DMA_Init+0x16c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f003 031c 	and.w	r3, r3, #28
 800551c:	210f      	movs	r1, #15
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	4917      	ldr	r1, [pc, #92]	; (8005584 <HAL_DMA_Init+0x16c>)
 8005526:	4013      	ands	r3, r2
 8005528:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <HAL_DMA_Init+0x16c>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	f003 031c 	and.w	r3, r3, #28
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	4911      	ldr	r1, [pc, #68]	; (8005584 <HAL_DMA_Init+0x16c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40020407 	.word	0x40020407
 800556c:	bffdfff8 	.word	0xbffdfff8
 8005570:	cccccccd 	.word	0xcccccccd
 8005574:	40020000 	.word	0x40020000
 8005578:	bffdfbf8 	.word	0xbffdfbf8
 800557c:	40020400 	.word	0x40020400
 8005580:	400200a8 	.word	0x400200a8
 8005584:	400204a8 	.word	0x400204a8

08005588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_DMA_Start_IT+0x20>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e04b      	b.n	8005640 <HAL_DMA_Start_IT+0xb8>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d13a      	bne.n	8005632 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f91e 	bl	8005822 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 020e 	orr.w	r2, r2, #14
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e00f      	b.n	8005620 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 020a 	orr.w	r2, r2, #10
 800561e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e005      	b.n	800563e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800563a:	2302      	movs	r3, #2
 800563c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d008      	beq.n	8005672 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e022      	b.n	80056b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020e 	bic.w	r2, r2, #14
 8005680:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f003 021c 	and.w	r2, r3, #28
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2101      	movs	r1, #1
 80056a0:	fa01 f202 	lsl.w	r2, r1, r2
 80056a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	f003 031c 	and.w	r3, r3, #28
 80056e4:	2204      	movs	r2, #4
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d026      	beq.n	800573e <HAL_DMA_IRQHandler+0x7a>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d021      	beq.n	800573e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	f003 021c 	and.w	r2, r3, #28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2104      	movs	r1, #4
 8005726:	fa01 f202 	lsl.w	r2, r1, r2
 800572a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d071      	beq.n	8005818 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800573c:	e06c      	b.n	8005818 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	f003 031c 	and.w	r3, r3, #28
 8005746:	2202      	movs	r2, #2
 8005748:	409a      	lsls	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02e      	beq.n	80057b0 <HAL_DMA_IRQHandler+0xec>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d029      	beq.n	80057b0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 020a 	bic.w	r2, r2, #10
 8005778:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	f003 021c 	and.w	r2, r3, #28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2102      	movs	r1, #2
 8005790:	fa01 f202 	lsl.w	r2, r1, r2
 8005794:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d038      	beq.n	8005818 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80057ae:	e033      	b.n	8005818 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f003 031c 	and.w	r3, r3, #28
 80057b8:	2208      	movs	r2, #8
 80057ba:	409a      	lsls	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02a      	beq.n	800581a <HAL_DMA_IRQHandler+0x156>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d025      	beq.n	800581a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 020e 	bic.w	r2, r2, #14
 80057dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f003 021c 	and.w	r2, r3, #28
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2101      	movs	r1, #1
 80057ec:	fa01 f202 	lsl.w	r2, r1, r2
 80057f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005818:	bf00      	nop
 800581a:	bf00      	nop
}
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	f003 021c 	and.w	r2, r3, #28
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f202 	lsl.w	r2, r1, r2
 8005842:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b10      	cmp	r3, #16
 8005852:	d108      	bne.n	8005866 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005864:	e007      	b.n	8005876 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005892:	e14e      	b.n	8005b32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8140 	beq.w	8005b2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d005      	beq.n	80058c4 <HAL_GPIO_Init+0x40>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d130      	bne.n	8005926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	2203      	movs	r2, #3
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fa:	2201      	movs	r2, #1
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0201 	and.w	r2, r3, #1
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d017      	beq.n	8005962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	2203      	movs	r2, #3
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d123      	bne.n	80059b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	08da      	lsrs	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3208      	adds	r2, #8
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	08da      	lsrs	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3208      	adds	r2, #8
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	2203      	movs	r2, #3
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 809a 	beq.w	8005b2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f8:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <HAL_GPIO_Init+0x2cc>)
 80059fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fc:	4a54      	ldr	r2, [pc, #336]	; (8005b50 <HAL_GPIO_Init+0x2cc>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6613      	str	r3, [r2, #96]	; 0x60
 8005a04:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_GPIO_Init+0x2cc>)
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a10:	4a50      	ldr	r2, [pc, #320]	; (8005b54 <HAL_GPIO_Init+0x2d0>)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	3302      	adds	r3, #2
 8005a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	220f      	movs	r2, #15
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a3a:	d013      	beq.n	8005a64 <HAL_GPIO_Init+0x1e0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a46      	ldr	r2, [pc, #280]	; (8005b58 <HAL_GPIO_Init+0x2d4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00d      	beq.n	8005a60 <HAL_GPIO_Init+0x1dc>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a45      	ldr	r2, [pc, #276]	; (8005b5c <HAL_GPIO_Init+0x2d8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <HAL_GPIO_Init+0x1d8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a44      	ldr	r2, [pc, #272]	; (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_GPIO_Init+0x1d4>
 8005a54:	2303      	movs	r3, #3
 8005a56:	e006      	b.n	8005a66 <HAL_GPIO_Init+0x1e2>
 8005a58:	2307      	movs	r3, #7
 8005a5a:	e004      	b.n	8005a66 <HAL_GPIO_Init+0x1e2>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e002      	b.n	8005a66 <HAL_GPIO_Init+0x1e2>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <HAL_GPIO_Init+0x1e2>
 8005a64:	2300      	movs	r3, #0
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	f002 0203 	and.w	r2, r2, #3
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	4093      	lsls	r3, r2
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a76:	4937      	ldr	r1, [pc, #220]	; (8005b54 <HAL_GPIO_Init+0x2d0>)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a84:	4b37      	ldr	r3, [pc, #220]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005aa8:	4a2e      	ldr	r2, [pc, #184]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005aae:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ad2:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b02:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b26:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f47f aea9 	bne.w	8005894 <HAL_GPIO_Init+0x10>
  }
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40010000 	.word	0x40010000
 8005b58:	48000400 	.word	0x48000400
 8005b5c:	48000800 	.word	0x48000800
 8005b60:	48000c00 	.word	0x48000c00
 8005b64:	40010400 	.word	0x40010400

08005b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	887b      	ldrh	r3, [r7, #2]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e001      	b.n	8005b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bb4:	e002      	b.n	8005bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bb6:	887a      	ldrh	r2, [r7, #2]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bda:	887a      	ldrh	r2, [r7, #2]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4013      	ands	r3, r2
 8005be0:	041a      	lsls	r2, r3, #16
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	43d9      	mvns	r1, r3
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	400b      	ands	r3, r1
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	619a      	str	r2, [r3, #24]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	b08b      	sub	sp, #44	; 0x2c
 8005c00:	af06      	add	r7, sp, #24
 8005c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e109      	b.n	8005e22 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f008 fd84 	bl	800e730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f004 fc63 	bl	800a500 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	687e      	ldr	r6, [r7, #4]
 8005c42:	466d      	mov	r5, sp
 8005c44:	f106 0410 	add.w	r4, r6, #16
 8005c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c54:	1d33      	adds	r3, r6, #4
 8005c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c58:	6838      	ldr	r0, [r7, #0]
 8005c5a:	f004 fc29 	bl	800a4b0 <USB_CoreInit>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d8      	b.n	8005e22 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f004 fc5d 	bl	800a536 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]
 8005c80:	e04d      	b.n	8005d1e <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	440b      	add	r3, r1
 8005c92:	3305      	adds	r3, #5
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3304      	adds	r3, #4
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cae:	7bfa      	ldrb	r2, [r7, #15]
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	b298      	uxth	r0, r3
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	333a      	adds	r3, #58	; 0x3a
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3307      	adds	r3, #7
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	440b      	add	r3, r1
 8005cea:	333c      	adds	r3, #60	; 0x3c
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cf0:	7bfa      	ldrb	r2, [r7, #15]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3340      	adds	r3, #64	; 0x40
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d04:	7bfa      	ldrb	r2, [r7, #15]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	3344      	adds	r3, #68	; 0x44
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	7bfa      	ldrb	r2, [r7, #15]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d3ac      	bcc.n	8005c82 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	e044      	b.n	8005db8 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005d56:	7bfa      	ldrb	r2, [r7, #15]
 8005d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	440b      	add	r3, r1
 8005d68:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3301      	adds	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
 8005db8:	7bfa      	ldrb	r2, [r7, #15]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3b5      	bcc.n	8005d2e <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	687e      	ldr	r6, [r7, #4]
 8005dca:	466d      	mov	r5, sp
 8005dcc:	f106 0410 	add.w	r4, r6, #16
 8005dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ddc:	1d33      	adds	r3, r6, #4
 8005dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005de0:	6838      	ldr	r0, [r7, #0]
 8005de2:	f004 fbb5 	bl	800a550 <USB_DevInit>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e014      	b.n	8005e22 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fc55 	bl	80076c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f006 fdc1 	bl	800c9a2 <USB_DevDisconnect>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_PCD_Start+0x16>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e012      	b.n	8005e66 <HAL_PCD_Start+0x3c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f004 fb40 	bl	800a4d2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f006 fd8c 	bl	800c974 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f006 fda6 	bl	800c9cc <USB_ReadInterrupts>
 8005e80:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fb3e 	bl	800650e <PCD_EP_ISR_Handler>

    return;
 8005e92:	e110      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d013      	beq.n	8005ec6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f008 fcf1 	bl	800e89e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8fc 	bl	80060bc <HAL_PCD_SetAddress>

    return;
 8005ec4:	e0f7      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ee8:	e0e5      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f06:	b292      	uxth	r2, r2
 8005f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f0c:	e0d3      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d034      	beq.n	8005f82 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0204 	bic.w	r2, r2, #4
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0208 	bic.w	r2, r2, #8
 8005f42:	b292      	uxth	r2, r2
 8005f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f008 ff4f 	bl	800ee00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f008 fcd4 	bl	800e910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f80:	e099      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d027      	beq.n	8005fdc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0208 	orr.w	r2, r2, #8
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0204 	orr.w	r2, r2, #4
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f008 fc81 	bl	800e8dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005fda:	e06c      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d040      	beq.n	8006068 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff8:	b292      	uxth	r2, r2
 8005ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d12b      	bne.n	8006060 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0204 	orr.w	r2, r2, #4
 800601a:	b292      	uxth	r2, r2
 800601c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006028:	b29a      	uxth	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0208 	orr.w	r2, r2, #8
 8006032:	b292      	uxth	r2, r2
 8006034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006048:	b29b      	uxth	r3, r3
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006056:	2101      	movs	r1, #1
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f008 fed1 	bl	800ee00 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800605e:	e02a      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f008 fc3b 	bl	800e8dc <HAL_PCD_SuspendCallback>
    return;
 8006066:	e026      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00f      	beq.n	8006092 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006084:	b292      	uxth	r2, r2
 8006086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f008 fbf9 	bl	800e882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006090:	e011      	b.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00c      	beq.n	80060b6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ae:	b292      	uxth	r2, r2
 80060b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80060b4:	bf00      	nop
  }
}
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_PCD_SetAddress+0x1a>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e013      	b.n	80060fe <HAL_PCD_SetAddress+0x42>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f006 fc2c 	bl	800c94c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	4608      	mov	r0, r1
 8006110:	4611      	mov	r1, r2
 8006112:	461a      	mov	r2, r3
 8006114:	4603      	mov	r3, r0
 8006116:	70fb      	strb	r3, [r7, #3]
 8006118:	460b      	mov	r3, r1
 800611a:	803b      	strh	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	da0f      	bge.n	800614c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	4413      	add	r3, r2
 8006140:	3304      	adds	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	705a      	strb	r2, [r3, #1]
 800614a:	e00f      	b.n	800616c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	b2da      	uxtb	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006178:	883a      	ldrh	r2, [r7, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	78ba      	ldrb	r2, [r7, #2]
 8006182:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006196:	78bb      	ldrb	r3, [r7, #2]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d102      	bne.n	80061a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_PCD_EP_Open+0xaa>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e00e      	b.n	80061ce <HAL_PCD_EP_Open+0xc8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68f9      	ldr	r1, [r7, #12]
 80061be:	4618      	mov	r0, r3
 80061c0:	f004 f9e8 	bl	800a594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80061cc:	7afb      	ldrb	r3, [r7, #11]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0f      	bge.n	800620a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	705a      	strb	r2, [r3, #1]
 8006208:	e00f      	b.n	800622a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 0207 	and.w	r2, r3, #7
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	3304      	adds	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_PCD_EP_Close+0x6e>
 8006240:	2302      	movs	r3, #2
 8006242:	e00e      	b.n	8006262 <HAL_PCD_EP_Close+0x8c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	4618      	mov	r0, r3
 8006254:	f004 fd58 	bl	800ad08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	460b      	mov	r3, r1
 8006278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	f003 0207 	and.w	r2, r3, #7
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	3304      	adds	r3, #4
 8006292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2200      	movs	r2, #0
 80062a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2200      	movs	r2, #0
 80062aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6979      	ldr	r1, [r7, #20]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f004 ff0a 	bl	800b0e2 <USB_EPStartXfer>
 80062ce:	e005      	b.n	80062dc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f004 ff03 	bl	800b0e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	f003 0207 	and.w	r2, r3, #7
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	440b      	add	r3, r1
 8006304:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006308:	681b      	ldr	r3, [r3, #0]
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	460b      	mov	r3, r1
 8006324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	3304      	adds	r3, #4
 800633c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2200      	movs	r2, #0
 800635c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2201      	movs	r2, #1
 8006362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	b2da      	uxtb	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	4618      	mov	r0, r3
 8006382:	f004 feae 	bl	800b0e2 <USB_EPStartXfer>
 8006386:	e005      	b.n	8006394 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	4618      	mov	r0, r3
 8006390:	f004 fea7 	bl	800b0e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	f003 0207 	and.w	r2, r3, #7
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d901      	bls.n	80063bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e04e      	b.n	800645a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da0f      	bge.n	80063e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	3304      	adds	r3, #4
 80063da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	705a      	strb	r2, [r3, #1]
 80063e2:	e00d      	b.n	8006400 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	3304      	adds	r3, #4
 80063f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_PCD_EP_SetStall+0x82>
 800641c:	2302      	movs	r3, #2
 800641e:	e01c      	b.n	800645a <HAL_PCD_EP_SetStall+0xbc>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	4618      	mov	r0, r3
 8006430:	f006 f98d 	bl	800c74e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f006 face 	bl	800c9ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d901      	bls.n	8006480 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e042      	b.n	8006506 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006484:	2b00      	cmp	r3, #0
 8006486:	da0f      	bge.n	80064a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	3304      	adds	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	705a      	strb	r2, [r3, #1]
 80064a6:	e00f      	b.n	80064c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 0207 	and.w	r2, r3, #7
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	3304      	adds	r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_PCD_EP_ClrStall+0x86>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e00e      	b.n	8006506 <HAL_PCD_EP_ClrStall+0xa4>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f006 f97a 	bl	800c7f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b096      	sub	sp, #88	; 0x58
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006516:	e3a9      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006520:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006524:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006532:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 8169 	bne.w	800680e <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800653c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d150      	bne.n	80065ea <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	81fb      	strh	r3, [r7, #14]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	89fb      	ldrh	r3, [r7, #14]
 8006560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006568:	b29b      	uxth	r3, r3
 800656a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	332c      	adds	r3, #44	; 0x2c
 8006570:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4413      	add	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	441a      	add	r2, r3
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f008 f94f 	bl	800e84e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8357 	beq.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8352 	bne.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b292      	uxth	r2, r2
 80065dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80065e8:	e340      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80065fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	2b00      	cmp	r3, #0
 8006606:	d032      	beq.n	800666e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006610:	b29b      	uxth	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	4413      	add	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	4413      	add	r3, r2
 8006622:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006642:	b29b      	uxth	r3, r3
 8006644:	f006 fa20 	bl	800ca88 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29a      	uxth	r2, r3
 8006650:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006654:	4013      	ands	r3, r2
 8006656:	823b      	strh	r3, [r7, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	8a3a      	ldrh	r2, [r7, #16]
 800665e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006662:	b292      	uxth	r2, r2
 8006664:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f008 f8c4 	bl	800e7f4 <HAL_PCD_SetupStageCallback>
 800666c:	e2fe      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800666e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006672:	2b00      	cmp	r3, #0
 8006674:	f280 82fa 	bge.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006684:	4013      	ands	r3, r2
 8006686:	83fb      	strh	r3, [r7, #30]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	8bfa      	ldrh	r2, [r7, #30]
 800668e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006692:	b292      	uxth	r2, r2
 8006694:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	4413      	add	r3, r2
 80066b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80066ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d019      	beq.n	80066fa <PCD_EP_ISR_Handler+0x1ec>
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d015      	beq.n	80066fa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d4:	6959      	ldr	r1, [r3, #20]
 80066d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80066da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f006 f9d2 	bl	800ca88 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80066e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	441a      	add	r2, r3
 80066ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80066f2:	2100      	movs	r1, #0
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f008 f88f 	bl	800e818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006704:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 82ad 	bne.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
 8006712:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006716:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800671a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800671e:	f000 82a5 	beq.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	4413      	add	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b3e      	cmp	r3, #62	; 0x3e
 8006748:	d918      	bls.n	800677c <PCD_EP_ISR_Handler+0x26e>
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
 8006752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <PCD_EP_ISR_Handler+0x256>
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	3b01      	subs	r3, #1
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006766:	b29b      	uxth	r3, r3
 8006768:	029b      	lsls	r3, r3, #10
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e029      	b.n	80067d0 <PCD_EP_ISR_Handler+0x2c2>
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d112      	bne.n	80067aa <PCD_EP_ISR_Handler+0x29c>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678e:	b29a      	uxth	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e012      	b.n	80067d0 <PCD_EP_ISR_Handler+0x2c2>
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	647b      	str	r3, [r7, #68]	; 0x44
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <PCD_EP_ISR_Handler+0x2b6>
 80067be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c0:	3301      	adds	r3, #1
 80067c2:	647b      	str	r3, [r7, #68]	; 0x44
 80067c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e0:	827b      	strh	r3, [r7, #18]
 80067e2:	8a7b      	ldrh	r3, [r7, #18]
 80067e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067e8:	827b      	strh	r3, [r7, #18]
 80067ea:	8a7b      	ldrh	r3, [r7, #18]
 80067ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067f0:	827b      	strh	r3, [r7, #18]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	8a7b      	ldrh	r3, [r7, #18]
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
 800680c:	e22e      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006822:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006826:	2b00      	cmp	r3, #0
 8006828:	f280 80f7 	bge.w	8006a1a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29a      	uxth	r2, r3
 800683e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006842:	4013      	ands	r3, r2
 8006844:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800685a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800685e:	b292      	uxth	r2, r2
 8006860:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006862:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	3304      	adds	r3, #4
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	7b1b      	ldrb	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d123      	bne.n	80068ca <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	4413      	add	r3, r2
 800689c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80068aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 808e 	beq.w	80069d0 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ba:	6959      	ldr	r1, [r3, #20]
 80068bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068be:	88da      	ldrh	r2, [r3, #6]
 80068c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068c4:	f006 f8e0 	bl	800ca88 <USB_ReadPMA>
 80068c8:	e082      	b.n	80069d0 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80068ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d10a      	bne.n	80068e8 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80068d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80068d6:	461a      	mov	r2, r3
 80068d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9d4 	bl	8006c88 <HAL_PCD_EP_DB_Receive>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80068e6:	e073      	b.n	80069d0 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d022      	beq.n	800698c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694e:	b29b      	uxth	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4413      	add	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	4413      	add	r3, r2
 8006960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800696a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800696e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006972:	2b00      	cmp	r3, #0
 8006974:	d02c      	beq.n	80069d0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	6959      	ldr	r1, [r3, #20]
 800697e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006980:	891a      	ldrh	r2, [r3, #8]
 8006982:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006986:	f006 f87f 	bl	800ca88 <USB_ReadPMA>
 800698a:	e021      	b.n	80069d0 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	4413      	add	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80069b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	895a      	ldrh	r2, [r3, #10]
 80069c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069cc:	f006 f85c 	bl	800ca88 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80069d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069d8:	441a      	add	r2, r3
 80069da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80069de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069e6:	441a      	add	r2, r3
 80069e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <PCD_EP_ISR_Handler+0x4f2>
 80069f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80069f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d206      	bcs.n	8006a0e <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f007 ff06 	bl	800e818 <HAL_PCD_DataOutStageCallback>
 8006a0c:	e005      	b.n	8006a1a <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a14:	4618      	mov	r0, r3
 8006a16:	f004 fb64 	bl	800b0e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006a1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8122 	beq.w	8006c6c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006a28:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	78db      	ldrb	r3, [r3, #3]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f040 80a2 	bne.w	8006bc8 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a86:	2200      	movs	r2, #0
 8006a88:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8c:	7b1b      	ldrb	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8093 	beq.w	8006bba <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d046      	beq.n	8006b2e <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d126      	bne.n	8006af6 <PCD_EP_ISR_Handler+0x5e8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	4413      	add	r3, r2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	00da      	lsls	r2, r3, #3
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e061      	b.n	8006bba <PCD_EP_ISR_Handler+0x6ac>
 8006af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d15d      	bne.n	8006bba <PCD_EP_ISR_Handler+0x6ac>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	4413      	add	r3, r2
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	00da      	lsls	r2, r3, #3
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2200      	movs	r2, #0
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e045      	b.n	8006bba <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d126      	bne.n	8006b8a <PCD_EP_ISR_Handler+0x67c>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	4413      	add	r3, r2
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	00da      	lsls	r2, r3, #3
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	e017      	b.n	8006bba <PCD_EP_ISR_Handler+0x6ac>
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d113      	bne.n	8006bba <PCD_EP_ISR_Handler+0x6ac>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	4413      	add	r3, r2
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	00da      	lsls	r2, r3, #3
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f007 fe44 	bl	800e84e <HAL_PCD_DataInStageCallback>
 8006bc6:	e051      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006bc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d144      	bne.n	8006c5e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d907      	bls.n	8006c18 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	619a      	str	r2, [r3, #24]
 8006c16:	e002      	b.n	8006c1e <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8006c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f007 fe0e 	bl	800e84e <HAL_PCD_DataInStageCallback>
 8006c32:	e01b      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c3c:	441a      	add	r2, r3
 8006c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c40:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c4a:	441a      	add	r2, r3
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f004 fa43 	bl	800b0e2 <USB_EPStartXfer>
 8006c5c:	e006      	b.n	8006c6c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006c5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c62:	461a      	mov	r2, r3
 8006c64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f917 	bl	8006e9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b21b      	sxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f6ff ac4d 	blt.w	8006518 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3758      	adds	r7, #88	; 0x58
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d07c      	beq.n	8006d9a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	8b7b      	ldrh	r3, [r7, #26]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d306      	bcc.n	8006cde <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	8b7b      	ldrh	r3, [r7, #26]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	619a      	str	r2, [r3, #24]
 8006cdc:	e002      	b.n	8006ce4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d123      	bne.n	8006d34 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	833b      	strh	r3, [r7, #24]
 8006d08:	8b3b      	ldrh	r3, [r7, #24]
 8006d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d0e:	833b      	strh	r3, [r7, #24]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	8b3b      	ldrh	r3, [r7, #24]
 8006d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01f      	beq.n	8006d7e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	82fb      	strh	r3, [r7, #22]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006d7e:	8b7b      	ldrh	r3, [r7, #26]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8085 	beq.w	8006e90 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6959      	ldr	r1, [r3, #20]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	891a      	ldrh	r2, [r3, #8]
 8006d92:	8b7b      	ldrh	r3, [r7, #26]
 8006d94:	f005 fe78 	bl	800ca88 <USB_ReadPMA>
 8006d98:	e07a      	b.n	8006e90 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	4413      	add	r3, r2
 8006db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dbe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	8b7b      	ldrh	r3, [r7, #26]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d306      	bcc.n	8006dd8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	8b7b      	ldrh	r3, [r7, #26]
 8006dd0:	1ad2      	subs	r2, r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	619a      	str	r2, [r3, #24]
 8006dd6:	e002      	b.n	8006dde <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d123      	bne.n	8006e2e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	83fb      	strh	r3, [r7, #30]
 8006e02:	8bfb      	ldrh	r3, [r7, #30]
 8006e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e08:	83fb      	strh	r3, [r7, #30]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	8bfb      	ldrh	r3, [r7, #30]
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11f      	bne.n	8006e78 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	83bb      	strh	r3, [r7, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	8bbb      	ldrh	r3, [r7, #28]
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006e78:	8b7b      	ldrh	r3, [r7, #26]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6959      	ldr	r1, [r3, #20]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	895a      	ldrh	r2, [r3, #10]
 8006e8a:	8b7b      	ldrh	r3, [r7, #26]
 8006e8c:	f005 fdfc 	bl	800ca88 <USB_ReadPMA>
    }
  }

  return count;
 8006e90:	8b7b      	ldrh	r3, [r7, #26]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b0a2      	sub	sp, #136	; 0x88
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 81c5 	beq.w	800723e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	4413      	add	r3, r2
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d907      	bls.n	8006ef8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	699a      	ldr	r2, [r3, #24]
 8006eec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ef0:	1ad2      	subs	r2, r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	619a      	str	r2, [r3, #24]
 8006ef6:	e002      	b.n	8006efe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 80b9 	bne.w	800707a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d126      	bne.n	8006f5e <HAL_PCD_EP_DB_Transmit+0xc4>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	4413      	add	r3, r2
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	00da      	lsls	r2, r3, #3
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	4413      	add	r3, r2
 8006f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e01a      	b.n	8006f94 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d116      	bne.n	8006f94 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	4413      	add	r3, r2
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00da      	lsls	r2, r3, #3
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	4413      	add	r3, r2
 8006f88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	2200      	movs	r2, #0
 8006f92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	623b      	str	r3, [r7, #32]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d126      	bne.n	8006ff0 <HAL_PCD_EP_DB_Transmit+0x156>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	00da      	lsls	r2, r3, #3
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e017      	b.n	8007020 <HAL_PCD_EP_DB_Transmit+0x186>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d113      	bne.n	8007020 <HAL_PCD_EP_DB_Transmit+0x186>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	4413      	add	r3, r2
 8007008:	623b      	str	r3, [r7, #32]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	00da      	lsls	r2, r3, #3
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	4413      	add	r3, r2
 8007014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2200      	movs	r2, #0
 800701e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	4619      	mov	r1, r3
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f007 fc11 	bl	800e84e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 82d2 	beq.w	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	827b      	strh	r3, [r7, #18]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	8a7b      	ldrh	r3, [r7, #18]
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]
 8007078:	e2b0      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d021      	beq.n	80070c8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	f040 8284 	bne.w	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070dc:	441a      	add	r2, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070ea:	441a      	add	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d309      	bcc.n	8007110 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	621a      	str	r2, [r3, #32]
 800710e:	e015      	b.n	800713c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d107      	bne.n	8007128 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800711c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007126:	e009      	b.n	800713c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2200      	movs	r2, #0
 800713a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d155      	bne.n	80071f0 <HAL_PCD_EP_DB_Transmit+0x356>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	4413      	add	r3, r2
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	4413      	add	r3, r2
 8007166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
 800716c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716e:	2b3e      	cmp	r3, #62	; 0x3e
 8007170:	d916      	bls.n	80071a0 <HAL_PCD_EP_DB_Transmit+0x306>
 8007172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	64bb      	str	r3, [r7, #72]	; 0x48
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007184:	3b01      	subs	r3, #1
 8007186:	64bb      	str	r3, [r7, #72]	; 0x48
 8007188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007198:	b29a      	uxth	r2, r3
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e043      	b.n	8007228 <HAL_PCD_EP_DB_Transmit+0x38e>
 80071a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d112      	bne.n	80071cc <HAL_PCD_EP_DB_Transmit+0x332>
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e02d      	b.n	8007228 <HAL_PCD_EP_DB_Transmit+0x38e>
 80071cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_PCD_EP_DB_Transmit+0x348>
 80071dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071de:	3301      	adds	r3, #1
 80071e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e01b      	b.n	8007228 <HAL_PCD_EP_DB_Transmit+0x38e>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d117      	bne.n	8007228 <HAL_PCD_EP_DB_Transmit+0x38e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	643b      	str	r3, [r7, #64]	; 0x40
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720c:	4413      	add	r3, r2
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	00da      	lsls	r2, r3, #3
 8007216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007218:	4413      	add	r3, r2
 800721a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007222:	b29a      	uxth	r2, r3
 8007224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007226:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6959      	ldr	r1, [r3, #20]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	891a      	ldrh	r2, [r3, #8]
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	b29b      	uxth	r3, r3
 8007238:	f005 fbe4 	bl	800ca04 <USB_WritePMA>
 800723c:	e1ce      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007246:	b29b      	uxth	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	4413      	add	r3, r2
 8007258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007262:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800726e:	429a      	cmp	r2, r3
 8007270:	d307      	bcc.n	8007282 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800727a:	1ad2      	subs	r2, r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	619a      	str	r2, [r3, #24]
 8007280:	e002      	b.n	8007288 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 80c4 	bne.w	800741a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d126      	bne.n	80072e8 <HAL_PCD_EP_DB_Transmit+0x44e>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	66bb      	str	r3, [r7, #104]	; 0x68
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ae:	4413      	add	r3, r2
 80072b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	00da      	lsls	r2, r3, #3
 80072b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ba:	4413      	add	r3, r2
 80072bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072c0:	667b      	str	r3, [r7, #100]	; 0x64
 80072c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e01a      	b.n	800731e <HAL_PCD_EP_DB_Transmit+0x484>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d116      	bne.n	800731e <HAL_PCD_EP_DB_Transmit+0x484>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	673b      	str	r3, [r7, #112]	; 0x70
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fe:	b29b      	uxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007304:	4413      	add	r3, r2
 8007306:	673b      	str	r3, [r7, #112]	; 0x70
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	00da      	lsls	r2, r3, #3
 800730e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007310:	4413      	add	r3, r2
 8007312:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	2200      	movs	r2, #0
 800731c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d12f      	bne.n	800738c <HAL_PCD_EP_DB_Transmit+0x4f2>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007344:	4413      	add	r3, r2
 8007346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	00da      	lsls	r2, r3, #3
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007354:	4413      	add	r3, r2
 8007356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800735a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800735e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e017      	b.n	80073bc <HAL_PCD_EP_DB_Transmit+0x522>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d113      	bne.n	80073bc <HAL_PCD_EP_DB_Transmit+0x522>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073a2:	4413      	add	r3, r2
 80073a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80073b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b8:	2200      	movs	r2, #0
 80073ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f007 fa43 	bl	800e84e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 8104 	bne.w	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]
 8007418:	e0e0      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d121      	bne.n	8007468 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	441a      	add	r2, r3
 8007450:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007464:	b29b      	uxth	r3, r3
 8007466:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800746e:	2b01      	cmp	r3, #1
 8007470:	f040 80b4 	bne.w	80075dc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800747c:	441a      	add	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800748a:	441a      	add	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d309      	bcc.n	80074b0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6a1a      	ldr	r2, [r3, #32]
 80074a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a8:	1ad2      	subs	r2, r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	621a      	str	r2, [r3, #32]
 80074ae:	e015      	b.n	80074dc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d107      	bne.n	80074c8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80074b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074c6:	e009      	b.n	80074dc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	663b      	str	r3, [r7, #96]	; 0x60
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d155      	bne.n	8007596 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074fe:	4413      	add	r3, r2
 8007500:	65bb      	str	r3, [r7, #88]	; 0x58
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	00da      	lsls	r2, r3, #3
 8007508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800750a:	4413      	add	r3, r2
 800750c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007510:	657b      	str	r3, [r7, #84]	; 0x54
 8007512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007514:	2b3e      	cmp	r3, #62	; 0x3e
 8007516:	d916      	bls.n	8007546 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	677b      	str	r3, [r7, #116]	; 0x74
 800751e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <HAL_PCD_EP_DB_Transmit+0x694>
 8007528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752a:	3b01      	subs	r3, #1
 800752c:	677b      	str	r3, [r7, #116]	; 0x74
 800752e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007530:	b29b      	uxth	r3, r3
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e040      	b.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	2b00      	cmp	r3, #0
 800754a:	d112      	bne.n	8007572 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800754c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007556:	b29a      	uxth	r2, r3
 8007558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756a:	b29a      	uxth	r2, r3
 800756c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	e02a      	b.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	677b      	str	r3, [r7, #116]	; 0x74
 8007578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007584:	3301      	adds	r3, #1
 8007586:	677b      	str	r3, [r7, #116]	; 0x74
 8007588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800758a:	b29b      	uxth	r3, r3
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e018      	b.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d114      	bne.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x72e>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ac:	4413      	add	r3, r2
 80075ae:	663b      	str	r3, [r7, #96]	; 0x60
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00da      	lsls	r2, r3, #3
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b8:	4413      	add	r3, r2
 80075ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6959      	ldr	r1, [r3, #20]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	895a      	ldrh	r2, [r3, #10]
 80075d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f005 fa14 	bl	800ca04 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f6:	823b      	strh	r3, [r7, #16]
 80075f8:	8a3b      	ldrh	r3, [r7, #16]
 80075fa:	f083 0310 	eor.w	r3, r3, #16
 80075fe:	823b      	strh	r3, [r7, #16]
 8007600:	8a3b      	ldrh	r3, [r7, #16]
 8007602:	f083 0320 	eor.w	r3, r3, #32
 8007606:	823b      	strh	r3, [r7, #16]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	8a3b      	ldrh	r3, [r7, #16]
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3788      	adds	r7, #136	; 0x88
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007636:	b480      	push	{r7}
 8007638:	b087      	sub	sp, #28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	607b      	str	r3, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	817b      	strh	r3, [r7, #10]
 8007644:	4613      	mov	r3, r2
 8007646:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007648:	897b      	ldrh	r3, [r7, #10]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007654:	897b      	ldrh	r3, [r7, #10]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	3304      	adds	r3, #4
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e00a      	b.n	8007684 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800766e:	897a      	ldrh	r2, [r7, #10]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	3304      	adds	r3, #4
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007684:	893b      	ldrh	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d107      	bne.n	800769a <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	b29a      	uxth	r2, r3
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	80da      	strh	r2, [r3, #6]
 8007698:	e00b      	b.n	80076b2 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2201      	movs	r2, #1
 800769e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f043 0302 	orr.w	r3, r3, #2
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007718:	4b04      	ldr	r3, [pc, #16]	; (800772c <HAL_PWREx_GetVoltageRange+0x18>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007720:	4618      	mov	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40007000 	.word	0x40007000

08007730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773e:	d130      	bne.n	80077a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007740:	4b23      	ldr	r3, [pc, #140]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800774c:	d038      	beq.n	80077c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800774e:	4b20      	ldr	r3, [pc, #128]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800775c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800775e:	4b1d      	ldr	r3, [pc, #116]	; (80077d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2232      	movs	r2, #50	; 0x32
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800776a:	fba2 2303 	umull	r2, r3, r2, r3
 800776e:	0c9b      	lsrs	r3, r3, #18
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007774:	e002      	b.n	800777c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3b01      	subs	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800777c:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d102      	bne.n	8007790 <HAL_PWREx_ControlVoltageScaling+0x60>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f2      	bne.n	8007776 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779c:	d110      	bne.n	80077c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e00f      	b.n	80077c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80077a2:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d007      	beq.n	80077c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40007000 	.word	0x40007000
 80077d4:	20000004 	.word	0x20000004
 80077d8:	431bde83 	.word	0x431bde83

080077dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80077e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077ea:	6053      	str	r3, [r2, #4]
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40007000 	.word	0x40007000

080077fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f000 bc4f 	b.w	80080ae <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007810:	4b97      	ldr	r3, [pc, #604]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800781a:	4b95      	ldr	r3, [pc, #596]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80e6 	beq.w	80079fe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HAL_RCC_OscConfig+0x4c>
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	f040 808d 	bne.w	800795a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b01      	cmp	r3, #1
 8007844:	f040 8089 	bne.w	800795a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007848:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <HAL_RCC_OscConfig+0x66>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f000 bc26 	b.w	80080ae <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007866:	4b82      	ldr	r3, [pc, #520]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <HAL_RCC_OscConfig+0x80>
 8007872:	4b7f      	ldr	r3, [pc, #508]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800787a:	e005      	b.n	8007888 <HAL_RCC_OscConfig+0x8c>
 800787c:	4b7c      	ldr	r3, [pc, #496]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800787e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007888:	4293      	cmp	r3, r2
 800788a:	d224      	bcs.n	80078d6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fda1 	bl	80083d8 <RCC_SetFlashLatencyFromMSIRange>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	f000 bc06 	b.w	80080ae <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078a2:	4b73      	ldr	r3, [pc, #460]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a72      	ldr	r2, [pc, #456]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b70      	ldr	r3, [pc, #448]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	496d      	ldr	r1, [pc, #436]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078c0:	4b6b      	ldr	r3, [pc, #428]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4968      	ldr	r1, [pc, #416]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	e025      	b.n	8007922 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078d6:	4b66      	ldr	r3, [pc, #408]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a65      	ldr	r2, [pc, #404]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	4b63      	ldr	r3, [pc, #396]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	4960      	ldr	r1, [pc, #384]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078f4:	4b5e      	ldr	r3, [pc, #376]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	495b      	ldr	r1, [pc, #364]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007904:	4313      	orrs	r3, r2
 8007906:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fd60 	bl	80083d8 <RCC_SetFlashLatencyFromMSIRange>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e3c5      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007922:	f000 fccd 	bl	80082c0 <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b51      	ldr	r3, [pc, #324]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	4950      	ldr	r1, [pc, #320]	; (8007a74 <HAL_RCC_OscConfig+0x278>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	4a4e      	ldr	r2, [pc, #312]	; (8007a78 <HAL_RCC_OscConfig+0x27c>)
 8007940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007942:	4b4e      	ldr	r3, [pc, #312]	; (8007a7c <HAL_RCC_OscConfig+0x280>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7fc f828 	bl	800399c <HAL_InitTick>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d052      	beq.n	80079fc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	e3a9      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d032      	beq.n	80079c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007962:	4b43      	ldr	r3, [pc, #268]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a42      	ldr	r2, [pc, #264]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800796e:	f7fc f865 	bl	8003a3c <HAL_GetTick>
 8007972:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007976:	f7fc f861 	bl	8003a3c <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e392      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007988:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007994:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a35      	ldr	r2, [pc, #212]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 800799a:	f043 0308 	orr.w	r3, r3, #8
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	4b33      	ldr	r3, [pc, #204]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	4930      	ldr	r1, [pc, #192]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079b2:	4b2f      	ldr	r3, [pc, #188]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	492b      	ldr	r1, [pc, #172]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	604b      	str	r3, [r1, #4]
 80079c6:	e01a      	b.n	80079fe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079c8:	4b29      	ldr	r3, [pc, #164]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a28      	ldr	r2, [pc, #160]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079d4:	f7fc f832 	bl	8003a3c <HAL_GetTick>
 80079d8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079dc:	f7fc f82e 	bl	8003a3c <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e35f      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079ee:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f0      	bne.n	80079dc <HAL_RCC_OscConfig+0x1e0>
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d073      	beq.n	8007af2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d005      	beq.n	8007a1c <HAL_RCC_OscConfig+0x220>
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	2b0c      	cmp	r3, #12
 8007a14:	d10e      	bne.n	8007a34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d10b      	bne.n	8007a34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d063      	beq.n	8007af0 <HAL_RCC_OscConfig+0x2f4>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d15f      	bne.n	8007af0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e33c      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d106      	bne.n	8007a4c <HAL_RCC_OscConfig+0x250>
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a0b      	ldr	r2, [pc, #44]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e025      	b.n	8007a98 <HAL_RCC_OscConfig+0x29c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a54:	d114      	bne.n	8007a80 <HAL_RCC_OscConfig+0x284>
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a05      	ldr	r2, [pc, #20]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a02      	ldr	r2, [pc, #8]	; (8007a70 <HAL_RCC_OscConfig+0x274>)
 8007a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e013      	b.n	8007a98 <HAL_RCC_OscConfig+0x29c>
 8007a70:	40021000 	.word	0x40021000
 8007a74:	0800f214 	.word	0x0800f214
 8007a78:	20000004 	.word	0x20000004
 8007a7c:	20000008 	.word	0x20000008
 8007a80:	4b8f      	ldr	r3, [pc, #572]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a8e      	ldr	r2, [pc, #568]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	4b8c      	ldr	r3, [pc, #560]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a8b      	ldr	r2, [pc, #556]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d013      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fb ffcc 	bl	8003a3c <HAL_GetTick>
 8007aa4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa8:	f7fb ffc8 	bl	8003a3c <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e2f9      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aba:	4b81      	ldr	r3, [pc, #516]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2ac>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fb ffb8 	bl	8003a3c <HAL_GetTick>
 8007acc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fb ffb4 	bl	8003a3c <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e2e5      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ae2:	4b77      	ldr	r3, [pc, #476]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x2d4>
 8007aee:	e000      	b.n	8007af2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d060      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d005      	beq.n	8007b10 <HAL_RCC_OscConfig+0x314>
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	d119      	bne.n	8007b3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d116      	bne.n	8007b3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b10:	4b6b      	ldr	r3, [pc, #428]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_RCC_OscConfig+0x32c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e2c2      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b28:	4b65      	ldr	r3, [pc, #404]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	4962      	ldr	r1, [pc, #392]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b3c:	e040      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d023      	beq.n	8007b8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b46:	4b5e      	ldr	r3, [pc, #376]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a5d      	ldr	r2, [pc, #372]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7fb ff73 	bl	8003a3c <HAL_GetTick>
 8007b56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b58:	e008      	b.n	8007b6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b5a:	f7fb ff6f 	bl	8003a3c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e2a0      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b6c:	4b54      	ldr	r3, [pc, #336]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b78:	4b51      	ldr	r3, [pc, #324]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	061b      	lsls	r3, r3, #24
 8007b86:	494e      	ldr	r1, [pc, #312]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]
 8007b8c:	e018      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b8e:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a4b      	ldr	r2, [pc, #300]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9a:	f7fb ff4f 	bl	8003a3c <HAL_GetTick>
 8007b9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba2:	f7fb ff4b 	bl	8003a3c <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e27c      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bb4:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8082 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05f      	beq.n	8007c96 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007bd6:	4b3a      	ldr	r3, [pc, #232]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bdc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d037      	beq.n	8007c5c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d006      	beq.n	8007c04 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e254      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01b      	beq.n	8007c46 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8007c0e:	4b2c      	ldr	r3, [pc, #176]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c14:	4a2a      	ldr	r2, [pc, #168]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c1e:	f7fb ff0d 	bl	8003a3c <HAL_GetTick>
 8007c22:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c26:	f7fb ff09 	bl	8003a3c <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b11      	cmp	r3, #17
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e23a      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c38:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1ef      	bne.n	8007c26 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8007c46:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c4c:	f023 0210 	bic.w	r2, r3, #16
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	491a      	ldr	r1, [pc, #104]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c5c:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c62:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6c:	f7fb fee6 	bl	8003a3c <HAL_GetTick>
 8007c70:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c72:	e008      	b.n	8007c86 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c74:	f7fb fee2 	bl	8003a3c <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b11      	cmp	r3, #17
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e213      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c86:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ef      	beq.n	8007c74 <HAL_RCC_OscConfig+0x478>
 8007c94:	e01d      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c96:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9c:	4a08      	ldr	r2, [pc, #32]	; (8007cc0 <HAL_RCC_OscConfig+0x4c4>)
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fb fec9 	bl	8003a3c <HAL_GetTick>
 8007caa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cae:	f7fb fec5 	bl	8003a3c <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b11      	cmp	r3, #17
 8007cba:	d903      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e1f6      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
 8007cc0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cc4:	4ba9      	ldr	r3, [pc, #676]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1ed      	bne.n	8007cae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80bd 	beq.w	8007e5a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ce6:	4ba1      	ldr	r3, [pc, #644]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10e      	bne.n	8007d10 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf2:	4b9e      	ldr	r3, [pc, #632]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf6:	4a9d      	ldr	r2, [pc, #628]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfe:	4b9b      	ldr	r3, [pc, #620]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d10:	4b97      	ldr	r3, [pc, #604]	; (8007f70 <HAL_RCC_OscConfig+0x774>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d118      	bne.n	8007d4e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d1c:	4b94      	ldr	r3, [pc, #592]	; (8007f70 <HAL_RCC_OscConfig+0x774>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a93      	ldr	r2, [pc, #588]	; (8007f70 <HAL_RCC_OscConfig+0x774>)
 8007d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d28:	f7fb fe88 	bl	8003a3c <HAL_GetTick>
 8007d2c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d2e:	e008      	b.n	8007d42 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d30:	f7fb fe84 	bl	8003a3c <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e1b5      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d42:	4b8b      	ldr	r3, [pc, #556]	; (8007f70 <HAL_RCC_OscConfig+0x774>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02c      	beq.n	8007db4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007d5a:	4b84      	ldr	r3, [pc, #528]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6c:	497f      	ldr	r1, [pc, #508]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d80:	4b7a      	ldr	r3, [pc, #488]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d86:	4a79      	ldr	r2, [pc, #484]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d88:	f043 0304 	orr.w	r3, r3, #4
 8007d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007d90:	4b76      	ldr	r3, [pc, #472]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	4a75      	ldr	r2, [pc, #468]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007d98:	f043 0301 	orr.w	r3, r3, #1
 8007d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007da0:	e018      	b.n	8007dd4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007da2:	4b72      	ldr	r3, [pc, #456]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	4a70      	ldr	r2, [pc, #448]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007db2:	e00f      	b.n	8007dd4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007db4:	4b6d      	ldr	r3, [pc, #436]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dba:	4a6c      	ldr	r2, [pc, #432]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007dc4:	4b69      	ldr	r3, [pc, #420]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dca:	4a68      	ldr	r2, [pc, #416]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007dcc:	f023 0304 	bic.w	r3, r3, #4
 8007dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d016      	beq.n	8007e0a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ddc:	f7fb fe2e 	bl	8003a3c <HAL_GetTick>
 8007de0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de2:	e00a      	b.n	8007dfa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de4:	f7fb fe2a 	bl	8003a3c <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e159      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dfa:	4b5c      	ldr	r3, [pc, #368]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ed      	beq.n	8007de4 <HAL_RCC_OscConfig+0x5e8>
 8007e08:	e01d      	b.n	8007e46 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0a:	f7fb fe17 	bl	8003a3c <HAL_GetTick>
 8007e0e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e10:	e00a      	b.n	8007e28 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e12:	f7fb fe13 	bl	8003a3c <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e142      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e28:	4b50      	ldr	r3, [pc, #320]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1ed      	bne.n	8007e12 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007e36:	4b4d      	ldr	r3, [pc, #308]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3c:	4a4b      	ldr	r2, [pc, #300]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d105      	bne.n	8007e5a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4e:	4b47      	ldr	r3, [pc, #284]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e52:	4a46      	ldr	r2, [pc, #280]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d03c      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01c      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e6e:	4b3f      	ldr	r3, [pc, #252]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e74:	4a3d      	ldr	r2, [pc, #244]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7e:	f7fb fddd 	bl	8003a3c <HAL_GetTick>
 8007e82:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e86:	f7fb fdd9 	bl	8003a3c <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e10a      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e98:	4b34      	ldr	r3, [pc, #208]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0ef      	beq.n	8007e86 <HAL_RCC_OscConfig+0x68a>
 8007ea6:	e01b      	b.n	8007ee0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ea8:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eae:	4a2f      	ldr	r2, [pc, #188]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fb fdc0 	bl	8003a3c <HAL_GetTick>
 8007ebc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ec0:	f7fb fdbc 	bl	8003a3c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e0ed      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ed2:	4b26      	ldr	r3, [pc, #152]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1ef      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80e1 	beq.w	80080ac <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	f040 80b5 	bne.w	800805e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f003 0203 	and.w	r2, r3, #3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d124      	bne.n	8007f52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	3b01      	subs	r3, #1
 8007f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d11b      	bne.n	8007f52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d113      	bne.n	8007f52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	3b01      	subs	r3, #1
 8007f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d109      	bne.n	8007f52 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d05f      	beq.n	8008012 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	2b0c      	cmp	r3, #12
 8007f56:	d05a      	beq.n	800800e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a03      	ldr	r2, [pc, #12]	; (8007f6c <HAL_RCC_OscConfig+0x770>)
 8007f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f64:	f7fb fd6a 	bl	8003a3c <HAL_GetTick>
 8007f68:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f6a:	e00c      	b.n	8007f86 <HAL_RCC_OscConfig+0x78a>
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f74:	f7fb fd62 	bl	8003a3c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e093      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f86:	4b4c      	ldr	r3, [pc, #304]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f92:	4b49      	ldr	r3, [pc, #292]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	4b49      	ldr	r3, [pc, #292]	; (80080bc <HAL_RCC_OscConfig+0x8c0>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	0112      	lsls	r2, r2, #4
 8007fa6:	4311      	orrs	r1, r2
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fac:	0212      	lsls	r2, r2, #8
 8007fae:	4311      	orrs	r1, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fb4:	0852      	lsrs	r2, r2, #1
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	0552      	lsls	r2, r2, #21
 8007fba:	4311      	orrs	r1, r2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fc0:	0852      	lsrs	r2, r2, #1
 8007fc2:	3a01      	subs	r2, #1
 8007fc4:	0652      	lsls	r2, r2, #25
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	493b      	ldr	r1, [pc, #236]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007fce:	4b3a      	ldr	r3, [pc, #232]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a39      	ldr	r2, [pc, #228]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fd8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fda:	4b37      	ldr	r3, [pc, #220]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	4a36      	ldr	r2, [pc, #216]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8007fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fe4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fe6:	f7fb fd29 	bl	8003a3c <HAL_GetTick>
 8007fea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fee:	f7fb fd25 	bl	8003a3c <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e056      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008000:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0f0      	beq.n	8007fee <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800800c:	e04e      	b.n	80080ac <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e04d      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008012:	4b29      	ldr	r3, [pc, #164]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d146      	bne.n	80080ac <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800801e:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a25      	ldr	r2, [pc, #148]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008028:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800802a:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	4a22      	ldr	r2, [pc, #136]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008034:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008036:	f7fb fd01 	bl	8003a3c <HAL_GetTick>
 800803a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803e:	f7fb fcfd 	bl	8003a3c <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e02e      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008050:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f0      	beq.n	800803e <HAL_RCC_OscConfig+0x842>
 800805c:	e026      	b.n	80080ac <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	2b0c      	cmp	r3, #12
 8008062:	d021      	beq.n	80080a8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fb fce4 	bl	8003a3c <HAL_GetTick>
 8008074:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008078:	f7fb fce0 	bl	8003a3c <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e011      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800808a:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8008096:	4b08      	ldr	r3, [pc, #32]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	4a07      	ldr	r2, [pc, #28]	; (80080b8 <HAL_RCC_OscConfig+0x8bc>)
 800809c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	60d3      	str	r3, [r2, #12]
 80080a6:	e001      	b.n	80080ac <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000
 80080bc:	f99f808c 	.word	0xf99f808c

080080c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0e7      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080d4:	4b75      	ldr	r3, [pc, #468]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d910      	bls.n	8008104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e2:	4b72      	ldr	r3, [pc, #456]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f023 0207 	bic.w	r2, r3, #7
 80080ea:	4970      	ldr	r1, [pc, #448]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080f2:	4b6e      	ldr	r3, [pc, #440]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d001      	beq.n	8008104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e0cf      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d010      	beq.n	8008132 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	4b66      	ldr	r3, [pc, #408]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800811c:	429a      	cmp	r2, r3
 800811e:	d908      	bls.n	8008132 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008120:	4b63      	ldr	r3, [pc, #396]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4960      	ldr	r1, [pc, #384]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 800812e:	4313      	orrs	r3, r2
 8008130:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d04c      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d107      	bne.n	8008156 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008146:	4b5a      	ldr	r3, [pc, #360]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d121      	bne.n	8008196 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e0a6      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d107      	bne.n	800816e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800815e:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d115      	bne.n	8008196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e09a      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d107      	bne.n	8008186 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008176:	4b4e      	ldr	r3, [pc, #312]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e08e      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008186:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e086      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008196:	4b46      	ldr	r3, [pc, #280]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f023 0203 	bic.w	r2, r3, #3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	4943      	ldr	r1, [pc, #268]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a8:	f7fb fc48 	bl	8003a3c <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ae:	e00a      	b.n	80081c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b0:	f7fb fc44 	bl	8003a3c <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80081be:	4293      	cmp	r3, r2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e06e      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081c6:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 020c 	and.w	r2, r3, #12
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d1eb      	bne.n	80081b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d010      	beq.n	8008206 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	4b31      	ldr	r3, [pc, #196]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d208      	bcs.n	8008206 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f4:	4b2e      	ldr	r3, [pc, #184]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	492b      	ldr	r1, [pc, #172]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008206:	4b29      	ldr	r3, [pc, #164]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d210      	bcs.n	8008236 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008214:	4b25      	ldr	r3, [pc, #148]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f023 0207 	bic.w	r2, r3, #7
 800821c:	4923      	ldr	r1, [pc, #140]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	4313      	orrs	r3, r2
 8008222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008224:	4b21      	ldr	r3, [pc, #132]	; (80082ac <HAL_RCC_ClockConfig+0x1ec>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d001      	beq.n	8008236 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e036      	b.n	80082a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d008      	beq.n	8008254 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008242:	4b1b      	ldr	r3, [pc, #108]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	4918      	ldr	r1, [pc, #96]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008250:	4313      	orrs	r3, r2
 8008252:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008260:	4b13      	ldr	r3, [pc, #76]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4910      	ldr	r1, [pc, #64]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 8008270:	4313      	orrs	r3, r2
 8008272:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008274:	f000 f824 	bl	80082c0 <HAL_RCC_GetSysClockFreq>
 8008278:	4602      	mov	r2, r0
 800827a:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <HAL_RCC_ClockConfig+0x1f0>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	f003 030f 	and.w	r3, r3, #15
 8008284:	490b      	ldr	r1, [pc, #44]	; (80082b4 <HAL_RCC_ClockConfig+0x1f4>)
 8008286:	5ccb      	ldrb	r3, [r1, r3]
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	fa22 f303 	lsr.w	r3, r2, r3
 8008290:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <HAL_RCC_ClockConfig+0x1f8>)
 8008292:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <HAL_RCC_ClockConfig+0x1fc>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f7fb fb7f 	bl	800399c <HAL_InitTick>
 800829e:	4603      	mov	r3, r0
 80082a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80082a2:	7afb      	ldrb	r3, [r7, #11]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40022000 	.word	0x40022000
 80082b0:	40021000 	.word	0x40021000
 80082b4:	0800f214 	.word	0x0800f214
 80082b8:	20000004 	.word	0x20000004
 80082bc:	20000008 	.word	0x20000008

080082c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b089      	sub	sp, #36	; 0x24
 80082c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ce:	4b3e      	ldr	r3, [pc, #248]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 030c 	and.w	r3, r3, #12
 80082d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082d8:	4b3b      	ldr	r3, [pc, #236]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_GetSysClockFreq+0x34>
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	d121      	bne.n	8008332 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11e      	bne.n	8008332 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80082f4:	4b34      	ldr	r3, [pc, #208]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0308 	and.w	r3, r3, #8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d107      	bne.n	8008310 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008300:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	e005      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008310:	4b2d      	ldr	r3, [pc, #180]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800831c:	4a2b      	ldr	r2, [pc, #172]	; (80083cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008324:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10d      	bne.n	8008348 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008330:	e00a      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b04      	cmp	r3, #4
 8008336:	d102      	bne.n	800833e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	e004      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b08      	cmp	r3, #8
 8008342:	d101      	bne.n	8008348 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008344:	4b23      	ldr	r3, [pc, #140]	; (80083d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008346:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b0c      	cmp	r3, #12
 800834c:	d134      	bne.n	80083b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800834e:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d003      	beq.n	8008366 <HAL_RCC_GetSysClockFreq+0xa6>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d003      	beq.n	800836c <HAL_RCC_GetSysClockFreq+0xac>
 8008364:	e005      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008366:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008368:	617b      	str	r3, [r7, #20]
      break;
 800836a:	e005      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800836e:	617b      	str	r3, [r7, #20]
      break;
 8008370:	e002      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	617b      	str	r3, [r7, #20]
      break;
 8008376:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	091b      	lsrs	r3, r3, #4
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	3301      	adds	r3, #1
 8008384:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	fb03 f202 	mul.w	r2, r3, r2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	0e5b      	lsrs	r3, r3, #25
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	3301      	adds	r3, #1
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80083b8:	69bb      	ldr	r3, [r7, #24]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3724      	adds	r7, #36	; 0x24
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	40021000 	.word	0x40021000
 80083cc:	0800f224 	.word	0x0800f224
 80083d0:	00f42400 	.word	0x00f42400
 80083d4:	007a1200 	.word	0x007a1200

080083d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083e4:	4b2a      	ldr	r3, [pc, #168]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083f0:	f7ff f990 	bl	8007714 <HAL_PWREx_GetVoltageRange>
 80083f4:	6178      	str	r0, [r7, #20]
 80083f6:	e014      	b.n	8008422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f8:	4b25      	ldr	r3, [pc, #148]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	4a24      	ldr	r2, [pc, #144]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008402:	6593      	str	r3, [r2, #88]	; 0x58
 8008404:	4b22      	ldr	r3, [pc, #136]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008410:	f7ff f980 	bl	8007714 <HAL_PWREx_GetVoltageRange>
 8008414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008416:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800841c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008420:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008428:	d10b      	bne.n	8008442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d919      	bls.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2ba0      	cmp	r3, #160	; 0xa0
 8008434:	d902      	bls.n	800843c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008436:	2302      	movs	r3, #2
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e013      	b.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800843c:	2301      	movs	r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	e010      	b.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d902      	bls.n	800844e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008448:	2303      	movs	r3, #3
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	e00a      	b.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b80      	cmp	r3, #128	; 0x80
 8008452:	d102      	bne.n	800845a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008454:	2302      	movs	r3, #2
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	e004      	b.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b70      	cmp	r3, #112	; 0x70
 800845e:	d101      	bne.n	8008464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008460:	2301      	movs	r3, #1
 8008462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f023 0207 	bic.w	r2, r3, #7
 800846c:	4909      	ldr	r1, [pc, #36]	; (8008494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	429a      	cmp	r2, r3
 8008480:	d001      	beq.n	8008486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	40021000 	.word	0x40021000
 8008494:	40022000 	.word	0x40022000

08008498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084a0:	2300      	movs	r3, #0
 80084a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084a4:	2300      	movs	r3, #0
 80084a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 809e 	beq.w	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084b6:	2300      	movs	r3, #0
 80084b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80084ba:	4b46      	ldr	r3, [pc, #280]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00d      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084d0:	4b40      	ldr	r3, [pc, #256]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d4:	4a3f      	ldr	r2, [pc, #252]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084da:	6593      	str	r3, [r2, #88]	; 0x58
 80084dc:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084e8:	2301      	movs	r3, #1
 80084ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084ec:	4b3a      	ldr	r3, [pc, #232]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a39      	ldr	r2, [pc, #228]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80084f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084f8:	f7fb faa0 	bl	8003a3c <HAL_GetTick>
 80084fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084fe:	e009      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008500:	f7fb fa9c 	bl	8003a3c <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d902      	bls.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	74fb      	strb	r3, [r7, #19]
        break;
 8008512:	e005      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008514:	4b30      	ldr	r3, [pc, #192]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0ef      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8008520:	7cfb      	ldrb	r3, [r7, #19]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d15a      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008526:	4b2b      	ldr	r3, [pc, #172]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	429a      	cmp	r2, r3
 8008540:	d019      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008542:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800854e:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008554:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800855e:	4b1d      	ldr	r3, [pc, #116]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800856e:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d016      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008580:	f7fb fa5c 	bl	8003a3c <HAL_GetTick>
 8008584:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008586:	e00b      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008588:	f7fb fa58 	bl	8003a3c <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	4293      	cmp	r3, r2
 8008598:	d902      	bls.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	74fb      	strb	r3, [r7, #19]
            break;
 800859e:	e006      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0ec      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80085ae:	7cfb      	ldrb	r3, [r7, #19]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10b      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085b4:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	4904      	ldr	r1, [pc, #16]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80085ca:	e009      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085cc:	7cfb      	ldrb	r3, [r7, #19]
 80085ce:	74bb      	strb	r3, [r7, #18]
 80085d0:	e006      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80085d2:	bf00      	nop
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085e0:	7c7b      	ldrb	r3, [r7, #17]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d105      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085e6:	4b6e      	ldr	r3, [pc, #440]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ea:	4a6d      	ldr	r2, [pc, #436]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085fe:	4b68      	ldr	r3, [pc, #416]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008604:	f023 0203 	bic.w	r2, r3, #3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4964      	ldr	r1, [pc, #400]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800860e:	4313      	orrs	r3, r2
 8008610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008620:	4b5f      	ldr	r3, [pc, #380]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	f023 020c 	bic.w	r2, r3, #12
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	495c      	ldr	r1, [pc, #368]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008642:	4b57      	ldr	r3, [pc, #348]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008648:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	4953      	ldr	r1, [pc, #332]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008664:	4b4e      	ldr	r3, [pc, #312]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	494b      	ldr	r1, [pc, #300]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008686:	4b46      	ldr	r3, [pc, #280]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	4942      	ldr	r1, [pc, #264]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008696:	4313      	orrs	r3, r2
 8008698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086a8:	4b3d      	ldr	r3, [pc, #244]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	493a      	ldr	r1, [pc, #232]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086ca:	4b35      	ldr	r3, [pc, #212]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	4931      	ldr	r1, [pc, #196]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086ec:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	4929      	ldr	r1, [pc, #164]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800870e:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	4920      	ldr	r1, [pc, #128]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d015      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008730:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	4918      	ldr	r1, [pc, #96]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800874e:	d105      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008750:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800875a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d015      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008768:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008776:	490a      	ldr	r1, [pc, #40]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008786:	d105      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008788:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008794:	7cbb      	ldrb	r3, [r7, #18]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40021000 	.word	0x40021000

080087a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e095      	b.n	80088e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d108      	bne.n	80087d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087c6:	d009      	beq.n	80087dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	61da      	str	r2, [r3, #28]
 80087ce:	e005      	b.n	80087dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fa fd4c 	bl	8003294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800881c:	d902      	bls.n	8008824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e002      	b.n	800882a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008832:	d007      	beq.n	8008844 <HAL_SPI_Init+0xa0>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800883c:	d002      	beq.n	8008844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887c:	431a      	orrs	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008886:	ea42 0103 	orr.w	r1, r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	f003 0204 	and.w	r2, r3, #4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80088c0:	ea42 0103 	orr.w	r1, r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b088      	sub	sp, #32
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_SPI_Transmit+0x22>
 8008908:	2302      	movs	r3, #2
 800890a:	e158      	b.n	8008bbe <HAL_SPI_Transmit+0x2d4>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008914:	f7fb f892 	bl	8003a3c <HAL_GetTick>
 8008918:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d002      	beq.n	8008930 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800892a:	2302      	movs	r3, #2
 800892c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800892e:	e13d      	b.n	8008bac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_SPI_Transmit+0x52>
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008940:	e134      	b.n	8008bac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2203      	movs	r2, #3
 8008946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898c:	d10f      	bne.n	80089ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d007      	beq.n	80089cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089d4:	d94b      	bls.n	8008a6e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <HAL_SPI_Transmit+0xfa>
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d13e      	bne.n	8008a62 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	881a      	ldrh	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	1c9a      	adds	r2, r3, #2
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a08:	e02b      	b.n	8008a62 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d112      	bne.n	8008a3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	881a      	ldrh	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a3c:	e011      	b.n	8008a62 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a3e:	f7fa fffd 	bl	8003a3c <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d803      	bhi.n	8008a56 <HAL_SPI_Transmit+0x16c>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d102      	bne.n	8008a5c <HAL_SPI_Transmit+0x172>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a60:	e0a4      	b.n	8008bac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1ce      	bne.n	8008a0a <HAL_SPI_Transmit+0x120>
 8008a6c:	e07c      	b.n	8008b68 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_SPI_Transmit+0x192>
 8008a76:	8afb      	ldrh	r3, [r7, #22]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d170      	bne.n	8008b5e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d912      	bls.n	8008aac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b02      	subs	r3, #2
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008aaa:	e058      	b.n	8008b5e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	7812      	ldrb	r2, [r2, #0]
 8008ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ad2:	e044      	b.n	8008b5e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d12b      	bne.n	8008b3a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d912      	bls.n	8008b12 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	881a      	ldrh	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	1c9a      	adds	r2, r3, #2
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b02      	subs	r3, #2
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b10:	e025      	b.n	8008b5e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b38:	e011      	b.n	8008b5e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b3a:	f7fa ff7f 	bl	8003a3c <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d803      	bhi.n	8008b52 <HAL_SPI_Transmit+0x268>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d102      	bne.n	8008b58 <HAL_SPI_Transmit+0x26e>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b5c:	e026      	b.n	8008bac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1b5      	bne.n	8008ad4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fb5b 	bl	8009228 <SPI_EndRxTxTransaction>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b86:	2300      	movs	r3, #0
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	613b      	str	r3, [r7, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	e000      	b.n	8008bac <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b08a      	sub	sp, #40	; 0x28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_SPI_TransmitReceive+0x26>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e1fb      	b.n	8008fe4 <HAL_SPI_TransmitReceive+0x41e>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bf4:	f7fa ff22 	bl	8003a3c <HAL_GetTick>
 8008bf8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c0c:	887b      	ldrh	r3, [r7, #2]
 8008c0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c10:	7efb      	ldrb	r3, [r7, #27]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d00e      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x6e>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c1c:	d106      	bne.n	8008c2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d102      	bne.n	8008c2c <HAL_SPI_TransmitReceive+0x66>
 8008c26:	7efb      	ldrb	r3, [r7, #27]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d003      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008c32:	e1cd      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x80>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x80>
 8008c40:	887b      	ldrh	r3, [r7, #2]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008c4c:	e1c0      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d003      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2205      	movs	r2, #5
 8008c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	887a      	ldrh	r2, [r7, #2]
 8008c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	887a      	ldrh	r2, [r7, #2]
 8008c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	887a      	ldrh	r2, [r7, #2]
 8008c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	887a      	ldrh	r2, [r7, #2]
 8008c8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ca4:	d802      	bhi.n	8008cac <HAL_SPI_TransmitReceive+0xe6>
 8008ca6:	8a3b      	ldrh	r3, [r7, #16]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d908      	bls.n	8008cbe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cba:	605a      	str	r2, [r3, #4]
 8008cbc:	e007      	b.n	8008cce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ccc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd8:	2b40      	cmp	r3, #64	; 0x40
 8008cda:	d007      	beq.n	8008cec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cf4:	d97c      	bls.n	8008df0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <HAL_SPI_TransmitReceive+0x13e>
 8008cfe:	8a7b      	ldrh	r3, [r7, #18]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d169      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	881a      	ldrh	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	1c9a      	adds	r2, r3, #2
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d28:	e056      	b.n	8008dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d11b      	bne.n	8008d70 <HAL_SPI_TransmitReceive+0x1aa>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d016      	beq.n	8008d70 <HAL_SPI_TransmitReceive+0x1aa>
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d113      	bne.n	8008d70 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	881a      	ldrh	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d11c      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x1f2>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	b292      	uxth	r2, r2
 8008d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9c:	1c9a      	adds	r2, r3, #2
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008db4:	2301      	movs	r3, #1
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008db8:	f7fa fe40 	bl	8003a3c <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d807      	bhi.n	8008dd8 <HAL_SPI_TransmitReceive+0x212>
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d003      	beq.n	8008dd8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008dd6:	e0fb      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1a3      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x164>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d19d      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x164>
 8008dee:	e0df      	b.n	8008fb0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <HAL_SPI_TransmitReceive+0x23a>
 8008df8:	8a7b      	ldrh	r3, [r7, #18]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	f040 80cb 	bne.w	8008f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d912      	bls.n	8008e30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	881a      	ldrh	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b02      	subs	r3, #2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e2e:	e0b2      	b.n	8008f96 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e56:	e09e      	b.n	8008f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d134      	bne.n	8008ed0 <HAL_SPI_TransmitReceive+0x30a>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02f      	beq.n	8008ed0 <HAL_SPI_TransmitReceive+0x30a>
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d12c      	bne.n	8008ed0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d912      	bls.n	8008ea6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	881a      	ldrh	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	1c9a      	adds	r2, r3, #2
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b02      	subs	r3, #2
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ea4:	e012      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330c      	adds	r3, #12
 8008eb0:	7812      	ldrb	r2, [r2, #0]
 8008eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d148      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x3aa>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d042      	beq.n	8008f70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d923      	bls.n	8008f3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	b292      	uxth	r2, r2
 8008f02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	1c9a      	adds	r2, r3, #2
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b02      	subs	r3, #2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d81f      	bhi.n	8008f6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	e016      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f103 020c 	add.w	r2, r3, #12
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f70:	f7fa fd64 	bl	8003a3c <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d803      	bhi.n	8008f88 <HAL_SPI_TransmitReceive+0x3c2>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f86:	d102      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x3c8>
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d103      	bne.n	8008f96 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f94:	e01c      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f47f af5b 	bne.w	8008e58 <HAL_SPI_TransmitReceive+0x292>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f47f af54 	bne.w	8008e58 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f937 	bl	8009228 <SPI_EndRxTxTransaction>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	661a      	str	r2, [r3, #96]	; 0x60
 8008fcc:	e000      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3728      	adds	r7, #40	; 0x28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ffc:	f7fa fd1e 	bl	8003a3c <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4413      	add	r3, r2
 800900a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800900c:	f7fa fd16 	bl	8003a3c <HAL_GetTick>
 8009010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009012:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	015b      	lsls	r3, r3, #5
 8009018:	0d1b      	lsrs	r3, r3, #20
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009022:	e054      	b.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902a:	d050      	beq.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800902c:	f7fa fd06 	bl	8003a3c <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	429a      	cmp	r2, r3
 800903a:	d902      	bls.n	8009042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d13d      	bne.n	80090be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800905a:	d111      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009064:	d004      	beq.n	8009070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800906e:	d107      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800907e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009088:	d10f      	bne.n	80090aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e017      	b.n	80090ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d19b      	bne.n	8009024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000004 	.word	0x20000004

080090fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08a      	sub	sp, #40	; 0x28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800910e:	f7fa fc95 	bl	8003a3c <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	4413      	add	r3, r2
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800911e:	f7fa fc8d 	bl	8003a3c <HAL_GetTick>
 8009122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	330c      	adds	r3, #12
 800912a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800912c:	4b3d      	ldr	r3, [pc, #244]	; (8009224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	00da      	lsls	r2, r3, #3
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	0d1b      	lsrs	r3, r3, #20
 800913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913e:	fb02 f303 	mul.w	r3, r2, r3
 8009142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009144:	e060      	b.n	8009208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800914c:	d107      	bne.n	800915e <SPI_WaitFifoStateUntilTimeout+0x62>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800915c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d050      	beq.n	8009208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009166:	f7fa fc69 	bl	8003a3c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009172:	429a      	cmp	r2, r3
 8009174:	d902      	bls.n	800917c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d13d      	bne.n	80091f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800918a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009194:	d111      	bne.n	80091ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800919e:	d004      	beq.n	80091aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a8:	d107      	bne.n	80091ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c2:	d10f      	bne.n	80091e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e010      	b.n	800921a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	3b01      	subs	r3, #1
 8009206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689a      	ldr	r2, [r3, #8]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4013      	ands	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d196      	bne.n	8009146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3728      	adds	r7, #40	; 0x28
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000004 	.word	0x20000004

08009228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f7ff ff5b 	bl	80090fc <SPI_WaitFifoStateUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d007      	beq.n	800925c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009250:	f043 0220 	orr.w	r2, r3, #32
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e027      	b.n	80092ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2200      	movs	r2, #0
 8009264:	2180      	movs	r1, #128	; 0x80
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f7ff fec0 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009276:	f043 0220 	orr.w	r2, r3, #32
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e014      	b.n	80092ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff ff34 	bl	80090fc <SPI_WaitFifoStateUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800929e:	f043 0220 	orr.w	r2, r3, #32
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e000      	b.n	80092ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e049      	b.n	800935a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d106      	bne.n	80092e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fa fa86 	bl	80037ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3304      	adds	r3, #4
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f000 fd50 	bl	8009d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	d001      	beq.n	800937c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e03b      	b.n	80093f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a19      	ldr	r2, [pc, #100]	; (8009400 <HAL_TIM_Base_Start_IT+0x9c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d009      	beq.n	80093b2 <HAL_TIM_Base_Start_IT+0x4e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a6:	d004      	beq.n	80093b2 <HAL_TIM_Base_Start_IT+0x4e>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <HAL_TIM_Base_Start_IT+0xa0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d115      	bne.n	80093de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	4b13      	ldr	r3, [pc, #76]	; (8009408 <HAL_TIM_Base_Start_IT+0xa4>)
 80093ba:	4013      	ands	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	d015      	beq.n	80093f0 <HAL_TIM_Base_Start_IT+0x8c>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ca:	d011      	beq.n	80093f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093dc:	e008      	b.n	80093f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0201 	orr.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e000      	b.n	80093f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	40012c00 	.word	0x40012c00
 8009404:	40014000 	.word	0x40014000
 8009408:	00010007 	.word	0x00010007

0800940c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e049      	b.n	80094b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7fa f9bc 	bl	80037b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f000 fca4 	bl	8009d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <HAL_TIM_PWM_Start+0x24>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	e03c      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d109      	bne.n	80094fa <HAL_TIM_PWM_Start+0x3e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	bf14      	ite	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	2300      	moveq	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	e02f      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d109      	bne.n	8009514 <HAL_TIM_PWM_Start+0x58>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	bf14      	ite	ne
 800950c:	2301      	movne	r3, #1
 800950e:	2300      	moveq	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	e022      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b0c      	cmp	r3, #12
 8009518:	d109      	bne.n	800952e <HAL_TIM_PWM_Start+0x72>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	bf14      	ite	ne
 8009526:	2301      	movne	r3, #1
 8009528:	2300      	moveq	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e015      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b10      	cmp	r3, #16
 8009532:	d109      	bne.n	8009548 <HAL_TIM_PWM_Start+0x8c>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	bf14      	ite	ne
 8009540:	2301      	movne	r3, #1
 8009542:	2300      	moveq	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	e008      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b01      	cmp	r3, #1
 8009552:	bf14      	ite	ne
 8009554:	2301      	movne	r3, #1
 8009556:	2300      	moveq	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e07e      	b.n	8009660 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <HAL_TIM_PWM_Start+0xb6>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009570:	e023      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b04      	cmp	r3, #4
 8009576:	d104      	bne.n	8009582 <HAL_TIM_PWM_Start+0xc6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009580:	e01b      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b08      	cmp	r3, #8
 8009586:	d104      	bne.n	8009592 <HAL_TIM_PWM_Start+0xd6>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009590:	e013      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b0c      	cmp	r3, #12
 8009596:	d104      	bne.n	80095a2 <HAL_TIM_PWM_Start+0xe6>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095a0:	e00b      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d104      	bne.n	80095b2 <HAL_TIM_PWM_Start+0xf6>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095b0:	e003      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2201      	movs	r2, #1
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 feca 	bl	800a35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a26      	ldr	r2, [pc, #152]	; (8009668 <HAL_TIM_PWM_Start+0x1ac>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d009      	beq.n	80095e6 <HAL_TIM_PWM_Start+0x12a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a25      	ldr	r2, [pc, #148]	; (800966c <HAL_TIM_PWM_Start+0x1b0>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d004      	beq.n	80095e6 <HAL_TIM_PWM_Start+0x12a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a23      	ldr	r2, [pc, #140]	; (8009670 <HAL_TIM_PWM_Start+0x1b4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d101      	bne.n	80095ea <HAL_TIM_PWM_Start+0x12e>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <HAL_TIM_PWM_Start+0x130>
 80095ea:	2300      	movs	r3, #0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a18      	ldr	r2, [pc, #96]	; (8009668 <HAL_TIM_PWM_Start+0x1ac>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d009      	beq.n	800961e <HAL_TIM_PWM_Start+0x162>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d004      	beq.n	800961e <HAL_TIM_PWM_Start+0x162>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a14      	ldr	r2, [pc, #80]	; (800966c <HAL_TIM_PWM_Start+0x1b0>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d115      	bne.n	800964a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	4b13      	ldr	r3, [pc, #76]	; (8009674 <HAL_TIM_PWM_Start+0x1b8>)
 8009626:	4013      	ands	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b06      	cmp	r3, #6
 800962e:	d015      	beq.n	800965c <HAL_TIM_PWM_Start+0x1a0>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009636:	d011      	beq.n	800965c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009648:	e008      	b.n	800965c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0201 	orr.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e000      	b.n	800965e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	40012c00 	.word	0x40012c00
 800966c:	40014000 	.word	0x40014000
 8009670:	40014400 	.word	0x40014400
 8009674:	00010007 	.word	0x00010007

08009678 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e097      	b.n	80097bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7fa f839 	bl	8003718 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80096bc:	f023 0307 	bic.w	r3, r3, #7
 80096c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3304      	adds	r3, #4
 80096ca:	4619      	mov	r1, r3
 80096cc:	4610      	mov	r0, r2
 80096ce:	f000 fb63 	bl	8009d98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	4313      	orrs	r3, r2
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	4313      	orrs	r3, r2
 8009710:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009718:	f023 030c 	bic.w	r3, r3, #12
 800971c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	021b      	lsls	r3, r3, #8
 8009734:	4313      	orrs	r3, r2
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	011a      	lsls	r2, r3, #4
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	031b      	lsls	r3, r3, #12
 8009748:	4313      	orrs	r3, r2
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009756:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800975e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	4313      	orrs	r3, r2
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d110      	bne.n	8009816 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d102      	bne.n	8009800 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80097fa:	7b7b      	ldrb	r3, [r7, #13]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d001      	beq.n	8009804 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e069      	b.n	80098d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009814:	e031      	b.n	800987a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b04      	cmp	r3, #4
 800981a:	d110      	bne.n	800983e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d102      	bne.n	8009828 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009822:	7b3b      	ldrb	r3, [r7, #12]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d001      	beq.n	800982c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e055      	b.n	80098d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800983c:	e01d      	b.n	800987a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d108      	bne.n	8009856 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d105      	bne.n	8009856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800984a:	7b7b      	ldrb	r3, [r7, #13]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d102      	bne.n	8009856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009850:	7b3b      	ldrb	r3, [r7, #12]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d001      	beq.n	800985a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e03e      	b.n	80098d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2202      	movs	r2, #2
 8009876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <HAL_TIM_Encoder_Start+0xc4>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b04      	cmp	r3, #4
 8009884:	d008      	beq.n	8009898 <HAL_TIM_Encoder_Start+0xd4>
 8009886:	e00f      	b.n	80098a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2201      	movs	r2, #1
 800988e:	2100      	movs	r1, #0
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fd63 	bl	800a35c <TIM_CCxChannelCmd>
      break;
 8009896:	e016      	b.n	80098c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	2104      	movs	r1, #4
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fd5b 	bl	800a35c <TIM_CCxChannelCmd>
      break;
 80098a6:	e00e      	b.n	80098c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2201      	movs	r2, #1
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fd53 	bl	800a35c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2201      	movs	r2, #1
 80098bc:	2104      	movs	r1, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fd4c 	bl	800a35c <TIM_CCxChannelCmd>
      break;
 80098c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0201 	orr.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d122      	bne.n	800993c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b02      	cmp	r3, #2
 8009902:	d11b      	bne.n	800993c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0202 	mvn.w	r2, #2
 800990c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa1a 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009928:	e005      	b.n	8009936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa0c 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa1d 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b04      	cmp	r3, #4
 8009948:	d122      	bne.n	8009990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b04      	cmp	r3, #4
 8009956:	d11b      	bne.n	8009990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0204 	mvn.w	r2, #4
 8009960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2202      	movs	r2, #2
 8009966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f9f0 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 800997c:	e005      	b.n	800998a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9e2 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9f3 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b08      	cmp	r3, #8
 800999c:	d122      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d11b      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f06f 0208 	mvn.w	r2, #8
 80099b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2204      	movs	r2, #4
 80099ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f9c6 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 80099d0:	e005      	b.n	80099de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9b8 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9c9 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f003 0310 	and.w	r3, r3, #16
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d122      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f003 0310 	and.w	r3, r3, #16
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d11b      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0210 	mvn.w	r2, #16
 8009a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f99c 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009a24:	e005      	b.n	8009a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f98e 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f99f 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0201 	mvn.w	r2, #1
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7f9 fb88 	bl	8003174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6e:	2b80      	cmp	r3, #128	; 0x80
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7c:	2b80      	cmp	r3, #128	; 0x80
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcfc 	bl	800a488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9e:	d10e      	bne.n	8009abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aaa:	2b80      	cmp	r3, #128	; 0x80
 8009aac:	d107      	bne.n	8009abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fcef 	bl	800a49c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d10e      	bne.n	8009aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad6:	2b40      	cmp	r3, #64	; 0x40
 8009ad8:	d107      	bne.n	8009aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f94d 	bl	8009d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d10e      	bne.n	8009b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d107      	bne.n	8009b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f06f 0220 	mvn.w	r2, #32
 8009b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fcaf 	bl	800a474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b16:	bf00      	nop
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e0ff      	b.n	8009d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b14      	cmp	r3, #20
 8009b4a:	f200 80f0 	bhi.w	8009d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b4e:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009d2f 	.word	0x08009d2f
 8009b5c:	08009d2f 	.word	0x08009d2f
 8009b60:	08009d2f 	.word	0x08009d2f
 8009b64:	08009be9 	.word	0x08009be9
 8009b68:	08009d2f 	.word	0x08009d2f
 8009b6c:	08009d2f 	.word	0x08009d2f
 8009b70:	08009d2f 	.word	0x08009d2f
 8009b74:	08009c2b 	.word	0x08009c2b
 8009b78:	08009d2f 	.word	0x08009d2f
 8009b7c:	08009d2f 	.word	0x08009d2f
 8009b80:	08009d2f 	.word	0x08009d2f
 8009b84:	08009c6b 	.word	0x08009c6b
 8009b88:	08009d2f 	.word	0x08009d2f
 8009b8c:	08009d2f 	.word	0x08009d2f
 8009b90:	08009d2f 	.word	0x08009d2f
 8009b94:	08009cad 	.word	0x08009cad
 8009b98:	08009d2f 	.word	0x08009d2f
 8009b9c:	08009d2f 	.word	0x08009d2f
 8009ba0:	08009d2f 	.word	0x08009d2f
 8009ba4:	08009ced 	.word	0x08009ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f956 	bl	8009e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0208 	orr.w	r2, r2, #8
 8009bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0204 	bic.w	r2, r2, #4
 8009bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6999      	ldr	r1, [r3, #24]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	619a      	str	r2, [r3, #24]
      break;
 8009be6:	e0a5      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f9b2 	bl	8009f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6999      	ldr	r1, [r3, #24]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	021a      	lsls	r2, r3, #8
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	619a      	str	r2, [r3, #24]
      break;
 8009c28:	e084      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fa0b 	bl	800a04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0208 	orr.w	r2, r2, #8
 8009c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0204 	bic.w	r2, r2, #4
 8009c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69d9      	ldr	r1, [r3, #28]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	61da      	str	r2, [r3, #28]
      break;
 8009c68:	e064      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fa63 	bl	800a13c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69d9      	ldr	r1, [r3, #28]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	021a      	lsls	r2, r3, #8
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	61da      	str	r2, [r3, #28]
      break;
 8009caa:	e043      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 faa0 	bl	800a1f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0208 	orr.w	r2, r2, #8
 8009cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 0204 	bic.w	r2, r2, #4
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	691a      	ldr	r2, [r3, #16]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cea:	e023      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 fad8 	bl	800a2a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	021a      	lsls	r2, r3, #8
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d2c:	e002      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
      break;
 8009d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop

08009d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <TIM_Base_SetConfig+0xbc>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d003      	beq.n	8009db8 <TIM_Base_SetConfig+0x20>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db6:	d108      	bne.n	8009dca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a21      	ldr	r2, [pc, #132]	; (8009e54 <TIM_Base_SetConfig+0xbc>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00b      	beq.n	8009dea <TIM_Base_SetConfig+0x52>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd8:	d007      	beq.n	8009dea <TIM_Base_SetConfig+0x52>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a1e      	ldr	r2, [pc, #120]	; (8009e58 <TIM_Base_SetConfig+0xc0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_Base_SetConfig+0x52>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a1d      	ldr	r2, [pc, #116]	; (8009e5c <TIM_Base_SetConfig+0xc4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d108      	bne.n	8009dfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <TIM_Base_SetConfig+0xbc>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d007      	beq.n	8009e38 <TIM_Base_SetConfig+0xa0>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a0b      	ldr	r2, [pc, #44]	; (8009e58 <TIM_Base_SetConfig+0xc0>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_Base_SetConfig+0xa0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <TIM_Base_SetConfig+0xc4>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d103      	bne.n	8009e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	615a      	str	r2, [r3, #20]
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	40012c00 	.word	0x40012c00
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40014400 	.word	0x40014400

08009e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	f023 0201 	bic.w	r2, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f023 0302 	bic.w	r3, r3, #2
 8009eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a24      	ldr	r2, [pc, #144]	; (8009f4c <TIM_OC1_SetConfig+0xec>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d007      	beq.n	8009ed0 <TIM_OC1_SetConfig+0x70>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a23      	ldr	r2, [pc, #140]	; (8009f50 <TIM_OC1_SetConfig+0xf0>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d003      	beq.n	8009ed0 <TIM_OC1_SetConfig+0x70>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a22      	ldr	r2, [pc, #136]	; (8009f54 <TIM_OC1_SetConfig+0xf4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d10c      	bne.n	8009eea <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f023 0308 	bic.w	r3, r3, #8
 8009ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f023 0304 	bic.w	r3, r3, #4
 8009ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a17      	ldr	r2, [pc, #92]	; (8009f4c <TIM_OC1_SetConfig+0xec>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d007      	beq.n	8009f02 <TIM_OC1_SetConfig+0xa2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a16      	ldr	r2, [pc, #88]	; (8009f50 <TIM_OC1_SetConfig+0xf0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d003      	beq.n	8009f02 <TIM_OC1_SetConfig+0xa2>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a15      	ldr	r2, [pc, #84]	; (8009f54 <TIM_OC1_SetConfig+0xf4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d111      	bne.n	8009f26 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	621a      	str	r2, [r3, #32]
}
 8009f40:	bf00      	nop
 8009f42:	371c      	adds	r7, #28
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	40012c00 	.word	0x40012c00
 8009f50:	40014000 	.word	0x40014000
 8009f54:	40014400 	.word	0x40014400

08009f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	f023 0210 	bic.w	r2, r3, #16
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	021b      	lsls	r3, r3, #8
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f023 0320 	bic.w	r3, r3, #32
 8009fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a22      	ldr	r2, [pc, #136]	; (800a040 <TIM_OC2_SetConfig+0xe8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d10d      	bne.n	8009fd8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a19      	ldr	r2, [pc, #100]	; (800a040 <TIM_OC2_SetConfig+0xe8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d007      	beq.n	8009ff0 <TIM_OC2_SetConfig+0x98>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a18      	ldr	r2, [pc, #96]	; (800a044 <TIM_OC2_SetConfig+0xec>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d003      	beq.n	8009ff0 <TIM_OC2_SetConfig+0x98>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a17      	ldr	r2, [pc, #92]	; (800a048 <TIM_OC2_SetConfig+0xf0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d113      	bne.n	800a018 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4313      	orrs	r3, r2
 800a016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	621a      	str	r2, [r3, #32]
}
 800a032:	bf00      	nop
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400

0800a04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a21      	ldr	r2, [pc, #132]	; (800a130 <TIM_OC3_SetConfig+0xe4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d10d      	bne.n	800a0ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	021b      	lsls	r3, r3, #8
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a18      	ldr	r2, [pc, #96]	; (800a130 <TIM_OC3_SetConfig+0xe4>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d007      	beq.n	800a0e2 <TIM_OC3_SetConfig+0x96>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a17      	ldr	r2, [pc, #92]	; (800a134 <TIM_OC3_SetConfig+0xe8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d003      	beq.n	800a0e2 <TIM_OC3_SetConfig+0x96>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a16      	ldr	r2, [pc, #88]	; (800a138 <TIM_OC3_SetConfig+0xec>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d113      	bne.n	800a10a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40014000 	.word	0x40014000
 800a138:	40014400 	.word	0x40014400

0800a13c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a18a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	031b      	lsls	r3, r3, #12
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	4313      	orrs	r3, r2
 800a196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <TIM_OC4_SetConfig+0xb0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d007      	beq.n	800a1b0 <TIM_OC4_SetConfig+0x74>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a13      	ldr	r2, [pc, #76]	; (800a1f0 <TIM_OC4_SetConfig+0xb4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_OC4_SetConfig+0x74>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a12      	ldr	r2, [pc, #72]	; (800a1f4 <TIM_OC4_SetConfig+0xb8>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d109      	bne.n	800a1c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	019b      	lsls	r3, r3, #6
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	621a      	str	r2, [r3, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	40012c00 	.word	0x40012c00
 800a1f0:	40014000 	.word	0x40014000
 800a1f4:	40014400 	.word	0x40014400

0800a1f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a23c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	041b      	lsls	r3, r3, #16
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4313      	orrs	r3, r2
 800a248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a13      	ldr	r2, [pc, #76]	; (800a29c <TIM_OC5_SetConfig+0xa4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_OC5_SetConfig+0x6a>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a12      	ldr	r2, [pc, #72]	; (800a2a0 <TIM_OC5_SetConfig+0xa8>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_OC5_SetConfig+0x6a>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a11      	ldr	r2, [pc, #68]	; (800a2a4 <TIM_OC5_SetConfig+0xac>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d109      	bne.n	800a276 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	621a      	str	r2, [r3, #32]
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	40012c00 	.word	0x40012c00
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400

0800a2a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a14      	ldr	r2, [pc, #80]	; (800a350 <TIM_OC6_SetConfig+0xa8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d007      	beq.n	800a314 <TIM_OC6_SetConfig+0x6c>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a13      	ldr	r2, [pc, #76]	; (800a354 <TIM_OC6_SetConfig+0xac>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d003      	beq.n	800a314 <TIM_OC6_SetConfig+0x6c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a12      	ldr	r2, [pc, #72]	; (800a358 <TIM_OC6_SetConfig+0xb0>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d109      	bne.n	800a328 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a31a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	40012c00 	.word	0x40012c00
 800a354:	40014000 	.word	0x40014000
 800a358:	40014400 	.word	0x40014400

0800a35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	2201      	movs	r2, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	43db      	mvns	r3, r3
 800a37e:	401a      	ands	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	431a      	orrs	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e04f      	b.n	800a460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a21      	ldr	r2, [pc, #132]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d108      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a14      	ldr	r2, [pc, #80]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d009      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a428:	d004      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d10c      	bne.n	800a44e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a43a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	4313      	orrs	r3, r2
 800a444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	40012c00 	.word	0x40012c00
 800a470:	40014000 	.word	0x40014000

0800a474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	f107 0014 	add.w	r0, r7, #20
 800a4be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	b004      	add	sp, #16
 800a4d0:	4770      	bx	lr

0800a4d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a4e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a508:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a50c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a514:	b29a      	uxth	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	43db      	mvns	r3, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	4013      	ands	r3, r2
 800a520:	b29a      	uxth	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a550:	b084      	sub	sp, #16
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	f107 0014 	add.w	r0, r7, #20
 800a55e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	b004      	add	sp, #16
 800a590:	4770      	bx	lr
	...

0800a594 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a594:	b480      	push	{r7}
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	78db      	ldrb	r3, [r3, #3]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d81f      	bhi.n	800a606 <USB_ActivateEndpoint+0x72>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <USB_ActivateEndpoint+0x38>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a60f 	.word	0x0800a60f
 800a5d8:	0800a5eb 	.word	0x0800a5eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a5dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5e8:	e012      	b.n	800a610 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a5ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a5f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5f6:	e00b      	b.n	800a610 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a5f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a600:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a604:	e004      	b.n	800a610 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a60c:	e000      	b.n	800a610 <USB_ActivateEndpoint+0x7c>
      break;
 800a60e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62e:	b29b      	uxth	r3, r3
 800a630:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	b21b      	sxth	r3, r3
 800a642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a64a:	b21a      	sxth	r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	b21b      	sxth	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b21b      	sxth	r3, r3
 800a656:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	441a      	add	r2, r3
 800a664:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a66c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a678:	b29b      	uxth	r3, r3
 800a67a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	7b1b      	ldrb	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 816e 	bne.w	800a962 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	785b      	ldrb	r3, [r3, #1]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f000 8084 	beq.w	800a798 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	61bb      	str	r3, [r7, #24]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	00da      	lsls	r2, r3, #3
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	88db      	ldrh	r3, [r3, #6]
 800a6b8:	085b      	lsrs	r3, r3, #1
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	827b      	strh	r3, [r7, #18]
 800a6d2:	8a7b      	ldrh	r3, [r7, #18]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01b      	beq.n	800a714 <USB_ActivateEndpoint+0x180>
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f2:	823b      	strh	r3, [r7, #16]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	441a      	add	r2, r3
 800a6fe:	8a3b      	ldrh	r3, [r7, #16]
 800a700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a70c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a710:	b29b      	uxth	r3, r3
 800a712:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	78db      	ldrb	r3, [r3, #3]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d020      	beq.n	800a75e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a732:	81bb      	strh	r3, [r7, #12]
 800a734:	89bb      	ldrh	r3, [r7, #12]
 800a736:	f083 0320 	eor.w	r3, r3, #32
 800a73a:	81bb      	strh	r3, [r7, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	441a      	add	r2, r3
 800a746:	89bb      	ldrh	r3, [r7, #12]
 800a748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8013      	strh	r3, [r2, #0]
 800a75c:	e2cb      	b.n	800acf6 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a774:	81fb      	strh	r3, [r7, #14]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	441a      	add	r2, r3
 800a780:	89fb      	ldrh	r3, [r7, #14]
 800a782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a792:	b29b      	uxth	r3, r3
 800a794:	8013      	strh	r3, [r2, #0]
 800a796:	e2ae      	b.n	800acf6 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	633b      	str	r3, [r7, #48]	; 0x30
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	4413      	add	r3, r2
 800a7aa:	633b      	str	r3, [r7, #48]	; 0x30
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	00da      	lsls	r2, r3, #3
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	88db      	ldrh	r3, [r3, #6]
 800a7c0:	085b      	lsrs	r3, r3, #1
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	4413      	add	r3, r2
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	00da      	lsls	r2, r3, #3
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f6:	d918      	bls.n	800a82a <USB_ActivateEndpoint+0x296>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	095b      	lsrs	r3, r3, #5
 800a7fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f003 031f 	and.w	r3, r3, #31
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <USB_ActivateEndpoint+0x27e>
 800a80c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a80e:	3b01      	subs	r3, #1
 800a810:	66bb      	str	r3, [r7, #104]	; 0x68
 800a812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a814:	b29b      	uxth	r3, r3
 800a816:	029b      	lsls	r3, r3, #10
 800a818:	b29b      	uxth	r3, r3
 800a81a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a81e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a822:	b29a      	uxth	r2, r3
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	801a      	strh	r2, [r3, #0]
 800a828:	e029      	b.n	800a87e <USB_ActivateEndpoint+0x2ea>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d112      	bne.n	800a858 <USB_ActivateEndpoint+0x2c4>
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a850:	b29a      	uxth	r2, r3
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	e012      	b.n	800a87e <USB_ActivateEndpoint+0x2ea>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	085b      	lsrs	r3, r3, #1
 800a85e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <USB_ActivateEndpoint+0x2de>
 800a86c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a86e:	3301      	adds	r3, #1
 800a870:	66bb      	str	r3, [r7, #104]	; 0x68
 800a872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a874:	b29b      	uxth	r3, r3
 800a876:	029b      	lsls	r3, r3, #10
 800a878:	b29a      	uxth	r2, r3
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a88e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01b      	beq.n	800a8ce <USB_ActivateEndpoint+0x33a>
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ac:	843b      	strh	r3, [r7, #32]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	441a      	add	r2, r3
 800a8b8:	8c3b      	ldrh	r3, [r7, #32]
 800a8ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d124      	bne.n	800a920 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ec:	83bb      	strh	r3, [r7, #28]
 800a8ee:	8bbb      	ldrh	r3, [r7, #28]
 800a8f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8f4:	83bb      	strh	r3, [r7, #28]
 800a8f6:	8bbb      	ldrh	r3, [r7, #28]
 800a8f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8fc:	83bb      	strh	r3, [r7, #28]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	441a      	add	r2, r3
 800a908:	8bbb      	ldrh	r3, [r7, #28]
 800a90a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a90e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	8013      	strh	r3, [r2, #0]
 800a91e:	e1ea      	b.n	800acf6 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a936:	83fb      	strh	r3, [r7, #30]
 800a938:	8bfb      	ldrh	r3, [r7, #30]
 800a93a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a93e:	83fb      	strh	r3, [r7, #30]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	441a      	add	r2, r3
 800a94a:	8bfb      	ldrh	r3, [r7, #30]
 800a94c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	8013      	strh	r3, [r2, #0]
 800a960:	e1c9      	b.n	800acf6 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	78db      	ldrb	r3, [r3, #3]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d11e      	bne.n	800a9a8 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	b29b      	uxth	r3, r3
 800a978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a980:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a99a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	8013      	strh	r3, [r2, #0]
 800a9a6:	e01d      	b.n	800a9e4 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	441a      	add	r2, r3
 800a9cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a9d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9f4:	4413      	add	r3, r2
 800a9f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	00da      	lsls	r2, r3, #3
 800a9fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa06:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	891b      	ldrh	r3, [r3, #8]
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa16:	801a      	strh	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa28:	4413      	add	r3, r2
 800aa2a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	00da      	lsls	r2, r3, #3
 800aa32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa34:	4413      	add	r3, r2
 800aa36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa3a:	653b      	str	r3, [r7, #80]	; 0x50
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	895b      	ldrh	r3, [r3, #10]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	785b      	ldrb	r3, [r3, #1]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8093 	bne.w	800ab7c <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aa66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01b      	beq.n	800aaaa <USB_ActivateEndpoint+0x516>
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	441a      	add	r2, r3
 800aa94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aaba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d01b      	beq.n	800aafa <USB_ActivateEndpoint+0x566>
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	441a      	add	r2, r3
 800aae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab10:	873b      	strh	r3, [r7, #56]	; 0x38
 800ab12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ab14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab18:	873b      	strh	r3, [r7, #56]	; 0x38
 800ab1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ab1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab20:	873b      	strh	r3, [r7, #56]	; 0x38
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	441a      	add	r2, r3
 800ab2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ab2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab58:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	441a      	add	r2, r3
 800ab64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	8013      	strh	r3, [r2, #0]
 800ab7a:	e0bc      	b.n	800acf6 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ab8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01d      	beq.n	800abd4 <USB_ActivateEndpoint+0x640>
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	441a      	add	r2, r3
 800abbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800abc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800abe4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800abe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01d      	beq.n	800ac2c <USB_ActivateEndpoint+0x698>
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	441a      	add	r2, r3
 800ac14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ac18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	78db      	ldrb	r3, [r3, #3]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d024      	beq.n	800ac7e <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ac4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ac52:	f083 0320 	eor.w	r3, r3, #32
 800ac56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	441a      	add	r2, r3
 800ac64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ac68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	8013      	strh	r3, [r2, #0]
 800ac7c:	e01d      	b.n	800acba <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800accc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	441a      	add	r2, r3
 800acde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ace2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800acf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3774      	adds	r7, #116	; 0x74
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop

0800ad08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b08d      	sub	sp, #52	; 0x34
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	7b1b      	ldrb	r3, [r3, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f040 808e 	bne.w	800ae38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d044      	beq.n	800adae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	81bb      	strh	r3, [r7, #12]
 800ad32:	89bb      	ldrh	r3, [r7, #12]
 800ad34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01b      	beq.n	800ad74 <USB_DeactivateEndpoint+0x6c>
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad52:	817b      	strh	r3, [r7, #10]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	441a      	add	r2, r3
 800ad5e:	897b      	ldrh	r3, [r7, #10]
 800ad60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad8a:	813b      	strh	r3, [r7, #8]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	441a      	add	r2, r3
 800ad96:	893b      	ldrh	r3, [r7, #8]
 800ad98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ada0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ada4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	8013      	strh	r3, [r2, #0]
 800adac:	e192      	b.n	800b0d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	827b      	strh	r3, [r7, #18]
 800adbc:	8a7b      	ldrh	r3, [r7, #18]
 800adbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01b      	beq.n	800adfe <USB_DeactivateEndpoint+0xf6>
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800addc:	823b      	strh	r3, [r7, #16]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	441a      	add	r2, r3
 800ade8:	8a3b      	ldrh	r3, [r7, #16]
 800adea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae14:	81fb      	strh	r3, [r7, #14]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	441a      	add	r2, r3
 800ae20:	89fb      	ldrh	r3, [r7, #14]
 800ae22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	8013      	strh	r3, [r2, #0]
 800ae36:	e14d      	b.n	800b0d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 80a5 	bne.w	800af8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	843b      	strh	r3, [r7, #32]
 800ae50:	8c3b      	ldrh	r3, [r7, #32]
 800ae52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d01b      	beq.n	800ae92 <USB_DeactivateEndpoint+0x18a>
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae70:	83fb      	strh	r3, [r7, #30]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	441a      	add	r2, r3
 800ae7c:	8bfb      	ldrh	r3, [r7, #30]
 800ae7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	83bb      	strh	r3, [r7, #28]
 800aea0:	8bbb      	ldrh	r3, [r7, #28]
 800aea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01b      	beq.n	800aee2 <USB_DeactivateEndpoint+0x1da>
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec0:	837b      	strh	r3, [r7, #26]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	441a      	add	r2, r3
 800aecc:	8b7b      	ldrh	r3, [r7, #26]
 800aece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aede:	b29b      	uxth	r3, r3
 800aee0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef8:	833b      	strh	r3, [r7, #24]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	441a      	add	r2, r3
 800af04:	8b3b      	ldrh	r3, [r7, #24]
 800af06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af16:	b29b      	uxth	r3, r3
 800af18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29b      	uxth	r3, r3
 800af28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af30:	82fb      	strh	r3, [r7, #22]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	441a      	add	r2, r3
 800af3c:	8afb      	ldrh	r3, [r7, #22]
 800af3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af4e:	b29b      	uxth	r3, r3
 800af50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af68:	82bb      	strh	r3, [r7, #20]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	441a      	add	r2, r3
 800af74:	8abb      	ldrh	r3, [r7, #20]
 800af76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af86:	b29b      	uxth	r3, r3
 800af88:	8013      	strh	r3, [r2, #0]
 800af8a:	e0a3      	b.n	800b0d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d01b      	beq.n	800afdc <USB_DeactivateEndpoint+0x2d4>
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	441a      	add	r2, r3
 800afc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800afc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd8:	b29b      	uxth	r3, r3
 800afda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800afea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800afec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01b      	beq.n	800b02c <USB_DeactivateEndpoint+0x324>
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	b29b      	uxth	r3, r3
 800b002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b00a:	853b      	strh	r3, [r7, #40]	; 0x28
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b028:	b29b      	uxth	r3, r3
 800b02a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b042:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	441a      	add	r2, r3
 800b04e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b060:	b29b      	uxth	r3, r3
 800b062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	b29b      	uxth	r3, r3
 800b072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b07a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	441a      	add	r2, r3
 800b086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b08c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b098:	b29b      	uxth	r3, r3
 800b09a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	441a      	add	r2, r3
 800b0be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3734      	adds	r7, #52	; 0x34
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b0c2      	sub	sp, #264	; 0x108
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f0:	6018      	str	r0, [r3, #0]
 800b0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	f040 867b 	bne.w	800be04 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	699a      	ldr	r2, [r3, #24]
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	d908      	bls.n	800b13c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b13a:	e007      	b.n	800b14c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	7b1b      	ldrb	r3, [r3, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d13a      	bne.n	800b1d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6959      	ldr	r1, [r3, #20]
 800b168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	88da      	ldrh	r2, [r3, #6]
 800b174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b17e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b182:	6800      	ldr	r0, [r0, #0]
 800b184:	f001 fc3e 	bl	800ca04 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	00da      	lsls	r2, r3, #3
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	f000 bde3 	b.w	800bd98 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	f040 843a 	bne.w	800ba58 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6a1a      	ldr	r2, [r3, #32]
 800b1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	f240 83b7 	bls.w	800b970 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b228:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	441a      	add	r2, r3
 800b246:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b252:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6a1a      	ldr	r2, [r3, #32]
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26e:	1ad2      	subs	r2, r2, r3
 800b270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 81b3 	beq.w	800b60a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	633b      	str	r3, [r7, #48]	; 0x30
 800b2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d16d      	bne.n	800b39c <USB_EPStartXfer+0x2ba>
 800b2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	4413      	add	r3, r2
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	00da      	lsls	r2, r3, #3
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	2b3e      	cmp	r3, #62	; 0x3e
 800b302:	d91c      	bls.n	800b33e <USB_EPStartXfer+0x25c>
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	095b      	lsrs	r3, r3, #5
 800b30a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b312:	f003 031f 	and.w	r3, r3, #31
 800b316:	2b00      	cmp	r3, #0
 800b318:	d104      	bne.n	800b324 <USB_EPStartXfer+0x242>
 800b31a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b31e:	3b01      	subs	r3, #1
 800b320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b324:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b328:	b29b      	uxth	r3, r3
 800b32a:	029b      	lsls	r3, r3, #10
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b336:	b29a      	uxth	r2, r3
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	801a      	strh	r2, [r3, #0]
 800b33c:	e053      	b.n	800b3e6 <USB_EPStartXfer+0x304>
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	2b00      	cmp	r3, #0
 800b344:	d112      	bne.n	800b36c <USB_EPStartXfer+0x28a>
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b350:	b29a      	uxth	r2, r3
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	801a      	strh	r2, [r3, #0]
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b364:	b29a      	uxth	r2, r3
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	801a      	strh	r2, [r3, #0]
 800b36a:	e03c      	b.n	800b3e6 <USB_EPStartXfer+0x304>
 800b36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b370:	085b      	lsrs	r3, r3, #1
 800b372:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d004      	beq.n	800b38c <USB_EPStartXfer+0x2aa>
 800b382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b386:	3301      	adds	r3, #1
 800b388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b38c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b390:	b29b      	uxth	r3, r3
 800b392:	029b      	lsls	r3, r3, #10
 800b394:	b29a      	uxth	r2, r3
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e024      	b.n	800b3e6 <USB_EPStartXfer+0x304>
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d11c      	bne.n	800b3e6 <USB_EPStartXfer+0x304>
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	4413      	add	r3, r2
 800b3c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	00da      	lsls	r2, r3, #3
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	895b      	ldrh	r3, [r3, #10]
 800b3f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6959      	ldr	r1, [r3, #20]
 800b402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b406:	b29b      	uxth	r3, r3
 800b408:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b40c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b410:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b414:	6800      	ldr	r0, [r0, #0]
 800b416:	f001 faf5 	bl	800ca04 <USB_WritePMA>
            ep->xfer_buff += len;
 800b41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	441a      	add	r2, r3
 800b42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	429a      	cmp	r2, r3
 800b452:	d90f      	bls.n	800b474 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6a1a      	ldr	r2, [r3, #32]
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b464:	1ad2      	subs	r2, r2, r3
 800b466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	621a      	str	r2, [r3, #32]
 800b472:	e00e      	b.n	800b492 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2200      	movs	r2, #0
 800b490:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d16d      	bne.n	800b57e <USB_EPStartXfer+0x49c>
 800b4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	61bb      	str	r3, [r7, #24]
 800b4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	00da      	lsls	r2, r3, #3
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e2:	2b3e      	cmp	r3, #62	; 0x3e
 800b4e4:	d91c      	bls.n	800b520 <USB_EPStartXfer+0x43e>
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	095b      	lsrs	r3, r3, #5
 800b4ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f4:	f003 031f 	and.w	r3, r3, #31
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <USB_EPStartXfer+0x424>
 800b4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b500:	3b01      	subs	r3, #1
 800b502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	029b      	lsls	r3, r3, #10
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b518:	b29a      	uxth	r2, r3
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	801a      	strh	r2, [r3, #0]
 800b51e:	e059      	b.n	800b5d4 <USB_EPStartXfer+0x4f2>
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	2b00      	cmp	r3, #0
 800b526:	d112      	bne.n	800b54e <USB_EPStartXfer+0x46c>
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b532:	b29a      	uxth	r2, r3
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	801a      	strh	r2, [r3, #0]
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b546:	b29a      	uxth	r2, r3
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e042      	b.n	800b5d4 <USB_EPStartXfer+0x4f2>
 800b54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b552:	085b      	lsrs	r3, r3, #1
 800b554:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	f003 0301 	and.w	r3, r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	d004      	beq.n	800b56e <USB_EPStartXfer+0x48c>
 800b564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b568:	3301      	adds	r3, #1
 800b56a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b56e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b572:	b29b      	uxth	r3, r3
 800b574:	029b      	lsls	r3, r3, #10
 800b576:	b29a      	uxth	r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	801a      	strh	r2, [r3, #0]
 800b57c:	e02a      	b.n	800b5d4 <USB_EPStartXfer+0x4f2>
 800b57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d122      	bne.n	800b5d4 <USB_EPStartXfer+0x4f2>
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	623b      	str	r3, [r7, #32]
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	623b      	str	r3, [r7, #32]
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	00da      	lsls	r2, r3, #3
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5c8:	61fb      	str	r3, [r7, #28]
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	891b      	ldrh	r3, [r3, #8]
 800b5e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6959      	ldr	r1, [r3, #20]
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b602:	6800      	ldr	r0, [r0, #0]
 800b604:	f001 f9fe 	bl	800ca04 <USB_WritePMA>
 800b608:	e3c6      	b.n	800bd98 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	785b      	ldrb	r3, [r3, #1]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d16d      	bne.n	800b6f6 <USB_EPStartXfer+0x614>
 800b61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	64bb      	str	r3, [r7, #72]	; 0x48
 800b626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b634:	b29b      	uxth	r3, r3
 800b636:	461a      	mov	r2, r3
 800b638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b63a:	4413      	add	r3, r2
 800b63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	00da      	lsls	r2, r3, #3
 800b64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b64e:	4413      	add	r3, r2
 800b650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b654:	647b      	str	r3, [r7, #68]	; 0x44
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65a:	2b3e      	cmp	r3, #62	; 0x3e
 800b65c:	d91c      	bls.n	800b698 <USB_EPStartXfer+0x5b6>
 800b65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b662:	095b      	lsrs	r3, r3, #5
 800b664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66c:	f003 031f 	and.w	r3, r3, #31
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <USB_EPStartXfer+0x59c>
 800b674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b678:	3b01      	subs	r3, #1
 800b67a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b67e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b682:	b29b      	uxth	r3, r3
 800b684:	029b      	lsls	r3, r3, #10
 800b686:	b29b      	uxth	r3, r3
 800b688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b690:	b29a      	uxth	r2, r3
 800b692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b694:	801a      	strh	r2, [r3, #0]
 800b696:	e059      	b.n	800b74c <USB_EPStartXfer+0x66a>
 800b698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d112      	bne.n	800b6c6 <USB_EPStartXfer+0x5e4>
 800b6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ae:	801a      	strh	r2, [r3, #0]
 800b6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6c2:	801a      	strh	r2, [r3, #0]
 800b6c4:	e042      	b.n	800b74c <USB_EPStartXfer+0x66a>
 800b6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <USB_EPStartXfer+0x604>
 800b6dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	029b      	lsls	r3, r3, #10
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	e02a      	b.n	800b74c <USB_EPStartXfer+0x66a>
 800b6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	785b      	ldrb	r3, [r3, #1]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d122      	bne.n	800b74c <USB_EPStartXfer+0x66a>
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	653b      	str	r3, [r7, #80]	; 0x50
 800b712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b720:	b29b      	uxth	r3, r3
 800b722:	461a      	mov	r2, r3
 800b724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b726:	4413      	add	r3, r2
 800b728:	653b      	str	r3, [r7, #80]	; 0x50
 800b72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	00da      	lsls	r2, r3, #3
 800b738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b73a:	4413      	add	r3, r2
 800b73c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	b29a      	uxth	r2, r3
 800b748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	891b      	ldrh	r3, [r3, #8]
 800b758:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6959      	ldr	r1, [r3, #20]
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b772:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b776:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	f001 f942 	bl	800ca04 <USB_WritePMA>
            ep->xfer_buff += len;
 800b780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b790:	441a      	add	r2, r3
 800b792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6a1a      	ldr	r2, [r3, #32]
 800b7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d90f      	bls.n	800b7da <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6a1a      	ldr	r2, [r3, #32]
 800b7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	621a      	str	r2, [r3, #32]
 800b7d8:	e00e      	b.n	800b7f8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	643b      	str	r3, [r7, #64]	; 0x40
 800b804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	785b      	ldrb	r3, [r3, #1]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d16d      	bne.n	800b8f0 <USB_EPStartXfer+0x80e>
 800b814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b82e:	b29b      	uxth	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	4413      	add	r3, r2
 800b836:	63bb      	str	r3, [r7, #56]	; 0x38
 800b838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	00da      	lsls	r2, r3, #3
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	4413      	add	r3, r2
 800b84a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b84e:	637b      	str	r3, [r7, #52]	; 0x34
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	2b3e      	cmp	r3, #62	; 0x3e
 800b856:	d91c      	bls.n	800b892 <USB_EPStartXfer+0x7b0>
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	095b      	lsrs	r3, r3, #5
 800b85e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b866:	f003 031f 	and.w	r3, r3, #31
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d104      	bne.n	800b878 <USB_EPStartXfer+0x796>
 800b86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b872:	3b01      	subs	r3, #1
 800b874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	029b      	lsls	r3, r3, #10
 800b880:	b29b      	uxth	r3, r3
 800b882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88e:	801a      	strh	r2, [r3, #0]
 800b890:	e053      	b.n	800b93a <USB_EPStartXfer+0x858>
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	2b00      	cmp	r3, #0
 800b898:	d112      	bne.n	800b8c0 <USB_EPStartXfer+0x7de>
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	801a      	strh	r2, [r3, #0]
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8bc:	801a      	strh	r2, [r3, #0]
 800b8be:	e03c      	b.n	800b93a <USB_EPStartXfer+0x858>
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	085b      	lsrs	r3, r3, #1
 800b8c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <USB_EPStartXfer+0x7fe>
 800b8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	029b      	lsls	r3, r3, #10
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ec:	801a      	strh	r2, [r3, #0]
 800b8ee:	e024      	b.n	800b93a <USB_EPStartXfer+0x858>
 800b8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	785b      	ldrb	r3, [r3, #1]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d11c      	bne.n	800b93a <USB_EPStartXfer+0x858>
 800b900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b90e:	b29b      	uxth	r3, r3
 800b910:	461a      	mov	r2, r3
 800b912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b914:	4413      	add	r3, r2
 800b916:	643b      	str	r3, [r7, #64]	; 0x40
 800b918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	00da      	lsls	r2, r3, #3
 800b926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b928:	4413      	add	r3, r2
 800b92a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b934:	b29a      	uxth	r2, r3
 800b936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b938:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	895b      	ldrh	r3, [r3, #10]
 800b946:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6959      	ldr	r1, [r3, #20]
 800b956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b960:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b964:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b968:	6800      	ldr	r0, [r0, #0]
 800b96a:	f001 f84b 	bl	800ca04 <USB_WritePMA>
 800b96e:	e213      	b.n	800bd98 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	441a      	add	r2, r3
 800b9c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b9c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9fc:	4413      	add	r3, r2
 800b9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	00da      	lsls	r2, r3, #3
 800ba0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba10:	4413      	add	r3, r2
 800ba12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	891b      	ldrh	r3, [r3, #8]
 800ba2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6959      	ldr	r1, [r3, #20]
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba50:	6800      	ldr	r0, [r0, #0]
 800ba52:	f000 ffd7 	bl	800ca04 <USB_WritePMA>
 800ba56:	e19f      	b.n	800bd98 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ba58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6a1a      	ldr	r2, [r3, #32]
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 80bc 	beq.w	800bc16 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	673b      	str	r3, [r7, #112]	; 0x70
 800baaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d16d      	bne.n	800bb96 <USB_EPStartXfer+0xab4>
 800baba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800babe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bada:	4413      	add	r3, r2
 800badc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	00da      	lsls	r2, r3, #3
 800baec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baee:	4413      	add	r3, r2
 800baf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baf4:	667b      	str	r3, [r7, #100]	; 0x64
 800baf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafa:	2b3e      	cmp	r3, #62	; 0x3e
 800bafc:	d91c      	bls.n	800bb38 <USB_EPStartXfer+0xa56>
 800bafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb02:	095b      	lsrs	r3, r3, #5
 800bb04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb0c:	f003 031f 	and.w	r3, r3, #31
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <USB_EPStartXfer+0xa3c>
 800bb14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	029b      	lsls	r3, r3, #10
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb34:	801a      	strh	r2, [r3, #0]
 800bb36:	e053      	b.n	800bbe0 <USB_EPStartXfer+0xafe>
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d112      	bne.n	800bb66 <USB_EPStartXfer+0xa84>
 800bb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb62:	801a      	strh	r2, [r3, #0]
 800bb64:	e03c      	b.n	800bbe0 <USB_EPStartXfer+0xafe>
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6a:	085b      	lsrs	r3, r3, #1
 800bb6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d004      	beq.n	800bb86 <USB_EPStartXfer+0xaa4>
 800bb7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb80:	3301      	adds	r3, #1
 800bb82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	029b      	lsls	r3, r3, #10
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb92:	801a      	strh	r2, [r3, #0]
 800bb94:	e024      	b.n	800bbe0 <USB_EPStartXfer+0xafe>
 800bb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d11c      	bne.n	800bbe0 <USB_EPStartXfer+0xafe>
 800bba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbba:	4413      	add	r3, r2
 800bbbc:	673b      	str	r3, [r7, #112]	; 0x70
 800bbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	00da      	lsls	r2, r3, #3
 800bbcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbce:	4413      	add	r3, r2
 800bbd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	895b      	ldrh	r3, [r3, #10]
 800bbec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6959      	ldr	r1, [r3, #20]
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc0e:	6800      	ldr	r0, [r0, #0]
 800bc10:	f000 fef8 	bl	800ca04 <USB_WritePMA>
 800bc14:	e0c0      	b.n	800bd98 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	785b      	ldrb	r3, [r3, #1]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d16d      	bne.n	800bd02 <USB_EPStartXfer+0xc20>
 800bc26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc46:	4413      	add	r3, r2
 800bc48:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	00da      	lsls	r2, r3, #3
 800bc58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc60:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc66:	2b3e      	cmp	r3, #62	; 0x3e
 800bc68:	d91c      	bls.n	800bca4 <USB_EPStartXfer+0xbc2>
 800bc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6e:	095b      	lsrs	r3, r3, #5
 800bc70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc78:	f003 031f 	and.w	r3, r3, #31
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d104      	bne.n	800bc8a <USB_EPStartXfer+0xba8>
 800bc80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc84:	3b01      	subs	r3, #1
 800bc86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	029b      	lsls	r3, r3, #10
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bca0:	801a      	strh	r2, [r3, #0]
 800bca2:	e05f      	b.n	800bd64 <USB_EPStartXfer+0xc82>
 800bca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d112      	bne.n	800bcd2 <USB_EPStartXfer+0xbf0>
 800bcac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcba:	801a      	strh	r2, [r3, #0]
 800bcbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcce:	801a      	strh	r2, [r3, #0]
 800bcd0:	e048      	b.n	800bd64 <USB_EPStartXfer+0xc82>
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bcdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <USB_EPStartXfer+0xc10>
 800bce8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcec:	3301      	adds	r3, #1
 800bcee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bcf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	029b      	lsls	r3, r3, #10
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcfe:	801a      	strh	r2, [r3, #0]
 800bd00:	e030      	b.n	800bd64 <USB_EPStartXfer+0xc82>
 800bd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d128      	bne.n	800bd64 <USB_EPStartXfer+0xc82>
 800bd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd36:	4413      	add	r3, r2
 800bd38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	00da      	lsls	r2, r3, #3
 800bd4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd4e:	4413      	add	r3, r2
 800bd50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6959      	ldr	r1, [r3, #20]
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd92:	6800      	ldr	r0, [r0, #0]
 800bd94:	f000 fe36 	bl	800ca04 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdbe:	817b      	strh	r3, [r7, #10]
 800bdc0:	897b      	ldrh	r3, [r7, #10]
 800bdc2:	f083 0310 	eor.w	r3, r3, #16
 800bdc6:	817b      	strh	r3, [r7, #10]
 800bdc8:	897b      	ldrh	r3, [r7, #10]
 800bdca:	f083 0320 	eor.w	r3, r3, #32
 800bdce:	817b      	strh	r3, [r7, #10]
 800bdd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	441a      	add	r2, r3
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	8013      	strh	r3, [r2, #0]
 800be00:	f000 bc9f 	b.w	800c742 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800be04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	7b1b      	ldrb	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f040 80ae 	bne.w	800bf72 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800be16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	699a      	ldr	r2, [r3, #24]
 800be22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d917      	bls.n	800be62 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800be32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be52:	1ad2      	subs	r2, r2, r3
 800be54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	619a      	str	r2, [r3, #24]
 800be60:	e00e      	b.n	800be80 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800be62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800be72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2200      	movs	r2, #0
 800be7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bea4:	4413      	add	r3, r2
 800bea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800beaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	00da      	lsls	r2, r3, #3
 800beb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bebc:	4413      	add	r3, r2
 800bebe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beca:	2b3e      	cmp	r3, #62	; 0x3e
 800becc:	d91d      	bls.n	800bf0a <USB_EPStartXfer+0xe28>
 800bece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bed2:	095b      	lsrs	r3, r3, #5
 800bed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bedc:	f003 031f 	and.w	r3, r3, #31
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d104      	bne.n	800beee <USB_EPStartXfer+0xe0c>
 800bee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bee8:	3b01      	subs	r3, #1
 800beea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800beee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	029b      	lsls	r3, r3, #10
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800befc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf06:	801a      	strh	r2, [r3, #0]
 800bf08:	e3e1      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d116      	bne.n	800bf40 <USB_EPStartXfer+0xe5e>
 800bf12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf24:	801a      	strh	r2, [r3, #0]
 800bf26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf3c:	801a      	strh	r2, [r3, #0]
 800bf3e:	e3c6      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
 800bf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf44:	085b      	lsrs	r3, r3, #1
 800bf46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <USB_EPStartXfer+0xe7e>
 800bf56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	029b      	lsls	r3, r3, #10
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf6e:	801a      	strh	r2, [r3, #0]
 800bf70:	e3ad      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bf72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	78db      	ldrb	r3, [r3, #3]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	f040 8200 	bne.w	800c384 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f040 8091 	bne.w	800c0b8 <USB_EPStartXfer+0xfd6>
 800bf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfba:	4413      	add	r3, r2
 800bfbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	00da      	lsls	r2, r3, #3
 800bfce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfd2:	4413      	add	r3, r2
 800bfd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	2b3e      	cmp	r3, #62	; 0x3e
 800bfea:	d925      	bls.n	800c038 <USB_EPStartXfer+0xf56>
 800bfec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	095b      	lsrs	r3, r3, #5
 800bffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	f003 031f 	and.w	r3, r3, #31
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <USB_EPStartXfer+0xf3a>
 800c012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c016:	3b01      	subs	r3, #1
 800c018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c020:	b29b      	uxth	r3, r3
 800c022:	029b      	lsls	r3, r3, #10
 800c024:	b29b      	uxth	r3, r3
 800c026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c02a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c02e:	b29a      	uxth	r2, r3
 800c030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c034:	801a      	strh	r2, [r3, #0]
 800c036:	e074      	b.n	800c122 <USB_EPStartXfer+0x1040>
 800c038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d116      	bne.n	800c076 <USB_EPStartXfer+0xf94>
 800c048:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	b29b      	uxth	r3, r3
 800c050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c054:	b29a      	uxth	r2, r3
 800c056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c05a:	801a      	strh	r2, [r3, #0]
 800c05c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	b29b      	uxth	r3, r3
 800c064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c072:	801a      	strh	r2, [r3, #0]
 800c074:	e055      	b.n	800c122 <USB_EPStartXfer+0x1040>
 800c076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	085b      	lsrs	r3, r3, #1
 800c084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <USB_EPStartXfer+0xfc4>
 800c09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	029b      	lsls	r3, r3, #10
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0b4:	801a      	strh	r2, [r3, #0]
 800c0b6:	e034      	b.n	800c122 <USB_EPStartXfer+0x1040>
 800c0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	785b      	ldrb	r3, [r3, #1]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d12c      	bne.n	800c122 <USB_EPStartXfer+0x1040>
 800c0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	00da      	lsls	r2, r3, #3
 800c100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c104:	4413      	add	r3, r2
 800c106:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c10a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c120:	801a      	strh	r2, [r3, #0]
 800c122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	785b      	ldrb	r3, [r3, #1]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f040 8091 	bne.w	800c264 <USB_EPStartXfer+0x1182>
 800c142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c15e:	b29b      	uxth	r3, r3
 800c160:	461a      	mov	r2, r3
 800c162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c166:	4413      	add	r3, r2
 800c168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	00da      	lsls	r2, r3, #3
 800c17a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c17e:	4413      	add	r3, r2
 800c180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	2b3e      	cmp	r3, #62	; 0x3e
 800c196:	d925      	bls.n	800c1e4 <USB_EPStartXfer+0x1102>
 800c198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	095b      	lsrs	r3, r3, #5
 800c1a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	f003 031f 	and.w	r3, r3, #31
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d104      	bne.n	800c1c8 <USB_EPStartXfer+0x10e6>
 800c1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	029b      	lsls	r3, r3, #10
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1e0:	801a      	strh	r2, [r3, #0]
 800c1e2:	e06d      	b.n	800c2c0 <USB_EPStartXfer+0x11de>
 800c1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d116      	bne.n	800c222 <USB_EPStartXfer+0x1140>
 800c1f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c200:	b29a      	uxth	r2, r3
 800c202:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c206:	801a      	strh	r2, [r3, #0]
 800c208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c218:	b29a      	uxth	r2, r3
 800c21a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c21e:	801a      	strh	r2, [r3, #0]
 800c220:	e04e      	b.n	800c2c0 <USB_EPStartXfer+0x11de>
 800c222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <USB_EPStartXfer+0x1170>
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	3301      	adds	r3, #1
 800c24e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c256:	b29b      	uxth	r3, r3
 800c258:	029b      	lsls	r3, r3, #10
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c260:	801a      	strh	r2, [r3, #0]
 800c262:	e02d      	b.n	800c2c0 <USB_EPStartXfer+0x11de>
 800c264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d125      	bne.n	800c2c0 <USB_EPStartXfer+0x11de>
 800c274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c282:	b29b      	uxth	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c28a:	4413      	add	r3, r2
 800c28c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	00da      	lsls	r2, r3, #3
 800c29e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 81fe 	beq.w	800c6ce <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c2f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <USB_EPStartXfer+0x1228>
 800c2fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10d      	bne.n	800c326 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c30a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c312:	2b00      	cmp	r3, #0
 800c314:	f040 81db 	bne.w	800c6ce <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c318:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	f040 81d4 	bne.w	800c6ce <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	b29b      	uxth	r3, r3
 800c344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c34c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	441a      	add	r2, r3
 800c36a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c36e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c37a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c37e:	b29b      	uxth	r3, r3
 800c380:	8013      	strh	r3, [r2, #0]
 800c382:	e1a4      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	78db      	ldrb	r3, [r3, #3]
 800c390:	2b01      	cmp	r3, #1
 800c392:	f040 819a 	bne.w	800c6ca <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	699a      	ldr	r2, [r3, #24]
 800c3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d917      	bls.n	800c3e2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	699a      	ldr	r2, [r3, #24]
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d2:	1ad2      	subs	r2, r2, r3
 800c3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	619a      	str	r2, [r3, #24]
 800c3e0:	e00e      	b.n	800c400 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d178      	bne.n	800c502 <USB_EPStartXfer+0x1420>
 800c410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	461a      	mov	r2, r3
 800c430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c434:	4413      	add	r3, r2
 800c436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	00da      	lsls	r2, r3, #3
 800c448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c44c:	4413      	add	r3, r2
 800c44e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c45a:	2b3e      	cmp	r3, #62	; 0x3e
 800c45c:	d91d      	bls.n	800c49a <USB_EPStartXfer+0x13b8>
 800c45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c462:	095b      	lsrs	r3, r3, #5
 800c464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c46c:	f003 031f 	and.w	r3, r3, #31
 800c470:	2b00      	cmp	r3, #0
 800c472:	d104      	bne.n	800c47e <USB_EPStartXfer+0x139c>
 800c474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c478:	3b01      	subs	r3, #1
 800c47a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c482:	b29b      	uxth	r3, r3
 800c484:	029b      	lsls	r3, r3, #10
 800c486:	b29b      	uxth	r3, r3
 800c488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c48c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c490:	b29a      	uxth	r2, r3
 800c492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c496:	801a      	strh	r2, [r3, #0]
 800c498:	e064      	b.n	800c564 <USB_EPStartXfer+0x1482>
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d116      	bne.n	800c4d0 <USB_EPStartXfer+0x13ee>
 800c4a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4b4:	801a      	strh	r2, [r3, #0]
 800c4b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4cc:	801a      	strh	r2, [r3, #0]
 800c4ce:	e049      	b.n	800c564 <USB_EPStartXfer+0x1482>
 800c4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d4:	085b      	lsrs	r3, r3, #1
 800c4d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <USB_EPStartXfer+0x140e>
 800c4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	029b      	lsls	r3, r3, #10
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4fe:	801a      	strh	r2, [r3, #0]
 800c500:	e030      	b.n	800c564 <USB_EPStartXfer+0x1482>
 800c502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	785b      	ldrb	r3, [r3, #1]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d128      	bne.n	800c564 <USB_EPStartXfer+0x1482>
 800c512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c52e:	b29b      	uxth	r3, r3
 800c530:	461a      	mov	r2, r3
 800c532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c536:	4413      	add	r3, r2
 800c538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	00da      	lsls	r2, r3, #3
 800c54a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c54e:	4413      	add	r3, r2
 800c550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c562:	801a      	strh	r2, [r3, #0]
 800c564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	785b      	ldrb	r3, [r3, #1]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d178      	bne.n	800c674 <USB_EPStartXfer+0x1592>
 800c582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	00da      	lsls	r2, r3, #3
 800c5ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c5be:	4413      	add	r3, r2
 800c5c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5cc:	2b3e      	cmp	r3, #62	; 0x3e
 800c5ce:	d91d      	bls.n	800c60c <USB_EPStartXfer+0x152a>
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d4:	095b      	lsrs	r3, r3, #5
 800c5d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5de:	f003 031f 	and.w	r3, r3, #31
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d104      	bne.n	800c5f0 <USB_EPStartXfer+0x150e>
 800c5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	029b      	lsls	r3, r3, #10
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c602:	b29a      	uxth	r2, r3
 800c604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c608:	801a      	strh	r2, [r3, #0]
 800c60a:	e060      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
 800c60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c610:	2b00      	cmp	r3, #0
 800c612:	d116      	bne.n	800c642 <USB_EPStartXfer+0x1560>
 800c614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c620:	b29a      	uxth	r2, r3
 800c622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c626:	801a      	strh	r2, [r3, #0]
 800c628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c638:	b29a      	uxth	r2, r3
 800c63a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c63e:	801a      	strh	r2, [r3, #0]
 800c640:	e045      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c646:	085b      	lsrs	r3, r3, #1
 800c648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <USB_EPStartXfer+0x1580>
 800c658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c65c:	3301      	adds	r3, #1
 800c65e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c666:	b29b      	uxth	r3, r3
 800c668:	029b      	lsls	r3, r3, #10
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	e02c      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
 800c674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	785b      	ldrb	r3, [r3, #1]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d124      	bne.n	800c6ce <USB_EPStartXfer+0x15ec>
 800c684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c692:	b29b      	uxth	r3, r3
 800c694:	461a      	mov	r2, r3
 800c696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c69a:	4413      	add	r3, r2
 800c69c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	00da      	lsls	r2, r3, #3
 800c6ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6c6:	801a      	strh	r2, [r3, #0]
 800c6c8:	e001      	b.n	800c6ce <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e03a      	b.n	800c744 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c6f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c6fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c70c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	441a      	add	r2, r3
 800c72a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c72e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c73e:	b29b      	uxth	r3, r3
 800c740:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c74e:	b480      	push	{r7}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d020      	beq.n	800c7a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c776:	81bb      	strh	r3, [r7, #12]
 800c778:	89bb      	ldrh	r3, [r7, #12]
 800c77a:	f083 0310 	eor.w	r3, r3, #16
 800c77e:	81bb      	strh	r3, [r7, #12]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	441a      	add	r2, r3
 800c78a:	89bb      	ldrh	r3, [r7, #12]
 800c78c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	8013      	strh	r3, [r2, #0]
 800c7a0:	e01f      	b.n	800c7e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b8:	81fb      	strh	r3, [r7, #14]
 800c7ba:	89fb      	ldrh	r3, [r7, #14]
 800c7bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7c0:	81fb      	strh	r3, [r7, #14]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	441a      	add	r2, r3
 800c7cc:	89fb      	ldrh	r3, [r7, #14]
 800c7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	7b1b      	ldrb	r3, [r3, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f040 809d 	bne.w	800c93e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	785b      	ldrb	r3, [r3, #1]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d04c      	beq.n	800c8a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	823b      	strh	r3, [r7, #16]
 800c81a:	8a3b      	ldrh	r3, [r7, #16]
 800c81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c820:	2b00      	cmp	r3, #0
 800c822:	d01b      	beq.n	800c85c <USB_EPClearStall+0x6c>
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	b29b      	uxth	r3, r3
 800c832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83a:	81fb      	strh	r3, [r7, #14]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	441a      	add	r2, r3
 800c846:	89fb      	ldrh	r3, [r7, #14]
 800c848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c84c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c854:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c858:	b29b      	uxth	r3, r3
 800c85a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	78db      	ldrb	r3, [r3, #3]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d06c      	beq.n	800c93e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	b29b      	uxth	r3, r3
 800c872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c87a:	81bb      	strh	r3, [r7, #12]
 800c87c:	89bb      	ldrh	r3, [r7, #12]
 800c87e:	f083 0320 	eor.w	r3, r3, #32
 800c882:	81bb      	strh	r3, [r7, #12]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	441a      	add	r2, r3
 800c88e:	89bb      	ldrh	r3, [r7, #12]
 800c890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	8013      	strh	r3, [r2, #0]
 800c8a4:	e04b      	b.n	800c93e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	82fb      	strh	r3, [r7, #22]
 800c8b4:	8afb      	ldrh	r3, [r7, #22]
 800c8b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d01b      	beq.n	800c8f6 <USB_EPClearStall+0x106>
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	881b      	ldrh	r3, [r3, #0]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8d4:	82bb      	strh	r3, [r7, #20]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	441a      	add	r2, r3
 800c8e0:	8abb      	ldrh	r3, [r7, #20]
 800c8e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	b29b      	uxth	r3, r3
 800c904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c90c:	827b      	strh	r3, [r7, #18]
 800c90e:	8a7b      	ldrh	r3, [r7, #18]
 800c910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c914:	827b      	strh	r3, [r7, #18]
 800c916:	8a7b      	ldrh	r3, [r7, #18]
 800c918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c91c:	827b      	strh	r3, [r7, #18]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	441a      	add	r2, r3
 800c928:	8a7b      	ldrh	r3, [r7, #18]
 800c92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d103      	bne.n	800c966 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2280      	movs	r2, #128	; 0x80
 800c962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c982:	b29b      	uxth	r3, r3
 800c984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c9de:	68fb      	ldr	r3, [r7, #12]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b08b      	sub	sp, #44	; 0x2c
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4611      	mov	r1, r2
 800ca10:	461a      	mov	r2, r3
 800ca12:	460b      	mov	r3, r1
 800ca14:	80fb      	strh	r3, [r7, #6]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ca1a:	88bb      	ldrh	r3, [r7, #4]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	085b      	lsrs	r3, r3, #1
 800ca20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ca2a:	88fa      	ldrh	r2, [r7, #6]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
 800ca3a:	e01b      	b.n	800ca74 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	3301      	adds	r3, #1
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	021b      	lsls	r3, r3, #8
 800ca4a:	b21a      	sxth	r2, r3
 800ca4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	b21b      	sxth	r3, r3
 800ca54:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ca56:	6a3b      	ldr	r3, [r7, #32]
 800ca58:	8a7a      	ldrh	r2, [r7, #18]
 800ca5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	3302      	adds	r3, #2
 800ca60:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	3301      	adds	r3, #1
 800ca66:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	3b01      	subs	r3, #1
 800ca72:	627b      	str	r3, [r7, #36]	; 0x24
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e0      	bne.n	800ca3c <USB_WritePMA+0x38>
  }
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	372c      	adds	r7, #44	; 0x2c
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b08b      	sub	sp, #44	; 0x2c
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4611      	mov	r1, r2
 800ca94:	461a      	mov	r2, r3
 800ca96:	460b      	mov	r3, r1
 800ca98:	80fb      	strh	r3, [r7, #6]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ca9e:	88bb      	ldrh	r3, [r7, #4]
 800caa0:	085b      	lsrs	r3, r3, #1
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800caae:	88fa      	ldrh	r2, [r7, #6]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cab8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
 800cabe:	e018      	b.n	800caf2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	3302      	adds	r3, #2
 800cacc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	b2da      	uxtb	r2, r3
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	3301      	adds	r3, #1
 800cada:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	0a1b      	lsrs	r3, r3, #8
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	3301      	adds	r3, #1
 800caea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	3b01      	subs	r3, #1
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e3      	bne.n	800cac0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800caf8:	88bb      	ldrh	r3, [r7, #4]
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d007      	beq.n	800cb14 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	701a      	strb	r2, [r3, #0]
  }
}
 800cb14:	bf00      	nop
 800cb16:	372c      	adds	r7, #44	; 0x2c
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cb30:	f002 f99c 	bl	800ee6c <USBD_static_malloc>
 800cb34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d105      	bne.n	800cb48 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cb44:	2302      	movs	r3, #2
 800cb46:	e066      	b.n	800cc16 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7c1b      	ldrb	r3, [r3, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d119      	bne.n	800cb8c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cb58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	2181      	movs	r1, #129	; 0x81
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 ff85 	bl	800ea70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb70:	2202      	movs	r2, #2
 800cb72:	2101      	movs	r1, #1
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f001 ff7b 	bl	800ea70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2210      	movs	r2, #16
 800cb86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cb8a:	e016      	b.n	800cbba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cb8c:	2340      	movs	r3, #64	; 0x40
 800cb8e:	2202      	movs	r2, #2
 800cb90:	2181      	movs	r1, #129	; 0x81
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 ff6c 	bl	800ea70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cb9e:	2340      	movs	r3, #64	; 0x40
 800cba0:	2202      	movs	r2, #2
 800cba2:	2101      	movs	r1, #1
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 ff63 	bl	800ea70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2210      	movs	r2, #16
 800cbb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cbba:	2308      	movs	r3, #8
 800cbbc:	2203      	movs	r2, #3
 800cbbe:	2182      	movs	r1, #130	; 0x82
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 ff55 	bl	800ea70 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7c1b      	ldrb	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d109      	bne.n	800cc04 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f002 f8b3 	bl	800ed68 <USBD_LL_PrepareReceive>
 800cc02:	e007      	b.n	800cc14 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc0a:	2340      	movs	r3, #64	; 0x40
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f002 f8aa 	bl	800ed68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cc2a:	2181      	movs	r1, #129	; 0x81
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f001 ff5d 	bl	800eaec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cc38:	2101      	movs	r1, #1
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f001 ff56 	bl	800eaec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cc48:	2182      	movs	r1, #130	; 0x82
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 ff4e 	bl	800eaec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00e      	beq.n	800cc88 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f002 f904 	bl	800ee88 <USBD_static_free>
    pdev->pClassData = NULL;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cca4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cca6:	2300      	movs	r3, #0
 800cca8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e0af      	b.n	800ce1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d03f      	beq.n	800cd48 <USBD_CDC_Setup+0xb4>
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	f040 809f 	bne.w	800ce0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	88db      	ldrh	r3, [r3, #6]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d02e      	beq.n	800cd34 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	b25b      	sxtb	r3, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da16      	bge.n	800cd0e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ccec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	88d2      	ldrh	r2, [r2, #6]
 800ccf2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	88db      	ldrh	r3, [r3, #6]
 800ccf8:	2b07      	cmp	r3, #7
 800ccfa:	bf28      	it	cs
 800ccfc:	2307      	movcs	r3, #7
 800ccfe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	89fa      	ldrh	r2, [r7, #14]
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f001 fa9f 	bl	800e24a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cd0c:	e085      	b.n	800ce1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	785a      	ldrb	r2, [r3, #1]
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	88db      	ldrh	r3, [r3, #6]
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cd24:	6939      	ldr	r1, [r7, #16]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	88db      	ldrh	r3, [r3, #6]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 fab8 	bl	800e2a2 <USBD_CtlPrepareRx>
      break;
 800cd32:	e072      	b.n	800ce1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	7850      	ldrb	r0, [r2, #1]
 800cd40:	2200      	movs	r2, #0
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	4798      	blx	r3
      break;
 800cd46:	e068      	b.n	800ce1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	785b      	ldrb	r3, [r3, #1]
 800cd4c:	2b0b      	cmp	r3, #11
 800cd4e:	d852      	bhi.n	800cdf6 <USBD_CDC_Setup+0x162>
 800cd50:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <USBD_CDC_Setup+0xc4>)
 800cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd56:	bf00      	nop
 800cd58:	0800cd89 	.word	0x0800cd89
 800cd5c:	0800ce05 	.word	0x0800ce05
 800cd60:	0800cdf7 	.word	0x0800cdf7
 800cd64:	0800cdf7 	.word	0x0800cdf7
 800cd68:	0800cdf7 	.word	0x0800cdf7
 800cd6c:	0800cdf7 	.word	0x0800cdf7
 800cd70:	0800cdf7 	.word	0x0800cdf7
 800cd74:	0800cdf7 	.word	0x0800cdf7
 800cd78:	0800cdf7 	.word	0x0800cdf7
 800cd7c:	0800cdf7 	.word	0x0800cdf7
 800cd80:	0800cdb3 	.word	0x0800cdb3
 800cd84:	0800cddd 	.word	0x0800cddd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b03      	cmp	r3, #3
 800cd92:	d107      	bne.n	800cda4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cd94:	f107 030a 	add.w	r3, r7, #10
 800cd98:	2202      	movs	r2, #2
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 fa54 	bl	800e24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cda2:	e032      	b.n	800ce0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f001 f9de 	bl	800e168 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdac:	2303      	movs	r3, #3
 800cdae:	75fb      	strb	r3, [r7, #23]
          break;
 800cdb0:	e02b      	b.n	800ce0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d107      	bne.n	800cdce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cdbe:	f107 030d 	add.w	r3, r7, #13
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f001 fa3f 	bl	800e24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdcc:	e01d      	b.n	800ce0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f001 f9c9 	bl	800e168 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	75fb      	strb	r3, [r7, #23]
          break;
 800cdda:	e016      	b.n	800ce0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d00f      	beq.n	800ce08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 f9bc 	bl	800e168 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cdf4:	e008      	b.n	800ce08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f001 f9b5 	bl	800e168 <USBD_CtlError>
          ret = USBD_FAIL;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	75fb      	strb	r3, [r7, #23]
          break;
 800ce02:	e002      	b.n	800ce0a <USBD_CDC_Setup+0x176>
          break;
 800ce04:	bf00      	nop
 800ce06:	e008      	b.n	800ce1a <USBD_CDC_Setup+0x186>
          break;
 800ce08:	bf00      	nop
      }
      break;
 800ce0a:	e006      	b.n	800ce1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f001 f9aa 	bl	800e168 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce14:	2303      	movs	r3, #3
 800ce16:	75fb      	strb	r3, [r7, #23]
      break;
 800ce18:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce42:	2303      	movs	r3, #3
 800ce44:	e04f      	b.n	800cee6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ce4e:	78fa      	ldrb	r2, [r7, #3]
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3318      	adds	r3, #24
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d029      	beq.n	800ceb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ce64:	78fa      	ldrb	r2, [r7, #3]
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	3318      	adds	r3, #24
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	78f9      	ldrb	r1, [r7, #3]
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	00db      	lsls	r3, r3, #3
 800ce82:	4403      	add	r3, r0
 800ce84:	333c      	adds	r3, #60	; 0x3c
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce8c:	fb01 f303 	mul.w	r3, r1, r3
 800ce90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d110      	bne.n	800ceb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ce96:	78fa      	ldrb	r2, [r7, #3]
 800ce98:	6879      	ldr	r1, [r7, #4]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	440b      	add	r3, r1
 800cea4:	3318      	adds	r3, #24
 800cea6:	2200      	movs	r2, #0
 800cea8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ceaa:	78f9      	ldrb	r1, [r7, #3]
 800ceac:	2300      	movs	r3, #0
 800ceae:	2200      	movs	r2, #0
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f001 ff21 	bl	800ecf8 <USBD_LL_Transmit>
 800ceb6:	e015      	b.n	800cee4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00b      	beq.n	800cee4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cee0:	78fa      	ldrb	r2, [r7, #3]
 800cee2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	e015      	b.n	800cf3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f001 ff5f 	bl	800edd8 <USBD_LL_GetRxDataSize>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf36:	4611      	mov	r1, r2
 800cf38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e01b      	b.n	800cf96 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d015      	beq.n	800cf94 <USBD_CDC_EP0_RxReady+0x50>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cf6e:	2bff      	cmp	r3, #255	; 0xff
 800cf70:	d010      	beq.n	800cf94 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cf80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf88:	b292      	uxth	r2, r2
 800cf8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	22ff      	movs	r2, #255	; 0xff
 800cf90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2243      	movs	r2, #67	; 0x43
 800cfac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cfae:	4b03      	ldr	r3, [pc, #12]	; (800cfbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	20000098 	.word	0x20000098

0800cfc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2243      	movs	r2, #67	; 0x43
 800cfcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cfce:	4b03      	ldr	r3, [pc, #12]	; (800cfdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	20000054 	.word	0x20000054

0800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2243      	movs	r2, #67	; 0x43
 800cfec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cfee:	4b03      	ldr	r3, [pc, #12]	; (800cffc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	200000dc 	.word	0x200000dc

0800d000 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	220a      	movs	r2, #10
 800d00c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d00e:	4b03      	ldr	r3, [pc, #12]	; (800d01c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20000010 	.word	0x20000010

0800d020 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d030:	2303      	movs	r3, #3
 800d032:	e004      	b.n	800d03e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b087      	sub	sp, #28
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d05c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d064:	2303      	movs	r3, #3
 800d066:	e008      	b.n	800d07a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d096:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e004      	b.n	800d0ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	683a      	ldr	r2, [r7, #0]
 800d0a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e016      	b.n	800d104 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7c1b      	ldrb	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f001 fe3c 	bl	800ed68 <USBD_LL_PrepareReceive>
 800d0f0:	e007      	b.n	800d102 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f001 fe33 	bl	800ed68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	4613      	mov	r3, r2
 800d118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d120:	2303      	movs	r3, #3
 800d122:	e01f      	b.n	800d164 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	79fa      	ldrb	r2, [r7, #7]
 800d156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f001 fbf5 	bl	800e948 <USBD_LL_Init>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d176:	2300      	movs	r3, #0
 800d178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d101      	bne.n	800d184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d180:	2303      	movs	r3, #3
 800d182:	e016      	b.n	800d1b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a0:	f107 020e 	add.w	r2, r7, #14
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	4798      	blx	r3
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 fc22 	bl	800ea0c <USBD_LL_Start>
 800d1c8:	4603      	mov	r3, r0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	78fa      	ldrb	r2, [r7, #3]
 800d20c:	4611      	mov	r1, r2
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4798      	blx	r3
 800d212:	4603      	mov	r3, r0
 800d214:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d216:	7bfb      	ldrb	r3, [r7, #15]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d232:	2b00      	cmp	r3, #0
 800d234:	d007      	beq.n	800d246 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	78fa      	ldrb	r2, [r7, #3]
 800d240:	4611      	mov	r1, r2
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	4798      	blx	r3
  }

  return USBD_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f000 ff46 	bl	800e0f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d276:	461a      	mov	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d284:	f003 031f 	and.w	r3, r3, #31
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d01a      	beq.n	800d2c2 <USBD_LL_SetupStage+0x72>
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d822      	bhi.n	800d2d6 <USBD_LL_SetupStage+0x86>
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <USBD_LL_SetupStage+0x4a>
 800d294:	2b01      	cmp	r3, #1
 800d296:	d00a      	beq.n	800d2ae <USBD_LL_SetupStage+0x5e>
 800d298:	e01d      	b.n	800d2d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9ee 	bl	800d684 <USBD_StdDevReq>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ac:	e020      	b.n	800d2f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 fa52 	bl	800d760 <USBD_StdItfReq>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]
      break;
 800d2c0:	e016      	b.n	800d2f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fa91 	bl	800d7f2 <USBD_StdEPReq>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d4:	e00c      	b.n	800d2f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 fc37 	bl	800eb58 <USBD_LL_StallEP>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ee:	bf00      	nop
  }

  return ret;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b086      	sub	sp, #24
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	460b      	mov	r3, r1
 800d304:	607a      	str	r2, [r7, #4]
 800d306:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d308:	7afb      	ldrb	r3, [r7, #11]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d138      	bne.n	800d380 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d314:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d14a      	bne.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d913      	bls.n	800d354 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	689a      	ldr	r2, [r3, #8]
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	1ad2      	subs	r2, r2, r3
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	4293      	cmp	r3, r2
 800d344:	bf28      	it	cs
 800d346:	4613      	movcs	r3, r2
 800d348:	461a      	mov	r2, r3
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f000 ffc5 	bl	800e2dc <USBD_CtlContinueRx>
 800d352:	e030      	b.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d10b      	bne.n	800d378 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d005      	beq.n	800d378 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f000 ffc0 	bl	800e2fe <USBD_CtlSendStatus>
 800d37e:	e01a      	b.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b03      	cmp	r3, #3
 800d38a:	d114      	bne.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00e      	beq.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	7afa      	ldrb	r2, [r7, #11]
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	4798      	blx	r3
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	e000      	b.n	800d3b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d16b      	bne.n	800d4ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3314      	adds	r3, #20
 800d3d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d156      	bne.n	800d492 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	689a      	ldr	r2, [r3, #8]
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d914      	bls.n	800d41a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	689a      	ldr	r2, [r3, #8]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	1ad2      	subs	r2, r2, r3
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	461a      	mov	r2, r3
 800d404:	6879      	ldr	r1, [r7, #4]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f000 ff3a 	bl	800e280 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d40c:	2300      	movs	r3, #0
 800d40e:	2200      	movs	r2, #0
 800d410:	2100      	movs	r1, #0
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f001 fca8 	bl	800ed68 <USBD_LL_PrepareReceive>
 800d418:	e03b      	b.n	800d492 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	429a      	cmp	r2, r3
 800d424:	d11c      	bne.n	800d460 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d42e:	429a      	cmp	r2, r3
 800d430:	d316      	bcc.n	800d460 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d20f      	bcs.n	800d460 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d440:	2200      	movs	r2, #0
 800d442:	2100      	movs	r1, #0
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 ff1b 	bl	800e280 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d452:	2300      	movs	r3, #0
 800d454:	2200      	movs	r2, #0
 800d456:	2100      	movs	r1, #0
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f001 fc85 	bl	800ed68 <USBD_LL_PrepareReceive>
 800d45e:	e018      	b.n	800d492 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d10b      	bne.n	800d484 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d005      	beq.n	800d484 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d484:	2180      	movs	r1, #128	; 0x80
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f001 fb66 	bl	800eb58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f000 ff49 	bl	800e324 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d122      	bne.n	800d4e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff fe98 	bl	800d1d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d4aa:	e01a      	b.n	800d4e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b03      	cmp	r3, #3
 800d4b6:	d114      	bne.n	800d4e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00e      	beq.n	800d4e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	7afa      	ldrb	r2, [r7, #11]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	4798      	blx	r3
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
 800d4e0:	e000      	b.n	800d4e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d101      	bne.n	800d520 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d51c:	2303      	movs	r3, #3
 800d51e:	e02f      	b.n	800d580 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00f      	beq.n	800d54a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d009      	beq.n	800d54a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	6852      	ldr	r2, [r2, #4]
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	4611      	mov	r1, r2
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d54a:	2340      	movs	r3, #64	; 0x40
 800d54c:	2200      	movs	r2, #0
 800d54e:	2100      	movs	r1, #0
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 fa8d 	bl	800ea70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2240      	movs	r2, #64	; 0x40
 800d562:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d566:	2340      	movs	r3, #64	; 0x40
 800d568:	2200      	movs	r2, #0
 800d56a:	2180      	movs	r1, #128	; 0x80
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 fa7f 	bl	800ea70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2240      	movs	r2, #64	; 0x40
 800d57c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d106      	bne.n	800d5f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	e012      	b.n	800d640 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b03      	cmp	r3, #3
 800d624:	d10b      	bne.n	800d63e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62c:	69db      	ldr	r3, [r3, #28]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d005      	beq.n	800d63e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d648:	b480      	push	{r7}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	3301      	adds	r3, #1
 800d65e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d666:	8a3b      	ldrh	r3, [r7, #16]
 800d668:	021b      	lsls	r3, r3, #8
 800d66a:	b21a      	sxth	r2, r3
 800d66c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d670:	4313      	orrs	r3, r2
 800d672:	b21b      	sxth	r3, r3
 800d674:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d676:	89fb      	ldrh	r3, [r7, #14]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	371c      	adds	r7, #28
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d69a:	2b40      	cmp	r3, #64	; 0x40
 800d69c:	d005      	beq.n	800d6aa <USBD_StdDevReq+0x26>
 800d69e:	2b40      	cmp	r3, #64	; 0x40
 800d6a0:	d853      	bhi.n	800d74a <USBD_StdDevReq+0xc6>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <USBD_StdDevReq+0x3a>
 800d6a6:	2b20      	cmp	r3, #32
 800d6a8:	d14f      	bne.n	800d74a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	4798      	blx	r3
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d6bc:	e04a      	b.n	800d754 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	2b09      	cmp	r3, #9
 800d6c4:	d83b      	bhi.n	800d73e <USBD_StdDevReq+0xba>
 800d6c6:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <USBD_StdDevReq+0x48>)
 800d6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6cc:	0800d721 	.word	0x0800d721
 800d6d0:	0800d735 	.word	0x0800d735
 800d6d4:	0800d73f 	.word	0x0800d73f
 800d6d8:	0800d72b 	.word	0x0800d72b
 800d6dc:	0800d73f 	.word	0x0800d73f
 800d6e0:	0800d6ff 	.word	0x0800d6ff
 800d6e4:	0800d6f5 	.word	0x0800d6f5
 800d6e8:	0800d73f 	.word	0x0800d73f
 800d6ec:	0800d717 	.word	0x0800d717
 800d6f0:	0800d709 	.word	0x0800d709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d6f4:	6839      	ldr	r1, [r7, #0]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f9de 	bl	800dab8 <USBD_GetDescriptor>
          break;
 800d6fc:	e024      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fb6d 	bl	800dde0 <USBD_SetAddress>
          break;
 800d706:	e01f      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fbac 	bl	800de68 <USBD_SetConfig>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
          break;
 800d714:	e018      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fc4b 	bl	800dfb4 <USBD_GetConfig>
          break;
 800d71e:	e013      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d720:	6839      	ldr	r1, [r7, #0]
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fc7c 	bl	800e020 <USBD_GetStatus>
          break;
 800d728:	e00e      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fcab 	bl	800e088 <USBD_SetFeature>
          break;
 800d732:	e009      	b.n	800d748 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fcba 	bl	800e0b0 <USBD_ClrFeature>
          break;
 800d73c:	e004      	b.n	800d748 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fd11 	bl	800e168 <USBD_CtlError>
          break;
 800d746:	bf00      	nop
      }
      break;
 800d748:	e004      	b.n	800d754 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fd0b 	bl	800e168 <USBD_CtlError>
      break;
 800d752:	bf00      	nop
  }

  return ret;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop

0800d760 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d776:	2b40      	cmp	r3, #64	; 0x40
 800d778:	d005      	beq.n	800d786 <USBD_StdItfReq+0x26>
 800d77a:	2b40      	cmp	r3, #64	; 0x40
 800d77c:	d82f      	bhi.n	800d7de <USBD_StdItfReq+0x7e>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <USBD_StdItfReq+0x26>
 800d782:	2b20      	cmp	r3, #32
 800d784:	d12b      	bne.n	800d7de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	3b01      	subs	r3, #1
 800d790:	2b02      	cmp	r3, #2
 800d792:	d81d      	bhi.n	800d7d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	889b      	ldrh	r3, [r3, #4]
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d813      	bhi.n	800d7c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	4798      	blx	r3
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	88db      	ldrh	r3, [r3, #6]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d110      	bne.n	800d7da <USBD_StdItfReq+0x7a>
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10d      	bne.n	800d7da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fd9d 	bl	800e2fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d7c4:	e009      	b.n	800d7da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fccd 	bl	800e168 <USBD_CtlError>
          break;
 800d7ce:	e004      	b.n	800d7da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fcc8 	bl	800e168 <USBD_CtlError>
          break;
 800d7d8:	e000      	b.n	800d7dc <USBD_StdItfReq+0x7c>
          break;
 800d7da:	bf00      	nop
      }
      break;
 800d7dc:	e004      	b.n	800d7e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fcc1 	bl	800e168 <USBD_CtlError>
      break;
 800d7e6:	bf00      	nop
  }

  return ret;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	889b      	ldrh	r3, [r3, #4]
 800d804:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d80e:	2b40      	cmp	r3, #64	; 0x40
 800d810:	d007      	beq.n	800d822 <USBD_StdEPReq+0x30>
 800d812:	2b40      	cmp	r3, #64	; 0x40
 800d814:	f200 8145 	bhi.w	800daa2 <USBD_StdEPReq+0x2b0>
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00c      	beq.n	800d836 <USBD_StdEPReq+0x44>
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	f040 8140 	bne.w	800daa2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	4798      	blx	r3
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]
      break;
 800d834:	e13a      	b.n	800daac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	785b      	ldrb	r3, [r3, #1]
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d007      	beq.n	800d84e <USBD_StdEPReq+0x5c>
 800d83e:	2b03      	cmp	r3, #3
 800d840:	f300 8129 	bgt.w	800da96 <USBD_StdEPReq+0x2a4>
 800d844:	2b00      	cmp	r3, #0
 800d846:	d07f      	beq.n	800d948 <USBD_StdEPReq+0x156>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d03c      	beq.n	800d8c6 <USBD_StdEPReq+0xd4>
 800d84c:	e123      	b.n	800da96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b02      	cmp	r3, #2
 800d858:	d002      	beq.n	800d860 <USBD_StdEPReq+0x6e>
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d016      	beq.n	800d88c <USBD_StdEPReq+0x9a>
 800d85e:	e02c      	b.n	800d8ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00d      	beq.n	800d882 <USBD_StdEPReq+0x90>
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	2b80      	cmp	r3, #128	; 0x80
 800d86a:	d00a      	beq.n	800d882 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 f971 	bl	800eb58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d876:	2180      	movs	r1, #128	; 0x80
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f001 f96d 	bl	800eb58 <USBD_LL_StallEP>
 800d87e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d880:	e020      	b.n	800d8c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fc6f 	bl	800e168 <USBD_CtlError>
              break;
 800d88a:	e01b      	b.n	800d8c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	885b      	ldrh	r3, [r3, #2]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10e      	bne.n	800d8b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00b      	beq.n	800d8b2 <USBD_StdEPReq+0xc0>
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	2b80      	cmp	r3, #128	; 0x80
 800d89e:	d008      	beq.n	800d8b2 <USBD_StdEPReq+0xc0>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	88db      	ldrh	r3, [r3, #6]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 f953 	bl	800eb58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 fd23 	bl	800e2fe <USBD_CtlSendStatus>

              break;
 800d8b8:	e004      	b.n	800d8c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fc53 	bl	800e168 <USBD_CtlError>
              break;
 800d8c2:	bf00      	nop
          }
          break;
 800d8c4:	e0ec      	b.n	800daa0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d002      	beq.n	800d8d8 <USBD_StdEPReq+0xe6>
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d016      	beq.n	800d904 <USBD_StdEPReq+0x112>
 800d8d6:	e030      	b.n	800d93a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00d      	beq.n	800d8fa <USBD_StdEPReq+0x108>
 800d8de:	7bbb      	ldrb	r3, [r7, #14]
 800d8e0:	2b80      	cmp	r3, #128	; 0x80
 800d8e2:	d00a      	beq.n	800d8fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8e4:	7bbb      	ldrb	r3, [r7, #14]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f935 	bl	800eb58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8ee:	2180      	movs	r1, #128	; 0x80
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f001 f931 	bl	800eb58 <USBD_LL_StallEP>
 800d8f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8f8:	e025      	b.n	800d946 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fc33 	bl	800e168 <USBD_CtlError>
              break;
 800d902:	e020      	b.n	800d946 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	885b      	ldrh	r3, [r3, #2]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d11b      	bne.n	800d944 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d90c:	7bbb      	ldrb	r3, [r7, #14]
 800d90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d912:	2b00      	cmp	r3, #0
 800d914:	d004      	beq.n	800d920 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d916:	7bbb      	ldrb	r3, [r7, #14]
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 f952 	bl	800ebc4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fcec 	bl	800e2fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	4798      	blx	r3
 800d934:	4603      	mov	r3, r0
 800d936:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d938:	e004      	b.n	800d944 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fc13 	bl	800e168 <USBD_CtlError>
              break;
 800d942:	e000      	b.n	800d946 <USBD_StdEPReq+0x154>
              break;
 800d944:	bf00      	nop
          }
          break;
 800d946:	e0ab      	b.n	800daa0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b02      	cmp	r3, #2
 800d952:	d002      	beq.n	800d95a <USBD_StdEPReq+0x168>
 800d954:	2b03      	cmp	r3, #3
 800d956:	d032      	beq.n	800d9be <USBD_StdEPReq+0x1cc>
 800d958:	e097      	b.n	800da8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <USBD_StdEPReq+0x17e>
 800d960:	7bbb      	ldrb	r3, [r7, #14]
 800d962:	2b80      	cmp	r3, #128	; 0x80
 800d964:	d004      	beq.n	800d970 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fbfd 	bl	800e168 <USBD_CtlError>
                break;
 800d96e:	e091      	b.n	800da94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d974:	2b00      	cmp	r3, #0
 800d976:	da0b      	bge.n	800d990 <USBD_StdEPReq+0x19e>
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d97e:	4613      	mov	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	3310      	adds	r3, #16
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	4413      	add	r3, r2
 800d98c:	3304      	adds	r3, #4
 800d98e:	e00b      	b.n	800d9a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d996:	4613      	mov	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fc47 	bl	800e24a <USBD_CtlSendData>
              break;
 800d9bc:	e06a      	b.n	800da94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	da11      	bge.n	800d9ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	f003 020f 	and.w	r2, r3, #15
 800d9cc:	6879      	ldr	r1, [r7, #4]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	440b      	add	r3, r1
 800d9d8:	3324      	adds	r3, #36	; 0x24
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d117      	bne.n	800da10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fbc0 	bl	800e168 <USBD_CtlError>
                  break;
 800d9e8:	e054      	b.n	800da94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	f003 020f 	and.w	r2, r3, #15
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	440b      	add	r3, r1
 800d9fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fbad 	bl	800e168 <USBD_CtlError>
                  break;
 800da0e:	e041      	b.n	800da94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da14:	2b00      	cmp	r3, #0
 800da16:	da0b      	bge.n	800da30 <USBD_StdEPReq+0x23e>
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	3310      	adds	r3, #16
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	4413      	add	r3, r2
 800da2c:	3304      	adds	r3, #4
 800da2e:	e00b      	b.n	800da48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	4413      	add	r3, r2
 800da46:	3304      	adds	r3, #4
 800da48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da4a:	7bbb      	ldrb	r3, [r7, #14]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <USBD_StdEPReq+0x264>
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	2b80      	cmp	r3, #128	; 0x80
 800da54:	d103      	bne.n	800da5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	e00e      	b.n	800da7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	4619      	mov	r1, r3
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f001 f8e4 	bl	800ec30 <USBD_LL_IsStallEP>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2201      	movs	r2, #1
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	e002      	b.n	800da7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2202      	movs	r2, #2
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fbe1 	bl	800e24a <USBD_CtlSendData>
              break;
 800da88:	e004      	b.n	800da94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fb6b 	bl	800e168 <USBD_CtlError>
              break;
 800da92:	bf00      	nop
          }
          break;
 800da94:	e004      	b.n	800daa0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fb65 	bl	800e168 <USBD_CtlError>
          break;
 800da9e:	bf00      	nop
      }
      break;
 800daa0:	e004      	b.n	800daac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fb5f 	bl	800e168 <USBD_CtlError>
      break;
 800daaa:	bf00      	nop
  }

  return ret;
 800daac:	7bfb      	ldrb	r3, [r7, #15]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dac2:	2300      	movs	r3, #0
 800dac4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	885b      	ldrh	r3, [r3, #2]
 800dad2:	0a1b      	lsrs	r3, r3, #8
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	3b01      	subs	r3, #1
 800dad8:	2b0e      	cmp	r3, #14
 800dada:	f200 8152 	bhi.w	800dd82 <USBD_GetDescriptor+0x2ca>
 800dade:	a201      	add	r2, pc, #4	; (adr r2, 800dae4 <USBD_GetDescriptor+0x2c>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800db55 	.word	0x0800db55
 800dae8:	0800db6d 	.word	0x0800db6d
 800daec:	0800dbad 	.word	0x0800dbad
 800daf0:	0800dd83 	.word	0x0800dd83
 800daf4:	0800dd83 	.word	0x0800dd83
 800daf8:	0800dd23 	.word	0x0800dd23
 800dafc:	0800dd4f 	.word	0x0800dd4f
 800db00:	0800dd83 	.word	0x0800dd83
 800db04:	0800dd83 	.word	0x0800dd83
 800db08:	0800dd83 	.word	0x0800dd83
 800db0c:	0800dd83 	.word	0x0800dd83
 800db10:	0800dd83 	.word	0x0800dd83
 800db14:	0800dd83 	.word	0x0800dd83
 800db18:	0800dd83 	.word	0x0800dd83
 800db1c:	0800db21 	.word	0x0800db21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db26:	69db      	ldr	r3, [r3, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00b      	beq.n	800db44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	7c12      	ldrb	r2, [r2, #16]
 800db38:	f107 0108 	add.w	r1, r7, #8
 800db3c:	4610      	mov	r0, r2
 800db3e:	4798      	blx	r3
 800db40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db42:	e126      	b.n	800dd92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fb0e 	bl	800e168 <USBD_CtlError>
        err++;
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	3301      	adds	r3, #1
 800db50:	72fb      	strb	r3, [r7, #11]
      break;
 800db52:	e11e      	b.n	800dd92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	7c12      	ldrb	r2, [r2, #16]
 800db60:	f107 0108 	add.w	r1, r7, #8
 800db64:	4610      	mov	r0, r2
 800db66:	4798      	blx	r3
 800db68:	60f8      	str	r0, [r7, #12]
      break;
 800db6a:	e112      	b.n	800dd92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	7c1b      	ldrb	r3, [r3, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10d      	bne.n	800db90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7c:	f107 0208 	add.w	r2, r7, #8
 800db80:	4610      	mov	r0, r2
 800db82:	4798      	blx	r3
 800db84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	3301      	adds	r3, #1
 800db8a:	2202      	movs	r2, #2
 800db8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db8e:	e100      	b.n	800dd92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	f107 0208 	add.w	r2, r7, #8
 800db9c:	4610      	mov	r0, r2
 800db9e:	4798      	blx	r3
 800dba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3301      	adds	r3, #1
 800dba6:	2202      	movs	r2, #2
 800dba8:	701a      	strb	r2, [r3, #0]
      break;
 800dbaa:	e0f2      	b.n	800dd92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	885b      	ldrh	r3, [r3, #2]
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	f200 80ac 	bhi.w	800dd10 <USBD_GetDescriptor+0x258>
 800dbb8:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <USBD_GetDescriptor+0x108>)
 800dbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbe:	bf00      	nop
 800dbc0:	0800dbd9 	.word	0x0800dbd9
 800dbc4:	0800dc0d 	.word	0x0800dc0d
 800dbc8:	0800dc41 	.word	0x0800dc41
 800dbcc:	0800dc75 	.word	0x0800dc75
 800dbd0:	0800dca9 	.word	0x0800dca9
 800dbd4:	0800dcdd 	.word	0x0800dcdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00b      	beq.n	800dbfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	7c12      	ldrb	r2, [r2, #16]
 800dbf0:	f107 0108 	add.w	r1, r7, #8
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	4798      	blx	r3
 800dbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbfa:	e091      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fab2 	bl	800e168 <USBD_CtlError>
            err++;
 800dc04:	7afb      	ldrb	r3, [r7, #11]
 800dc06:	3301      	adds	r3, #1
 800dc08:	72fb      	strb	r3, [r7, #11]
          break;
 800dc0a:	e089      	b.n	800dd20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00b      	beq.n	800dc30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	7c12      	ldrb	r2, [r2, #16]
 800dc24:	f107 0108 	add.w	r1, r7, #8
 800dc28:	4610      	mov	r0, r2
 800dc2a:	4798      	blx	r3
 800dc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc2e:	e077      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fa98 	bl	800e168 <USBD_CtlError>
            err++;
 800dc38:	7afb      	ldrb	r3, [r7, #11]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc3e:	e06f      	b.n	800dd20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00b      	beq.n	800dc64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	7c12      	ldrb	r2, [r2, #16]
 800dc58:	f107 0108 	add.w	r1, r7, #8
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
 800dc60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc62:	e05d      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fa7e 	bl	800e168 <USBD_CtlError>
            err++;
 800dc6c:	7afb      	ldrb	r3, [r7, #11]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	72fb      	strb	r3, [r7, #11]
          break;
 800dc72:	e055      	b.n	800dd20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	7c12      	ldrb	r2, [r2, #16]
 800dc8c:	f107 0108 	add.w	r1, r7, #8
 800dc90:	4610      	mov	r0, r2
 800dc92:	4798      	blx	r3
 800dc94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc96:	e043      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 fa64 	bl	800e168 <USBD_CtlError>
            err++;
 800dca0:	7afb      	ldrb	r3, [r7, #11]
 800dca2:	3301      	adds	r3, #1
 800dca4:	72fb      	strb	r3, [r7, #11]
          break;
 800dca6:	e03b      	b.n	800dd20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00b      	beq.n	800dccc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	7c12      	ldrb	r2, [r2, #16]
 800dcc0:	f107 0108 	add.w	r1, r7, #8
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	4798      	blx	r3
 800dcc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcca:	e029      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dccc:	6839      	ldr	r1, [r7, #0]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fa4a 	bl	800e168 <USBD_CtlError>
            err++;
 800dcd4:	7afb      	ldrb	r3, [r7, #11]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	72fb      	strb	r3, [r7, #11]
          break;
 800dcda:	e021      	b.n	800dd20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dce2:	699b      	ldr	r3, [r3, #24]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	7c12      	ldrb	r2, [r2, #16]
 800dcf4:	f107 0108 	add.w	r1, r7, #8
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	4798      	blx	r3
 800dcfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcfe:	e00f      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fa30 	bl	800e168 <USBD_CtlError>
            err++;
 800dd08:	7afb      	ldrb	r3, [r7, #11]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd0e:	e007      	b.n	800dd20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fa28 	bl	800e168 <USBD_CtlError>
          err++;
 800dd18:	7afb      	ldrb	r3, [r7, #11]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dd1e:	bf00      	nop
      }
      break;
 800dd20:	e037      	b.n	800dd92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7c1b      	ldrb	r3, [r3, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd32:	f107 0208 	add.w	r2, r7, #8
 800dd36:	4610      	mov	r0, r2
 800dd38:	4798      	blx	r3
 800dd3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd3c:	e029      	b.n	800dd92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fa11 	bl	800e168 <USBD_CtlError>
        err++;
 800dd46:	7afb      	ldrb	r3, [r7, #11]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	72fb      	strb	r3, [r7, #11]
      break;
 800dd4c:	e021      	b.n	800dd92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	7c1b      	ldrb	r3, [r3, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10d      	bne.n	800dd72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5e:	f107 0208 	add.w	r2, r7, #8
 800dd62:	4610      	mov	r0, r2
 800dd64:	4798      	blx	r3
 800dd66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	2207      	movs	r2, #7
 800dd6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd70:	e00f      	b.n	800dd92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f9f7 	bl	800e168 <USBD_CtlError>
        err++;
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd80:	e007      	b.n	800dd92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f9ef 	bl	800e168 <USBD_CtlError>
      err++;
 800dd8a:	7afb      	ldrb	r3, [r7, #11]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd90:	bf00      	nop
  }

  if (err != 0U)
 800dd92:	7afb      	ldrb	r3, [r7, #11]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d11e      	bne.n	800ddd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	88db      	ldrh	r3, [r3, #6]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d016      	beq.n	800ddce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dda0:	893b      	ldrh	r3, [r7, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00e      	beq.n	800ddc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	88da      	ldrh	r2, [r3, #6]
 800ddaa:	893b      	ldrh	r3, [r7, #8]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	bf28      	it	cs
 800ddb0:	4613      	movcs	r3, r2
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ddb6:	893b      	ldrh	r3, [r7, #8]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68f9      	ldr	r1, [r7, #12]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fa44 	bl	800e24a <USBD_CtlSendData>
 800ddc2:	e009      	b.n	800ddd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f9ce 	bl	800e168 <USBD_CtlError>
 800ddcc:	e004      	b.n	800ddd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 fa95 	bl	800e2fe <USBD_CtlSendStatus>
 800ddd4:	e000      	b.n	800ddd8 <USBD_GetDescriptor+0x320>
    return;
 800ddd6:	bf00      	nop
  }
}
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop

0800dde0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	889b      	ldrh	r3, [r3, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d131      	bne.n	800de56 <USBD_SetAddress+0x76>
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	88db      	ldrh	r3, [r3, #6]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d12d      	bne.n	800de56 <USBD_SetAddress+0x76>
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	885b      	ldrh	r3, [r3, #2]
 800ddfe:	2b7f      	cmp	r3, #127	; 0x7f
 800de00:	d829      	bhi.n	800de56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	885b      	ldrh	r3, [r3, #2]
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b03      	cmp	r3, #3
 800de18:	d104      	bne.n	800de24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f9a3 	bl	800e168 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de22:	e01d      	b.n	800de60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	7bfa      	ldrb	r2, [r7, #15]
 800de28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 ff2b 	bl	800ec8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fa61 	bl	800e2fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d004      	beq.n	800de4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2202      	movs	r2, #2
 800de46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de4a:	e009      	b.n	800de60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de54:	e004      	b.n	800de60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f985 	bl	800e168 <USBD_CtlError>
  }
}
 800de5e:	bf00      	nop
 800de60:	bf00      	nop
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	885b      	ldrh	r3, [r3, #2]
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	4b4c      	ldr	r3, [pc, #304]	; (800dfb0 <USBD_SetConfig+0x148>)
 800de7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de80:	4b4b      	ldr	r3, [pc, #300]	; (800dfb0 <USBD_SetConfig+0x148>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d905      	bls.n	800de94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de88:	6839      	ldr	r1, [r7, #0]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 f96c 	bl	800e168 <USBD_CtlError>
    return USBD_FAIL;
 800de90:	2303      	movs	r3, #3
 800de92:	e088      	b.n	800dfa6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d002      	beq.n	800dea6 <USBD_SetConfig+0x3e>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d025      	beq.n	800def0 <USBD_SetConfig+0x88>
 800dea4:	e071      	b.n	800df8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dea6:	4b42      	ldr	r3, [pc, #264]	; (800dfb0 <USBD_SetConfig+0x148>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01c      	beq.n	800dee8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800deae:	4b40      	ldr	r3, [pc, #256]	; (800dfb0 <USBD_SetConfig+0x148>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800deb8:	4b3d      	ldr	r3, [pc, #244]	; (800dfb0 <USBD_SetConfig+0x148>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff f992 	bl	800d1e8 <USBD_SetClassConfig>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f949 	bl	800e168 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ded6:	e065      	b.n	800dfa4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fa10 	bl	800e2fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2203      	movs	r2, #3
 800dee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dee6:	e05d      	b.n	800dfa4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fa08 	bl	800e2fe <USBD_CtlSendStatus>
      break;
 800deee:	e059      	b.n	800dfa4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800def0:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <USBD_SetConfig+0x148>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d112      	bne.n	800df1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2202      	movs	r2, #2
 800defc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800df00:	4b2b      	ldr	r3, [pc, #172]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df0a:	4b29      	ldr	r3, [pc, #164]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff f985 	bl	800d220 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 f9f1 	bl	800e2fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df1c:	e042      	b.n	800dfa4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800df1e:	4b24      	ldr	r3, [pc, #144]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d02a      	beq.n	800df82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff f973 	bl	800d220 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800df3a:	4b1d      	ldr	r3, [pc, #116]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	461a      	mov	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df44:	4b1a      	ldr	r3, [pc, #104]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7ff f94c 	bl	800d1e8 <USBD_SetClassConfig>
 800df50:	4603      	mov	r3, r0
 800df52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00f      	beq.n	800df7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 f903 	bl	800e168 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff f958 	bl	800d220 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2202      	movs	r2, #2
 800df74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df78:	e014      	b.n	800dfa4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f9bf 	bl	800e2fe <USBD_CtlSendStatus>
      break;
 800df80:	e010      	b.n	800dfa4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9bb 	bl	800e2fe <USBD_CtlSendStatus>
      break;
 800df88:	e00c      	b.n	800dfa4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 f8eb 	bl	800e168 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df92:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <USBD_SetConfig+0x148>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7ff f941 	bl	800d220 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa2:	bf00      	nop
  }

  return ret;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	2000051c 	.word	0x2000051c

0800dfb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d004      	beq.n	800dfd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f8cd 	bl	800e168 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dfce:	e023      	b.n	800e018 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	dc02      	bgt.n	800dfe2 <USBD_GetConfig+0x2e>
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	dc03      	bgt.n	800dfe8 <USBD_GetConfig+0x34>
 800dfe0:	e015      	b.n	800e00e <USBD_GetConfig+0x5a>
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d00b      	beq.n	800dffe <USBD_GetConfig+0x4a>
 800dfe6:	e012      	b.n	800e00e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3308      	adds	r3, #8
 800dff2:	2201      	movs	r2, #1
 800dff4:	4619      	mov	r1, r3
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f927 	bl	800e24a <USBD_CtlSendData>
        break;
 800dffc:	e00c      	b.n	800e018 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	3304      	adds	r3, #4
 800e002:	2201      	movs	r2, #1
 800e004:	4619      	mov	r1, r3
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 f91f 	bl	800e24a <USBD_CtlSendData>
        break;
 800e00c:	e004      	b.n	800e018 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f8a9 	bl	800e168 <USBD_CtlError>
        break;
 800e016:	bf00      	nop
}
 800e018:	bf00      	nop
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e030:	b2db      	uxtb	r3, r3
 800e032:	3b01      	subs	r3, #1
 800e034:	2b02      	cmp	r3, #2
 800e036:	d81e      	bhi.n	800e076 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	88db      	ldrh	r3, [r3, #6]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d004      	beq.n	800e04a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e040:	6839      	ldr	r1, [r7, #0]
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f890 	bl	800e168 <USBD_CtlError>
        break;
 800e048:	e01a      	b.n	800e080 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e056:	2b00      	cmp	r3, #0
 800e058:	d005      	beq.n	800e066 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f043 0202 	orr.w	r2, r3, #2
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	330c      	adds	r3, #12
 800e06a:	2202      	movs	r2, #2
 800e06c:	4619      	mov	r1, r3
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f8eb 	bl	800e24a <USBD_CtlSendData>
      break;
 800e074:	e004      	b.n	800e080 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e076:	6839      	ldr	r1, [r7, #0]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f875 	bl	800e168 <USBD_CtlError>
      break;
 800e07e:	bf00      	nop
  }
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	885b      	ldrh	r3, [r3, #2]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d106      	bne.n	800e0a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 f92b 	bl	800e2fe <USBD_CtlSendStatus>
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d80b      	bhi.n	800e0e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	885b      	ldrh	r3, [r3, #2]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d10c      	bne.n	800e0ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f910 	bl	800e2fe <USBD_CtlSendStatus>
      }
      break;
 800e0de:	e004      	b.n	800e0ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e0e0:	6839      	ldr	r1, [r7, #0]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f840 	bl	800e168 <USBD_CtlError>
      break;
 800e0e8:	e000      	b.n	800e0ec <USBD_ClrFeature+0x3c>
      break;
 800e0ea:	bf00      	nop
  }
}
 800e0ec:	bf00      	nop
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	781a      	ldrb	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3301      	adds	r3, #1
 800e10e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3301      	adds	r3, #1
 800e11c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff fa92 	bl	800d648 <SWAPBYTE>
 800e124:	4603      	mov	r3, r0
 800e126:	461a      	mov	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	3301      	adds	r3, #1
 800e130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3301      	adds	r3, #1
 800e136:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f7ff fa85 	bl	800d648 <SWAPBYTE>
 800e13e:	4603      	mov	r3, r0
 800e140:	461a      	mov	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3301      	adds	r3, #1
 800e14a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	3301      	adds	r3, #1
 800e150:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff fa78 	bl	800d648 <SWAPBYTE>
 800e158:	4603      	mov	r3, r0
 800e15a:	461a      	mov	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	80da      	strh	r2, [r3, #6]
}
 800e160:	bf00      	nop
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e172:	2180      	movs	r1, #128	; 0x80
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fcef 	bl	800eb58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e17a:	2100      	movs	r1, #0
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 fceb 	bl	800eb58 <USBD_LL_StallEP>
}
 800e182:	bf00      	nop
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b086      	sub	sp, #24
 800e18e:	af00      	add	r7, sp, #0
 800e190:	60f8      	str	r0, [r7, #12]
 800e192:	60b9      	str	r1, [r7, #8]
 800e194:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e196:	2300      	movs	r3, #0
 800e198:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d036      	beq.n	800e20e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e1a4:	6938      	ldr	r0, [r7, #16]
 800e1a6:	f000 f836 	bl	800e216 <USBD_GetLen>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e1b8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4413      	add	r3, r2
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	7812      	ldrb	r2, [r2, #0]
 800e1c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	2203      	movs	r2, #3
 800e1d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1d4:	7dfb      	ldrb	r3, [r7, #23]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e1da:	e013      	b.n	800e204 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	7812      	ldrb	r2, [r2, #0]
 800e1e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	613b      	str	r3, [r7, #16]
    idx++;
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	68ba      	ldr	r2, [r7, #8]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1fe:	7dfb      	ldrb	r3, [r7, #23]
 800e200:	3301      	adds	r3, #1
 800e202:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1e7      	bne.n	800e1dc <USBD_GetString+0x52>
 800e20c:	e000      	b.n	800e210 <USBD_GetString+0x86>
    return;
 800e20e:	bf00      	nop
  }
}
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e226:	e005      	b.n	800e234 <USBD_GetLen+0x1e>
  {
    len++;
 800e228:	7bfb      	ldrb	r3, [r7, #15]
 800e22a:	3301      	adds	r3, #1
 800e22c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	3301      	adds	r3, #1
 800e232:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1f5      	bne.n	800e228 <USBD_GetLen+0x12>
  }

  return len;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b084      	sub	sp, #16
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2202      	movs	r2, #2
 800e25a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	2100      	movs	r1, #0
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f000 fd41 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	2100      	movs	r1, #0
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f000 fd30 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	60b9      	str	r1, [r7, #8]
 800e2ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2203      	movs	r2, #3
 800e2b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 fd4b 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f000 fd3a 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2204      	movs	r2, #4
 800e30a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e30e:	2300      	movs	r3, #0
 800e310:	2200      	movs	r2, #0
 800e312:	2100      	movs	r1, #0
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fcef 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2205      	movs	r2, #5
 800e330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e334:	2300      	movs	r3, #0
 800e336:	2200      	movs	r2, #0
 800e338:	2100      	movs	r1, #0
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fd14 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e350:	2200      	movs	r2, #0
 800e352:	4912      	ldr	r1, [pc, #72]	; (800e39c <MX_USB_DEVICE_Init+0x50>)
 800e354:	4812      	ldr	r0, [pc, #72]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e356:	f7fe fed9 	bl	800d10c <USBD_Init>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d001      	beq.n	800e364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e360:	f7f4 ff36 	bl	80031d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e364:	490f      	ldr	r1, [pc, #60]	; (800e3a4 <MX_USB_DEVICE_Init+0x58>)
 800e366:	480e      	ldr	r0, [pc, #56]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e368:	f7fe ff00 	bl	800d16c <USBD_RegisterClass>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e372:	f7f4 ff2d 	bl	80031d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e376:	490c      	ldr	r1, [pc, #48]	; (800e3a8 <MX_USB_DEVICE_Init+0x5c>)
 800e378:	4809      	ldr	r0, [pc, #36]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e37a:	f7fe fe51 	bl	800d020 <USBD_CDC_RegisterInterface>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e384:	f7f4 ff24 	bl	80031d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e388:	4805      	ldr	r0, [pc, #20]	; (800e3a0 <MX_USB_DEVICE_Init+0x54>)
 800e38a:	f7fe ff16 	bl	800d1ba <USBD_Start>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e394:	f7f4 ff1c 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20000134 	.word	0x20000134
 800e3a0:	20000520 	.word	0x20000520
 800e3a4:	2000001c 	.word	0x2000001c
 800e3a8:	20000120 	.word	0x20000120

0800e3ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4905      	ldr	r1, [pc, #20]	; (800e3c8 <CDC_Init_FS+0x1c>)
 800e3b4:	4805      	ldr	r0, [pc, #20]	; (800e3cc <CDC_Init_FS+0x20>)
 800e3b6:	f7fe fe48 	bl	800d04a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3ba:	4905      	ldr	r1, [pc, #20]	; (800e3d0 <CDC_Init_FS+0x24>)
 800e3bc:	4803      	ldr	r0, [pc, #12]	; (800e3cc <CDC_Init_FS+0x20>)
 800e3be:	f7fe fe62 	bl	800d086 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e3c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	20000bd8 	.word	0x20000bd8
 800e3cc:	20000520 	.word	0x20000520
 800e3d0:	200007f0 	.word	0x200007f0

0800e3d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e3d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	6039      	str	r1, [r7, #0]
 800e3ee:	71fb      	strb	r3, [r7, #7]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b23      	cmp	r3, #35	; 0x23
 800e3f8:	d84a      	bhi.n	800e490 <CDC_Control_FS+0xac>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <CDC_Control_FS+0x1c>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e491 	.word	0x0800e491
 800e404:	0800e491 	.word	0x0800e491
 800e408:	0800e491 	.word	0x0800e491
 800e40c:	0800e491 	.word	0x0800e491
 800e410:	0800e491 	.word	0x0800e491
 800e414:	0800e491 	.word	0x0800e491
 800e418:	0800e491 	.word	0x0800e491
 800e41c:	0800e491 	.word	0x0800e491
 800e420:	0800e491 	.word	0x0800e491
 800e424:	0800e491 	.word	0x0800e491
 800e428:	0800e491 	.word	0x0800e491
 800e42c:	0800e491 	.word	0x0800e491
 800e430:	0800e491 	.word	0x0800e491
 800e434:	0800e491 	.word	0x0800e491
 800e438:	0800e491 	.word	0x0800e491
 800e43c:	0800e491 	.word	0x0800e491
 800e440:	0800e491 	.word	0x0800e491
 800e444:	0800e491 	.word	0x0800e491
 800e448:	0800e491 	.word	0x0800e491
 800e44c:	0800e491 	.word	0x0800e491
 800e450:	0800e491 	.word	0x0800e491
 800e454:	0800e491 	.word	0x0800e491
 800e458:	0800e491 	.word	0x0800e491
 800e45c:	0800e491 	.word	0x0800e491
 800e460:	0800e491 	.word	0x0800e491
 800e464:	0800e491 	.word	0x0800e491
 800e468:	0800e491 	.word	0x0800e491
 800e46c:	0800e491 	.word	0x0800e491
 800e470:	0800e491 	.word	0x0800e491
 800e474:	0800e491 	.word	0x0800e491
 800e478:	0800e491 	.word	0x0800e491
 800e47c:	0800e491 	.word	0x0800e491
 800e480:	0800e491 	.word	0x0800e491
 800e484:	0800e491 	.word	0x0800e491
 800e488:	0800e491 	.word	0x0800e491
 800e48c:	0800e491 	.word	0x0800e491
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e490:	bf00      	nop
  }

  return (USBD_OK);
 800e492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	4805      	ldr	r0, [pc, #20]	; (800e4c4 <CDC_Receive_FS+0x24>)
 800e4ae:	f7fe fdea 	bl	800d086 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e4b2:	4804      	ldr	r0, [pc, #16]	; (800e4c4 <CDC_Receive_FS+0x24>)
 800e4b4:	f7fe fe00 	bl	800d0b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e4b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20000520 	.word	0x20000520

0800e4c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b087      	sub	sp, #28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
	...

0800e4ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6039      	str	r1, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2212      	movs	r2, #18
 800e4fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e4fe:	4b03      	ldr	r3, [pc, #12]	; (800e50c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e500:	4618      	mov	r0, r3
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	20000154 	.word	0x20000154

0800e510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	2204      	movs	r2, #4
 800e520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e522:	4b03      	ldr	r3, [pc, #12]	; (800e530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	20000174 	.word	0x20000174

0800e534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	6039      	str	r1, [r7, #0]
 800e53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d105      	bne.n	800e552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	4907      	ldr	r1, [pc, #28]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
 800e54a:	4808      	ldr	r0, [pc, #32]	; (800e56c <USBD_FS_ProductStrDescriptor+0x38>)
 800e54c:	f7ff fe1d 	bl	800e18a <USBD_GetString>
 800e550:	e004      	b.n	800e55c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4904      	ldr	r1, [pc, #16]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
 800e556:	4805      	ldr	r0, [pc, #20]	; (800e56c <USBD_FS_ProductStrDescriptor+0x38>)
 800e558:	f7ff fe17 	bl	800e18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000fc0 	.word	0x20000fc0
 800e56c:	0800f190 	.word	0x0800f190

0800e570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	4904      	ldr	r1, [pc, #16]	; (800e590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e580:	4804      	ldr	r0, [pc, #16]	; (800e594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e582:	f7ff fe02 	bl	800e18a <USBD_GetString>
  return USBD_StrDesc;
 800e586:	4b02      	ldr	r3, [pc, #8]	; (800e590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20000fc0 	.word	0x20000fc0
 800e594:	0800f1a8 	.word	0x0800f1a8

0800e598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	221a      	movs	r2, #26
 800e5a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5aa:	f000 f855 	bl	800e658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e5ae:	4b02      	ldr	r3, [pc, #8]	; (800e5b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20000178 	.word	0x20000178

0800e5bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	6039      	str	r1, [r7, #0]
 800e5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d105      	bne.n	800e5da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	4907      	ldr	r1, [pc, #28]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5d2:	4808      	ldr	r0, [pc, #32]	; (800e5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5d4:	f7ff fdd9 	bl	800e18a <USBD_GetString>
 800e5d8:	e004      	b.n	800e5e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	4904      	ldr	r1, [pc, #16]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5de:	4805      	ldr	r0, [pc, #20]	; (800e5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5e0:	f7ff fdd3 	bl	800e18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5e4:	4b02      	ldr	r3, [pc, #8]	; (800e5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20000fc0 	.word	0x20000fc0
 800e5f4:	0800f1bc 	.word	0x0800f1bc

0800e5f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	6039      	str	r1, [r7, #0]
 800e602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d105      	bne.n	800e616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	4907      	ldr	r1, [pc, #28]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e60e:	4808      	ldr	r0, [pc, #32]	; (800e630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e610:	f7ff fdbb 	bl	800e18a <USBD_GetString>
 800e614:	e004      	b.n	800e620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	4904      	ldr	r1, [pc, #16]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e61a:	4805      	ldr	r0, [pc, #20]	; (800e630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e61c:	f7ff fdb5 	bl	800e18a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e620:	4b02      	ldr	r3, [pc, #8]	; (800e62c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e622:	4618      	mov	r0, r3
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20000fc0 	.word	0x20000fc0
 800e630:	0800f1c8 	.word	0x0800f1c8

0800e634 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	6039      	str	r1, [r7, #0]
 800e63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	220c      	movs	r2, #12
 800e644:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e646:	4b03      	ldr	r3, [pc, #12]	; (800e654 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	20000168 	.word	0x20000168

0800e658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e65e:	4b0f      	ldr	r3, [pc, #60]	; (800e69c <Get_SerialNum+0x44>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e664:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <Get_SerialNum+0x48>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e66a:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <Get_SerialNum+0x4c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4413      	add	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d009      	beq.n	800e692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e67e:	2208      	movs	r2, #8
 800e680:	4909      	ldr	r1, [pc, #36]	; (800e6a8 <Get_SerialNum+0x50>)
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f814 	bl	800e6b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e688:	2204      	movs	r2, #4
 800e68a:	4908      	ldr	r1, [pc, #32]	; (800e6ac <Get_SerialNum+0x54>)
 800e68c:	68b8      	ldr	r0, [r7, #8]
 800e68e:	f000 f80f 	bl	800e6b0 <IntToUnicode>
  }
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	1fff7590 	.word	0x1fff7590
 800e6a0:	1fff7594 	.word	0x1fff7594
 800e6a4:	1fff7598 	.word	0x1fff7598
 800e6a8:	2000017a 	.word	0x2000017a
 800e6ac:	2000018a 	.word	0x2000018a

0800e6b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	75fb      	strb	r3, [r7, #23]
 800e6c6:	e027      	b.n	800e718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	0f1b      	lsrs	r3, r3, #28
 800e6cc:	2b09      	cmp	r3, #9
 800e6ce:	d80b      	bhi.n	800e6e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	0f1b      	lsrs	r3, r3, #28
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	440b      	add	r3, r1
 800e6e0:	3230      	adds	r2, #48	; 0x30
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	e00a      	b.n	800e6fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	0f1b      	lsrs	r3, r3, #28
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	3237      	adds	r2, #55	; 0x37
 800e6fa:	b2d2      	uxtb	r2, r2
 800e6fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	011b      	lsls	r3, r3, #4
 800e702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e704:	7dfb      	ldrb	r3, [r7, #23]
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	3301      	adds	r3, #1
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4413      	add	r3, r2
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	3301      	adds	r3, #1
 800e716:	75fb      	strb	r3, [r7, #23]
 800e718:	7dfa      	ldrb	r2, [r7, #23]
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d3d3      	bcc.n	800e6c8 <IntToUnicode+0x18>
  }
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
	...

0800e730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b096      	sub	sp, #88	; 0x58
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e738:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	605a      	str	r2, [r3, #4]
 800e742:	609a      	str	r2, [r3, #8]
 800e744:	60da      	str	r2, [r3, #12]
 800e746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e748:	f107 0310 	add.w	r3, r7, #16
 800e74c:	2234      	movs	r2, #52	; 0x34
 800e74e:	2100      	movs	r1, #0
 800e750:	4618      	mov	r0, r3
 800e752:	f000 fc13 	bl	800ef7c <memset>
  if(pcdHandle->Instance==USB)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a24      	ldr	r2, [pc, #144]	; (800e7ec <HAL_PCD_MspInit+0xbc>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d141      	bne.n	800e7e4 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e764:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800e766:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800e76a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e76c:	f107 0310 	add.w	r3, r7, #16
 800e770:	4618      	mov	r0, r3
 800e772:	f7f9 fe91 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e77c:	f7f4 fd28 	bl	80031d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e780:	4b1b      	ldr	r3, [pc, #108]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e784:	4a1a      	ldr	r2, [pc, #104]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e786:	f043 0301 	orr.w	r3, r3, #1
 800e78a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e78c:	4b18      	ldr	r3, [pc, #96]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
 800e796:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e798:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e79c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e79e:	2302      	movs	r3, #2
 800e7a0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800e7aa:	230a      	movs	r3, #10
 800e7ac:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e7b8:	f7f7 f864 	bl	8005884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e7bc:	4b0c      	ldr	r3, [pc, #48]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7c0:	4a0b      	ldr	r2, [pc, #44]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e7c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e7c6:	6593      	str	r3, [r2, #88]	; 0x58
 800e7c8:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <HAL_PCD_MspInit+0xc0>)
 800e7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7d0:	60bb      	str	r3, [r7, #8]
 800e7d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	2043      	movs	r0, #67	; 0x43
 800e7da:	f7f6 fde6 	bl	80053aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e7de:	2043      	movs	r0, #67	; 0x43
 800e7e0:	f7f6 fdff 	bl	80053e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e7e4:	bf00      	nop
 800e7e6:	3758      	adds	r7, #88	; 0x58
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	40006800 	.word	0x40006800
 800e7f0:	40021000 	.word	0x40021000

0800e7f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e808:	4619      	mov	r1, r3
 800e80a:	4610      	mov	r0, r2
 800e80c:	f7fe fd20 	bl	800d250 <USBD_LL_SetupStage>
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e82a:	78fa      	ldrb	r2, [r7, #3]
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	4613      	mov	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	00db      	lsls	r3, r3, #3
 800e836:	440b      	add	r3, r1
 800e838:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	78fb      	ldrb	r3, [r7, #3]
 800e840:	4619      	mov	r1, r3
 800e842:	f7fe fd5a 	bl	800d2fa <USBD_LL_DataOutStage>
}
 800e846:	bf00      	nop
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	460b      	mov	r3, r1
 800e858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e860:	78fa      	ldrb	r2, [r7, #3]
 800e862:	6879      	ldr	r1, [r7, #4]
 800e864:	4613      	mov	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	00db      	lsls	r3, r3, #3
 800e86c:	440b      	add	r3, r1
 800e86e:	3340      	adds	r3, #64	; 0x40
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	78fb      	ldrb	r3, [r7, #3]
 800e874:	4619      	mov	r1, r3
 800e876:	f7fe fda3 	bl	800d3c0 <USBD_LL_DataInStage>
}
 800e87a:	bf00      	nop
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b082      	sub	sp, #8
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e890:	4618      	mov	r0, r3
 800e892:	f7fe feb7 	bl	800d604 <USBD_LL_SOF>
}
 800e896:	bf00      	nop
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d001      	beq.n	800e8b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8b2:	f7f4 fc8d 	bl	80031d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e8bc:	7bfa      	ldrb	r2, [r7, #15]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fe61 	bl	800d588 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fe fe0d 	bl	800d4ec <USBD_LL_Reset>
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
	...

0800e8dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fe5c 	bl	800d5a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	699b      	ldr	r3, [r3, #24]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d005      	beq.n	800e904 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8f8:	4b04      	ldr	r3, [pc, #16]	; (800e90c <HAL_PCD_SuspendCallback+0x30>)
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	4a03      	ldr	r2, [pc, #12]	; (800e90c <HAL_PCD_SuspendCallback+0x30>)
 800e8fe:	f043 0306 	orr.w	r3, r3, #6
 800e902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	e000ed00 	.word	0xe000ed00

0800e910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d007      	beq.n	800e930 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e920:	4b08      	ldr	r3, [pc, #32]	; (800e944 <HAL_PCD_ResumeCallback+0x34>)
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	4a07      	ldr	r2, [pc, #28]	; (800e944 <HAL_PCD_ResumeCallback+0x34>)
 800e926:	f023 0306 	bic.w	r3, r3, #6
 800e92a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e92c:	f000 fab6 	bl	800ee9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fe4c 	bl	800d5d4 <USBD_LL_Resume>
}
 800e93c:	bf00      	nop
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	e000ed00 	.word	0xe000ed00

0800e948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e950:	f7f8 ff44 	bl	80077dc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e954:	4a2b      	ldr	r2, [pc, #172]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a29      	ldr	r2, [pc, #164]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e960:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e964:	4b27      	ldr	r3, [pc, #156]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e966:	4a28      	ldr	r2, [pc, #160]	; (800ea08 <USBD_LL_Init+0xc0>)
 800e968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e96a:	4b26      	ldr	r3, [pc, #152]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e96c:	2208      	movs	r2, #8
 800e96e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e970:	4b24      	ldr	r3, [pc, #144]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e972:	2202      	movs	r2, #2
 800e974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e976:	4b23      	ldr	r3, [pc, #140]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e978:	2202      	movs	r2, #2
 800e97a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e97c:	4b21      	ldr	r3, [pc, #132]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e97e:	2200      	movs	r2, #0
 800e980:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e982:	4b20      	ldr	r3, [pc, #128]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e984:	2200      	movs	r2, #0
 800e986:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e988:	4b1e      	ldr	r3, [pc, #120]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e98e:	4b1d      	ldr	r3, [pc, #116]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e990:	2200      	movs	r2, #0
 800e992:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e994:	481b      	ldr	r0, [pc, #108]	; (800ea04 <USBD_LL_Init+0xbc>)
 800e996:	f7f7 f931 	bl	8005bfc <HAL_PCD_Init>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e9a0:	f7f4 fc16 	bl	80031d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9aa:	2318      	movs	r3, #24
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	f7f8 fe41 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9ba:	2358      	movs	r3, #88	; 0x58
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2180      	movs	r1, #128	; 0x80
 800e9c0:	f7f8 fe39 	bl	8007636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9ca:	23c0      	movs	r3, #192	; 0xc0
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2181      	movs	r1, #129	; 0x81
 800e9d0:	f7f8 fe31 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9da:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	f7f8 fe28 	bl	8007636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2182      	movs	r1, #130	; 0x82
 800e9f4:	f7f8 fe1f 	bl	8007636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	200011c0 	.word	0x200011c0
 800ea08:	40006800 	.word	0x40006800

0800ea0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea14:	2300      	movs	r3, #0
 800ea16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7f7 fa01 	bl	8005e2a <HAL_PCD_Start>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea2c:	7bbb      	ldrb	r3, [r7, #14]
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d816      	bhi.n	800ea60 <USBD_LL_Start+0x54>
 800ea32:	a201      	add	r2, pc, #4	; (adr r2, 800ea38 <USBD_LL_Start+0x2c>)
 800ea34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea38:	0800ea49 	.word	0x0800ea49
 800ea3c:	0800ea4f 	.word	0x0800ea4f
 800ea40:	0800ea55 	.word	0x0800ea55
 800ea44:	0800ea5b 	.word	0x0800ea5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4c:	e00b      	b.n	800ea66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	73fb      	strb	r3, [r7, #15]
    break;
 800ea52:	e008      	b.n	800ea66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea54:	2301      	movs	r3, #1
 800ea56:	73fb      	strb	r3, [r7, #15]
    break;
 800ea58:	e005      	b.n	800ea66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea5e:	e002      	b.n	800ea66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ea60:	2303      	movs	r3, #3
 800ea62:	73fb      	strb	r3, [r7, #15]
    break;
 800ea64:	bf00      	nop
  }
  return usb_status;
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	4608      	mov	r0, r1
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4603      	mov	r3, r0
 800ea80:	70fb      	strb	r3, [r7, #3]
 800ea82:	460b      	mov	r3, r1
 800ea84:	70bb      	strb	r3, [r7, #2]
 800ea86:	4613      	mov	r3, r2
 800ea88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ea98:	78bb      	ldrb	r3, [r7, #2]
 800ea9a:	883a      	ldrh	r2, [r7, #0]
 800ea9c:	78f9      	ldrb	r1, [r7, #3]
 800ea9e:	f7f7 fb32 	bl	8006106 <HAL_PCD_EP_Open>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eaa6:	7bbb      	ldrb	r3, [r7, #14]
 800eaa8:	2b03      	cmp	r3, #3
 800eaaa:	d817      	bhi.n	800eadc <USBD_LL_OpenEP+0x6c>
 800eaac:	a201      	add	r2, pc, #4	; (adr r2, 800eab4 <USBD_LL_OpenEP+0x44>)
 800eaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab2:	bf00      	nop
 800eab4:	0800eac5 	.word	0x0800eac5
 800eab8:	0800eacb 	.word	0x0800eacb
 800eabc:	0800ead1 	.word	0x0800ead1
 800eac0:	0800ead7 	.word	0x0800ead7
    case HAL_OK :
      usb_status = USBD_OK;
 800eac4:	2300      	movs	r3, #0
 800eac6:	73fb      	strb	r3, [r7, #15]
    break;
 800eac8:	e00b      	b.n	800eae2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eaca:	2303      	movs	r3, #3
 800eacc:	73fb      	strb	r3, [r7, #15]
    break;
 800eace:	e008      	b.n	800eae2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ead0:	2301      	movs	r3, #1
 800ead2:	73fb      	strb	r3, [r7, #15]
    break;
 800ead4:	e005      	b.n	800eae2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ead6:	2303      	movs	r3, #3
 800ead8:	73fb      	strb	r3, [r7, #15]
    break;
 800eada:	e002      	b.n	800eae2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800eadc:	2303      	movs	r3, #3
 800eade:	73fb      	strb	r3, [r7, #15]
    break;
 800eae0:	bf00      	nop
  }
  return usb_status;
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7f7 fb63 	bl	80061d6 <HAL_PCD_EP_Close>
 800eb10:	4603      	mov	r3, r0
 800eb12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb14:	7bbb      	ldrb	r3, [r7, #14]
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d816      	bhi.n	800eb48 <USBD_LL_CloseEP+0x5c>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <USBD_LL_CloseEP+0x34>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800eb31 	.word	0x0800eb31
 800eb24:	0800eb37 	.word	0x0800eb37
 800eb28:	0800eb3d 	.word	0x0800eb3d
 800eb2c:	0800eb43 	.word	0x0800eb43
    case HAL_OK :
      usb_status = USBD_OK;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
    break;
 800eb34:	e00b      	b.n	800eb4e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb36:	2303      	movs	r3, #3
 800eb38:	73fb      	strb	r3, [r7, #15]
    break;
 800eb3a:	e008      	b.n	800eb4e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb40:	e005      	b.n	800eb4e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb42:	2303      	movs	r3, #3
 800eb44:	73fb      	strb	r3, [r7, #15]
    break;
 800eb46:	e002      	b.n	800eb4e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb48:	2303      	movs	r3, #3
 800eb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb4c:	bf00      	nop
  }
  return usb_status;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb72:	78fa      	ldrb	r2, [r7, #3]
 800eb74:	4611      	mov	r1, r2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7f7 fc11 	bl	800639e <HAL_PCD_EP_SetStall>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d816      	bhi.n	800ebb4 <USBD_LL_StallEP+0x5c>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <USBD_LL_StallEP+0x34>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800eb9d 	.word	0x0800eb9d
 800eb90:	0800eba3 	.word	0x0800eba3
 800eb94:	0800eba9 	.word	0x0800eba9
 800eb98:	0800ebaf 	.word	0x0800ebaf
    case HAL_OK :
      usb_status = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eba0:	e00b      	b.n	800ebba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eba2:	2303      	movs	r3, #3
 800eba4:	73fb      	strb	r3, [r7, #15]
    break;
 800eba6:	e008      	b.n	800ebba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ebac:	e005      	b.n	800ebba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb2:	e002      	b.n	800ebba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb8:	bf00      	nop
  }
  return usb_status;
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebde:	78fa      	ldrb	r2, [r7, #3]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7f7 fc3d 	bl	8006462 <HAL_PCD_EP_ClrStall>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d816      	bhi.n	800ec20 <USBD_LL_ClearStallEP+0x5c>
 800ebf2:	a201      	add	r2, pc, #4	; (adr r2, 800ebf8 <USBD_LL_ClearStallEP+0x34>)
 800ebf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf8:	0800ec09 	.word	0x0800ec09
 800ebfc:	0800ec0f 	.word	0x0800ec0f
 800ec00:	0800ec15 	.word	0x0800ec15
 800ec04:	0800ec1b 	.word	0x0800ec1b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec0c:	e00b      	b.n	800ec26 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	73fb      	strb	r3, [r7, #15]
    break;
 800ec12:	e008      	b.n	800ec26 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec14:	2301      	movs	r3, #1
 800ec16:	73fb      	strb	r3, [r7, #15]
    break;
 800ec18:	e005      	b.n	800ec26 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1e:	e002      	b.n	800ec26 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec20:	2303      	movs	r3, #3
 800ec22:	73fb      	strb	r3, [r7, #15]
    break;
 800ec24:	bf00      	nop
  }
  return usb_status;
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	da0c      	bge.n	800ec66 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	4613      	mov	r3, r2
 800ec58:	009b      	lsls	r3, r3, #2
 800ec5a:	4413      	add	r3, r2
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	440b      	add	r3, r1
 800ec60:	3306      	adds	r3, #6
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	e00b      	b.n	800ec7e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec66:	78fb      	ldrb	r3, [r7, #3]
 800ec68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec6c:	68f9      	ldr	r1, [r7, #12]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	440b      	add	r3, r1
 800ec78:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800ec7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
	...

0800ec8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	460b      	mov	r3, r1
 800ec96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eca6:	78fa      	ldrb	r2, [r7, #3]
 800eca8:	4611      	mov	r1, r2
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f7 fa06 	bl	80060bc <HAL_PCD_SetAddress>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ecb4:	7bbb      	ldrb	r3, [r7, #14]
 800ecb6:	2b03      	cmp	r3, #3
 800ecb8:	d816      	bhi.n	800ece8 <USBD_LL_SetUSBAddress+0x5c>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <USBD_LL_SetUSBAddress+0x34>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ecd1 	.word	0x0800ecd1
 800ecc4:	0800ecd7 	.word	0x0800ecd7
 800ecc8:	0800ecdd 	.word	0x0800ecdd
 800eccc:	0800ece3 	.word	0x0800ece3
    case HAL_OK :
      usb_status = USBD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecd4:	e00b      	b.n	800ecee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecda:	e008      	b.n	800ecee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	73fb      	strb	r3, [r7, #15]
    break;
 800ece0:	e005      	b.n	800ecee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ece2:	2303      	movs	r3, #3
 800ece4:	73fb      	strb	r3, [r7, #15]
    break;
 800ece6:	e002      	b.n	800ecee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ece8:	2303      	movs	r3, #3
 800ecea:	73fb      	strb	r3, [r7, #15]
    break;
 800ecec:	bf00      	nop
  }
  return usb_status;
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	607a      	str	r2, [r7, #4]
 800ed02:	603b      	str	r3, [r7, #0]
 800ed04:	460b      	mov	r3, r1
 800ed06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed16:	7af9      	ldrb	r1, [r7, #11]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	f7f7 fafb 	bl	8006316 <HAL_PCD_EP_Transmit>
 800ed20:	4603      	mov	r3, r0
 800ed22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ed24:	7dbb      	ldrb	r3, [r7, #22]
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d816      	bhi.n	800ed58 <USBD_LL_Transmit+0x60>
 800ed2a:	a201      	add	r2, pc, #4	; (adr r2, 800ed30 <USBD_LL_Transmit+0x38>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800ed41 	.word	0x0800ed41
 800ed34:	0800ed47 	.word	0x0800ed47
 800ed38:	0800ed4d 	.word	0x0800ed4d
 800ed3c:	0800ed53 	.word	0x0800ed53
    case HAL_OK :
      usb_status = USBD_OK;
 800ed40:	2300      	movs	r3, #0
 800ed42:	75fb      	strb	r3, [r7, #23]
    break;
 800ed44:	e00b      	b.n	800ed5e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed46:	2303      	movs	r3, #3
 800ed48:	75fb      	strb	r3, [r7, #23]
    break;
 800ed4a:	e008      	b.n	800ed5e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ed50:	e005      	b.n	800ed5e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed52:	2303      	movs	r3, #3
 800ed54:	75fb      	strb	r3, [r7, #23]
    break;
 800ed56:	e002      	b.n	800ed5e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	75fb      	strb	r3, [r7, #23]
    break;
 800ed5c:	bf00      	nop
  }
  return usb_status;
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	607a      	str	r2, [r7, #4]
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	460b      	mov	r3, r1
 800ed76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed86:	7af9      	ldrb	r1, [r7, #11]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	f7f7 fa6d 	bl	800626a <HAL_PCD_EP_Receive>
 800ed90:	4603      	mov	r3, r0
 800ed92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ed94:	7dbb      	ldrb	r3, [r7, #22]
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d816      	bhi.n	800edc8 <USBD_LL_PrepareReceive+0x60>
 800ed9a:	a201      	add	r2, pc, #4	; (adr r2, 800eda0 <USBD_LL_PrepareReceive+0x38>)
 800ed9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda0:	0800edb1 	.word	0x0800edb1
 800eda4:	0800edb7 	.word	0x0800edb7
 800eda8:	0800edbd 	.word	0x0800edbd
 800edac:	0800edc3 	.word	0x0800edc3
    case HAL_OK :
      usb_status = USBD_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	75fb      	strb	r3, [r7, #23]
    break;
 800edb4:	e00b      	b.n	800edce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edb6:	2303      	movs	r3, #3
 800edb8:	75fb      	strb	r3, [r7, #23]
    break;
 800edba:	e008      	b.n	800edce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edbc:	2301      	movs	r3, #1
 800edbe:	75fb      	strb	r3, [r7, #23]
    break;
 800edc0:	e005      	b.n	800edce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edc2:	2303      	movs	r3, #3
 800edc4:	75fb      	strb	r3, [r7, #23]
    break;
 800edc6:	e002      	b.n	800edce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800edc8:	2303      	movs	r3, #3
 800edca:	75fb      	strb	r3, [r7, #23]
    break;
 800edcc:	bf00      	nop
  }
  return usb_status;
 800edce:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	460b      	mov	r3, r1
 800ede2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edea:	78fa      	ldrb	r2, [r7, #3]
 800edec:	4611      	mov	r1, r2
 800edee:	4618      	mov	r0, r3
 800edf0:	f7f7 fa79 	bl	80062e6 <HAL_PCD_EP_GetRxCount>
 800edf4:	4603      	mov	r3, r0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ee0c:	78fb      	ldrb	r3, [r7, #3]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <HAL_PCDEx_LPM_Callback+0x18>
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d013      	beq.n	800ee3e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ee16:	e023      	b.n	800ee60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	699b      	ldr	r3, [r3, #24]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d007      	beq.n	800ee30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee20:	f000 f83c 	bl	800ee9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee24:	4b10      	ldr	r3, [pc, #64]	; (800ee68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	4a0f      	ldr	r2, [pc, #60]	; (800ee68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee2a:	f023 0306 	bic.w	r3, r3, #6
 800ee2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe fbcc 	bl	800d5d4 <USBD_LL_Resume>
    break;
 800ee3c:	e010      	b.n	800ee60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fbaf 	bl	800d5a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d005      	beq.n	800ee5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	4a04      	ldr	r2, [pc, #16]	; (800ee68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee58:	f043 0306 	orr.w	r3, r3, #6
 800ee5c:	6113      	str	r3, [r2, #16]
    break;
 800ee5e:	bf00      	nop
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	e000ed00 	.word	0xe000ed00

0800ee6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee74:	4b03      	ldr	r3, [pc, #12]	; (800ee84 <USBD_static_malloc+0x18>)
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	200014bc 	.word	0x200014bc

0800ee88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]

}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800eea0:	bf00      	nop
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <_Znwj>:
 800eeaa:	2801      	cmp	r0, #1
 800eeac:	bf38      	it	cc
 800eeae:	2001      	movcc	r0, #1
 800eeb0:	b510      	push	{r4, lr}
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 f859 	bl	800ef6c <malloc>
 800eeba:	b930      	cbnz	r0, 800eeca <_Znwj+0x20>
 800eebc:	f000 f81c 	bl	800eef8 <_ZSt15get_new_handlerv>
 800eec0:	b908      	cbnz	r0, 800eec6 <_Znwj+0x1c>
 800eec2:	f000 f821 	bl	800ef08 <abort>
 800eec6:	4780      	blx	r0
 800eec8:	e7f4      	b.n	800eeb4 <_Znwj+0xa>
 800eeca:	bd10      	pop	{r4, pc}

0800eecc <__cxa_pure_virtual>:
 800eecc:	b508      	push	{r3, lr}
 800eece:	f000 f80d 	bl	800eeec <_ZSt9terminatev>

0800eed2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eed2:	b508      	push	{r3, lr}
 800eed4:	4780      	blx	r0
 800eed6:	f000 f817 	bl	800ef08 <abort>
	...

0800eedc <_ZSt13get_terminatev>:
 800eedc:	4b02      	ldr	r3, [pc, #8]	; (800eee8 <_ZSt13get_terminatev+0xc>)
 800eede:	6818      	ldr	r0, [r3, #0]
 800eee0:	f3bf 8f5b 	dmb	ish
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	20000194 	.word	0x20000194

0800eeec <_ZSt9terminatev>:
 800eeec:	b508      	push	{r3, lr}
 800eeee:	f7ff fff5 	bl	800eedc <_ZSt13get_terminatev>
 800eef2:	f7ff ffee 	bl	800eed2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800eef8 <_ZSt15get_new_handlerv>:
 800eef8:	4b02      	ldr	r3, [pc, #8]	; (800ef04 <_ZSt15get_new_handlerv+0xc>)
 800eefa:	6818      	ldr	r0, [r3, #0]
 800eefc:	f3bf 8f5b 	dmb	ish
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	200016dc 	.word	0x200016dc

0800ef08 <abort>:
 800ef08:	b508      	push	{r3, lr}
 800ef0a:	2006      	movs	r0, #6
 800ef0c:	f000 f90a 	bl	800f124 <raise>
 800ef10:	2001      	movs	r0, #1
 800ef12:	f7f4 fa93 	bl	800343c <_exit>
	...

0800ef18 <__errno>:
 800ef18:	4b01      	ldr	r3, [pc, #4]	; (800ef20 <__errno+0x8>)
 800ef1a:	6818      	ldr	r0, [r3, #0]
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	20000198 	.word	0x20000198

0800ef24 <__libc_init_array>:
 800ef24:	b570      	push	{r4, r5, r6, lr}
 800ef26:	4d0d      	ldr	r5, [pc, #52]	; (800ef5c <__libc_init_array+0x38>)
 800ef28:	4c0d      	ldr	r4, [pc, #52]	; (800ef60 <__libc_init_array+0x3c>)
 800ef2a:	1b64      	subs	r4, r4, r5
 800ef2c:	10a4      	asrs	r4, r4, #2
 800ef2e:	2600      	movs	r6, #0
 800ef30:	42a6      	cmp	r6, r4
 800ef32:	d109      	bne.n	800ef48 <__libc_init_array+0x24>
 800ef34:	4d0b      	ldr	r5, [pc, #44]	; (800ef64 <__libc_init_array+0x40>)
 800ef36:	4c0c      	ldr	r4, [pc, #48]	; (800ef68 <__libc_init_array+0x44>)
 800ef38:	f000 f91e 	bl	800f178 <_init>
 800ef3c:	1b64      	subs	r4, r4, r5
 800ef3e:	10a4      	asrs	r4, r4, #2
 800ef40:	2600      	movs	r6, #0
 800ef42:	42a6      	cmp	r6, r4
 800ef44:	d105      	bne.n	800ef52 <__libc_init_array+0x2e>
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef4c:	4798      	blx	r3
 800ef4e:	3601      	adds	r6, #1
 800ef50:	e7ee      	b.n	800ef30 <__libc_init_array+0xc>
 800ef52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef56:	4798      	blx	r3
 800ef58:	3601      	adds	r6, #1
 800ef5a:	e7f2      	b.n	800ef42 <__libc_init_array+0x1e>
 800ef5c:	0800f25c 	.word	0x0800f25c
 800ef60:	0800f25c 	.word	0x0800f25c
 800ef64:	0800f25c 	.word	0x0800f25c
 800ef68:	0800f264 	.word	0x0800f264

0800ef6c <malloc>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <malloc+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f000 b82b 	b.w	800efcc <_malloc_r>
 800ef76:	bf00      	nop
 800ef78:	20000198 	.word	0x20000198

0800ef7c <memset>:
 800ef7c:	4402      	add	r2, r0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d100      	bne.n	800ef86 <memset+0xa>
 800ef84:	4770      	bx	lr
 800ef86:	f803 1b01 	strb.w	r1, [r3], #1
 800ef8a:	e7f9      	b.n	800ef80 <memset+0x4>

0800ef8c <sbrk_aligned>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	4e0e      	ldr	r6, [pc, #56]	; (800efc8 <sbrk_aligned+0x3c>)
 800ef90:	460c      	mov	r4, r1
 800ef92:	6831      	ldr	r1, [r6, #0]
 800ef94:	4605      	mov	r5, r0
 800ef96:	b911      	cbnz	r1, 800ef9e <sbrk_aligned+0x12>
 800ef98:	f000 f88c 	bl	800f0b4 <_sbrk_r>
 800ef9c:	6030      	str	r0, [r6, #0]
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 f887 	bl	800f0b4 <_sbrk_r>
 800efa6:	1c43      	adds	r3, r0, #1
 800efa8:	d00a      	beq.n	800efc0 <sbrk_aligned+0x34>
 800efaa:	1cc4      	adds	r4, r0, #3
 800efac:	f024 0403 	bic.w	r4, r4, #3
 800efb0:	42a0      	cmp	r0, r4
 800efb2:	d007      	beq.n	800efc4 <sbrk_aligned+0x38>
 800efb4:	1a21      	subs	r1, r4, r0
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 f87c 	bl	800f0b4 <_sbrk_r>
 800efbc:	3001      	adds	r0, #1
 800efbe:	d101      	bne.n	800efc4 <sbrk_aligned+0x38>
 800efc0:	f04f 34ff 	mov.w	r4, #4294967295
 800efc4:	4620      	mov	r0, r4
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	200016e4 	.word	0x200016e4

0800efcc <_malloc_r>:
 800efcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd0:	1ccd      	adds	r5, r1, #3
 800efd2:	f025 0503 	bic.w	r5, r5, #3
 800efd6:	3508      	adds	r5, #8
 800efd8:	2d0c      	cmp	r5, #12
 800efda:	bf38      	it	cc
 800efdc:	250c      	movcc	r5, #12
 800efde:	2d00      	cmp	r5, #0
 800efe0:	4607      	mov	r7, r0
 800efe2:	db01      	blt.n	800efe8 <_malloc_r+0x1c>
 800efe4:	42a9      	cmp	r1, r5
 800efe6:	d905      	bls.n	800eff4 <_malloc_r+0x28>
 800efe8:	230c      	movs	r3, #12
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	2600      	movs	r6, #0
 800efee:	4630      	mov	r0, r6
 800eff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff4:	4e2e      	ldr	r6, [pc, #184]	; (800f0b0 <_malloc_r+0xe4>)
 800eff6:	f000 f8b1 	bl	800f15c <__malloc_lock>
 800effa:	6833      	ldr	r3, [r6, #0]
 800effc:	461c      	mov	r4, r3
 800effe:	bb34      	cbnz	r4, 800f04e <_malloc_r+0x82>
 800f000:	4629      	mov	r1, r5
 800f002:	4638      	mov	r0, r7
 800f004:	f7ff ffc2 	bl	800ef8c <sbrk_aligned>
 800f008:	1c43      	adds	r3, r0, #1
 800f00a:	4604      	mov	r4, r0
 800f00c:	d14d      	bne.n	800f0aa <_malloc_r+0xde>
 800f00e:	6834      	ldr	r4, [r6, #0]
 800f010:	4626      	mov	r6, r4
 800f012:	2e00      	cmp	r6, #0
 800f014:	d140      	bne.n	800f098 <_malloc_r+0xcc>
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	4631      	mov	r1, r6
 800f01a:	4638      	mov	r0, r7
 800f01c:	eb04 0803 	add.w	r8, r4, r3
 800f020:	f000 f848 	bl	800f0b4 <_sbrk_r>
 800f024:	4580      	cmp	r8, r0
 800f026:	d13a      	bne.n	800f09e <_malloc_r+0xd2>
 800f028:	6821      	ldr	r1, [r4, #0]
 800f02a:	3503      	adds	r5, #3
 800f02c:	1a6d      	subs	r5, r5, r1
 800f02e:	f025 0503 	bic.w	r5, r5, #3
 800f032:	3508      	adds	r5, #8
 800f034:	2d0c      	cmp	r5, #12
 800f036:	bf38      	it	cc
 800f038:	250c      	movcc	r5, #12
 800f03a:	4629      	mov	r1, r5
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7ff ffa5 	bl	800ef8c <sbrk_aligned>
 800f042:	3001      	adds	r0, #1
 800f044:	d02b      	beq.n	800f09e <_malloc_r+0xd2>
 800f046:	6823      	ldr	r3, [r4, #0]
 800f048:	442b      	add	r3, r5
 800f04a:	6023      	str	r3, [r4, #0]
 800f04c:	e00e      	b.n	800f06c <_malloc_r+0xa0>
 800f04e:	6822      	ldr	r2, [r4, #0]
 800f050:	1b52      	subs	r2, r2, r5
 800f052:	d41e      	bmi.n	800f092 <_malloc_r+0xc6>
 800f054:	2a0b      	cmp	r2, #11
 800f056:	d916      	bls.n	800f086 <_malloc_r+0xba>
 800f058:	1961      	adds	r1, r4, r5
 800f05a:	42a3      	cmp	r3, r4
 800f05c:	6025      	str	r5, [r4, #0]
 800f05e:	bf18      	it	ne
 800f060:	6059      	strne	r1, [r3, #4]
 800f062:	6863      	ldr	r3, [r4, #4]
 800f064:	bf08      	it	eq
 800f066:	6031      	streq	r1, [r6, #0]
 800f068:	5162      	str	r2, [r4, r5]
 800f06a:	604b      	str	r3, [r1, #4]
 800f06c:	4638      	mov	r0, r7
 800f06e:	f104 060b 	add.w	r6, r4, #11
 800f072:	f000 f879 	bl	800f168 <__malloc_unlock>
 800f076:	f026 0607 	bic.w	r6, r6, #7
 800f07a:	1d23      	adds	r3, r4, #4
 800f07c:	1af2      	subs	r2, r6, r3
 800f07e:	d0b6      	beq.n	800efee <_malloc_r+0x22>
 800f080:	1b9b      	subs	r3, r3, r6
 800f082:	50a3      	str	r3, [r4, r2]
 800f084:	e7b3      	b.n	800efee <_malloc_r+0x22>
 800f086:	6862      	ldr	r2, [r4, #4]
 800f088:	42a3      	cmp	r3, r4
 800f08a:	bf0c      	ite	eq
 800f08c:	6032      	streq	r2, [r6, #0]
 800f08e:	605a      	strne	r2, [r3, #4]
 800f090:	e7ec      	b.n	800f06c <_malloc_r+0xa0>
 800f092:	4623      	mov	r3, r4
 800f094:	6864      	ldr	r4, [r4, #4]
 800f096:	e7b2      	b.n	800effe <_malloc_r+0x32>
 800f098:	4634      	mov	r4, r6
 800f09a:	6876      	ldr	r6, [r6, #4]
 800f09c:	e7b9      	b.n	800f012 <_malloc_r+0x46>
 800f09e:	230c      	movs	r3, #12
 800f0a0:	603b      	str	r3, [r7, #0]
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f000 f860 	bl	800f168 <__malloc_unlock>
 800f0a8:	e7a1      	b.n	800efee <_malloc_r+0x22>
 800f0aa:	6025      	str	r5, [r4, #0]
 800f0ac:	e7de      	b.n	800f06c <_malloc_r+0xa0>
 800f0ae:	bf00      	nop
 800f0b0:	200016e0 	.word	0x200016e0

0800f0b4 <_sbrk_r>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4d06      	ldr	r5, [pc, #24]	; (800f0d0 <_sbrk_r+0x1c>)
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	4608      	mov	r0, r1
 800f0be:	602b      	str	r3, [r5, #0]
 800f0c0:	f7f4 f9c6 	bl	8003450 <_sbrk>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_sbrk_r+0x1a>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_sbrk_r+0x1a>
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	200016e8 	.word	0x200016e8

0800f0d4 <_raise_r>:
 800f0d4:	291f      	cmp	r1, #31
 800f0d6:	b538      	push	{r3, r4, r5, lr}
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	d904      	bls.n	800f0e8 <_raise_r+0x14>
 800f0de:	2316      	movs	r3, #22
 800f0e0:	6003      	str	r3, [r0, #0]
 800f0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e6:	bd38      	pop	{r3, r4, r5, pc}
 800f0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0ea:	b112      	cbz	r2, 800f0f2 <_raise_r+0x1e>
 800f0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0f0:	b94b      	cbnz	r3, 800f106 <_raise_r+0x32>
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 f830 	bl	800f158 <_getpid_r>
 800f0f8:	462a      	mov	r2, r5
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f102:	f000 b817 	b.w	800f134 <_kill_r>
 800f106:	2b01      	cmp	r3, #1
 800f108:	d00a      	beq.n	800f120 <_raise_r+0x4c>
 800f10a:	1c59      	adds	r1, r3, #1
 800f10c:	d103      	bne.n	800f116 <_raise_r+0x42>
 800f10e:	2316      	movs	r3, #22
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	2001      	movs	r0, #1
 800f114:	e7e7      	b.n	800f0e6 <_raise_r+0x12>
 800f116:	2400      	movs	r4, #0
 800f118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f11c:	4628      	mov	r0, r5
 800f11e:	4798      	blx	r3
 800f120:	2000      	movs	r0, #0
 800f122:	e7e0      	b.n	800f0e6 <_raise_r+0x12>

0800f124 <raise>:
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <raise+0xc>)
 800f126:	4601      	mov	r1, r0
 800f128:	6818      	ldr	r0, [r3, #0]
 800f12a:	f7ff bfd3 	b.w	800f0d4 <_raise_r>
 800f12e:	bf00      	nop
 800f130:	20000198 	.word	0x20000198

0800f134 <_kill_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	; (800f154 <_kill_r+0x20>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	4611      	mov	r1, r2
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	f7f4 f96b 	bl	800341c <_kill>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	d102      	bne.n	800f150 <_kill_r+0x1c>
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	b103      	cbz	r3, 800f150 <_kill_r+0x1c>
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	bf00      	nop
 800f154:	200016e8 	.word	0x200016e8

0800f158 <_getpid_r>:
 800f158:	f7f4 b958 	b.w	800340c <_getpid>

0800f15c <__malloc_lock>:
 800f15c:	4801      	ldr	r0, [pc, #4]	; (800f164 <__malloc_lock+0x8>)
 800f15e:	f000 b809 	b.w	800f174 <__retarget_lock_acquire_recursive>
 800f162:	bf00      	nop
 800f164:	200016ec 	.word	0x200016ec

0800f168 <__malloc_unlock>:
 800f168:	4801      	ldr	r0, [pc, #4]	; (800f170 <__malloc_unlock+0x8>)
 800f16a:	f000 b804 	b.w	800f176 <__retarget_lock_release_recursive>
 800f16e:	bf00      	nop
 800f170:	200016ec 	.word	0x200016ec

0800f174 <__retarget_lock_acquire_recursive>:
 800f174:	4770      	bx	lr

0800f176 <__retarget_lock_release_recursive>:
 800f176:	4770      	bx	lr

0800f178 <_init>:
 800f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f17a:	bf00      	nop
 800f17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17e:	bc08      	pop	{r3}
 800f180:	469e      	mov	lr, r3
 800f182:	4770      	bx	lr

0800f184 <_fini>:
 800f184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f186:	bf00      	nop
 800f188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f18a:	bc08      	pop	{r3}
 800f18c:	469e      	mov	lr, r3
 800f18e:	4770      	bx	lr
