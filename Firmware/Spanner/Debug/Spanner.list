
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000f640  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f890  0800f890  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f890  0800f890  0001f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f898  0800f898  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f898  0800f898  0001f898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a0  0800f8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001518  200001f8  0800fa9c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  0800fa9c  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cbf5  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065d7  00000000  00000000  0004ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  000533f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  000554e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002603c  00000000  00000000  000572d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292d1  00000000  00000000  0007d30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b83  00000000  00000000  000a65dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cc4  00000000  00000000  0016d1b0  2**2
=======
  1 .text         0000f214  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800f3a0  0800f3a0  0001f3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f464  0800f464  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f464  0800f464  0001f464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f46c  0800f46c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f46c  0800f46c  0001f46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001514  200001f8  0800f670  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000170c  0800f670  0002170c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8fb  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006415  00000000  00000000  0004bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  00051f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dc0  00000000  00000000  00053ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dcb  00000000  00000000  00055db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d8a  00000000  00000000  0007bb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6972  00000000  00000000  000a4905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be0  00000000  00000000  0016b2c8  2**2
>>>>>>> origin/main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f8 	.word	0x200001f8
 80001a8:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001ac:	0800f7b4 	.word	0x0800f7b4
=======
 80001ac:	0800f388 	.word	0x0800f388
>>>>>>> origin/main

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001fc 	.word	0x200001fc
<<<<<<< HEAD
 80001c8:	0800f7b4 	.word	0x0800f7b4
=======
 80001c8:	0800f388 	.word	0x0800f388
>>>>>>> origin/main

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

#include "stddef.h"

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
<<<<<<< HEAD
 80004ec:	0800f81c 	.word	0x0800f81c
=======
 80004ec:	0800f3f0 	.word	0x0800f3f0
>>>>>>> origin/main

080004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
<<<<<<< HEAD
 8000510:	f000 fb52 	bl	8000bb8 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
=======
 8000510:	f000 fb68 	bl	8000be4 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
>>>>>>> origin/main
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3328      	adds	r3, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	61da      	str	r2, [r3, #28]
		}
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8000548:	0800f82c 	.word	0x0800f82c
=======
 8000548:	0800f400 	.word	0x0800f400
>>>>>>> origin/main

0800054c <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	705a      	strb	r2, [r3, #1]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	70da      	strb	r2, [r3, #3]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2201      	movs	r2, #1
 8000570:	711a      	strb	r2, [r3, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	715a      	strb	r2, [r3, #5]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	719a      	strb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	71da      	strb	r2, [r3, #7]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2220      	movs	r2, #32
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	805a      	strh	r2, [r3, #2]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	809a      	strh	r2, [r3, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	80da      	strh	r2, [r3, #6]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	811a      	strh	r2, [r3, #8]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005be:	815a      	strh	r2, [r3, #10]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2214      	movs	r2, #20
 80005c4:	819a      	strh	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2264      	movs	r2, #100	; 0x64
 80005ca:	81da      	strh	r2, [r3, #14]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80005d2:	821a      	strh	r2, [r3, #16]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80005da:	825a      	strh	r2, [r3, #18]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2232      	movs	r2, #50	; 0x32
 80005e0:	829a      	strh	r2, [r3, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	82da      	strh	r2, [r3, #22]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ee:	831a      	strh	r2, [r3, #24]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_ZN11DriveStatusC1Ev>:

#define ADC_2_VOLTAGE		2
#define ADC_2_CURRENT		2


class DriveStatus
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	741a      	strb	r2, [r3, #16]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	751a      	strb	r2, [r3, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <_ZN7AppMainC1Ev>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

extern ADC_HandleTypeDef hadc1;

AppMain::AppMain()
<<<<<<< HEAD
 8000638:	b5b0      	push	{r4, r5, r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	819a      	strh	r2, [r3, #12]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7c 	bl	800054c <_ZN11TaskHandlerC1Ev>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3310      	adds	r3, #16
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fadd 	bl	8001c18 <_ZN10RFM95_LoRaC1Ev>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3330      	adds	r3, #48	; 0x30
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	831a      	strh	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3330      	adds	r3, #48	; 0x30
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff97 	bl	80005aa <_ZN13DriveSettingsC1Ev>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	334a      	adds	r3, #74	; 0x4a
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	829a      	strh	r2, [r3, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	334a      	adds	r3, #74	; 0x4a
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffbf 	bl	8000616 <_ZN11DriveStatusC1Ev>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3360      	adds	r3, #96	; 0x60
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f826 	bl	80026ee <_ZN12DriveCommandC1Ev>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	334a      	adds	r3, #74	; 0x4a
 80006ac:	4619      	mov	r1, r3
 80006ae:	4610      	mov	r0, r2
 80006b0:	f001 f9dc 	bl	8001a6c <_ZN7EncoderC1EP11DriveStatus>
 80006b4:	2030      	movs	r0, #48	; 0x30
 80006b6:	f00e ff16 	bl	800f4e6 <_Znwj>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461c      	mov	r4, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3310      	adds	r3, #16
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4603      	mov	r3, r0
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff ff09 	bl	80004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	67dc      	str	r4, [r3, #124]	; 0x7c
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80006e8:	2300      	movs	r3, #0
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	4922      	ldr	r1, [pc, #136]	; (8000778 <_ZN7AppMainC1Ev+0x140>)
 80006ee:	f001 fa5b 	bl	8001ba8 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80006f8:	2300      	movs	r3, #0
 80006fa:	2210      	movs	r2, #16
 80006fc:	491e      	ldr	r1, [pc, #120]	; (8000778 <_ZN7AppMainC1Ev+0x140>)
 80006fe:	f001 fa53 	bl	8001ba8 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f103 044a 	add.w	r4, r3, #74	; 0x4a
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 0560 	add.w	r5, r3, #96	; 0x60
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3368      	adds	r3, #104	; 0x68
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	3280      	adds	r2, #128	; 0x80
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	462b      	mov	r3, r5
 8000728:	4622      	mov	r2, r4
 800072a:	f000 ff61 	bl	80015f0 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7EncoderP3LED>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	334a      	adds	r3, #74	; 0x4a
 800073e:	461a      	mov	r2, r3
 8000740:	f001 fa1c 	bl	8001b7c <_ZN5ErrorC1EP3LEDP11DriveStatus>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2201      	movs	r2, #1
 8000748:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
{

}
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bdb0      	pop	{r4, r5, r7, pc}
 8000776:	bf00      	nop
 8000778:	48000400 	.word	0x48000400

0800077c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	//Set "self power on" to turn on the external Mosfet.
	HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f005 fd22 	bl	80061d4 <HAL_GPIO_WritePin>
	//turn ext led on
	ledExt.ON();
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3388      	adds	r3, #136	; 0x88
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fa22 	bl	8001bde <_ZN3LED2ONEv>

	//inti SPI
	HAL_SPI_MspInit(&hspi1);
 800079a:	482d      	ldr	r0, [pc, #180]	; (8000850 <_ZN7AppMain7StartupEv+0xd4>)
 800079c:	f002 fe16 	bl	80033cc <HAL_SPI_MspInit>

	//init and start Timer
	HAL_TIM_PWM_MspInit(&htim2);	//PWM timer
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <_ZN7AppMain7StartupEv+0xd8>)
 80007a2:	f003 f8ab 	bl	80038fc <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_MspInit(&htim16);	//task handler timer
 80007a6:	482c      	ldr	r0, [pc, #176]	; (8000858 <_ZN7AppMain7StartupEv+0xdc>)
 80007a8:	f003 f8c6 	bl	8003938 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim6);	//ADC trigger timer
 80007ac:	482b      	ldr	r0, [pc, #172]	; (800085c <_ZN7AppMain7StartupEv+0xe0>)
 80007ae:	f003 f8c3 	bl	8003938 <HAL_TIM_Base_MspInit>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//start PWM CH2
 80007b2:	2104      	movs	r1, #4
 80007b4:	4827      	ldr	r0, [pc, #156]	; (8000854 <_ZN7AppMain7StartupEv+0xd8>)
 80007b6:	f009 f99f 	bl	8009af8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//start PWM CH1
 80007ba:	2100      	movs	r1, #0
 80007bc:	4825      	ldr	r0, [pc, #148]	; (8000854 <_ZN7AppMain7StartupEv+0xd8>)
 80007be:	f009 f99b 	bl	8009af8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);				//start task handler in IT mode
 80007c2:	4825      	ldr	r0, [pc, #148]	; (8000858 <_ZN7AppMain7StartupEv+0xdc>)
 80007c4:	f009 f8ec 	bl	80099a0 <HAL_TIM_Base_Start_IT>

	//init and start ADC
	HAL_ADC_MspInit(&hadc1);
 80007c8:	4825      	ldr	r0, [pc, #148]	; (8000860 <_ZN7AppMain7StartupEv+0xe4>)
 80007ca:	f002 fbab 	bl	8002f24 <HAL_ADC_MspInit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	33bc      	adds	r3, #188	; 0xbc
 80007d2:	2202      	movs	r2, #2
 80007d4:	4619      	mov	r1, r3
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <_ZN7AppMain7StartupEv+0xe4>)
 80007d8:	f003 fdae 	bl	8004338 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 80007dc:	481f      	ldr	r0, [pc, #124]	; (800085c <_ZN7AppMain7StartupEv+0xe0>)
 80007de:	f009 f8df 	bl	80099a0 <HAL_TIM_Base_Start_IT>

	//configure Motor throttle
	TIM2->CCR1 = 6400;
 80007e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e6:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(7000);
 80007ec:	f641 3058 	movw	r0, #7000	; 0x1b58
 80007f0:	f003 f9d6 	bl	8003ba0 <HAL_Delay>
	TIM2->CCR1 = 3200;
 80007f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34

	if (!rfm95.InitRFM())
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3310      	adds	r3, #16
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fe0c 	bl	8002420 <_ZN10RFM95_LoRa7InitRFMEv>
 8000808:	4603      	mov	r3, r0
 800080a:	f083 0301 	eor.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00a      	beq.n	800082a <_ZN7AppMain7StartupEv+0xae>
	{
		driveStatus.setError(DriveStatus::E_COM_ERROR);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	334a      	adds	r3, #74	; 0x4a
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f002 f8f8 	bl	8002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		taskHandler.setDriveTaskEnable(false);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fa9b 	bl	8002d60 <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3310      	adds	r3, #16
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fc33 	bl	800209c <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3368      	adds	r3, #104	; 0x68
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f92e 	bl	8001a9c <_ZN7Encoder4initEv>

	Main();
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f863 	bl	800090c <_ZN7AppMain4MainEv>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200003a0 	.word	0x200003a0
 8000854:	20000454 	.word	0x20000454
 8000858:	200004ec 	.word	0x200004ec
 800085c:	200004a0 	.word	0x200004a0
 8000860:	20000214 	.word	0x20000214

08000864 <_ZN7AppMain5ResetEv>:
=======
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	811a      	strh	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff89 	bl	800054c <_ZN11TaskHandlerC1Ev>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	330c      	adds	r3, #12
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fb8c 	bl	8001d5c <_ZN10RFM95_LoRaC1Ev>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	332c      	adds	r3, #44	; 0x2c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]
 8000656:	831a      	strh	r2, [r3, #24]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	332c      	adds	r3, #44	; 0x2c
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff98 	bl	8000592 <_ZN13DriveSettingsC1Ev>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3346      	adds	r3, #70	; 0x46
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	829a      	strh	r2, [r3, #20]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3346      	adds	r3, #70	; 0x46
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffc0 	bl	80005fe <_ZN11DriveStatusC1Ev>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	335c      	adds	r3, #92	; 0x5c
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f8d5 	bl	8002832 <_ZN12DriveCommandC1Ev>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3346      	adds	r3, #70	; 0x46
 8000692:	4619      	mov	r1, r3
 8000694:	4610      	mov	r0, r2
 8000696:	f001 f9f1 	bl	8001a7c <_ZN7EncoderC1EP11DriveStatus>
 800069a:	2030      	movs	r0, #48	; 0x30
 800069c:	f00e fd0d 	bl	800f0ba <_Znwj>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461c      	mov	r4, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	330c      	adds	r3, #12
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4603      	mov	r3, r0
 80006be:	4620      	mov	r0, r4
 80006c0:	f7ff ff16 	bl	80004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	679c      	str	r4, [r3, #120]	; 0x78
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80006ce:	2300      	movs	r3, #0
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	4922      	ldr	r1, [pc, #136]	; (800075c <_ZN7AppMainC1Ev+0x13c>)
 80006d4:	f001 fadc 	bl	8001c90 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80006de:	2300      	movs	r3, #0
 80006e0:	2210      	movs	r2, #16
 80006e2:	491e      	ldr	r1, [pc, #120]	; (800075c <_ZN7AppMainC1Ev+0x13c>)
 80006e4:	f001 fad4 	bl	8001c90 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f103 0446 	add.w	r4, r3, #70	; 0x46
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3364      	adds	r3, #100	; 0x64
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	327c      	adds	r2, #124	; 0x7c
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	462b      	mov	r3, r5
 800070e:	4622      	mov	r2, r4
 8000710:	f000 ff76 	bl	8001600 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7EncoderP3LED>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3346      	adds	r3, #70	; 0x46
 8000724:	461a      	mov	r2, r3
 8000726:	f001 fa31 	bl	8001b8c <_ZN5ErrorC1EP3LEDP11DriveStatus>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2201      	movs	r2, #1
 800072e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
{

}
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bdb0      	pop	{r4, r5, r7, pc}
 800075c:	48000400 	.word	0x48000400

08000760 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	//Set "self power on" to turn on the external Mosfet.
	HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2101      	movs	r1, #1
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f005 fb1a 	bl	8005da8 <HAL_GPIO_WritePin>
	//turn ext led on
	ledExt.ON();
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3384      	adds	r3, #132	; 0x84
 8000778:	4618      	mov	r0, r3
 800077a:	f001 faa4 	bl	8001cc6 <_ZN3LED2ONEv>

	//inti SPI
	HAL_SPI_MspInit(&hspi1);
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <_ZN7AppMain7StartupEv+0xb8>)
 8000780:	f002 fe90 	bl	80034a4 <HAL_SPI_MspInit>

	//init and start Timer
	HAL_TIM_PWM_MspInit(&htim2);	//PWM timer
 8000784:	4825      	ldr	r0, [pc, #148]	; (800081c <_ZN7AppMain7StartupEv+0xbc>)
 8000786:	f003 f91b 	bl	80039c0 <HAL_TIM_PWM_MspInit>
	HAL_TIM_Base_MspInit(&htim16);	//task handler timer
 800078a:	4825      	ldr	r0, [pc, #148]	; (8000820 <_ZN7AppMain7StartupEv+0xc0>)
 800078c:	f003 f936 	bl	80039fc <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim6);	//ADC trigger timer
 8000790:	4824      	ldr	r0, [pc, #144]	; (8000824 <_ZN7AppMain7StartupEv+0xc4>)
 8000792:	f003 f933 	bl	80039fc <HAL_TIM_Base_MspInit>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//start PWM CH2
 8000796:	2104      	movs	r1, #4
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <_ZN7AppMain7StartupEv+0xbc>)
 800079a:	f008 ff97 	bl	80096cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//start PWM CH1
 800079e:	2100      	movs	r1, #0
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <_ZN7AppMain7StartupEv+0xbc>)
 80007a2:	f008 ff93 	bl	80096cc <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim16);				//start task handler in IT mode
 80007a6:	481e      	ldr	r0, [pc, #120]	; (8000820 <_ZN7AppMain7StartupEv+0xc0>)
 80007a8:	f008 fee4 	bl	8009574 <HAL_TIM_Base_Start_IT>

	//init and start ADC
	HAL_ADC_MspInit(&hadc1);
 80007ac:	481e      	ldr	r0, [pc, #120]	; (8000828 <_ZN7AppMain7StartupEv+0xc8>)
 80007ae:	f002 fc2d 	bl	800300c <HAL_ADC_MspInit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	33b8      	adds	r3, #184	; 0xb8
 80007b6:	2202      	movs	r2, #2
 80007b8:	4619      	mov	r1, r3
 80007ba:	481b      	ldr	r0, [pc, #108]	; (8000828 <_ZN7AppMain7StartupEv+0xc8>)
 80007bc:	f003 fdfc 	bl	80043b8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <_ZN7AppMain7StartupEv+0xc4>)
 80007c2:	f008 fed7 	bl	8009574 <HAL_TIM_Base_Start_IT>


	if (!rfm95.InitRFM())
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	330c      	adds	r3, #12
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 feca 	bl	8002564 <_ZN10RFM95_LoRa7InitRFMEv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f083 0301 	eor.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <_ZN7AppMain7StartupEv+0x92>
	{
		driveStatus.setError(DriveStatus::E_COM_ERROR);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3346      	adds	r3, #70	; 0x46
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f9b6 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		taskHandler.setDriveTaskEnable(false);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fb3a 	bl	8002e66 <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	330c      	adds	r3, #12
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fcf1 	bl	80021e0 <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3364      	adds	r3, #100	; 0x64
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f952 	bl	8001aac <_ZN7Encoder4initEv>

	Main();
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f859 	bl	80008c0 <_ZN7AppMain4MainEv>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000039c 	.word	0x2000039c
 800081c:	20000450 	.word	0x20000450
 8000820:	200004e8 	.word	0x200004e8
 8000824:	2000049c 	.word	0x2000049c
 8000828:	20000214 	.word	0x20000214

0800082c <_ZN7AppMain5ResetEv>:

>>>>>>> origin/main


void AppMain::Reset()
{
<<<<<<< HEAD
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

	taskHandler.setAdcUpdateTaskEnable(true);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2101      	movs	r1, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f002 fa57 	bl	8002d24 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>
	taskHandler.setComTaskEnable(true);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fa61 	bl	8002d42 <_ZN11TaskHandler16setComTaskEnableEb>
	taskHandler.setDriveTaskEnable(true);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2101      	movs	r1, #1
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fa6b 	bl	8002d60 <_ZN11TaskHandler18setDriveTaskEnableEb>
	taskHandler.setErrorTaskEnable(true);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fa75 	bl	8002d7e <_ZN11TaskHandler18setErrorTaskEnableEb>
	taskHandler.setIoUpdateTaskEnable(true);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fa7f 	bl	8002d9c <_ZN11TaskHandler21setIoUpdateTaskEnableEb>

	TIM2->CCR1 = 3600;
 800089e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

	driveCommand.setTeach(false);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3360      	adds	r3, #96	; 0x60
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 ffc1 	bl	8002836 <_ZN12DriveCommand8setTeachEb>
	driveCommand.setClose(false);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3360      	adds	r3, #96	; 0x60
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ff40 	bl	8002740 <_ZN12DriveCommand8setCloseEb>
	driveCommand.setOpen(false);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3360      	adds	r3, #96	; 0x60
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 ff55 	bl	8002776 <_ZN12DriveCommand7setOpenEb>
	driveCommand.setEnable(false);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3360      	adds	r3, #96	; 0x60
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 ff6a 	bl	80027ac <_ZN12DriveCommand9setEnableEb>
	driveCommand.setStop(false);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 ff9a 	bl	8002818 <_ZN12DriveCommand7setStopEb>
	driveCommand.setReset(false);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3360      	adds	r3, #96	; 0x60
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 ff79 	bl	80027e2 <_ZN12DriveCommand8setResetEb>

	driveStatus.setError(DriveStatus::E_NO_ERROR);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	334a      	adds	r3, #74	; 0x4a
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 f88a 	bl	8002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
	comLoseCounter = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fa21 	bl	8002d60 <_ZN11TaskHandler18setDriveTaskEnableEb>
=======
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	taskHandler.setComTaskEnable(true);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fb05 	bl	8002e48 <_ZN11TaskHandler16setComTaskEnableEb>
	taskHandler.setDriveTaskEnable(true);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fb0f 	bl	8002e66 <_ZN11TaskHandler18setDriveTaskEnableEb>
	taskHandler.setErrorTaskEnable(true);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2101      	movs	r1, #1
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fb19 	bl	8002e84 <_ZN11TaskHandler18setErrorTaskEnableEb>

	TIM2->CCR1 = 3600;
 8000852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000856:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800085a:	635a      	str	r2, [r3, #52]	; 0x34

	driveCommand.setTeach(false);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	335c      	adds	r3, #92	; 0x5c
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f889 	bl	800297a <_ZN12DriveCommand8setTeachEb>
	driveCommand.setClose(false);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	335c      	adds	r3, #92	; 0x5c
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f808 	bl	8002884 <_ZN12DriveCommand8setCloseEb>
	driveCommand.setOpen(false);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	335c      	adds	r3, #92	; 0x5c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f81d 	bl	80028ba <_ZN12DriveCommand7setOpenEb>
	driveCommand.setEnable(false);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	335c      	adds	r3, #92	; 0x5c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f832 	bl	80028f0 <_ZN12DriveCommand9setEnableEb>
	driveCommand.setStop(false);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	335c      	adds	r3, #92	; 0x5c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f862 	bl	800295c <_ZN12DriveCommand7setStopEb>
	driveCommand.setReset(false);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	335c      	adds	r3, #92	; 0x5c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 f841 	bl	8002926 <_ZN12DriveCommand8setResetEb>

	driveStatus.setError(DriveStatus::E_NO_ERROR);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3346      	adds	r3, #70	; 0x46
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f952 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
	comLoseCounter = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN7AppMain4MainEv>:


void AppMain::Main()
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 faca 	bl	8002e66 <_ZN11TaskHandler18setDriveTaskEnableEb>
>>>>>>> origin/main

	while (1)
	{
		//Reset task
		if (driveCommand.isReset())
<<<<<<< HEAD
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3360      	adds	r3, #96	; 0x60
 8000922:	4618      	mov	r0, r3
 8000924:	f001 ff51 	bl	80027ca <_ZN12DriveCommand7isResetEv>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <_ZN7AppMain4MainEv+0x28>
		{
			Reset();
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ff98 	bl	8000864 <_ZN7AppMain5ResetEv>
=======
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	335c      	adds	r3, #92	; 0x5c
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 f819 	bl	800290e <_ZN12DriveCommand7isResetEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <_ZN7AppMain4MainEv+0x28>
		{
			Reset();
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <_ZN7AppMain5ResetEv>
>>>>>>> origin/main
		}

		//RFM Communication task
		if (taskHandler.isComTask())
<<<<<<< HEAD
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f990 	bl	8002c5c <_ZN11TaskHandler9isComTaskEv>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d039      	beq.n	80009b6 <_ZN7AppMain4MainEv+0xaa>
		{
			if (!rfm95COM->Receive())
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3304      	adds	r3, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	4798      	blx	r3
 8000956:	4603      	mov	r3, r0
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00d      	beq.n	800097e <_ZN7AppMain4MainEv+0x72>
			{
				comLoseCounter++;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000968:	3301      	adds	r3, #1
 800096a:	b29a      	uxth	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
				drive.Stop();
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3390      	adds	r3, #144	; 0x90
 8000976:	4618      	mov	r0, r3
 8000978:	f000 ff69 	bl	800184e <_ZN5Drive4StopEv>
 800097c:	e003      	b.n	8000986 <_ZN7AppMain4MainEv+0x7a>
=======
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fa48 	bl	8002d80 <_ZN11TaskHandler9isComTaskEv>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d039      	beq.n	800096a <_ZN7AppMain4MainEv+0xaa>
		{
			if (!rfm95COM->Receive())
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3304      	adds	r3, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	4798      	blx	r3
 800090a:	4603      	mov	r3, r0
 800090c:	f083 0301 	eor.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00d      	beq.n	8000932 <_ZN7AppMain4MainEv+0x72>
			{
				comLoseCounter++;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800091c:	3301      	adds	r3, #1
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
				drive.Stop();
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	338c      	adds	r3, #140	; 0x8c
 800092a:	4618      	mov	r0, r3
 800092c:	f000 ff97 	bl	800185e <_ZN5Drive4StopEv>
 8000930:	e003      	b.n	800093a <_ZN7AppMain4MainEv+0x7a>
>>>>>>> origin/main
			}
			else
			{
				comLoseCounter = 0;
<<<<<<< HEAD
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			}

			if (comLoseCounter == (driveSettings.getSelfShutdownDelay() * 4))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800098c:	461c      	mov	r4, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3330      	adds	r3, #48	; 0x30
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fe24 	bl	80025e0 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000998:	4603      	mov	r3, r0
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	429c      	cmp	r4, r3
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <_ZN7AppMain4MainEv+0xaa>
			{
				//Self-shutdown when the delay time for self-shutdown has elapsed
				HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f005 fc0f 	bl	80061d4 <HAL_GPIO_WritePin>
=======
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
			}

			if (comLoseCounter == (driveSettings.getSelfShutdownDelay() * 4))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8000940:	461c      	mov	r4, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	332c      	adds	r3, #44	; 0x2c
 8000946:	4618      	mov	r0, r3
 8000948:	f001 feec 	bl	8002724 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 800094c:	4603      	mov	r3, r0
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	429c      	cmp	r4, r3
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <_ZN7AppMain4MainEv+0xaa>
			{
				//Self-shutdown when the delay time for self-shutdown has elapsed
				HAL_GPIO_WritePin(POWER_SWITCH_GPIO_Port, POWER_SWITCH_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f005 fa1f 	bl	8005da8 <HAL_GPIO_WritePin>
>>>>>>> origin/main
			}
		}

		//Drive Task
		if (taskHandler.isDriveTask())
<<<<<<< HEAD
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f968 	bl	8002c8e <_ZN11TaskHandler11isDriveTaskEv>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d009      	beq.n	80009d8 <_ZN7AppMain4MainEv+0xcc>
		{
			encoder.update();
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3368      	adds	r3, #104	; 0x68
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f893 	bl	8001af4 <_ZN7Encoder6updateEv>
			drive.updateDrive();
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3390      	adds	r3, #144	; 0x90
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fe32 	bl	800163c <_ZN5Drive11updateDriveEv>
=======
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fa20 	bl	8002db2 <_ZN11TaskHandler11isDriveTaskEv>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d009      	beq.n	800098c <_ZN7AppMain4MainEv+0xcc>
		{
			encoder.update();
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3364      	adds	r3, #100	; 0x64
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f8c1 	bl	8001b04 <_ZN7Encoder6updateEv>
			drive.updateDrive();
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	338c      	adds	r3, #140	; 0x8c
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fe60 	bl	800164c <_ZN5Drive11updateDriveEv>
>>>>>>> origin/main
		}

		//Error Task
		if (taskHandler.isErrorTask())
<<<<<<< HEAD
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f970 	bl	8002cc0 <_ZN11TaskHandler11isErrorTaskEv>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d04f      	beq.n	8000a86 <_ZN7AppMain4MainEv+0x17a>
		{
			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageWarning()){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	334a      	adds	r3, #74	; 0x4a
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f87f 	bl	8002aee <_ZNK11DriveStatus10getVoltageEv>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461c      	mov	r4, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3330      	adds	r3, #48	; 0x30
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fe5d 	bl	80026b8 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80009fe:	4603      	mov	r3, r0
 8000a00:	429c      	cmp	r4, r3
 8000a02:	bf34      	ite	cc
 8000a04:	2301      	movcc	r3, #1
 8000a06:	2300      	movcs	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <_ZN7AppMain4MainEv+0x10e>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_WARNING);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	334a      	adds	r3, #74	; 0x4a
 8000a12:	2108      	movs	r1, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fffb 	bl	8002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageError()){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	334a      	adds	r3, #74	; 0x4a
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 f865 	bl	8002aee <_ZNK11DriveStatus10getVoltageEv>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461c      	mov	r4, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3330      	adds	r3, #48	; 0x30
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fe28 	bl	8002682 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000a32:	4603      	mov	r3, r0
 8000a34:	429c      	cmp	r4, r3
 8000a36:	bf34      	ite	cc
 8000a38:	2301      	movcc	r3, #1
 8000a3a:	2300      	movcs	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d005      	beq.n	8000a4e <_ZN7AppMain4MainEv+0x142>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_ERROR);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	334a      	adds	r3, #74	; 0x4a
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 ffe1 	bl	8002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if (driveStatus.getError() != DriveStatus::E_NO_ERROR)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	334a      	adds	r3, #74	; 0x4a
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 ffd0 	bl	80029f8 <_ZN11DriveStatus8getErrorEv>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf14      	ite	ne
 8000a5e:	2301      	movne	r3, #1
 8000a60:	2300      	moveq	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00e      	beq.n	8000a86 <_ZN7AppMain4MainEv+0x17a>
			{
				drive.Stop();
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3390      	adds	r3, #144	; 0x90
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 feee 	bl	800184e <_ZN5Drive4StopEv>
				taskHandler.setDriveTaskEnable(false);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f972 	bl	8002d60 <_ZN11TaskHandler18setDriveTaskEnableEb>
				taskHandler.setLEDTaskEnable(false);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 f99a 	bl	8002dba <_ZN11TaskHandler16setLEDTaskEnableEb>
				//error.error2LED(); ToDo
=======
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f002 fa28 	bl	8002de4 <_ZN11TaskHandler11isErrorTaskEv>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 8089 	beq.w	8000aae <_ZN7AppMain4MainEv+0x1ee>
		{
			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageWarning()){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3346      	adds	r3, #70	; 0x46
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 f943 	bl	8002c2c <_ZNK11DriveStatus10getVoltageEv>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461c      	mov	r4, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	332c      	adds	r3, #44	; 0x2c
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 ff24 	bl	80027fc <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80009b4:	4603      	mov	r3, r0
 80009b6:	429c      	cmp	r4, r3
 80009b8:	bf34      	ite	cc
 80009ba:	2301      	movcc	r3, #1
 80009bc:	2300      	movcs	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <_ZN7AppMain4MainEv+0x110>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_WARNING);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3346      	adds	r3, #70	; 0x46
 80009c8:	2108      	movs	r1, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f8c2 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if(driveStatus.getVoltage() < driveSettings.getUnderVoltageError()){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3346      	adds	r3, #70	; 0x46
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 f929 	bl	8002c2c <_ZNK11DriveStatus10getVoltageEv>
 80009da:	4603      	mov	r3, r0
 80009dc:	461c      	mov	r4, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	332c      	adds	r3, #44	; 0x2c
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 feef 	bl	80027c6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 80009e8:	4603      	mov	r3, r0
 80009ea:	429c      	cmp	r4, r3
 80009ec:	bf34      	ite	cc
 80009ee:	2301      	movcc	r3, #1
 80009f0:	2300      	movcs	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d005      	beq.n	8000a04 <_ZN7AppMain4MainEv+0x144>
				driveStatus.setError(DriveStatus::E_UNDERVOLTAGE_ERROR);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3346      	adds	r3, #70	; 0x46
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f8a8 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if(driveStatus.getCurrent() > driveSettings.getOverCurrentWarning())
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3346      	adds	r3, #70	; 0x46
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f8df 	bl	8002bcc <_ZNK11DriveStatus10getCurrentEv>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461c      	mov	r4, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	332c      	adds	r3, #44	; 0x2c
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fe4e 	bl	80026b8 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	bf8c      	ite	hi
 8000a22:	2301      	movhi	r3, #1
 8000a24:	2300      	movls	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d005      	beq.n	8000a38 <_ZN7AppMain4MainEv+0x178>
			{
				driveStatus.setError(DriveStatus::E_OVERCURRENT_WARNING);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3346      	adds	r3, #70	; 0x46
 8000a30:	2110      	movs	r1, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 f88e 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if(driveStatus.getCurrent() > driveSettings.getOverCurrentError())
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3346      	adds	r3, #70	; 0x46
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f8c5 	bl	8002bcc <_ZNK11DriveStatus10getCurrentEv>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461c      	mov	r4, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	332c      	adds	r3, #44	; 0x2c
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fe4f 	bl	80026ee <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	429c      	cmp	r4, r3
 8000a54:	bf8c      	ite	hi
 8000a56:	2301      	movhi	r3, #1
 8000a58:	2300      	movls	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d005      	beq.n	8000a6c <_ZN7AppMain4MainEv+0x1ac>
			{
				driveStatus.setError(DriveStatus::E_OVERCURRENT_ERROR);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3346      	adds	r3, #70	; 0x46
 8000a64:	2120      	movs	r1, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 f874 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			}

			if (driveStatus.getError() != DriveStatus::E_NO_ERROR)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3346      	adds	r3, #70	; 0x46
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f863 	bl	8002b3c <_ZN11DriveStatus8getErrorEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d013      	beq.n	8000aae <_ZN7AppMain4MainEv+0x1ee>
			{
				drive.Stop();
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	338c      	adds	r3, #140	; 0x8c
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fee7 	bl	800185e <_ZN5Drive4StopEv>
				taskHandler.setDriveTaskEnable(false);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f9e6 	bl	8002e66 <_ZN11TaskHandler18setDriveTaskEnableEb>
				taskHandler.setLEDTaskEnable(false);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f9ff 	bl	8002ea2 <_ZN11TaskHandler16setLEDTaskEnableEb>
				error.error2LED();
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	33a8      	adds	r3, #168	; 0xa8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f885 	bl	8001bb8 <_ZN5Error9error2LEDEv>
>>>>>>> origin/main
			}
		}


<<<<<<< HEAD
		if (taskHandler.isLEDTask() && driveStatus.getError() == DriveStatus::E_NO_ERROR)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 f932 	bl	8002cf2 <_ZN11TaskHandler9isLEDTaskEv>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f43f af44 	beq.w	800091e <_ZN7AppMain4MainEv+0x12>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	334a      	adds	r3, #74	; 0x4a
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 ffac 	bl	80029f8 <_ZN11DriveStatus8getErrorEv>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
		if (driveCommand.isReset())
 8000aa4:	e73b      	b.n	800091e <_ZN7AppMain4MainEv+0x12>
	...

08000aa8 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>:
=======
		if (taskHandler.isLEDTask())
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f9b0 	bl	8002e16 <_ZN11TaskHandler9isLEDTaskEv>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f43f af0a 	beq.w	80008d2 <_ZN7AppMain4MainEv+0x12>
		{
			led.Toggle();
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	337c      	adds	r3, #124	; 0x7c
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f939 	bl	8001d3a <_ZN3LED6ToggleEv>
			ledExt.Toggle();
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3384      	adds	r3, #132	; 0x84
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 f934 	bl	8001d3a <_ZN3LED6ToggleEv>
		if (driveCommand.isReset())
 8000ad2:	e6fe      	b.n	80008d2 <_ZN7AppMain4MainEv+0x12>

08000ad4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>:
>>>>>>> origin/main




void AppMain::ADCRead(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
    currentSum = currentSum - currentArray[staticCounter] + adc1Buffer[1];
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	f892 20dc 	ldrb.w	r2, [r2, #220]	; 0xdc
 8000abe:	4611      	mov	r1, r2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	3160      	adds	r1, #96	; 0x60
 8000ac4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	f8b2 20be 	ldrh.w	r2, [r2, #190]	; 0xbe
 8000ad0:	b212      	sxth	r2, r2
 8000ad2:	441a      	add	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    currentArray[staticCounter] = adc1Buffer[1];
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8000ae0:	b219      	sxth	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8000ae8:	461a      	mov	r2, r3
 8000aea:	b289      	uxth	r1, r1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3260      	adds	r2, #96	; 0x60
 8000af0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    voltageSum = voltageSum - voltageArray[staticCounter] + adc1Buffer[0];
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	3364      	adds	r3, #100	; 0x64
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	440b      	add	r3, r1
 8000b08:	885b      	ldrh	r3, [r3, #2]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	f8b2 20bc 	ldrh.w	r2, [r2, #188]	; 0xbc
 8000b12:	b212      	sxth	r2, r2
 8000b14:	441a      	add	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    voltageArray[staticCounter] = adc1Buffer[0];
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8000b2a:	b291      	uxth	r1, r2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	3364      	adds	r3, #100	; 0x64
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	460a      	mov	r2, r1
 8000b36:	805a      	strh	r2, [r3, #2]


    if (staticCounter == MEAN_VALUE_SIZE-1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d104      	bne.n	8000b4c <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xa4>
    {
        staticCounter = 0;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8000b4a:	e007      	b.n	8000b5c <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb4>
=======
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
    currentSum = currentSum - currentArray[staticCounter] + adc1Buffer[0];
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	335c      	adds	r3, #92	; 0x5c
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	440b      	add	r3, r1
 8000af2:	889b      	ldrh	r3, [r3, #4]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8000afc:	b212      	sxth	r2, r2
 8000afe:	441a      	add	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    currentArray[staticCounter] = adc1Buffer[0];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b14:	b291      	uxth	r1, r2
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	335c      	adds	r3, #92	; 0x5c
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	460a      	mov	r2, r1
 8000b20:	809a      	strh	r2, [r3, #4]

    voltageSum = voltageSum - voltageArray[staticCounter] + adc1Buffer[1];
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	3360      	adds	r3, #96	; 0x60
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	440b      	add	r3, r1
 8000b36:	88db      	ldrh	r3, [r3, #6]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	f8b2 20ba 	ldrh.w	r2, [r2, #186]	; 0xba
 8000b40:	b212      	sxth	r2, r2
 8000b42:	441a      	add	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    voltageArray[staticCounter] = adc1Buffer[1];
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b58:	b291      	uxth	r1, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	3360      	adds	r3, #96	; 0x60
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	460a      	mov	r2, r1
 8000b64:	80da      	strh	r2, [r3, #6]


    if (staticCounter == MEAN_VALUE_SIZE-1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d104      	bne.n	8000b7a <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xa6>
    {
        staticCounter = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8000b78:	e007      	b.n	8000b8a <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0xb6>
>>>>>>> origin/main
    }
    else
    {
        staticCounter++;
<<<<<<< HEAD
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
=======
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
>>>>>>> origin/main
    }


	driveStatus.setCurrent(currentSum/MEAN_VALUE_SIZE);
<<<<<<< HEAD
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b68:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000b6a:	fba1 1303 	umull	r1, r3, r1, r3
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f001 ffab 	bl	8002ad0 <_ZN11DriveStatus10setCurrentEt>
	driveStatus.setVoltage(voltageSum/MEAN_VALUE_SIZE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b86:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000b88:	fba1 1303 	umull	r1, r3, r1, r3
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f001 ffb9 	bl	8002b0a <_ZN11DriveStatus10setVoltageEt>

	//restart ADC DMA Conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	33bc      	adds	r3, #188	; 0xbc
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x10c>)
 8000ba2:	f003 fbc9 	bl	8004338 <HAL_ADC_Start_DMA>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	cccccccd 	.word	0xcccccccd
 8000bb4:	20000214 	.word	0x20000214

08000bb8 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
=======
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000b96:	4911      	ldr	r1, [pc, #68]	; (8000bdc <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000b98:	fba1 1303 	umull	r1, r3, r1, r3
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	f002 f833 	bl	8002c0e <_ZN11DriveStatus10setCurrentEt>
	driveStatus.setVoltage(voltageSum/MEAN_VALUE_SIZE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bb4:	4909      	ldr	r1, [pc, #36]	; (8000bdc <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x108>)
 8000bb6:	fba1 1303 	umull	r1, r3, r1, r3
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f002 f841 	bl	8002c48 <_ZN11DriveStatus10setVoltageEt>

	//restart ADC DMA Conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1Buffer, BUFFER_SIZE_ADC1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	33b8      	adds	r3, #184	; 0xb8
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef+0x10c>)
 8000bd0:	f003 fbf2 	bl	80043b8 <HAL_ADC_Start_DMA>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	cccccccd 	.word	0xcccccccd
 8000be0:	20000214 	.word	0x20000214

08000be4 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
>>>>>>> origin/main

#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
<<<<<<< HEAD
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	609a      	str	r2, [r3, #8]
}
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_ZN7BaseCOM11GetSettingsEh>:
=======
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	609a      	str	r2, [r3, #8]
}
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_ZN7BaseCOM11GetSettingsEh>:
>>>>>>> origin/main


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
<<<<<<< HEAD
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	221f      	movs	r2, #31
 8000bf8:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fc76 	bl	80024f0 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2212      	movs	r2, #18
 8000c10:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	78fa      	ldrb	r2, [r7, #3]
 8000c16:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	3b10      	subs	r3, #16
 8000c1c:	2b10      	cmp	r3, #16
 8000c1e:	f200 80d3 	bhi.w	8000dc8 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000c6d 	.word	0x08000c6d
 8000c2c:	08000c8b 	.word	0x08000c8b
 8000c30:	08000ca9 	.word	0x08000ca9
 8000c34:	08000cc7 	.word	0x08000cc7
 8000c38:	08000ce5 	.word	0x08000ce5
 8000c3c:	08000d03 	.word	0x08000d03
 8000c40:	08000d1f 	.word	0x08000d1f
 8000c44:	08000d3d 	.word	0x08000d3d
 8000c48:	08000d5b 	.word	0x08000d5b
 8000c4c:	08000d79 	.word	0x08000d79
 8000c50:	08000d97 	.word	0x08000d97
 8000c54:	08000dc9 	.word	0x08000dc9
 8000c58:	08000dc9 	.word	0x08000dc9
 8000c5c:	08000dc9 	.word	0x08000dc9
 8000c60:	08000dc9 	.word	0x08000dc9
 8000c64:	08000dc9 	.word	0x08000dc9
 8000c68:	08000db5 	.word	0x08000db5
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fce8 	bl	800264c <_ZNK13DriveSettings14getTeachTroqueEv>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4620      	mov	r0, r4
 8000c84:	f002 f8a8 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000c88:	e0a2      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fcbe 	bl	8002616 <_ZNK13DriveSettings13getTeachSpeedEv>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f002 f899 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ca6:	e093      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fc01 	bl	80024ba <_ZNK13DriveSettings17getClampingTorqueEv>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2204      	movs	r2, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f002 f88a 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cc4:	e084      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fbd7 	bl	8002484 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f002 f87b 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ce2:	e075      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fc76 	bl	80025e0 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f002 f86c 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d00:	e066      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fbfb 	bl	8002508 <_ZNK13DriveSettings12getInPosDiffEv>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2204      	movs	r2, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f002 f85d 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fc08 	bl	800253e <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4620      	mov	r0, r4
 8000d36:	f002 f84f 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d3a:	e049      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fcb6 	bl	80026b8 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4620      	mov	r0, r4
 8000d54:	f002 f840 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d58:	e03a      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fc8c 	bl	8002682 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4620      	mov	r0, r4
 8000d72:	f002 f831 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d76:	e02b      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fbf6 	bl	8002574 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f002 f822 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d94:	e01c      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fc02 	bl	80025aa <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2204      	movs	r2, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4620      	mov	r0, r4
 8000dae:	f002 f813 	bl	8002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000db2:	e00d      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fb99 	bl	80024f0 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	741a      	strb	r2, [r3, #16]
			break;
 8000dc6:	e003      	b.n	8000dd0 <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	221d      	movs	r2, #29
 8000dcc:	735a      	strb	r2, [r3, #13]
			break;
 8000dce:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	330c      	adds	r3, #12
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 faa3 	bl	8001324 <_ZN7BaseCOM4CRC8EPhh>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	330c      	adds	r3, #12
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop

08000df4 <_ZN7BaseCOM9GetStatusEh>:
=======
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	221f      	movs	r2, #31
 8000c24:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fd02 	bl	8002634 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2212      	movs	r2, #18
 8000c3c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	78fa      	ldrb	r2, [r7, #3]
 8000c42:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	3b10      	subs	r3, #16
 8000c48:	2b10      	cmp	r3, #16
 8000c4a:	f200 80d3 	bhi.w	8000df4 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 8000c4e:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000c99 	.word	0x08000c99
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cd5 	.word	0x08000cd5
 8000c60:	08000cf3 	.word	0x08000cf3
 8000c64:	08000d11 	.word	0x08000d11
 8000c68:	08000d2f 	.word	0x08000d2f
 8000c6c:	08000d4b 	.word	0x08000d4b
 8000c70:	08000d69 	.word	0x08000d69
 8000c74:	08000d87 	.word	0x08000d87
 8000c78:	08000da5 	.word	0x08000da5
 8000c7c:	08000dc3 	.word	0x08000dc3
 8000c80:	08000df5 	.word	0x08000df5
 8000c84:	08000df5 	.word	0x08000df5
 8000c88:	08000df5 	.word	0x08000df5
 8000c8c:	08000df5 	.word	0x08000df5
 8000c90:	08000df5 	.word	0x08000df5
 8000c94:	08000de1 	.word	0x08000de1
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fd74 	bl	8002790 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2204      	movs	r2, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f002 f906 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cb4:	e0a2      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fd4a 	bl	800275a <_ZNK13DriveSettings13getTeachSpeedEv>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2204      	movs	r2, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f002 f8f7 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cd2:	e093      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fc8d 	bl	80025fe <_ZNK13DriveSettings17getClampingTorqueEv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4620      	mov	r0, r4
 8000cec:	f002 f8e8 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000cf0:	e084      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fc63 	bl	80025c8 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2204      	movs	r2, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f002 f8d9 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d0e:	e075      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fd02 	bl	8002724 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2204      	movs	r2, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4620      	mov	r0, r4
 8000d28:	f002 f8ca 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d2c:	e066      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fc87 	bl	800264c <_ZNK13DriveSettings12getInPosDiffEv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4620      	mov	r0, r4
 8000d46:	f002 f8bb 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fc94 	bl	8002682 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4620      	mov	r0, r4
 8000d62:	f002 f8ad 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d66:	e049      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fd42 	bl	80027fc <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f002 f89e 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000d84:	e03a      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fd18 	bl	80027c6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f002 f88f 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000da2:	e02b      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fc82 	bl	80026b8 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2204      	movs	r2, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f002 f880 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000dc0:	e01c      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fc8e 	bl	80026ee <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f002 f871 	bl	8002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000dde:	e00d      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fc25 	bl	8002634 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	741a      	strb	r2, [r3, #16]
			break;
 8000df2:	e003      	b.n	8000dfc <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	221d      	movs	r2, #29
 8000df8:	735a      	strb	r2, [r3, #13]
			break;
 8000dfa:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	330c      	adds	r3, #12
 8000e00:	2206      	movs	r2, #6
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 faa3 	bl	8001350 <_ZN7BaseCOM4CRC8EPhh>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	330c      	adds	r3, #12
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	bf00      	nop

08000e20 <_ZN7BaseCOM9GetStatusEh>:
>>>>>>> origin/main


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
<<<<<<< HEAD
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	221f      	movs	r2, #31
 8000e04:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fb70 	bl	80024f0 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2213      	movs	r2, #19
 8000e1c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d864      	bhi.n	8000ef6 <_ZN7BaseCOM9GetStatusEh+0x102>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000e6d 	.word	0x08000e6d
 8000e3c:	08000e81 	.word	0x08000e81
 8000e40:	08000e95 	.word	0x08000e95
 8000e44:	08000ea9 	.word	0x08000ea9
 8000e48:	08000ef7 	.word	0x08000ef7
 8000e4c:	08000ebd 	.word	0x08000ebd
 8000e50:	08000ed1 	.word	0x08000ed1
 8000e54:	08000ee5 	.word	0x08000ee5
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fcf9 	bl	8002854 <_ZN11DriveStatus7isCloseEv>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	741a      	strb	r2, [r3, #16]
			break;
 8000e6a:	e048      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fd12 	bl	800289a <_ZN11DriveStatus6isOpenEv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	741a      	strb	r2, [r3, #16]
			break;
 8000e7e:	e03e      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fd94 	bl	80029b2 <_ZN11DriveStatus7isTeachEv>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	741a      	strb	r2, [r3, #16]
			break;
 8000e92:	e034      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fd44 	bl	8002926 <_ZN11DriveStatus7isResetEv>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	741a      	strb	r2, [r3, #16]
			break;
 8000ea6:	e02a      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fd17 	bl	80028e0 <_ZN11DriveStatus8isEnableEv>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	741a      	strb	r2, [r3, #16]
			break;
 8000eba:	e020      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fd53 	bl	800296c <_ZN11DriveStatus6isStopEv>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	741a      	strb	r2, [r3, #16]
			break;
 8000ece:	e016      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fd8f 	bl	80029f8 <_ZN11DriveStatus8getErrorEv>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	741a      	strb	r2, [r3, #16]
			break;
 8000ee2:	e00c      	b.n	8000efe <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fda8 	bl	8002a3e <_ZNK11DriveStatus9getStatusEv>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	221d      	movs	r2, #29
 8000efa:	731a      	strb	r2, [r3, #12]
			break;
 8000efc:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	330c      	adds	r3, #12
 8000f02:	2206      	movs	r2, #6
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa0c 	bl	8001324 <_ZN7BaseCOM4CRC8EPhh>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	330c      	adds	r3, #12
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZN7BaseCOM11SetSettingsEPh>:
=======
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	221f      	movs	r2, #31
 8000e30:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fbfc 	bl	8002634 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2213      	movs	r2, #19
 8000e48:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d864      	bhi.n	8000f22 <_ZN7BaseCOM9GetStatusEh+0x102>
 8000e58:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5e:	bf00      	nop
 8000e60:	08000e85 	.word	0x08000e85
 8000e64:	08000e99 	.word	0x08000e99
 8000e68:	08000ead 	.word	0x08000ead
 8000e6c:	08000ec1 	.word	0x08000ec1
 8000e70:	08000ed5 	.word	0x08000ed5
 8000e74:	08000f23 	.word	0x08000f23
 8000e78:	08000ee9 	.word	0x08000ee9
 8000e7c:	08000efd 	.word	0x08000efd
 8000e80:	08000f11 	.word	0x08000f11
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fd85 	bl	8002998 <_ZN11DriveStatus7isCloseEv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	741a      	strb	r2, [r3, #16]
			break;
 8000e96:	e048      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fd9e 	bl	80029de <_ZN11DriveStatus6isOpenEv>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	741a      	strb	r2, [r3, #16]
			break;
 8000eaa:	e03e      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fe20 	bl	8002af6 <_ZN11DriveStatus7isTeachEv>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	741a      	strb	r2, [r3, #16]
			break;
 8000ebe:	e034      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 fdd0 	bl	8002a6a <_ZN11DriveStatus7isResetEv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	741a      	strb	r2, [r3, #16]
			break;
 8000ed2:	e02a      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fda3 	bl	8002a24 <_ZN11DriveStatus8isEnableEv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	741a      	strb	r2, [r3, #16]
			break;
 8000ee6:	e020      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fddf 	bl	8002ab0 <_ZN11DriveStatus6isStopEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	741a      	strb	r2, [r3, #16]
			break;
 8000efa:	e016      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fe1b 	bl	8002b3c <_ZN11DriveStatus8getErrorEv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	741a      	strb	r2, [r3, #16]
			break;
 8000f0e:	e00c      	b.n	8000f2a <_ZN7BaseCOM9GetStatusEh+0x10a>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fe31 	bl	8002b7c <_ZNK11DriveStatus9getStatusEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	221d      	movs	r2, #29
 8000f26:	731a      	strb	r2, [r3, #12]
			break;
 8000f28:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	330c      	adds	r3, #12
 8000f2e:	2206      	movs	r2, #6
 8000f30:	4619      	mov	r1, r3
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fa0c 	bl	8001350 <_ZN7BaseCOM4CRC8EPhh>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	330c      	adds	r3, #12
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN7BaseCOM11SetSettingsEPh>:
>>>>>>> origin/main
}



void BaseCOM::SetSettings(uint8_t *data)
{
<<<<<<< HEAD
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
=======
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
<<<<<<< HEAD
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3303      	adds	r3, #3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3b10      	subs	r3, #16
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	f200 80f6 	bhi.w	8001128 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f71 	.word	0x08000f71
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000fc1 	.word	0x08000fc1
 8000f50:	08000fe9 	.word	0x08000fe9
 8000f54:	080010b1 	.word	0x080010b1
 8000f58:	08001011 	.word	0x08001011
 8000f5c:	08001039 	.word	0x08001039
 8000f60:	080010d9 	.word	0x080010d9
 8000f64:	08001101 	.word	0x08001101
 8000f68:	08001061 	.word	0x08001061
 8000f6c:	08001089 	.word	0x08001089
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3305      	adds	r3, #5
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	01db      	lsls	r3, r3, #7
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fb67 	bl	8002664 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f96:	e0c8      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	01db      	lsls	r3, r3, #7
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	89fa      	ldrh	r2, [r7, #14]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fb38 	bl	800262e <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000fbe:	e0b4      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3305      	adds	r3, #5
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	01db      	lsls	r3, r3, #7
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	89fa      	ldrh	r2, [r7, #14]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fa76 	bl	80024d2 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fe6:	e0a0      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3305      	adds	r3, #5
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	89fa      	ldrh	r2, [r7, #14]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fa47 	bl	800249c <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 800100e:	e08c      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3305      	adds	r3, #5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	b21a      	sxth	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3304      	adds	r3, #4
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	89fa      	ldrh	r2, [r7, #14]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa75 	bl	8002520 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001036:	e078      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	3305      	adds	r3, #5
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	01db      	lsls	r3, r3, #7
 8001040:	b21a      	sxth	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3304      	adds	r3, #4
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	89fa      	ldrh	r2, [r7, #14]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fa7c 	bl	8002556 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800105e:	e064      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3305      	adds	r3, #5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	01db      	lsls	r3, r3, #7
 8001068:	b21a      	sxth	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3304      	adds	r3, #4
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fa83 	bl	800258c <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8001086:	e050      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3305      	adds	r3, #5
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	b21a      	sxth	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	89fa      	ldrh	r2, [r7, #14]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fa8a 	bl	80025c2 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 80010ae:	e03c      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3305      	adds	r3, #5
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	01db      	lsls	r3, r3, #7
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3304      	adds	r3, #4
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	89fa      	ldrh	r2, [r7, #14]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fa91 	bl	80025f8 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010d6:	e028      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3305      	adds	r3, #5
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	01db      	lsls	r3, r3, #7
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	89fa      	ldrh	r2, [r7, #14]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fae9 	bl	80026d0 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010fe:	e014      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3305      	adds	r3, #5
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	01db      	lsls	r3, r3, #7
 8001108:	b21a      	sxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	89fa      	ldrh	r2, [r7, #14]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f001 faba 	bl	800269a <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8001126:	e000      	b.n	800112a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8001128:	bf00      	nop
	}
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop

08001134 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
=======
 8000f56:	2300      	movs	r3, #0
 8000f58:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3b10      	subs	r3, #16
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	f200 80f6 	bhi.w	8001154 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f9d 	.word	0x08000f9d
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fed 	.word	0x08000fed
 8000f7c:	08001015 	.word	0x08001015
 8000f80:	080010dd 	.word	0x080010dd
 8000f84:	0800103d 	.word	0x0800103d
 8000f88:	08001065 	.word	0x08001065
 8000f8c:	08001105 	.word	0x08001105
 8000f90:	0800112d 	.word	0x0800112d
 8000f94:	0800108d 	.word	0x0800108d
 8000f98:	080010b5 	.word	0x080010b5
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	01db      	lsls	r3, r3, #7
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	89fa      	ldrh	r2, [r7, #14]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fbf3 	bl	80027a8 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000fc2:	e0c8      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	3305      	adds	r3, #5
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	01db      	lsls	r3, r3, #7
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	89fa      	ldrh	r2, [r7, #14]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fbc4 	bl	8002772 <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000fea:	e0b4      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3305      	adds	r3, #5
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	01db      	lsls	r3, r3, #7
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	89fa      	ldrh	r2, [r7, #14]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fb02 	bl	8002616 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8001012:	e0a0      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3305      	adds	r3, #5
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	01db      	lsls	r3, r3, #7
 800101c:	b21a      	sxth	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	3304      	adds	r3, #4
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	89fa      	ldrh	r2, [r7, #14]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fad3 	bl	80025e0 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 800103a:	e08c      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3305      	adds	r3, #5
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	01db      	lsls	r3, r3, #7
 8001044:	b21a      	sxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21b      	sxth	r3, r3
 8001052:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fb01 	bl	8002664 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001062:	e078      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3305      	adds	r3, #5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	01db      	lsls	r3, r3, #7
 800106c:	b21a      	sxth	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3304      	adds	r3, #4
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	89fa      	ldrh	r2, [r7, #14]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fb08 	bl	800269a <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800108a:	e064      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3305      	adds	r3, #5
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	b21a      	sxth	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3304      	adds	r3, #4
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fb0f 	bl	80026d0 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 80010b2:	e050      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3305      	adds	r3, #5
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	01db      	lsls	r3, r3, #7
 80010bc:	b21a      	sxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3304      	adds	r3, #4
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	89fa      	ldrh	r2, [r7, #14]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fb16 	bl	8002706 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 80010da:	e03c      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3305      	adds	r3, #5
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	89fa      	ldrh	r2, [r7, #14]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fb1d 	bl	800273c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 8001102:	e028      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3305      	adds	r3, #5
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	01db      	lsls	r3, r3, #7
 800110c:	b21a      	sxth	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	89fa      	ldrh	r2, [r7, #14]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fb75 	bl	8002814 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 800112a:	e014      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3305      	adds	r3, #5
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	b21a      	sxth	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3304      	adds	r3, #4
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	89fa      	ldrh	r2, [r7, #14]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fb46 	bl	80027de <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8001152:	e000      	b.n	8001156 <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8001154:	bf00      	nop
	}
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop

08001160 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
<<<<<<< HEAD
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3303      	adds	r3, #3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	2b06      	cmp	r3, #6
 8001148:	d86a      	bhi.n	8001220 <_ZN7BaseCOM9SetStatusEPh+0xec>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	0800116d 	.word	0x0800116d
 8001154:	0800118b 	.word	0x0800118b
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011c7 	.word	0x080011c7
 8001160:	080011e5 	.word	0x080011e5
 8001164:	08001221 	.word	0x08001221
 8001168:	08001203 	.word	0x08001203
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3304      	adds	r3, #4
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f001 fb72 	bl	800286c <_ZN11DriveStatus8setCloseEb>
			break;
 8001188:	e04b      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3304      	adds	r3, #4
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f001 fb86 	bl	80028b2 <_ZN11DriveStatus7setOpenEb>
			break;
 80011a6:	e03c      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3304      	adds	r3, #4
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f001 fc03 	bl	80029ca <_ZN11DriveStatus8setTeachEb>
			break;
 80011c4:	e02d      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f001 fbae 	bl	800293e <_ZN11DriveStatus8setResetEb>
			break;
 80011e2:	e01e      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f001 fb7c 	bl	80028f8 <_ZN11DriveStatus9setEnableEb>
			break;
 8001200:	e00f      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	4610      	mov	r0, r2
 800121a:	f001 fbb3 	bl	8002984 <_ZN11DriveStatus7setStopEb>
			break;
 800121e:	e000      	b.n	8001222 <_ZN7BaseCOM9SetStatusEPh+0xee>
		default:
			break;
 8001220:	bf00      	nop
	}
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
=======
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3303      	adds	r3, #3
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	2b06      	cmp	r3, #6
 8001174:	d86a      	bhi.n	800124c <_ZN7BaseCOM9SetStatusEPh+0xec>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	08001199 	.word	0x08001199
 8001180:	080011b7 	.word	0x080011b7
 8001184:	080011d5 	.word	0x080011d5
 8001188:	080011f3 	.word	0x080011f3
 800118c:	08001211 	.word	0x08001211
 8001190:	0800124d 	.word	0x0800124d
 8001194:	0800122f 	.word	0x0800122f
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3304      	adds	r3, #4
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4619      	mov	r1, r3
 80011ae:	4610      	mov	r0, r2
 80011b0:	f001 fbfe 	bl	80029b0 <_ZN11DriveStatus8setCloseEb>
			break;
 80011b4:	e04b      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3304      	adds	r3, #4
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f001 fc12 	bl	80029f6 <_ZN11DriveStatus7setOpenEb>
			break;
 80011d2:	e03c      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	4610      	mov	r0, r2
 80011ec:	f001 fc8f 	bl	8002b0e <_ZN11DriveStatus8setTeachEb>
			break;
 80011f0:	e02d      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f001 fc3a 	bl	8002a82 <_ZN11DriveStatus8setResetEb>
			break;
 800120e:	e01e      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f001 fc08 	bl	8002a3c <_ZN11DriveStatus9setEnableEb>
			break;
 800122c:	e00f      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3304      	adds	r3, #4
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f001 fc3f 	bl	8002ac8 <_ZN11DriveStatus7setStopEb>
			break;
 800124a:	e000      	b.n	800124e <_ZN7BaseCOM9SetStatusEPh+0xee>
		default:
			break;
 800124c:	bf00      	nop
	}
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
<<<<<<< HEAD
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3303      	adds	r3, #3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	2b06      	cmp	r3, #6
 8001240:	d86a      	bhi.n	8001318 <_ZN7BaseCOM10SetCommandEPh+0xec>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001265 	.word	0x08001265
 800124c:	08001283 	.word	0x08001283
 8001250:	080012a1 	.word	0x080012a1
 8001254:	080012bf 	.word	0x080012bf
 8001258:	080012dd 	.word	0x080012dd
 800125c:	08001319 	.word	0x08001319
 8001260:	080012fb 	.word	0x080012fb
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f001 fa60 	bl	8002740 <_ZN12DriveCommand8setCloseEb>
			break;
 8001280:	e04b      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f001 fa6c 	bl	8002776 <_ZN12DriveCommand7setOpenEb>
			break;
 800129e:	e03c      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3304      	adds	r3, #4
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f001 fabd 	bl	8002836 <_ZN12DriveCommand8setTeachEb>
			break;
 80012bc:	e02d      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3304      	adds	r3, #4
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	4610      	mov	r0, r2
 80012d6:	f001 fa84 	bl	80027e2 <_ZN12DriveCommand8setResetEb>
			break;
 80012da:	e01e      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	3304      	adds	r3, #4
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	bf0c      	ite	eq
 80012ea:	2301      	moveq	r3, #1
 80012ec:	2300      	movne	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f001 fa5a 	bl	80027ac <_ZN12DriveCommand9setEnableEb>
			break;
 80012f8:	e00f      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3304      	adds	r3, #4
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f001 fa81 	bl	8002818 <_ZN12DriveCommand7setStopEb>
			break;
 8001316:	e000      	b.n	800131a <_ZN7BaseCOM10SetCommandEPh+0xee>
		default:
			break;
 8001318:	bf00      	nop
	}
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop

08001324 <_ZN7BaseCOM4CRC8EPhh>:
=======
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3303      	adds	r3, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	2b06      	cmp	r3, #6
 800126c:	d86a      	bhi.n	8001344 <_ZN7BaseCOM10SetCommandEPh+0xec>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001291 	.word	0x08001291
 8001278:	080012af 	.word	0x080012af
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012eb 	.word	0x080012eb
 8001284:	08001309 	.word	0x08001309
 8001288:	08001345 	.word	0x08001345
 800128c:	08001327 	.word	0x08001327
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3304      	adds	r3, #4
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f001 faec 	bl	8002884 <_ZN12DriveCommand8setCloseEb>
			break;
 80012ac:	e04b      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3304      	adds	r3, #4
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4610      	mov	r0, r2
 80012c6:	f001 faf8 	bl	80028ba <_ZN12DriveCommand7setOpenEb>
			break;
 80012ca:	e03c      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	3304      	adds	r3, #4
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f001 fb49 	bl	800297a <_ZN12DriveCommand8setTeachEb>
			break;
 80012e8:	e02d      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f001 fb10 	bl	8002926 <_ZN12DriveCommand8setResetEb>
			break;
 8001306:	e01e      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f001 fae6 	bl	80028f0 <_ZN12DriveCommand9setEnableEb>
			break;
 8001324:	e00f      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	4610      	mov	r0, r2
 800133e:	f001 fb0d 	bl	800295c <_ZN12DriveCommand7setStopEb>
			break;
 8001342:	e000      	b.n	8001346 <_ZN7BaseCOM10SetCommandEPh+0xee>
		default:
			break;
 8001344:	bf00      	nop
	}
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop

08001350 <_ZN7BaseCOM4CRC8EPhh>:
>>>>>>> origin/main




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
<<<<<<< HEAD
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 8001332:	23ff      	movs	r3, #255	; 0xff
 8001334:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	429a      	cmp	r2, r3
 8001340:	d222      	bcs.n	8001388 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4413      	add	r3, r2
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	4053      	eors	r3, r2
 800134e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d812      	bhi.n	8001380 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 800135a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da07      	bge.n	8001372 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b25b      	sxtb	r3, r3
 8001368:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800136c:	b25b      	sxtb	r3, r3
 800136e:	77fb      	strb	r3, [r7, #31]
 8001370:	e002      	b.n	8001378 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e7e9      	b.n	8001354 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3301      	adds	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	e7d8      	b.n	800133a <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001388:	7ffb      	ldrb	r3, [r7, #31]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
=======
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 800135e:	23ff      	movs	r3, #255	; 0xff
 8001360:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	429a      	cmp	r2, r3
 800136c:	d222      	bcs.n	80013b4 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4413      	add	r3, r2
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	4053      	eors	r3, r2
 800137a:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d812      	bhi.n	80013ac <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800138a:	2b00      	cmp	r3, #0
 800138c:	da07      	bge.n	800139e <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b25b      	sxtb	r3, r3
 8001394:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001398:	b25b      	sxtb	r3, r3
 800139a:	77fb      	strb	r3, [r7, #31]
 800139c:	e002      	b.n	80013a4 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e7e9      	b.n	8001380 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e7d8      	b.n	8001366 <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN8RFM95Com9TransmittEPhh>:
>>>>>>> origin/main

08001396 <_ZN8RFM95Com9TransmittEPhh>:
#include "RFM95Com.h"
#include "../AppMain/Defines.h"
#include "usbd_cdc_if.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
<<<<<<< HEAD
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e015      	b.n	80013da <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd16 	bl	8001de6 <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, length);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6998      	ldr	r0, [r3, #24]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3304      	adds	r3, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	4798      	blx	r3
	rfm95->endPacket();
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd28 	bl	8001e28 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	71fb      	strb	r3, [r7, #7]
=======
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e015      	b.n	8001406 <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fda2 	bl	8001f2a <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, 7);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6998      	ldr	r0, [r3, #24]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2207      	movs	r2, #7
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	4798      	blx	r3
	rfm95->endPacket();
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fdb4 	bl	8001f6c <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	4613      	mov	r3, r2
 800141c:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main

	uint8_t* txDataTemp;

	uint8_t rxData[7];

	uint8_t packetSize = rfm95->parsePacket();
<<<<<<< HEAD
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd37 	bl	8001e6c <_ZN10RFM95_LoRa11parsePacketEi>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 8001404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80e9 	beq.w	80015e0 <_ZN8RFM95Com7ReceiveEPhh+0x1fc>
	{
		uint8_t counter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3308      	adds	r3, #8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4610      	mov	r0, r2
 8001424:	4798      	blx	r3
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01c      	beq.n	8001470 <_ZN8RFM95Com7ReceiveEPhh+0x8c>
		{
			rxData[counter] = rfm95->read();
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	330c      	adds	r3, #12
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4610      	mov	r0, r2
 8001446:	4798      	blx	r3
 8001448:	4602      	mov	r2, r0
 800144a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	3328      	adds	r3, #40	; 0x28
 8001452:	443b      	add	r3, r7
 8001454:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800145c:	2b07      	cmp	r3, #7
 800145e:	d901      	bls.n	8001464 <_ZN8RFM95Com7ReceiveEPhh+0x80>
			{
				return false;
 8001460:	2300      	movs	r3, #0
 8001462:	e0be      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1fe>
			}
			counter++;
 8001464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001468:	3301      	adds	r3, #1
 800146a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 800146e:	e7d1      	b.n	8001414 <_ZN8RFM95Com7ReceiveEPhh+0x30>
=======
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fdc3 	bl	8001fb0 <_ZN10RFM95_LoRa11parsePacketEi>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 8001430:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80dd 	beq.w	80015f4 <_ZN8RFM95Com7ReceiveEPhh+0x1e4>
	{
		uint8_t counter = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3308      	adds	r3, #8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4610      	mov	r0, r2
 8001450:	4798      	blx	r3
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01c      	beq.n	800149c <_ZN8RFM95Com7ReceiveEPhh+0x8c>
		{
			rxData[counter] = rfm95->read();
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	330c      	adds	r3, #12
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4610      	mov	r0, r2
 8001472:	4798      	blx	r3
 8001474:	4602      	mov	r2, r0
 8001476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	3328      	adds	r3, #40	; 0x28
 800147e:	443b      	add	r3, r7
 8001480:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001488:	2b07      	cmp	r3, #7
 800148a:	d901      	bls.n	8001490 <_ZN8RFM95Com7ReceiveEPhh+0x80>
			{
				return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e0b2      	b.n	80015f6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
			}
			counter++;
 8001490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001494:	3301      	adds	r3, #1
 8001496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 800149a:	e7d1      	b.n	8001440 <_ZN8RFM95Com7ReceiveEPhh+0x30>
>>>>>>> origin/main
		}

		rxData[7] = '\n';
 8001470:	230a      	movs	r3, #10
 8001472:	77fb      	strb	r3, [r7, #31]
//			result = (HAL_StatusTypeDef)CDC_Transmit_FS((uint8_t*) rxData, 8);
//			delay--;
//			HAL_Delay(1);
//		}

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	485d      	ldr	r0, [pc, #372]	; (80015ec <_ZN8RFM95Com7ReceiveEPhh+0x208>)
 8001478:	f004 fec4 	bl	8006204 <HAL_GPIO_TogglePin>
		//check CRC
		if (CRC8(rxData, 6) != rxData[6])
<<<<<<< HEAD
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3304      	adds	r3, #4
 8001480:	f107 0118 	add.w	r1, r7, #24
 8001484:	2206      	movs	r2, #6
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff4c 	bl	8001324 <_ZN7BaseCOM4CRC8EPhh>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	7fbb      	ldrb	r3, [r7, #30]
 8001492:	429a      	cmp	r2, r3
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <_ZN8RFM95Com7ReceiveEPhh+0xcc>
		{
			//error crc
			driveStatus->setError(DriveStatus::E_CRC_ERROR);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fab2 	bl	8002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			return false;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e098      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1fe>
		}

		uint8_t txData[] =
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f8c3 2003 	str.w	r2, [r3, #3]
 80014bc:	231f      	movs	r3, #31
 80014be:	743b      	strb	r3, [r7, #16]
 80014c0:	2301      	movs	r3, #1
 80014c2:	753b      	strb	r3, [r7, #20]
 80014c4:	2301      	movs	r3, #1
 80014c6:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f80f 	bl	80024f0 <_ZNK13DriveSettings16getDeviceAddressEv>
 80014d2:	4603      	mov	r3, r0
=======
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3304      	adds	r3, #4
 80014a0:	f107 0118 	add.w	r1, r7, #24
 80014a4:	2206      	movs	r2, #6
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff52 	bl	8001350 <_ZN7BaseCOM4CRC8EPhh>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	7fbb      	ldrb	r3, [r7, #30]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <_ZN8RFM95Com7ReceiveEPhh+0xc0>
		{
			//error crc
			driveStatus->setError(DriveStatus::E_CRC_ERROR);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb44 	bl	8002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
			return false;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e092      	b.n	80015f6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
		}

		uint8_t txData[] =
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f8c3 2003 	str.w	r2, [r3, #3]
 80014dc:	231f      	movs	r3, #31
 80014de:	743b      	strb	r3, [r7, #16]
 80014e0:	2301      	movs	r3, #1
 80014e2:	753b      	strb	r3, [r7, #20]
 80014e4:	2301      	movs	r3, #1
 80014e6:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 f8a1 	bl	8002634 <_ZNK13DriveSettings16getDeviceAddressEv>
 80014f2:	4603      	mov	r3, r0
>>>>>>> origin/main
				rxData[2],
				rxData[3],
				0x01,
				0x01,
				0x00
		};
<<<<<<< HEAD
 80014d4:	747b      	strb	r3, [r7, #17]
				rxData[2],
 80014d6:	7ebb      	ldrb	r3, [r7, #26]
		};
 80014d8:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 80014da:	7efb      	ldrb	r3, [r7, #27]
		};
 80014dc:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	f107 0110 	add.w	r1, r7, #16
 80014e6:	2206      	movs	r2, #6
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff1b 	bl	8001324 <_ZN7BaseCOM4CRC8EPhh>
 80014ee:	4603      	mov	r3, r0
 80014f0:	75bb      	strb	r3, [r7, #22]

		if(rxData[2] != 19){
 80014f2:	7ebb      	ldrb	r3, [r7, #26]
 80014f4:	2b13      	cmp	r3, #19
 80014f6:	d001      	beq.n	80014fc <_ZN8RFM95Com7ReceiveEPhh+0x118>
			txData[0] = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	743b      	strb	r3, [r7, #16]
		}


		switch (rxData[2])
 80014fc:	7ebb      	ldrb	r3, [r7, #26]
 80014fe:	3b01      	subs	r3, #1
 8001500:	2b12      	cmp	r3, #18
 8001502:	d85f      	bhi.n	80015c4 <_ZN8RFM95Com7ReceiveEPhh+0x1e0>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <_ZN8RFM95Com7ReceiveEPhh+0x128>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001559 	.word	0x08001559
 8001510:	08001571 	.word	0x08001571
 8001514:	08001589 	.word	0x08001589
 8001518:	080015c5 	.word	0x080015c5
 800151c:	080015c5 	.word	0x080015c5
 8001520:	080015c5 	.word	0x080015c5
 8001524:	080015c5 	.word	0x080015c5
 8001528:	080015c5 	.word	0x080015c5
 800152c:	080015c5 	.word	0x080015c5
 8001530:	080015c5 	.word	0x080015c5
 8001534:	080015c5 	.word	0x080015c5
 8001538:	080015c5 	.word	0x080015c5
 800153c:	080015c5 	.word	0x080015c5
 8001540:	080015c5 	.word	0x080015c5
 8001544:	080015c5 	.word	0x080015c5
 8001548:	080015c5 	.word	0x080015c5
 800154c:	080015a1 	.word	0x080015a1
 8001550:	080015c5 	.word	0x080015c5
 8001554:	080015b3 	.word	0x080015b3
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3304      	adds	r3, #4
 800155c:	f107 0218 	add.w	r2, r7, #24
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcdc 	bl	8000f20 <_ZN7BaseCOM11SetSettingsEPh>
				txDataTemp = txData;
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800156e:	e02e      	b.n	80015ce <_ZN8RFM95Com7ReceiveEPhh+0x1ea>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3304      	adds	r3, #4
 8001574:	f107 0218 	add.w	r2, r7, #24
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe56 	bl	800122c <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001586:	e022      	b.n	80015ce <_ZN8RFM95Com7ReceiveEPhh+0x1ea>
			case SEND_STATUS:
				this->SetStatus(rxData);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3304      	adds	r3, #4
 800158c:	f107 0218 	add.w	r2, r7, #24
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fdce 	bl	8001134 <_ZN7BaseCOM9SetStatusEPh>
=======
 80014f4:	747b      	strb	r3, [r7, #17]
				rxData[2],
 80014f6:	7ebb      	ldrb	r3, [r7, #26]
		};
 80014f8:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 80014fa:	7efb      	ldrb	r3, [r7, #27]
		};
 80014fc:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	f107 0110 	add.w	r1, r7, #16
 8001506:	2206      	movs	r2, #6
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff21 	bl	8001350 <_ZN7BaseCOM4CRC8EPhh>
 800150e:	4603      	mov	r3, r0
 8001510:	75bb      	strb	r3, [r7, #22]

		switch (rxData[2])
 8001512:	7ebb      	ldrb	r3, [r7, #26]
 8001514:	3b01      	subs	r3, #1
 8001516:	2b12      	cmp	r3, #18
 8001518:	d85e      	bhi.n	80015d8 <_ZN8RFM95Com7ReceiveEPhh+0x1c8>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <_ZN8RFM95Com7ReceiveEPhh+0x110>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	0800156d 	.word	0x0800156d
 8001524:	08001585 	.word	0x08001585
 8001528:	0800159d 	.word	0x0800159d
 800152c:	080015d9 	.word	0x080015d9
 8001530:	080015d9 	.word	0x080015d9
 8001534:	080015d9 	.word	0x080015d9
 8001538:	080015d9 	.word	0x080015d9
 800153c:	080015d9 	.word	0x080015d9
 8001540:	080015d9 	.word	0x080015d9
 8001544:	080015d9 	.word	0x080015d9
 8001548:	080015d9 	.word	0x080015d9
 800154c:	080015d9 	.word	0x080015d9
 8001550:	080015d9 	.word	0x080015d9
 8001554:	080015d9 	.word	0x080015d9
 8001558:	080015d9 	.word	0x080015d9
 800155c:	080015d9 	.word	0x080015d9
 8001560:	080015b5 	.word	0x080015b5
 8001564:	080015d9 	.word	0x080015d9
 8001568:	080015c7 	.word	0x080015c7
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3304      	adds	r3, #4
 8001570:	f107 0218 	add.w	r2, r7, #24
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fce8 	bl	8000f4c <_ZN7BaseCOM11SetSettingsEPh>
>>>>>>> origin/main
				txDataTemp = txData;
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
<<<<<<< HEAD
 800159e:	e016      	b.n	80015ce <_ZN8RFM95Com7ReceiveEPhh+0x1ea>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3304      	adds	r3, #4
 80015a4:	7efa      	ldrb	r2, [r7, #27]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb1d 	bl	8000be8 <_ZN7BaseCOM11GetSettingsEh>
 80015ae:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80015b0:	e00d      	b.n	80015ce <_ZN8RFM95Com7ReceiveEPhh+0x1ea>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3304      	adds	r3, #4
 80015b6:	7efa      	ldrb	r2, [r7, #27]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fc1a 	bl	8000df4 <_ZN7BaseCOM9GetStatusEh>
 80015c0:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80015c2:	e004      	b.n	80015ce <_ZN8RFM95Com7ReceiveEPhh+0x1ea>
			default:
				//not sported command
				txData[4] = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	757b      	strb	r3, [r7, #21]
				break;
 80015cc:	bf00      	nop
=======
 8001582:	e02e      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3304      	adds	r3, #4
 8001588:	f107 0218 	add.w	r2, r7, #24
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe62 	bl	8001258 <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800159a:	e022      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case SEND_STATUS:
				this->SetStatus(rxData);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3304      	adds	r3, #4
 80015a0:	f107 0218 	add.w	r2, r7, #24
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fdda 	bl	8001160 <_ZN7BaseCOM9SetStatusEPh>
				txDataTemp = txData;
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80015b2:	e016      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3304      	adds	r3, #4
 80015b8:	7efa      	ldrb	r2, [r7, #27]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb29 	bl	8000c14 <_ZN7BaseCOM11GetSettingsEh>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80015c4:	e00d      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	7efa      	ldrb	r2, [r7, #27]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fc26 	bl	8000e20 <_ZN7BaseCOM9GetStatusEh>
 80015d4:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 80015d6:	e004      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1d2>
			default:
				//not sported command
				txData[4] = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	757b      	strb	r3, [r7, #21]
				break;
 80015e0:	bf00      	nop
>>>>>>> origin/main
		}


		Transmitt(txDataTemp , 7);
<<<<<<< HEAD
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2207      	movs	r2, #7
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	4798      	blx	r3
		return true;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <_ZN8RFM95Com7ReceiveEPhh+0x1fe>
	}
	return false;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	48000400 	.word	0x48000400

080015f0 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7EncoderP3LED>:
=======
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2207      	movs	r2, #7
 80015ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	4798      	blx	r3
		return true;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <_ZN8RFM95Com7ReceiveEPhh+0x1e6>
	}
	return false;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop

08001600 <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7EncoderP3LED>:
>>>>>>> origin/main
 *      Author: marce
 */

#include "Drive.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus,DriveCommand *driveCommand, Encoder *encoder, LED *led)
<<<<<<< HEAD
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	755a      	strb	r2, [r3, #21]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	75da      	strb	r2, [r3, #23]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	761a      	strb	r2, [r3, #24]
{
	this->driveSettings = driveSettings;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
	this->led = led;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
}
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_ZN5Drive11updateDriveEv>:
=======
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	755a      	strb	r2, [r3, #21]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	75da      	strb	r2, [r3, #23]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	761a      	strb	r2, [r3, #24]
{
	this->driveSettings = driveSettings;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
	this->led = led;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	611a      	str	r2, [r3, #16]
}
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_ZN5Drive11updateDriveEv>:
>>>>>>> origin/main



void Drive::updateDrive()
{
<<<<<<< HEAD
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(!driveCommand->isEnable() || driveCommand->isStop()){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4618      	mov	r0, r3
 800164a:	f001 f8a3 	bl	8002794 <_ZN12DriveCommand8isEnableEv>
 800164e:	4603      	mov	r3, r0
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <_ZN5Drive11updateDriveEv+0x2e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4618      	mov	r0, r3
 8001660:	f001 f8ce 	bl	8002800 <_ZN12DriveCommand6isStopEv>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <_ZN5Drive11updateDriveEv+0x32>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <_ZN5Drive11updateDriveEv+0x34>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <_ZN5Drive11updateDriveEv+0x40>
		Stop();
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f8ea 	bl	800184e <_ZN5Drive4StopEv>
		return;
 800167a:	e010      	b.n	800169e <_ZN5Drive11updateDriveEv+0x62>
	}

	switch (driveMode)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7d1b      	ldrb	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <_ZN5Drive11updateDriveEv+0x54>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <_ZN5Drive11updateDriveEv+0x5a>
	{
		case Drive::OP_MODE:
			OpMode();
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f80b 	bl	80016a4 <_ZN5Drive6OpModeEv>
			break;
 800168e:	e006      	b.n	800169e <_ZN5Drive11updateDriveEv+0x62>
		case Drive::TEACH_MODE:
			TeachMode();
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f8eb 	bl	800186c <_ZN5Drive9TeachModeEv>
		default:
			Stop();
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8d9 	bl	800184e <_ZN5Drive4StopEv>
			break;
 800169c:	bf00      	nop
	}
}
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if (driveCommand->isClose())
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 f839 	bl	8002728 <_ZN12DriveCommand7isCloseEv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <_ZN5Drive6OpModeEv+0x20>
	{
		Close();
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f810 	bl	80016e2 <_ZN5Drive5CloseEv>
=======
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(!driveCommand->isEnable() || driveCommand->isStop()){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4618      	mov	r0, r3
 800165a:	f001 f93d 	bl	80028d8 <_ZN12DriveCommand8isEnableEv>
 800165e:	4603      	mov	r3, r0
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <_ZN5Drive11updateDriveEv+0x2e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4618      	mov	r0, r3
 8001670:	f001 f968 	bl	8002944 <_ZN12DriveCommand6isStopEv>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <_ZN5Drive11updateDriveEv+0x32>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <_ZN5Drive11updateDriveEv+0x34>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <_ZN5Drive11updateDriveEv+0x40>
		Stop();
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f8ea 	bl	800185e <_ZN5Drive4StopEv>
		return;
 800168a:	e010      	b.n	80016ae <_ZN5Drive11updateDriveEv+0x62>
	}

	switch (driveMode)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <_ZN5Drive11updateDriveEv+0x54>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d106      	bne.n	80016a6 <_ZN5Drive11updateDriveEv+0x5a>
	{
		case Drive::OP_MODE:
			OpMode();
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f80b 	bl	80016b4 <_ZN5Drive6OpModeEv>
			break;
 800169e:	e006      	b.n	80016ae <_ZN5Drive11updateDriveEv+0x62>
		case Drive::TEACH_MODE:
			TeachMode();
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8eb 	bl	800187c <_ZN5Drive9TeachModeEv>
		default:
			Stop();
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8d9 	bl	800185e <_ZN5Drive4StopEv>
			break;
 80016ac:	bf00      	nop
	}
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (driveCommand->isClose())
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 f8d3 	bl	800286c <_ZN12DriveCommand7isCloseEv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <_ZN5Drive6OpModeEv+0x20>
	{
		Close();
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f810 	bl	80016f2 <_ZN5Drive5CloseEv>
>>>>>>> origin/main
	}
	else if (driveCommand->isOpen())
	{
		Open();
	}
}
<<<<<<< HEAD
 80016c2:	e00a      	b.n	80016da <_ZN5Drive6OpModeEv+0x36>
	else if (driveCommand->isOpen())
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f848 	bl	800275e <_ZN12DriveCommand6isOpenEv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <_ZN5Drive6OpModeEv+0x36>
		Open();
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f82d 	bl	8001734 <_ZN5Drive4OpenEv>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZN5Drive5CloseEv>:


void Drive::Close(){
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	if(MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed()))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fee3 	bl	80024ba <_ZNK13DriveSettings17getClampingTorqueEv>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461c      	mov	r4, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fec1 	bl	8002484 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001702:	4603      	mov	r3, r0
 8001704:	4622      	mov	r2, r4
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f961 	bl	80019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <_ZN5Drive5CloseEv+0x4a>
	{
		driveStatus->setInPos(true);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2101      	movs	r1, #1
 800171a:	4618      	mov	r0, r3
 800171c:	f001 fa20 	bl	8002b60 <_ZN11DriveStatus8setInPosEb>
		driveCommand->setClose(false);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f001 f80a 	bl	8002740 <_ZN12DriveCommand8setCloseEb>
	}
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <_ZN5Drive4OpenEv>:

void Drive::Open(){
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

	auto posOut = driveSettings->getOpeningDistance() + driveSettings->getInPosDiff();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fefc 	bl	800253e <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001746:	4603      	mov	r3, r0
 8001748:	461c      	mov	r4, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 feda 	bl	8002508 <_ZNK13DriveSettings12getInPosDiffEv>
 8001754:	4603      	mov	r3, r0
 8001756:	4423      	add	r3, r4
 8001758:	60fb      	str	r3, [r7, #12]
	auto posIn = driveSettings->getOpeningDistance() - driveSettings->getInPosDiff();
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 feed 	bl	800253e <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001764:	4603      	mov	r3, r0
 8001766:	461c      	mov	r4, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fecb 	bl	8002508 <_ZNK13DriveSettings12getInPosDiffEv>
 8001772:	4603      	mov	r3, r0
 8001774:	1ae3      	subs	r3, r4, r3
 8001776:	60bb      	str	r3, [r7, #8]


	if(driveStatus->getPosition() < posIn)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	f001 f9d4 	bl	8002b2a <_ZNK11DriveStatus11getPositionEv>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4293      	cmp	r3, r2
 800178a:	bfcc      	ite	gt
 800178c:	2301      	movgt	r3, #1
 800178e:	2300      	movle	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d011      	beq.n	80017ba <_ZN5Drive4OpenEv+0x86>
	{
		MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fe8d 	bl	80024ba <_ZNK13DriveSettings17getClampingTorqueEv>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461c      	mov	r4, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fe6b 	bl	8002484 <_ZNK13DriveSettings16getClampingSpeedEv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4622      	mov	r2, r4
 80017b2:	2101      	movs	r1, #1
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f90b 	bl	80019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
	}

	if(driveStatus->getPosition() > posOut){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f9b3 	bl	8002b2a <_ZNK11DriveStatus11getPositionEv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4293      	cmp	r3, r2
 80017cc:	bfb4      	ite	lt
 80017ce:	2301      	movlt	r3, #1
 80017d0:	2300      	movge	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d011      	beq.n	80017fc <_ZN5Drive4OpenEv+0xc8>
		MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fe6c 	bl	80024ba <_ZNK13DriveSettings17getClampingTorqueEv>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461c      	mov	r4, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fe4a 	bl	8002484 <_ZNK13DriveSettings16getClampingSpeedEv>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4622      	mov	r2, r4
 80017f4:	2100      	movs	r1, #0
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f8ea 	bl	80019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
	}

	if(driveStatus->getPosition() < posOut && driveStatus->getPosition() > posIn)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f992 	bl	8002b2a <_ZNK11DriveStatus11getPositionEv>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4293      	cmp	r3, r2
 800180e:	dd0b      	ble.n	8001828 <_ZN5Drive4OpenEv+0xf4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f001 f988 	bl	8002b2a <_ZNK11DriveStatus11getPositionEv>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	4293      	cmp	r3, r2
 8001822:	da01      	bge.n	8001828 <_ZN5Drive4OpenEv+0xf4>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <_ZN5Drive4OpenEv+0xf6>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <_ZN5Drive4OpenEv+0x112>
	{
		driveStatus->setInPos(true);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2101      	movs	r1, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f001 f993 	bl	8002b60 <_ZN11DriveStatus8setInPosEb>
		driveCommand->setOpen(false);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f000 ff98 	bl	8002776 <_ZN12DriveCommand7setOpenEb>
	}
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}

0800184e <_ZN5Drive4StopEv>:
=======
 80016d2:	e00a      	b.n	80016ea <_ZN5Drive6OpModeEv+0x36>
	else if (driveCommand->isOpen())
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 f8e2 	bl	80028a2 <_ZN12DriveCommand6isOpenEv>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <_ZN5Drive6OpModeEv+0x36>
		Open();
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f82d 	bl	8001744 <_ZN5Drive4OpenEv>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_ZN5Drive5CloseEv>:


void Drive::Close(){
 80016f2:	b590      	push	{r4, r7, lr}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	if(MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed()))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 ff7d 	bl	80025fe <_ZNK13DriveSettings17getClampingTorqueEv>
 8001704:	4603      	mov	r3, r0
 8001706:	461c      	mov	r4, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 ff5b 	bl	80025c8 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f961 	bl	80019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <_ZN5Drive5CloseEv+0x4a>
	{
		driveStatus->setInPos(true);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2101      	movs	r1, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fab7 	bl	8002c9e <_ZN11DriveStatus8setInPosEb>
		driveCommand->setClose(false);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f8a4 	bl	8002884 <_ZN12DriveCommand8setCloseEb>
	}
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <_ZN5Drive4OpenEv>:

void Drive::Open(){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

	auto posOut = driveSettings->getOpeningDistance() + driveSettings->getInPosDiff();
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 ff96 	bl	8002682 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001756:	4603      	mov	r3, r0
 8001758:	461c      	mov	r4, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 ff74 	bl	800264c <_ZNK13DriveSettings12getInPosDiffEv>
 8001764:	4603      	mov	r3, r0
 8001766:	4423      	add	r3, r4
 8001768:	60fb      	str	r3, [r7, #12]
	auto posIn = driveSettings->getOpeningDistance() - driveSettings->getInPosDiff();
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 ff87 	bl	8002682 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001774:	4603      	mov	r3, r0
 8001776:	461c      	mov	r4, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 ff65 	bl	800264c <_ZNK13DriveSettings12getInPosDiffEv>
 8001782:	4603      	mov	r3, r0
 8001784:	1ae3      	subs	r3, r4, r3
 8001786:	60bb      	str	r3, [r7, #8]


	if(driveStatus->getPosition() < posIn)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fa6b 	bl	8002c68 <_ZNK11DriveStatus11getPositionEv>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4293      	cmp	r3, r2
 800179a:	bfcc      	ite	gt
 800179c:	2301      	movgt	r3, #1
 800179e:	2300      	movle	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d011      	beq.n	80017ca <_ZN5Drive4OpenEv+0x86>
	{
		MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 ff27 	bl	80025fe <_ZNK13DriveSettings17getClampingTorqueEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461c      	mov	r4, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 ff05 	bl	80025c8 <_ZNK13DriveSettings16getClampingSpeedEv>
 80017be:	4603      	mov	r3, r0
 80017c0:	4622      	mov	r2, r4
 80017c2:	2101      	movs	r1, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f90b 	bl	80019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
	}

	if(driveStatus->getPosition() > posOut){
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fa4a 	bl	8002c68 <_ZNK11DriveStatus11getPositionEv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4293      	cmp	r3, r2
 80017dc:	bfb4      	ite	lt
 80017de:	2301      	movlt	r3, #1
 80017e0:	2300      	movge	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d011      	beq.n	800180c <_ZN5Drive4OpenEv+0xc8>
		MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(), driveSettings->getClampingSpeed());
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 ff06 	bl	80025fe <_ZNK13DriveSettings17getClampingTorqueEv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461c      	mov	r4, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fee4 	bl	80025c8 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001800:	4603      	mov	r3, r0
 8001802:	4622      	mov	r2, r4
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8ea 	bl	80019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
	}

	if(driveStatus->getPosition() < posOut && driveStatus->getPosition() > posIn)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fa29 	bl	8002c68 <_ZNK11DriveStatus11getPositionEv>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4293      	cmp	r3, r2
 800181e:	dd0b      	ble.n	8001838 <_ZN5Drive4OpenEv+0xf4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fa1f 	bl	8002c68 <_ZNK11DriveStatus11getPositionEv>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4293      	cmp	r3, r2
 8001832:	da01      	bge.n	8001838 <_ZN5Drive4OpenEv+0xf4>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <_ZN5Drive4OpenEv+0xf6>
 8001838:	2300      	movs	r3, #0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <_ZN5Drive4OpenEv+0x112>
	{
		driveStatus->setInPos(true);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fa2a 	bl	8002c9e <_ZN11DriveStatus8setInPosEb>
		driveCommand->setOpen(false);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f001 f832 	bl	80028ba <_ZN12DriveCommand7setOpenEb>
	}
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <_ZN5Drive4StopEv>:
>>>>>>> origin/main



void Drive::Stop()
{
<<<<<<< HEAD
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 8001856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	currentState = nextState;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7d9a      	ldrb	r2, [r3, #22]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	755a      	strb	r2, [r3, #21]

	switch (currentState)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7d5b      	ldrb	r3, [r3, #21]
 8001880:	2b04      	cmp	r3, #4
 8001882:	f200 8095 	bhi.w	80019b0 <_ZN5Drive9TeachModeEv+0x144>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <_ZN5Drive9TeachModeEv+0x20>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018c1 	.word	0x080018c1
 8001894:	08001931 	.word	0x08001931
 8001898:	080018e1 	.word	0x080018e1
 800189c:	08001999 	.word	0x08001999
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == false)
 80018a0:	2120      	movs	r1, #32
 80018a2:	484a      	ldr	r0, [pc, #296]	; (80019cc <_ZN5Drive9TeachModeEv+0x160>)
 80018a4:	f004 fc7e 	bl	80061a4 <HAL_GPIO_ReadPin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf0c      	ite	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	2300      	movne	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d07d      	beq.n	80019b4 <_ZN5Drive9TeachModeEv+0x148>
			{
				nextState = TEACH_RDY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	759a      	strb	r2, [r3, #22]
			}
			break;
 80018be:	e079      	b.n	80019b4 <_ZN5Drive9TeachModeEv+0x148>
		case TEACH_RDY:
			if (IS_EXT_SWITCH == true)
 80018c0:	2120      	movs	r1, #32
 80018c2:	4842      	ldr	r0, [pc, #264]	; (80019cc <_ZN5Drive9TeachModeEv+0x160>)
 80018c4:	f004 fc6e 	bl	80061a4 <HAL_GPIO_ReadPin>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d06f      	beq.n	80019b8 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = DRIVE_OUT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	759a      	strb	r2, [r3, #22]
			}
			break;
 80018de:	e06b      	b.n	80019b8 <_ZN5Drive9TeachModeEv+0x14c>
		case DRIVE_IN:
			//move drive in
			if(MoveDrive(IN, driveSettings->getTeachTroque(),driveSettings->getTeachSpeed()))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 feb1 	bl	800264c <_ZNK13DriveSettings14getTeachTroqueEv>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461c      	mov	r4, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fe8f 	bl	8002616 <_ZNK13DriveSettings13getTeachSpeedEv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4622      	mov	r2, r4
 80018fc:	2100      	movs	r1, #0
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f866 	bl	80019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <_ZN5Drive9TeachModeEv+0xa4>
			{
				nextState = TEACH_END;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	759a      	strb	r2, [r3, #22]
			}

			if(IS_EXT_SWITCH)
 8001910:	2120      	movs	r1, #32
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <_ZN5Drive9TeachModeEv+0x160>)
 8001914:	f004 fc46 	bl	80061a4 <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d049      	beq.n	80019bc <_ZN5Drive9TeachModeEv+0x150>
			{
				nextState = DRIVE_OUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	759a      	strb	r2, [r3, #22]
			}
			break;
 800192e:	e045      	b.n	80019bc <_ZN5Drive9TeachModeEv+0x150>
		case DRIVE_OUT:
			//move drive out
			if(MoveDrive(OUT, driveSettings->getTeachTroque(), driveSettings->getTeachSpeed()) || torqueOutReached)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fe89 	bl	800264c <_ZNK13DriveSettings14getTeachTroqueEv>
 800193a:	4603      	mov	r3, r0
 800193c:	461c      	mov	r4, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fe67 	bl	8002616 <_ZNK13DriveSettings13getTeachSpeedEv>
 8001948:	4603      	mov	r3, r0
 800194a:	4622      	mov	r2, r4
 800194c:	2101      	movs	r1, #1
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f83e 	bl	80019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <_ZN5Drive9TeachModeEv+0xf6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7e1b      	ldrb	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <_ZN5Drive9TeachModeEv+0xfa>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <_ZN5Drive9TeachModeEv+0xfc>
 8001966:	2300      	movs	r3, #0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <_ZN5Drive9TeachModeEv+0x106>
			{
				torqueOutReached = true;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	761a      	strb	r2, [r3, #24]
			}

			if(!IS_EXT_SWITCH)
 8001972:	2120      	movs	r1, #32
 8001974:	4815      	ldr	r0, [pc, #84]	; (80019cc <_ZN5Drive9TeachModeEv+0x160>)
 8001976:	f004 fc15 	bl	80061a4 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01a      	beq.n	80019c0 <_ZN5Drive9TeachModeEv+0x154>
			{
				nextState = DRIVE_IN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	759a      	strb	r2, [r3, #22]
				torqueOutReached = false;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
			}
			break;
 8001996:	e013      	b.n	80019c0 <_ZN5Drive9TeachModeEv+0x154>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f89b 	bl	8001ad8 <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 ff44 	bl	8002836 <_ZN12DriveCommand8setTeachEb>
			break;
 80019ae:	e008      	b.n	80019c2 <_ZN5Drive9TeachModeEv+0x156>
		default:
			break;
 80019b0:	bf00      	nop
 80019b2:	e006      	b.n	80019c2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019b4:	bf00      	nop
 80019b6:	e004      	b.n	80019c2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019b8:	bf00      	nop
 80019ba:	e002      	b.n	80019c2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019bc:	bf00      	nop
 80019be:	e000      	b.n	80019c2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019c0:	bf00      	nop
	}

}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	48000400 	.word	0x48000400

080019d0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
=======
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 8001866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	currentState = nextState;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7d9a      	ldrb	r2, [r3, #22]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	755a      	strb	r2, [r3, #21]

	switch (currentState)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7d5b      	ldrb	r3, [r3, #21]
 8001890:	2b04      	cmp	r3, #4
 8001892:	f200 8095 	bhi.w	80019c0 <_ZN5Drive9TeachModeEv+0x144>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <_ZN5Drive9TeachModeEv+0x20>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018b1 	.word	0x080018b1
 80018a0:	080018d1 	.word	0x080018d1
 80018a4:	08001941 	.word	0x08001941
 80018a8:	080018f1 	.word	0x080018f1
 80018ac:	080019a9 	.word	0x080019a9
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == false)
 80018b0:	2120      	movs	r1, #32
 80018b2:	484a      	ldr	r0, [pc, #296]	; (80019dc <_ZN5Drive9TeachModeEv+0x160>)
 80018b4:	f004 fa60 	bl	8005d78 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d07d      	beq.n	80019c4 <_ZN5Drive9TeachModeEv+0x148>
			{
				nextState = TEACH_RDY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	759a      	strb	r2, [r3, #22]
			}
			break;
 80018ce:	e079      	b.n	80019c4 <_ZN5Drive9TeachModeEv+0x148>
		case TEACH_RDY:
			if (IS_EXT_SWITCH == true)
 80018d0:	2120      	movs	r1, #32
 80018d2:	4842      	ldr	r0, [pc, #264]	; (80019dc <_ZN5Drive9TeachModeEv+0x160>)
 80018d4:	f004 fa50 	bl	8005d78 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	bf0c      	ite	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	2300      	movne	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d06f      	beq.n	80019c8 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = DRIVE_OUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	759a      	strb	r2, [r3, #22]
			}
			break;
 80018ee:	e06b      	b.n	80019c8 <_ZN5Drive9TeachModeEv+0x14c>
		case DRIVE_IN:
			//move drive in
			if(MoveDrive(IN, driveSettings->getTeachTroque(),driveSettings->getTeachSpeed()))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 ff4b 	bl	8002790 <_ZNK13DriveSettings14getTeachTroqueEv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461c      	mov	r4, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 ff29 	bl	800275a <_ZNK13DriveSettings13getTeachSpeedEv>
 8001908:	4603      	mov	r3, r0
 800190a:	4622      	mov	r2, r4
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f866 	bl	80019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <_ZN5Drive9TeachModeEv+0xa4>
			{
				nextState = TEACH_END;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	759a      	strb	r2, [r3, #22]
			}

			if(IS_EXT_SWITCH)
 8001920:	2120      	movs	r1, #32
 8001922:	482e      	ldr	r0, [pc, #184]	; (80019dc <_ZN5Drive9TeachModeEv+0x160>)
 8001924:	f004 fa28 	bl	8005d78 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d049      	beq.n	80019cc <_ZN5Drive9TeachModeEv+0x150>
			{
				nextState = DRIVE_OUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	759a      	strb	r2, [r3, #22]
			}
			break;
 800193e:	e045      	b.n	80019cc <_ZN5Drive9TeachModeEv+0x150>
		case DRIVE_OUT:
			//move drive out
			if(MoveDrive(OUT, driveSettings->getTeachTroque(), driveSettings->getTeachSpeed()) || torqueOutReached)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 ff23 	bl	8002790 <_ZNK13DriveSettings14getTeachTroqueEv>
 800194a:	4603      	mov	r3, r0
 800194c:	461c      	mov	r4, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff01 	bl	800275a <_ZNK13DriveSettings13getTeachSpeedEv>
 8001958:	4603      	mov	r3, r0
 800195a:	4622      	mov	r2, r4
 800195c:	2101      	movs	r1, #1
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f83e 	bl	80019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <_ZN5Drive9TeachModeEv+0xf6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e1b      	ldrb	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <_ZN5Drive9TeachModeEv+0xfa>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <_ZN5Drive9TeachModeEv+0xfc>
 8001976:	2300      	movs	r3, #0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <_ZN5Drive9TeachModeEv+0x106>
			{
				torqueOutReached = true;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	761a      	strb	r2, [r3, #24]
			}

			if(!IS_EXT_SWITCH)
 8001982:	2120      	movs	r1, #32
 8001984:	4815      	ldr	r0, [pc, #84]	; (80019dc <_ZN5Drive9TeachModeEv+0x160>)
 8001986:	f004 f9f7 	bl	8005d78 <HAL_GPIO_ReadPin>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <_ZN5Drive9TeachModeEv+0x154>
			{
				nextState = DRIVE_IN;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	759a      	strb	r2, [r3, #22]
				torqueOutReached = false;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	761a      	strb	r2, [r3, #24]
			}
			break;
 80019a6:	e013      	b.n	80019d0 <_ZN5Drive9TeachModeEv+0x154>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f89b 	bl	8001ae8 <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 ffde 	bl	800297a <_ZN12DriveCommand8setTeachEb>
			break;
 80019be:	e008      	b.n	80019d2 <_ZN5Drive9TeachModeEv+0x156>
		default:
			break;
 80019c0:	bf00      	nop
 80019c2:	e006      	b.n	80019d2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019c4:	bf00      	nop
 80019c6:	e004      	b.n	80019d2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019c8:	bf00      	nop
 80019ca:	e002      	b.n	80019d2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019cc:	bf00      	nop
 80019ce:	e000      	b.n	80019d2 <_ZN5Drive9TeachModeEv+0x156>
			break;
 80019d0:	bf00      	nop
	}

}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	48000400 	.word	0x48000400

080019e0 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
>>>>>>> origin/main
{
	this->driveMode = driveMode;
}

bool Drive::MoveDrive(DIRECTION direction, uint16_t torque, uint16_t speed)
{
<<<<<<< HEAD
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	72fb      	strb	r3, [r7, #11]
 80019e2:	460b      	mov	r3, r1
 80019e4:	813b      	strh	r3, [r7, #8]
 80019e6:	4613      	mov	r3, r2
 80019e8:	80fb      	strh	r3, [r7, #6]
	if(driveStatus->getCurrent() * CURRENT_2_TORQUE > torque){
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f84d 	bl	8002a8e <_ZNK11DriveStatus10getCurrentEv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	893b      	ldrh	r3, [r7, #8]
 80019fa:	4293      	cmp	r3, r2
 80019fc:	bf34      	ite	cc
 80019fe:	2301      	movcc	r3, #1
 8001a00:	2300      	movcs	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x42>
		Stop();
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff20 	bl	800184e <_ZN5Drive4StopEv>
		return true;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e028      	b.n	8001a64 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x94>
	}

	switch (direction)
 8001a12:	7afb      	ldrb	r3, [r7, #11]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x4e>
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d00f      	beq.n	8001a3c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x6c>
 8001a1c:	e01d      	b.n	8001a5a <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x8a>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = DIRECTION_IN;	//direction
 8001a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a22:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001a26:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000;	//speed
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	6353      	str	r3, [r2, #52]	; 0x34
			led->ON();
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f8d2 	bl	8001bde <_ZN3LED2ONEv>
			break;
 8001a3a:	e012      	b.n	8001a62 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x92>
		case DIRECTION::OUT:
			TIM2->CCR2 = DIRECTION_OUT;	//direction
 8001a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a40:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000; //speed
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	6353      	str	r3, [r2, #52]	; 0x34
			led->ON();
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f8c3 	bl	8001bde <_ZN3LED2ONEv>
			break;
 8001a58:	e003      	b.n	8001a62 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x92>
		default:
			Stop();
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff fef7 	bl	800184e <_ZN5Drive4StopEv>
			break;
 8001a60:	bf00      	nop
	}
	return false;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZN7EncoderC1EP11DriveStatus>:
=======
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	72fb      	strb	r3, [r7, #11]
 80019f2:	460b      	mov	r3, r1
 80019f4:	813b      	strh	r3, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
	if(driveStatus->getCurrent() * CURRENT_2_TORQUE > torque){
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 f8e4 	bl	8002bcc <_ZNK11DriveStatus10getCurrentEv>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	bf34      	ite	cc
 8001a0e:	2301      	movcc	r3, #1
 8001a10:	2300      	movcs	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x42>
		Stop();
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff20 	bl	800185e <_ZN5Drive4StopEv>
		return true;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e028      	b.n	8001a74 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x94>
	}

	switch (direction)
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x4e>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d00f      	beq.n	8001a4c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x6c>
 8001a2c:	e01d      	b.n	8001a6a <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x8a>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = DIRECTION_IN;	//direction
 8001a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a32:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000;	//speed
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	6353      	str	r3, [r2, #52]	; 0x34
			led->ON();
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f93e 	bl	8001cc6 <_ZN3LED2ONEv>
			break;
 8001a4a:	e012      	b.n	8001a72 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x92>
		case DIRECTION::OUT:
			TIM2->CCR2 = DIRECTION_OUT;	//direction
 8001a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a50:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = speed; //4000; //speed
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	6353      	str	r3, [r2, #52]	; 0x34
			led->ON();
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f92f 	bl	8001cc6 <_ZN3LED2ONEv>
			break;
 8001a68:	e003      	b.n	8001a72 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x92>
		default:
			Stop();
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fef7 	bl	800185e <_ZN5Drive4StopEv>
			break;
 8001a70:	bf00      	nop
	}
	return false;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN7EncoderC1EP11DriveStatus>:
>>>>>>> origin/main
 *      Author: marce
 */

#include "Encoder.h"

Encoder::Encoder(DriveStatus *driveStatus)
<<<<<<< HEAD
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <_ZN7Encoder4initEv+0x38>)
 8001aa6:	f001 fedd 	bl	8003864 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <_ZN7Encoder4initEv+0x38>)
 8001aae:	f008 f9a7 	bl	8009e00 <HAL_TIM_Encoder_Start>

	cValue = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
	lValue = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
	return true;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000408 	.word	0x20000408

08001ad8 <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <_ZN7Encoder6updateEv>:
=======
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <_ZN7Encoder4initEv+0x38>)
 8001ab6:	f001 ff37 	bl	8003928 <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 8001aba:	2104      	movs	r1, #4
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <_ZN7Encoder4initEv+0x38>)
 8001abe:	f007 ff89 	bl	80099d4 <HAL_TIM_Encoder_Start>

	cValue = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
	lValue = 0;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
	return true;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000404 	.word	0x20000404

08001ae8 <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_ZN7Encoder6updateEv>:
>>>>>>> origin/main
{
	return this->encoderValue;
}

bool Encoder::update()
{
<<<<<<< HEAD
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <_ZN7Encoder6updateEv+0x84>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b1c:	da06      	bge.n	8001b2c <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b26:	33ff      	adds	r3, #255	; 0xff
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	60d3      	str	r3, [r2, #12]
=======
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <_ZN7Encoder6updateEv+0x84>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	1ad2      	subs	r2, r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b2c:	da06      	bge.n	8001b3c <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b36:	33ff      	adds	r3, #255	; 0xff
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
	}

	//backwards overflow
	if (deltaValue > 32768)
<<<<<<< HEAD
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b34:	dd06      	ble.n	8001b44 <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001b3e:	3bff      	subs	r3, #255	; 0xff
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 ffeb 	bl	8002b42 <_ZN11DriveStatus11setPositionEt>

	return true;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40012c00 	.word	0x40012c00

08001b7c <_ZN5ErrorC1EP3LEDP11DriveStatus>:
=======
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b44:	dd06      	ble.n	8001b54 <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001b4e:	3bff      	subs	r3, #255	; 0xff
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	441a      	add	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f001 f882 	bl	8002c80 <_ZN11DriveStatus11setPositionEt>

	return true;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40012c00 	.word	0x40012c00

08001b8c <_ZN5ErrorC1EP3LEDP11DriveStatus>:
>>>>>>> origin/main

#include "Error.h"
#include "main.h"
#include "gpio.h"

Error::Error(LED* led, DriveStatus *driveStatus){
<<<<<<< HEAD
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	815a      	strh	r2, [r3, #10]
	this->led = led;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]
}
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_ZN3LEDC1EP12GPIO_TypeDeftb>:
=======
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	815a      	strh	r2, [r3, #10]
	this->led = led;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	605a      	str	r2, [r3, #4]
}
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_ZN5Error9error2LEDEv>:


void Error::error2LED() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms

	if (driveStatus->getError() != DriveStatus::E_NO_ERROR) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 ffb9 	bl	8002b3c <_ZN11DriveStatus8getErrorEv>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d054      	beq.n	8001c84 <_ZN5Error9error2LEDEv+0xcc>
		if (this->LEDerrorCounter == 1) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	895b      	ldrh	r3, [r3, #10]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <_ZN5Error9error2LEDEv+0x3c>
			this->errorCode = (uint8_t)driveStatus->getError();		//Errorcode vom DriveStatus bei Zyklus 1 einlesen
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 ffa8 	bl	8002b3c <_ZN11DriveStatus8getErrorEv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	721a      	strb	r2, [r3, #8]
		}

		if (LEDerrorCounter <= errorCode * 6) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	895b      	ldrh	r3, [r3, #10]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7a1b      	ldrb	r3, [r3, #8]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4299      	cmp	r1, r3
 8001c0a:	dc1f      	bgt.n	8001c4c <_ZN5Error9error2LEDEv+0x94>
			//Error Code Ausgeben
			if (LEDerrorCounter % 6 == 0) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	895a      	ldrh	r2, [r3, #10]
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <_ZN5Error9error2LEDEv+0xd4>)
 8001c12:	fba3 1302 	umull	r1, r3, r3, r2
 8001c16:	0899      	lsrs	r1, r3, #2
 8001c18:	460b      	mov	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	440b      	add	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <_ZN5Error9error2LEDEv+0x7c>
				led->ON();
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f84a 	bl	8001cc6 <_ZN3LED2ONEv>
 8001c32:	e004      	b.n	8001c3e <_ZN5Error9error2LEDEv+0x86>
			} else {
				led->OFF();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f861 	bl	8001d00 <_ZN3LED3OFFEv>
			}
			LEDerrorCounter++;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	895b      	ldrh	r3, [r3, #10]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	815a      	strh	r2, [r3, #10]
			//Nach 4 Pause Widerholen
			LEDerrorCounter = 1;
		}
	}

}
 8001c4a:	e01b      	b.n	8001c84 <_ZN5Error9error2LEDEv+0xcc>
		} else if (LEDerrorCounter <= errorCode * 6 + 15) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	895b      	ldrh	r3, [r3, #10]
 8001c50:	4619      	mov	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	330f      	adds	r3, #15
 8001c62:	4299      	cmp	r1, r3
 8001c64:	dc0b      	bgt.n	8001c7e <_ZN5Error9error2LEDEv+0xc6>
			led->OFF();
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f848 	bl	8001d00 <_ZN3LED3OFFEv>
			LEDerrorCounter++;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	895b      	ldrh	r3, [r3, #10]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	815a      	strh	r2, [r3, #10]
}
 8001c7c:	e002      	b.n	8001c84 <_ZN5Error9error2LEDEv+0xcc>
			LEDerrorCounter = 1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	815a      	strh	r2, [r3, #10]
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	aaaaaaab 	.word	0xaaaaaaab

08001c90 <_ZN3LEDC1EP12GPIO_TypeDeftb>:
>>>>>>> origin/main


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
<<<<<<< HEAD
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	797a      	ldrb	r2, [r7, #5]
 8001bce:	719a      	strb	r2, [r3, #6]
}
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_ZN3LED2ONEv>:
=======
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	80fb      	strh	r3, [r7, #6]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	797a      	ldrb	r2, [r7, #5]
 8001cb6:	719a      	strb	r2, [r3, #6]
}
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_ZN3LED2ONEv>:
>>>>>>> origin/main

/*
 * LED ON method
 */
void LED::ON() {
<<<<<<< HEAD
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	799b      	ldrb	r3, [r3, #6]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <_ZN3LED2ONEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	889b      	ldrh	r3, [r3, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f004 faeb 	bl	80061d4 <HAL_GPIO_WritePin>
=======
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	799b      	ldrb	r3, [r3, #6]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <_ZN3LED2ONEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	889b      	ldrh	r3, [r3, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f004 f861 	bl	8005da8 <HAL_GPIO_WritePin>
>>>>>>> origin/main
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	}
}
<<<<<<< HEAD
 8001bfe:	e007      	b.n	8001c10 <_ZN3LED2ONEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	889b      	ldrh	r3, [r3, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f004 fae2 	bl	80061d4 <HAL_GPIO_WritePin>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN10RFM95_LoRaC1Ev>:
=======
 8001ce6:	e007      	b.n	8001cf8 <_ZN3LED2ONEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f004 f858 	bl	8005da8 <HAL_GPIO_WritePin>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZN3LED3OFFEv>:

/*
 * LED OFF method
 */
void LED::OFF() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	799b      	ldrb	r3, [r3, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	889b      	ldrh	r3, [r3, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f004 f844 	bl	8005da8 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001d20:	e007      	b.n	8001d32 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	889b      	ldrh	r3, [r3, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f004 f83b 	bl	8005da8 <HAL_GPIO_WritePin>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f004 f843 	bl	8005dd8 <HAL_GPIO_TogglePin>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <_ZN10RFM95_LoRaC1Ev>:
>>>>>>> origin/main
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
<<<<<<< HEAD
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
=======
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
<<<<<<< HEAD
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
{

}
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	0800f83c 	.word	0x0800f83c

08001c50 <_ZN10RFM95_LoRa9selectRFMEv>:
=======
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
{

}
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	0800f410 	.word	0x0800f410

08001d94 <_ZN10RFM95_LoRa9selectRFMEv>:
>>>>>>> origin/main
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
<<<<<<< HEAD
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f004 fab8 	bl	80061d4 <HAL_GPIO_WritePin>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN10RFM95_LoRa11deselectRFMEv>:
=======
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2110      	movs	r1, #16
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f004 f800 	bl	8005da8 <HAL_GPIO_WritePin>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN10RFM95_LoRa11deselectRFMEv>:
>>>>>>> origin/main
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
<<<<<<< HEAD
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2110      	movs	r1, #16
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f004 faaa 	bl	80061d4 <HAL_GPIO_WritePin>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2108      	movs	r1, #8
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f004 fa9c 	bl	80061d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f001 ff7f 	bl	8003ba0 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f004 fa93 	bl	80061d4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f001 ff76 	bl	8003ba0 <HAL_Delay>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	733b      	strb	r3, [r7, #12]
 8001cd6:	78bb      	ldrb	r3, [r7, #2]
 8001cd8:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffb8 	bl	8001c50 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001ce0:	f107 010c 	add.w	r1, r7, #12
 8001ce4:	2364      	movs	r3, #100	; 0x64
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001cea:	f007 f91c 	bl	8008f26 <HAL_SPI_Transmit>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffb4 	bl	8001c6c <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e003      	b.n	8001d10 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffaf 	bl	8001c6c <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200003a0 	.word	0x200003a0

08001d1c <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001d28:	2300      	movs	r3, #0
 8001d2a:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff8d 	bl	8001c50 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	f107 0108 	add.w	r1, r7, #8
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2302      	movs	r3, #2
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001d46:	f007 fa5c 	bl	8009202 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff8e 	bl	8001c6c <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003a0 	.word	0x200003a0

08001d60 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff8c 	bl	8001c88 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001d70:	2142      	movs	r1, #66	; 0x42
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffd2 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d001      	beq.n	8001d86 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e02b      	b.n	8001dde <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f9b4 	bl	80020f4 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9fa 	bl	8002188 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	210e      	movs	r1, #14
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff8f 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	210f      	movs	r1, #15
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff8a 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001da8:	210c      	movs	r1, #12
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb6 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f043 0303 	orr.w	r3, r3, #3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	210c      	movs	r1, #12
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff7d 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	2126      	movs	r1, #38	; 0x26
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff78 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2114      	movs	r1, #20
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f99c 	bl	800210e <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f97f 	bl	80020da <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZN10RFM95_LoRa11beginPacketEi>:
=======
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2110      	movs	r1, #16
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f003 fff2 	bl	8005da8 <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f003 ffe4 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f001 ff3f 	bl	8003c64 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2108      	movs	r1, #8
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f003 ffdb 	bl	8005da8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001df2:	2005      	movs	r0, #5
 8001df4:	f001 ff36 	bl	8003c64 <HAL_Delay>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	733b      	strb	r3, [r7, #12]
 8001e1a:	78bb      	ldrb	r3, [r7, #2]
 8001e1c:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffb8 	bl	8001d94 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001e24:	f107 010c 	add.w	r1, r7, #12
 8001e28:	2364      	movs	r3, #100	; 0x64
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001e2e:	f006 fe64 	bl	8008afa <HAL_SPI_Transmit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb4 	bl	8001db0 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e003      	b.n	8001e54 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffaf 	bl	8001db0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000039c 	.word	0x2000039c

08001e60 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff8d 	bl	8001d94 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001e7a:	f107 020c 	add.w	r2, r7, #12
 8001e7e:	f107 0108 	add.w	r1, r7, #8
 8001e82:	2364      	movs	r3, #100	; 0x64
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2302      	movs	r3, #2
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001e8a:	f006 ffa4 	bl	8008dd6 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff8e 	bl	8001db0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001e94:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000039c 	.word	0x2000039c

08001ea4 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff8c 	bl	8001dcc <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001eb4:	2142      	movs	r1, #66	; 0x42
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffd2 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b12      	cmp	r3, #18
 8001ec4:	d001      	beq.n	8001eca <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e02b      	b.n	8001f22 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9b4 	bl	8002238 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9fa 	bl	80022cc <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	210e      	movs	r1, #14
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff8f 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff8a 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001eec:	210c      	movs	r1, #12
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffb6 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f043 0303 	orr.w	r3, r3, #3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	210c      	movs	r1, #12
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff7d 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001f06:	2204      	movs	r2, #4
 8001f08:	2126      	movs	r1, #38	; 0x26
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff78 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2114      	movs	r1, #20
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f99c 	bl	8002252 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f97f 	bl	800221e <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001f20:	2301      	movs	r3, #1
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_ZN10RFM95_LoRa11beginPacketEi>:
>>>>>>> origin/main
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
<<<<<<< HEAD
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f972 	bl	80020da <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 faf6 	bl	80023ee <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001e02:	e002      	b.n	8001e0a <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fada 	bl	80023be <_ZN10RFM95_LoRa18explicitHeaderModeEv>
=======
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f972 	bl	800221e <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 faf6 	bl	8002532 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001f46:	e002      	b.n	8001f4e <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fada 	bl	8002502 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
>>>>>>> origin/main
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
<<<<<<< HEAD
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	210d      	movs	r1, #13
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff54 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2122      	movs	r1, #34	; 0x22
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff4f 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZN10RFM95_LoRa9endPacketEv>:
=======
 8001f4e:	2200      	movs	r2, #0
 8001f50:	210d      	movs	r1, #13
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff54 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2122      	movs	r1, #34	; 0x22
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff4f 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN10RFM95_LoRa9endPacketEv>:
>>>>>>> origin/main



int RFM95_LoRa::endPacket(){
<<<<<<< HEAD
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001e30:	2283      	movs	r2, #131	; 0x83
 8001e32:	2101      	movs	r1, #1
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff41 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001e3a:	2112      	movs	r1, #18
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff6d 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d000      	beq.n	8001e58 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001e56:	e7f0      	b.n	8001e3a <_ZN10RFM95_LoRa9endPacketEv+0x12>
=======
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001f74:	2283      	movs	r2, #131	; 0x83
 8001f76:	2101      	movs	r1, #1
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff41 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001f7e:	2112      	movs	r1, #18
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff6d 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d000      	beq.n	8001f9c <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001f9a:	e7f0      	b.n	8001f7e <_ZN10RFM95_LoRa9endPacketEv+0x12>
>>>>>>> origin/main

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
<<<<<<< HEAD
 8001e58:	2208      	movs	r2, #8
 8001e5a:	2112      	movs	r1, #18
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZN10RFM95_LoRa11parsePacketEi>:
=======
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	2112      	movs	r1, #18
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff2d 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN10RFM95_LoRa11parsePacketEi>:
>>>>>>> origin/main



int RFM95_LoRa::parsePacket(int size)

{
<<<<<<< HEAD
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001e7a:	2112      	movs	r1, #18
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff4d 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001e82:	4603      	mov	r3, r0
 8001e84:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	dd0a      	ble.n	8001ea2 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 faae 	bl	80023ee <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	2122      	movs	r1, #34	; 0x22
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff0e 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001ea0:	e002      	b.n	8001ea8 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa8b 	bl	80023be <_ZN10RFM95_LoRa18explicitHeaderModeEv>
=======
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001fbe:	2112      	movs	r1, #18
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff4d 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd0a      	ble.n	8001fe6 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 faae 	bl	8002532 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2122      	movs	r1, #34	; 0x22
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff0e 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001fe4:	e002      	b.n	8001fec <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa8b 	bl	8002502 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
>>>>>>> origin/main
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
<<<<<<< HEAD
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	2112      	movs	r1, #18
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff03 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d026      	beq.n	8001f0e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d121      	bne.n	8001f0e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001ed8:	2122      	movs	r1, #34	; 0x22
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff1e 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e005      	b.n	8001ef2 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001ee6:	2113      	movs	r1, #19
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff17 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff11 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	210d      	movs	r1, #13
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fedb 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8e7 	bl	80020da <_ZN10RFM95_LoRa4idleEv>
 8001f0c:	e015      	b.n	8001f3a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001f0e:	2101      	movs	r1, #1
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff03 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b86      	cmp	r3, #134	; 0x86
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	210d      	movs	r1, #13
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fec6 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001f30:	2286      	movs	r2, #134	; 0x86
 8001f32:	2101      	movs	r1, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fec1 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZN10RFM95_LoRa5writeEh>:
=======
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2112      	movs	r1, #18
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff03 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d026      	beq.n	8002052 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d121      	bne.n	8002052 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 800201c:	2122      	movs	r1, #34	; 0x22
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff1e 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002024:	4603      	mov	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e005      	b.n	8002036 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 800202a:	2113      	movs	r1, #19
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff17 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002032:	4603      	mov	r3, r0
 8002034:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8002036:	2110      	movs	r1, #16
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff11 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	210d      	movs	r1, #13
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fedb 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8e7 	bl	800221e <_ZN10RFM95_LoRa4idleEv>
 8002050:	e015      	b.n	800207e <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8002052:	2101      	movs	r1, #1
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff03 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 800205a:	4603      	mov	r3, r0
 800205c:	2b86      	cmp	r3, #134	; 0x86
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	210d      	movs	r1, #13
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fec6 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8002074:	2286      	movs	r2, #134	; 0x86
 8002076:	2101      	movs	r1, #1
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fec1 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN10RFM95_LoRa5writeEh>:
>>>>>>> origin/main

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
<<<<<<< HEAD
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1cf9      	adds	r1, r7, #3
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_ZN10RFM95_LoRa5writeEPKhj>:
=======
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3304      	adds	r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1cf9      	adds	r1, r7, #3
 800209e:	2201      	movs	r2, #1
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_ZN10RFM95_LoRa5writeEPKhj>:
>>>>>>> origin/main



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
<<<<<<< HEAD
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001f76:	2122      	movs	r1, #34	; 0x22
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff fecf 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	2bff      	cmp	r3, #255	; 0xff
 8001f8a:	d903      	bls.n	8001f94 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001f92:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d20c      	bcs.n	8001fba <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff fe85 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e7ee      	b.n	8001f98 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
=======
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80020ba:	2122      	movs	r1, #34	; 0x22
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fecf 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 80020c2:	4603      	mov	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d903      	bls.n	80020d8 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80020d6:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d20c      	bcs.n	80020fe <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fe85 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e7ee      	b.n	80020dc <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
>>>>>>> origin/main
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
<<<<<<< HEAD
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2122      	movs	r1, #34	; 0x22
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fe76 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN10RFM95_LoRa9availableEv>:
=======
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4413      	add	r3, r2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	2122      	movs	r1, #34	; 0x22
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fe76 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZN10RFM95_LoRa9availableEv>:
>>>>>>> origin/main


int RFM95_LoRa::available()
{
<<<<<<< HEAD
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001fe2:	2113      	movs	r1, #19
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe99 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN10RFM95_LoRa4readEv>:
=======
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8002126:	2113      	movs	r1, #19
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe99 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	1ad3      	subs	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN10RFM95_LoRa4readEv>:
>>>>>>> origin/main



int RFM95_LoRa::read(){
<<<<<<< HEAD
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3308      	adds	r3, #8
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
 8002024:	e009      	b.n	800203a <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8002030:	2100      	movs	r1, #0
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fe72 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_ZN10RFM95_LoRa4peekEv>:
=======
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3308      	adds	r3, #8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	e009      	b.n	800217e <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8002174:	2100      	movs	r1, #0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fe72 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZN10RFM95_LoRa4peekEv>:
>>>>>>> origin/main



int RFM95_LoRa::peek(){
<<<<<<< HEAD
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3308      	adds	r3, #8
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e013      	b.n	8002094 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 800206c:	210d      	movs	r1, #13
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fe54 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002074:	4603      	mov	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8002078:	2100      	movs	r1, #0
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fe4e 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002080:	4603      	mov	r3, r0
 8002082:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	210d      	movs	r1, #13
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fe15 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dd0a      	ble.n	80020c2 <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f99e 	bl	80023ee <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	2122      	movs	r1, #34	; 0x22
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fdfe 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
 80020c0:	e002      	b.n	80020c8 <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f97b 	bl	80023be <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80020c8:	2285      	movs	r2, #133	; 0x85
 80020ca:	2101      	movs	r1, #1
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fdf5 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80020e2:	2281      	movs	r2, #129	; 0x81
 80020e4:	2101      	movs	r1, #1
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fde8 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZN10RFM95_LoRa5sleepEv>:
=======
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3308      	adds	r3, #8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e013      	b.n	80021d8 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 80021b0:	210d      	movs	r1, #13
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fe54 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 80021b8:	4603      	mov	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 80021bc:	2100      	movs	r1, #0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fe4e 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 80021c4:	4603      	mov	r3, r0
 80021c6:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	210d      	movs	r1, #13
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe15 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 80021d6:	7afb      	ldrb	r3, [r7, #11]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dd0a      	ble.n	8002206 <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f99e 	bl	8002532 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	2122      	movs	r1, #34	; 0x22
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fdfe 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8002204:	e002      	b.n	800220c <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f97b 	bl	8002502 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800220c:	2285      	movs	r2, #133	; 0x85
 800220e:	2101      	movs	r1, #1
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fdf5 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8002226:	2281      	movs	r2, #129	; 0x81
 8002228:	2101      	movs	r1, #1
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fde8 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZN10RFM95_LoRa5sleepEv>:
>>>>>>> origin/main
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
<<<<<<< HEAD
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	2101      	movs	r1, #1
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fddb 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZN10RFM95_LoRa10setTxPowerEii>:
=======
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	2101      	movs	r1, #1
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fddb 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN10RFM95_LoRa10setTxPowerEii>:
>>>>>>> origin/main



void RFM95_LoRa::setTxPower(int level, int outputPin){
<<<<<<< HEAD
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d116      	bne.n	800214e <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da02      	bge.n	800212c <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	e004      	b.n	8002136 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b0e      	cmp	r3, #14
 8002130:	dd01      	ble.n	8002136 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8002132:	230e      	movs	r3, #14
 8002134:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	b25b      	sxtb	r3, r3
 800213a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800213e:	b25b      	sxtb	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	2109      	movs	r1, #9
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff fdb8 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
=======
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da02      	bge.n	8002270 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	e004      	b.n	800227a <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b0e      	cmp	r3, #14
 8002274:	dd01      	ble.n	800227a <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8002276:	230e      	movs	r3, #14
 8002278:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b25b      	sxtb	r3, r3
 800227e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002282:	b25b      	sxtb	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	2109      	movs	r1, #9
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff fdb8 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
>>>>>>> origin/main
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
<<<<<<< HEAD
 800214c:	e018      	b.n	8002180 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	dc02      	bgt.n	800215a <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e004      	b.n	8002164 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b11      	cmp	r3, #17
 800215e:	dd01      	ble.n	8002164 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8002160:	2311      	movs	r3, #17
 8002162:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3b02      	subs	r3, #2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	b25b      	sxtb	r3, r3
 800216e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002172:	b25b      	sxtb	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	2109      	movs	r1, #9
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff fd9e 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN10RFM95_LoRa12setFrequencyEl>:
=======
 8002290:	e018      	b.n	80022c4 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	dc02      	bgt.n	800229e <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8002298:	2302      	movs	r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	e004      	b.n	80022a8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	dd01      	ble.n	80022a8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 80022a4:	2311      	movs	r3, #17
 80022a6:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b02      	subs	r3, #2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	2109      	movs	r1, #9
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fd9e 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZN10RFM95_LoRa12setFrequencyEl>:
>>>>>>> origin/main



void RFM95_LoRa::setFrequency(long frequency){
<<<<<<< HEAD
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002198:	6839      	ldr	r1, [r7, #0]
 800219a:	17c8      	asrs	r0, r1, #31
 800219c:	460a      	mov	r2, r1
 800219e:	4603      	mov	r3, r0
 80021a0:	1355      	asrs	r5, r2, #13
 80021a2:	04d4      	lsls	r4, r2, #19
 80021a4:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	4620      	mov	r0, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7fe f80d 	bl	80001cc <__aeabi_uldivmod>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	0c02      	lsrs	r2, r0, #16
 80021c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021cc:	0c0b      	lsrs	r3, r1, #16
 80021ce:	b2d3      	uxtb	r3, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	2106      	movs	r1, #6
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fd71 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80021da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	0a02      	lsrs	r2, r0, #8
 80021e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021ec:	0a0b      	lsrs	r3, r1, #8
 80021ee:	b2d3      	uxtb	r3, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	2107      	movs	r1, #7
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fd61 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80021fa:	7a3b      	ldrb	r3, [r7, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	2108      	movs	r1, #8
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fd5b 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	bf00      	nop
 8002210:	01e84800 	.word	0x01e84800

08002214 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:
=======
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	17c8      	asrs	r0, r1, #31
 80022e0:	460a      	mov	r2, r1
 80022e2:	4603      	mov	r3, r0
 80022e4:	1355      	asrs	r5, r2, #13
 80022e6:	04d4      	lsls	r4, r2, #19
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fd ff6b 	bl	80001cc <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80022fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	0c02      	lsrs	r2, r0, #16
 800230c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002310:	0c0b      	lsrs	r3, r1, #16
 8002312:	b2d3      	uxtb	r3, r2
 8002314:	461a      	mov	r2, r3
 8002316:	2106      	movs	r1, #6
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fd71 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 800231e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	0a02      	lsrs	r2, r0, #8
 800232c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002330:	0a0b      	lsrs	r3, r1, #8
 8002332:	b2d3      	uxtb	r3, r2
 8002334:	461a      	mov	r2, r3
 8002336:	2107      	movs	r1, #7
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fd61 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800233e:	7a3b      	ldrb	r3, [r7, #8]
 8002340:	461a      	mov	r2, r3
 8002342:	2108      	movs	r1, #8
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fd5b 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	01e84800 	.word	0x01e84800

08002358 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:
>>>>>>> origin/main



void RFM95_LoRa::setSpreadingFactor(int sf){
<<<<<<< HEAD
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b05      	cmp	r3, #5
 8002222:	dc02      	bgt.n	800222a <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8002224:	2306      	movs	r3, #6
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	e004      	b.n	8002234 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b0c      	cmp	r3, #12
 800222e:	dd01      	ble.n	8002234 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8002230:	230c      	movs	r3, #12
 8002232:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d10a      	bne.n	8002250 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 800223a:	22c5      	movs	r2, #197	; 0xc5
 800223c:	2131      	movs	r1, #49	; 0x31
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fd3c 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8002244:	220c      	movs	r2, #12
 8002246:	2137      	movs	r1, #55	; 0x37
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fd37 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
 800224e:	e009      	b.n	8002264 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8002250:	22c3      	movs	r2, #195	; 0xc3
 8002252:	2131      	movs	r1, #49	; 0x31
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fd31 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 800225a:	220a      	movs	r2, #10
 800225c:	2137      	movs	r1, #55	; 0x37
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fd2c 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8002264:	211e      	movs	r1, #30
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fd58 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 800226c:	4603      	mov	r3, r0
 800226e:	b25b      	sxtb	r3, r3
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	b25a      	sxtb	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	b25b      	sxtb	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b25b      	sxtb	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	211e      	movs	r1, #30
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd18 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f641 6278 	movw	r2, #7800	; 0x1e78
 80022a4:	4293      	cmp	r3, r2
 80022a6:	dc02      	bgt.n	80022ae <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e03f      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80022b4:	4293      	cmp	r3, r2
 80022b6:	dc02      	bgt.n	80022be <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e037      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dc02      	bgt.n	80022ce <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e02f      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f245 1240 	movw	r2, #20800	; 0x5140
 80022d4:	4293      	cmp	r3, r2
 80022d6:	dc02      	bgt.n	80022de <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 80022d8:	2303      	movs	r3, #3
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	e027      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80022e4:	4293      	cmp	r3, r2
 80022e6:	dc02      	bgt.n	80022ee <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80022e8:	2304      	movs	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e01f      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80022f4:	4293      	cmp	r3, r2
 80022f6:	dc02      	bgt.n	80022fe <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80022f8:	2305      	movs	r3, #5
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e017      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002304:	4293      	cmp	r3, r2
 8002306:	dc02      	bgt.n	800230e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8002308:	2306      	movs	r3, #6
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e00f      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	dc02      	bgt.n	800231c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8002316:	2307      	movs	r3, #7
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e008      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	dc02      	bgt.n	800232a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002324:	2308      	movs	r3, #8
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e001      	b.n	800232e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800232a:	2309      	movs	r3, #9
 800232c:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 800232e:	211d      	movs	r1, #29
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fcf3 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002336:	4603      	mov	r3, r0
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	b25a      	sxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	b25b      	sxtb	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b25b      	sxtb	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	211d      	movs	r1, #29
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fcb3 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0001e848 	.word	0x0001e848
 8002364:	0003d090 	.word	0x0003d090

08002368 <_ZN10RFM95_LoRa14setCodingRate4Ei>:
=======
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b05      	cmp	r3, #5
 8002366:	dc02      	bgt.n	800236e <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8002368:	2306      	movs	r3, #6
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	e004      	b.n	8002378 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	dd01      	ble.n	8002378 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8002374:	230c      	movs	r3, #12
 8002376:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d10a      	bne.n	8002394 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 800237e:	22c5      	movs	r2, #197	; 0xc5
 8002380:	2131      	movs	r1, #49	; 0x31
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fd3c 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8002388:	220c      	movs	r2, #12
 800238a:	2137      	movs	r1, #55	; 0x37
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fd37 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8002392:	e009      	b.n	80023a8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8002394:	22c3      	movs	r2, #195	; 0xc3
 8002396:	2131      	movs	r1, #49	; 0x31
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fd31 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 800239e:	220a      	movs	r2, #10
 80023a0:	2137      	movs	r1, #55	; 0x37
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fd2c 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80023a8:	211e      	movs	r1, #30
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fd58 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	b25a      	sxtb	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	211e      	movs	r1, #30
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fd18 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f641 6278 	movw	r2, #7800	; 0x1e78
 80023e8:	4293      	cmp	r3, r2
 80023ea:	dc02      	bgt.n	80023f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e03f      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80023f8:	4293      	cmp	r3, r2
 80023fa:	dc02      	bgt.n	8002402 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80023fc:	2301      	movs	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e037      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002408:	4293      	cmp	r3, r2
 800240a:	dc02      	bgt.n	8002412 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 800240c:	2302      	movs	r3, #2
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e02f      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f245 1240 	movw	r2, #20800	; 0x5140
 8002418:	4293      	cmp	r3, r2
 800241a:	dc02      	bgt.n	8002422 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 800241c:	2303      	movs	r3, #3
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e027      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002428:	4293      	cmp	r3, r2
 800242a:	dc02      	bgt.n	8002432 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 800242c:	2304      	movs	r3, #4
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e01f      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002438:	4293      	cmp	r3, r2
 800243a:	dc02      	bgt.n	8002442 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 800243c:	2305      	movs	r3, #5
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e017      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002448:	4293      	cmp	r3, r2
 800244a:	dc02      	bgt.n	8002452 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 800244c:	2306      	movs	r3, #6
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e00f      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	dc02      	bgt.n	8002460 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800245a:	2307      	movs	r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e008      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	dc02      	bgt.n	800246e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002468:	2308      	movs	r3, #8
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e001      	b.n	8002472 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800246e:	2309      	movs	r3, #9
 8002470:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8002472:	211d      	movs	r1, #29
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fcf3 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 800247a:	4603      	mov	r3, r0
 800247c:	b25b      	sxtb	r3, r3
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b25a      	sxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	b25b      	sxtb	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b25b      	sxtb	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	211d      	movs	r1, #29
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fcb3 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	0001e848 	.word	0x0001e848
 80024a8:	0003d090 	.word	0x0003d090

080024ac <_ZN10RFM95_LoRa14setCodingRate4Ei>:
>>>>>>> origin/main



void RFM95_LoRa::setCodingRate4(int denominator){
<<<<<<< HEAD
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b04      	cmp	r3, #4
 8002376:	dc02      	bgt.n	800237e <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8002378:	2305      	movs	r3, #5
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e004      	b.n	8002388 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b08      	cmp	r3, #8
 8002382:	dd01      	ble.n	8002388 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002384:	2308      	movs	r3, #8
 8002386:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	3b04      	subs	r3, #4
 800238c:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 800238e:	211d      	movs	r1, #29
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fcc3 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002396:	4603      	mov	r3, r0
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f023 030e 	bic.w	r3, r3, #14
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	211d      	movs	r1, #29
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fc83 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
=======
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	dc02      	bgt.n	80024c2 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80024bc:	2305      	movs	r3, #5
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	e004      	b.n	80024cc <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	dd01      	ble.n	80024cc <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 80024c8:	2308      	movs	r3, #8
 80024ca:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3b04      	subs	r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80024d2:	211d      	movs	r1, #29
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fcc3 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 80024da:	4603      	mov	r3, r0
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	f023 030e 	bic.w	r3, r3, #14
 80024e2:	b25a      	sxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	211d      	movs	r1, #29
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fc83 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
>>>>>>> origin/main
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
<<<<<<< HEAD
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80023cc:	211d      	movs	r1, #29
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fca4 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	211d      	movs	r1, #29
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fc6b 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80023fc:	211d      	movs	r1, #29
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fc8c 	bl	8001d1c <_ZN10RFM95_LoRa12readRegisterEh>
 8002404:	4603      	mov	r3, r0
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	211d      	movs	r1, #29
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fc53 	bl	8001cbc <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <_ZN10RFM95_LoRa7InitRFMEv>:
=======
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002510:	211d      	movs	r1, #29
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fca4 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002518:	4603      	mov	r3, r0
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	211d      	movs	r1, #29
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fc6b 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002540:	211d      	movs	r1, #29
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fc8c 	bl	8001e60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002548:	4603      	mov	r3, r0
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	211d      	movs	r1, #29
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fc53 	bl	8001e00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <_ZN10RFM95_LoRa7InitRFMEv>:
>>>>>>> origin/main
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
<<<<<<< HEAD
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 8002428:	4914      	ldr	r1, [pc, #80]	; (800247c <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff feac 	bl	8002188 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002430:	2201      	movs	r2, #1
 8002432:	2111      	movs	r1, #17
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fe6a 	bl	800210e <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800243a:	f647 2112 	movw	r1, #31250	; 0x7a12
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff28 	bl	8002294 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002444:	210c      	movs	r1, #12
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fee4 	bl	8002214 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 800244c:	2105      	movs	r1, #5
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff8a 	bl	8002368 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002454:	490a      	ldr	r1, [pc, #40]	; (8002480 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fc82 	bl	8001d60 <_ZN10RFM95_LoRa5beginEl>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	33bca100 	.word	0x33bca100
 8002480:	339e1c80 	.word	0x339e1c80

08002484 <_ZNK13DriveSettings16getClampingSpeedEv>:
=======
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 800256c:	4914      	ldr	r1, [pc, #80]	; (80025c0 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff feac 	bl	80022cc <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002574:	2201      	movs	r2, #1
 8002576:	2111      	movs	r1, #17
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fe6a 	bl	8002252 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800257e:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff28 	bl	80023d8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002588:	210c      	movs	r1, #12
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fee4 	bl	8002358 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002590:	2105      	movs	r1, #5
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff8a 	bl	80024ac <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002598:	490a      	ldr	r1, [pc, #40]	; (80025c4 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff fc82 	bl	8001ea4 <_ZN10RFM95_LoRa5beginEl>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	33bca100 	.word	0x33bca100
 80025c4:	339e1c80 	.word	0x339e1c80

080025c8 <_ZNK13DriveSettings16getClampingSpeedEv>:
>>>>>>> origin/main
 *  Created on: 22.10.2022
 *      Author: marce
 */
#include "DriveSettings.h"

uint16_t DriveSettings::getClampingSpeed() const {
<<<<<<< HEAD
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	891b      	ldrh	r3, [r3, #8]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	811a      	strh	r2, [r3, #8]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZNK13DriveSettings17getClampingTorqueEv>:
=======
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	891b      	ldrh	r3, [r3, #8]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	811a      	strh	r2, [r3, #8]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_ZNK13DriveSettings17getClampingTorqueEv>:
>>>>>>> origin/main



uint16_t DriveSettings::getClampingTorque() const {
<<<<<<< HEAD
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	889b      	ldrh	r3, [r3, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	809a      	strh	r2, [r3, #4]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_ZNK13DriveSettings16getDeviceAddressEv>:
=======
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	889b      	ldrh	r3, [r3, #4]
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	809a      	strh	r2, [r3, #4]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZNK13DriveSettings16getDeviceAddressEv>:
>>>>>>> origin/main



uint8_t DriveSettings::getDeviceAddress() const {
<<<<<<< HEAD
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	781b      	ldrb	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNK13DriveSettings12getInPosDiffEv>:
=======
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	781b      	ldrb	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_ZNK13DriveSettings12getInPosDiffEv>:
>>>>>>> origin/main
	this->deviceAddress = deviceAddress;
}



uint16_t DriveSettings::getInPosDiff() const {
<<<<<<< HEAD
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	899b      	ldrh	r3, [r3, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	819a      	strh	r2, [r3, #12]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_ZNK13DriveSettings18getOpeningDistanceEv>:
=======
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	899b      	ldrh	r3, [r3, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	819a      	strh	r2, [r3, #12]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZNK13DriveSettings18getOpeningDistanceEv>:
>>>>>>> origin/main



uint16_t DriveSettings::getOpeningDistance() const {
<<<<<<< HEAD
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	89db      	ldrh	r3, [r3, #14]
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	81da      	strh	r2, [r3, #14]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_ZNK13DriveSettings21getOverCurrentWarningEv>:
=======
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	return openingDistance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	89db      	ldrh	r3, [r3, #14]
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	81da      	strh	r2, [r3, #14]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZNK13DriveSettings21getOverCurrentWarningEv>:
>>>>>>> origin/main
void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold) {
	this->overCurrentTimeThreshold = overCurrentTimeThreshold;
}

uint16_t DriveSettings::getOverCurrentWarning() const {
<<<<<<< HEAD
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8a9b      	ldrh	r3, [r3, #20]
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	829a      	strh	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8adb      	ldrh	r3, [r3, #22]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	82da      	strh	r2, [r3, #22]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	895b      	ldrh	r3, [r3, #10]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	815a      	strh	r2, [r3, #10]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	88db      	ldrh	r3, [r3, #6]
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	80da      	strh	r2, [r3, #6]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	885b      	ldrh	r3, [r3, #2]
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	805a      	strh	r2, [r3, #2]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8a5b      	ldrh	r3, [r3, #18]
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	825a      	strh	r2, [r3, #18]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8a1b      	ldrh	r3, [r3, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	821a      	strh	r2, [r3, #16]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZN12DriveCommandC1Ev>:
=======
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8a9b      	ldrh	r3, [r3, #20]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	829a      	strh	r2, [r3, #20]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8adb      	ldrh	r3, [r3, #22]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	887a      	ldrh	r2, [r7, #2]
 8002716:	82da      	strh	r2, [r3, #22]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	895b      	ldrh	r3, [r3, #10]
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	815a      	strh	r2, [r3, #10]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	88db      	ldrh	r3, [r3, #6]
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	887a      	ldrh	r2, [r7, #2]
 8002782:	80da      	strh	r2, [r3, #6]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	885b      	ldrh	r3, [r3, #2]
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	805a      	strh	r2, [r3, #2]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8a5b      	ldrh	r3, [r3, #18]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	825a      	strh	r2, [r3, #18]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8a1b      	ldrh	r3, [r3, #16]
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	821a      	strh	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_ZN12DriveCommandC1Ev>:
>>>>>>> origin/main
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
<<<<<<< HEAD
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	709a      	strb	r2, [r3, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	70da      	strb	r2, [r3, #3]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	711a      	strb	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	715a      	strb	r2, [r3, #5]
{
}
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZN12DriveCommand7isCloseEv>:
=======
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	709a      	strb	r2, [r3, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	70da      	strb	r2, [r3, #3]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	711a      	strb	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	715a      	strb	r2, [r3, #5]
{
}
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_ZN12DriveCommand7isCloseEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
<<<<<<< HEAD
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	return close;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	701a      	strb	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_ZN12DriveCommand6isOpenEv>:
=======
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	return close;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	781b      	ldrb	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	701a      	strb	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_ZN12DriveCommand6isOpenEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
<<<<<<< HEAD
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
	return open;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	785b      	ldrb	r3, [r3, #1]
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	705a      	strb	r2, [r3, #1]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_ZN12DriveCommand8isEnableEv>:
=======
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return open;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	785b      	ldrb	r3, [r3, #1]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	705a      	strb	r2, [r3, #1]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_ZN12DriveCommand8isEnableEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
<<<<<<< HEAD
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	return enable;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	791b      	ldrb	r3, [r3, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	711a      	strb	r2, [r3, #4]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_ZN12DriveCommand7isResetEv>:
=======
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	return enable;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	791b      	ldrb	r3, [r3, #4]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	711a      	strb	r2, [r3, #4]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZN12DriveCommand7isResetEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
<<<<<<< HEAD
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	return reset;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	78db      	ldrb	r3, [r3, #3]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	70da      	strb	r2, [r3, #3]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_ZN12DriveCommand6isStopEv>:
=======
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return reset;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	78db      	ldrb	r3, [r3, #3]
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	70da      	strb	r2, [r3, #3]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_ZN12DriveCommand6isStopEv>:
>>>>>>> origin/main

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
<<<<<<< HEAD
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	return stop;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	795b      	ldrb	r3, [r3, #5]
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	715a      	strb	r2, [r3, #5]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_ZN12DriveCommand8setTeachEb>:
=======
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	return stop;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	795b      	ldrb	r3, [r3, #5]
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	715a      	strb	r2, [r3, #5]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZN12DriveCommand8setTeachEb>:
>>>>>>> origin/main
{
	return teach;
}

void DriveCommand::setTeach(bool teach)
{
<<<<<<< HEAD
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
		this->teach = teach;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	709a      	strb	r2, [r3, #2]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ZN11DriveStatus7isCloseEv>:
=======
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	70fb      	strb	r3, [r7, #3]
		this->teach = teach;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	709a      	strb	r2, [r3, #2]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN11DriveStatus7isCloseEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
<<<<<<< HEAD
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	return close;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	785b      	ldrb	r3, [r3, #1]
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	429a      	cmp	r2, r3
 8002880:	d005      	beq.n	800288e <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	751a      	strb	r2, [r3, #20]
	}
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <_ZN11DriveStatus6isOpenEv>:
=======
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	return close;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	785b      	ldrb	r3, [r3, #1]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d005      	beq.n	80029d2 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	751a      	strb	r2, [r3, #20]
	}
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_ZN11DriveStatus6isOpenEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
<<<<<<< HEAD
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
	return open;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	789b      	ldrb	r3, [r3, #2]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	789b      	ldrb	r3, [r3, #2]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	751a      	strb	r2, [r3, #20]
	}
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_ZN11DriveStatus8isEnableEv>:
=======
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	return open;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	789b      	ldrb	r3, [r3, #2]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	789b      	ldrb	r3, [r3, #2]
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d005      	beq.n	8002a18 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	751a      	strb	r2, [r3, #20]
	}
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN11DriveStatus8isEnableEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
<<<<<<< HEAD
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	return enable;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	795b      	ldrb	r3, [r3, #5]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	795b      	ldrb	r3, [r3, #5]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	429a      	cmp	r2, r3
 800290c:	d005      	beq.n	800291a <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	751a      	strb	r2, [r3, #20]
	}
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZN11DriveStatus7isResetEv>:
=======
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	return enable;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	795b      	ldrb	r3, [r3, #5]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	795b      	ldrb	r3, [r3, #5]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d005      	beq.n	8002a5e <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	751a      	strb	r2, [r3, #20]
	}
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_ZN11DriveStatus7isResetEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
<<<<<<< HEAD
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	return reset;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	791b      	ldrb	r3, [r3, #4]
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	791b      	ldrb	r3, [r3, #4]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	429a      	cmp	r2, r3
 8002952:	d005      	beq.n	8002960 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	751a      	strb	r2, [r3, #20]
	}
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_ZN11DriveStatus6isStopEv>:
=======
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	return reset;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	791b      	ldrb	r3, [r3, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	791b      	ldrb	r3, [r3, #4]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	751a      	strb	r2, [r3, #20]
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_ZN11DriveStatus6isStopEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	stop get/set
 ****************************************************************************************/
bool DriveStatus::isStop()
{
<<<<<<< HEAD
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	return stop;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	799b      	ldrb	r3, [r3, #6]
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	799b      	ldrb	r3, [r3, #6]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	429a      	cmp	r2, r3
 8002998:	d005      	beq.n	80029a6 <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	751a      	strb	r2, [r3, #20]
	}
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_ZN11DriveStatus7isTeachEv>:
=======
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	return stop;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	799b      	ldrb	r3, [r3, #6]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	799b      	ldrb	r3, [r3, #6]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d005      	beq.n	8002aea <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	751a      	strb	r2, [r3, #20]
	}
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_ZN11DriveStatus7isTeachEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
<<<<<<< HEAD
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return teach;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	78db      	ldrb	r3, [r3, #3]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	751a      	strb	r2, [r3, #20]
	}
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN11DriveStatus8getErrorEv>:
=======
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
	return teach;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	78db      	ldrb	r3, [r3, #3]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	78db      	ldrb	r3, [r3, #3]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	751a      	strb	r2, [r3, #20]
	}
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_ZN11DriveStatus8getErrorEv>:
>>>>>>> origin/main

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
<<<<<<< HEAD
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	return this->error;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	781b      	ldrb	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
	if (this->error != error)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d005      	beq.n	8002a32 <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x22>
=======
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	return this->error;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	781b      	ldrb	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
	if (this->error != error)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d002      	beq.n	8002b70 <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x1c>
>>>>>>> origin/main
	{
		this->error = error;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	701a      	strb	r2, [r3, #0]
		statusChanged = true;
<<<<<<< HEAD
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	751a      	strb	r2, [r3, #20]
	}
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_ZNK11DriveStatus9getStatusEv>:

uint8_t DriveStatus::getStatus() const
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	795b      	ldrb	r3, [r3, #5]
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	b25a      	sxtb	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	789b      	ldrb	r3, [r3, #2]
 8002a52:	019b      	lsls	r3, r3, #6
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	b25a      	sxtb	r2, r3
			| (uint8_t) close << 5 | (uint8_t) teach << 4 | (uint8_t) stop << 3;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	015b      	lsls	r3, r3, #5
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b25a      	sxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	78db      	ldrb	r3, [r3, #3]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b25a      	sxtb	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	b25b      	sxtb	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002a7e:	73fb      	strb	r3, [r7, #15]

	return result;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_ZNK11DriveStatus10getCurrentEv>:
=======
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	751a      	strb	r2, [r3, #20]
	}
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_ZNK11DriveStatus9getStatusEv>:

uint8_t DriveStatus::getStatus() const
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	795b      	ldrb	r3, [r3, #5]
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	789b      	ldrb	r3, [r3, #2]
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b25a      	sxtb	r2, r3
			| (uint8_t) close << 5 | (uint8_t) teach << 4 | (uint8_t) stop << 3;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b25a      	sxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b25a      	sxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	799b      	ldrb	r3, [r3, #6]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t) enable << 7 | (uint8_t) open << 6
 8002bbc:	73fb      	strb	r3, [r7, #15]

	return result;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_ZNK11DriveStatus10getCurrentEv>:
>>>>>>> origin/main
/*******************************************************************
 * Current settings
 ******************************************************************/

uint16_t DriveStatus::getCurrent() const
{
<<<<<<< HEAD
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	if (zeroCurrentValue > current)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	895a      	ldrh	r2, [r3, #10]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	891b      	ldrh	r3, [r3, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d908      	bls.n	8002ab4 <_ZNK11DriveStatus10getCurrentEv+0x26>
	{
		return (zeroCurrentValue - current) * ADC_2_CURRENT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	895a      	ldrh	r2, [r3, #10]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	891b      	ldrh	r3, [r3, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	e007      	b.n	8002ac4 <_ZNK11DriveStatus10getCurrentEv+0x36>
=======
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	if (zeroCurrentValue > current)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	895a      	ldrh	r2, [r3, #10]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	891b      	ldrh	r3, [r3, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d908      	bls.n	8002bf2 <_ZNK11DriveStatus10getCurrentEv+0x26>
	{
		return (zeroCurrentValue - current) * ADC_2_CURRENT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	895a      	ldrh	r2, [r3, #10]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	891b      	ldrh	r3, [r3, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	e007      	b.n	8002c02 <_ZNK11DriveStatus10getCurrentEv+0x36>
>>>>>>> origin/main
	}
	else
	{
		return (current - zeroCurrentValue) * ADC_2_CURRENT;
<<<<<<< HEAD
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	891a      	ldrh	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	895b      	ldrh	r3, [r3, #10]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b29b      	uxth	r3, r3
	}
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_ZN11DriveStatus10setCurrentEt>:

void DriveStatus::setCurrent(uint16_t current)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
	this->current = current;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	811a      	strh	r2, [r3, #8]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_ZNK11DriveStatus10getVoltageEv>:
=======
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	891a      	ldrh	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	895b      	ldrh	r3, [r3, #10]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	b29b      	uxth	r3, r3
	}
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_ZN11DriveStatus10setCurrentEt>:

void DriveStatus::setCurrent(uint16_t current)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]
	this->current = current;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	887a      	ldrh	r2, [r7, #2]
 8002c1e:	811a      	strh	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZNK11DriveStatus10getVoltageEv>:
>>>>>>> origin/main
/*******************************************************************
 * Voltage settings
 ******************************************************************/

uint16_t DriveStatus::getVoltage() const
{
<<<<<<< HEAD
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	return voltage * ADC_2_VOLTAGE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	899b      	ldrh	r3, [r3, #12]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	b29b      	uxth	r3, r3
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_ZN11DriveStatus10setVoltageEt>:

void DriveStatus::setVoltage(uint16_t voltageADC)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]
	this->voltage = voltage;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	899a      	ldrh	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	819a      	strh	r2, [r3, #12]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <_ZNK11DriveStatus11getPositionEv>:
=======
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	return voltage * ADC_2_VOLTAGE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	899b      	ldrh	r3, [r3, #12]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b29b      	uxth	r3, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_ZN11DriveStatus10setVoltageEt>:

void DriveStatus::setVoltage(uint16_t voltageADC)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
	this->voltage = voltage;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	899a      	ldrh	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	819a      	strh	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_ZNK11DriveStatus11getPositionEv>:
>>>>>>> origin/main
/*******************************************************************
 * Position settings
 ******************************************************************/

uint16_t DriveStatus::getPosition() const
{
<<<<<<< HEAD
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return position;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	89db      	ldrh	r3, [r3, #14]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_ZN11DriveStatus11setPositionEt>:

void DriveStatus::setPosition(uint16_t position)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	81da      	strh	r2, [r3, #14]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_ZN11DriveStatus8setInPosEb>:
=======
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	return position;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	89db      	ldrh	r3, [r3, #14]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <_ZN11DriveStatus11setPositionEt>:

void DriveStatus::setPosition(uint16_t position)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	81da      	strh	r2, [r3, #14]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_ZN11DriveStatus8setInPosEb>:
>>>>>>> origin/main
{
	return this->inPos;
}

void DriveStatus::setInPos(bool flag)
{
<<<<<<< HEAD
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
	this->inPos = flag;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	741a      	strb	r2, [r3, #16]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <_ZN11TaskHandler11UpdateTasksEv>:
=======
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
	this->inPos = flag;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	741a      	strb	r2, [r3, #16]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_ZN11TaskHandler11UpdateTasksEv>:
>>>>>>> origin/main
#include "TaskHandler.h"
#include "main.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
<<<<<<< HEAD
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	//1ms


	//2ms
	if(counter % 2 == 0){
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	899b      	ldrh	r3, [r3, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	711a      	strb	r2, [r3, #4]
	}
=======
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main


	//15ms
	if(counter % 15 == 0){
<<<<<<< HEAD
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	899a      	ldrh	r2, [r3, #12]
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 8002ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba4:	08d9      	lsrs	r1, r3, #3
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a5b      	subs	r3, r3, r1
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	709a      	strb	r2, [r3, #2]
=======
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	891a      	ldrh	r2, [r3, #8]
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <_ZN11TaskHandler11UpdateTasksEv+0xb8>)
 8002cca:	fba3 1302 	umull	r1, r3, r3, r2
 8002cce:	08d9      	lsrs	r1, r3, #3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a5b      	subs	r3, r3, r1
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <_ZN11TaskHandler11UpdateTasksEv+0x28>
		driveTask = true;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	709a      	strb	r2, [r3, #2]
>>>>>>> origin/main
	}

	//100ms
	if(counter % 100 == 0){
<<<<<<< HEAD
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	899b      	ldrh	r3, [r3, #12]
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 8002bc6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bca:	0952      	lsrs	r2, r2, #5
 8002bcc:	2164      	movs	r1, #100	; 0x64
 8002bce:	fb01 f202 	mul.w	r2, r1, r2
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <_ZN11TaskHandler11UpdateTasksEv+0x60>
		errorTask = true;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
=======
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	891b      	ldrh	r3, [r3, #8]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <_ZN11TaskHandler11UpdateTasksEv+0xbc>)
 8002cea:	fba2 1203 	umull	r1, r2, r2, r3
 8002cee:	0952      	lsrs	r2, r2, #5
 8002cf0:	2164      	movs	r1, #100	; 0x64
 8002cf2:	fb01 f202 	mul.w	r2, r1, r2
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <_ZN11TaskHandler11UpdateTasksEv+0x48>
		errorTask = true;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main
	}

	//250ms
	if(counter % 250 == 0){
<<<<<<< HEAD
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	899b      	ldrh	r3, [r3, #12]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002be6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bea:	0912      	lsrs	r2, r2, #4
 8002bec:	21fa      	movs	r1, #250	; 0xfa
 8002bee:	fb01 f202 	mul.w	r2, r1, r2
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <_ZN11TaskHandler11UpdateTasksEv+0x80>
		comTask = true;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	899b      	ldrh	r3, [r3, #12]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8002c06:	fba2 1203 	umull	r1, r2, r2, r3
 8002c0a:	0952      	lsrs	r2, r2, #5
 8002c0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c10:	fb01 f202 	mul.w	r2, r1, r2
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		ledTask = true;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	715a      	strb	r2, [r3, #5]
=======
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	891b      	ldrh	r3, [r3, #8]
 8002d08:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <_ZN11TaskHandler11UpdateTasksEv+0xc0>)
 8002d0a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0e:	0912      	lsrs	r2, r2, #4
 8002d10:	21fa      	movs	r1, #250	; 0xfa
 8002d12:	fb01 f202 	mul.w	r2, r1, r2
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <_ZN11TaskHandler11UpdateTasksEv+0x68>
		comTask = true;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	891b      	ldrh	r3, [r3, #8]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_ZN11TaskHandler11UpdateTasksEv+0xc0>)
 8002d2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d2e:	0952      	lsrs	r2, r2, #5
 8002d30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d34:	fb01 f202 	mul.w	r2, r1, r2
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_ZN11TaskHandler11UpdateTasksEv+0x8a>
		ledTask = true;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	70da      	strb	r2, [r3, #3]
>>>>>>> origin/main
	}

	//increment counter
	if(counter > 2999){
<<<<<<< HEAD
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	899b      	ldrh	r3, [r3, #12]
 8002c26:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d903      	bls.n	8002c36 <_ZN11TaskHandler11UpdateTasksEv+0xb6>
		counter = 1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	819a      	strh	r2, [r3, #12]
=======
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	891b      	ldrh	r3, [r3, #8]
 8002d4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d903      	bls.n	8002d5a <_ZN11TaskHandler11UpdateTasksEv+0x9e>
		counter = 1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	811a      	strh	r2, [r3, #8]
>>>>>>> origin/main
	}else{
		counter++;
	}

}
<<<<<<< HEAD
 8002c34:	e005      	b.n	8002c42 <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		counter++;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	899b      	ldrh	r3, [r3, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	819a      	strh	r2, [r3, #12]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	88888889 	.word	0x88888889
 8002c54:	51eb851f 	.word	0x51eb851f
 8002c58:	10624dd3 	.word	0x10624dd3

08002c5c <_ZN11TaskHandler9isComTaskEv>:
=======
 8002d58:	e005      	b.n	8002d66 <_ZN11TaskHandler11UpdateTasksEv+0xaa>
		counter++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	891b      	ldrh	r3, [r3, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	811a      	strh	r2, [r3, #8]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	88888889 	.word	0x88888889
 8002d78:	51eb851f 	.word	0x51eb851f
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <_ZN11TaskHandler9isComTaskEv>:
>>>>>>> origin/main



bool TaskHandler::isComTask()  {
<<<<<<< HEAD
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	79db      	ldrb	r3, [r3, #7]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	789b      	ldrb	r3, [r3, #2]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7a1b      	ldrb	r3, [r3, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	799b      	ldrb	r3, [r3, #6]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_ZN11TaskHandler9isLEDTaskEv>:
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}

bool TaskHandler::isLEDTask(){
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	795b      	ldrb	r3, [r3, #5]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7adb      	ldrb	r3, [r3, #11]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>:
=======
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	795b      	ldrb	r3, [r3, #5]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	799b      	ldrb	r3, [r3, #6]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	791b      	ldrb	r3, [r3, #4]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_ZN11TaskHandler9isLEDTaskEv>:


bool TaskHandler::isLEDTask(){
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	78db      	ldrb	r3, [r3, #3]
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	79db      	ldrb	r3, [r3, #7]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	70da      	strb	r2, [r3, #3]
	return ledTaskTemp;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_ZN11TaskHandler16setComTaskEnableEb>:
>>>>>>> origin/main




<<<<<<< HEAD
void TaskHandler::setAdcUpdateTaskEnable(bool adcUpdateTaskEnable ) {
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
	this->adcUpdateTaskEnable = adcUpdateTaskEnable;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	729a      	strb	r2, [r3, #10]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_ZN11TaskHandler16setComTaskEnableEb>:


void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
	this->comTaskEnable = comTaskEnable;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	71da      	strb	r2, [r3, #7]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_ZN11TaskHandler18setDriveTaskEnableEb>:


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	721a      	strb	r2, [r3, #8]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZN11TaskHandler18setErrorTaskEnableEb>:


void TaskHandler::setErrorTaskEnable(bool errorTaskEnable ) {
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	70fb      	strb	r3, [r7, #3]
	this->errorTaskEnable = errorTaskEnable;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	719a      	strb	r2, [r3, #6]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_ZN11TaskHandler21setIoUpdateTaskEnableEb>:


void TaskHandler::setIoUpdateTaskEnable(bool ioUpdateTaskEnable ) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
	this->ioUpdateTaskEnable = ioUpdateTaskEnable;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	725a      	strb	r2, [r3, #9]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_ZN11TaskHandler16setLEDTaskEnableEb>:

void TaskHandler::setLEDTaskEnable(bool ledTaskEnable){
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
	this->ledTaskEnable = ledTaskEnable;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	72da      	strb	r2, [r3, #11]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_ZN13TypeConverter12uint16ToByteEPhth>:
=======

void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
	this->comTaskEnable = comTaskEnable;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	715a      	strb	r2, [r3, #5]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_ZN11TaskHandler18setDriveTaskEnableEb>:


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	719a      	strb	r2, [r3, #6]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_ZN11TaskHandler18setErrorTaskEnableEb>:


void TaskHandler::setErrorTaskEnable(bool errorTaskEnable ) {
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
	this->errorTaskEnable = errorTaskEnable;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	711a      	strb	r2, [r3, #4]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_ZN11TaskHandler16setLEDTaskEnableEb>:



void TaskHandler::setLEDTaskEnable(bool ledTaskEnable){
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
	this->ledTaskEnable = ledTaskEnable;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	71da      	strb	r2, [r3, #7]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_ZN13TypeConverter12uint16ToByteEPhth>:
>>>>>>> origin/main
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
<<<<<<< HEAD
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	787b      	ldrb	r3, [r7, #1]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	b2ca      	uxtb	r2, r1
 8002e04:	701a      	strb	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <MX_ADC1_Init>:
=======
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	787b      	ldrb	r3, [r7, #1]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	b2ca      	uxtb	r2, r1
 8002eec:	701a      	strb	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <MX_ADC1_Init>:
>>>>>>> origin/main
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
=======
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
<<<<<<< HEAD
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
 8002e34:	615a      	str	r2, [r3, #20]
=======
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	615a      	str	r2, [r3, #20]
>>>>>>> origin/main

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e38:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <MX_ADC1_Init+0x104>)
 8002e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e56:	2204      	movs	r2, #4
 8002e58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e68:	2202      	movs	r2, #2
 8002e6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e76:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e9a:	481e      	ldr	r0, [pc, #120]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002e9c:	f001 f8fc 	bl	8004098 <HAL_ADC_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002ea6:	f000 fa2f 	bl	8003308 <Error_Handler>
=======
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f20:	4a37      	ldr	r2, [pc, #220]	; (8003000 <MX_ADC1_Init+0x104>)
 8002f22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f3e:	2204      	movs	r2, #4
 8002f40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002f4e:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f50:	2202      	movs	r2, #2
 8002f52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f5e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f82:	481e      	ldr	r0, [pc, #120]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f84:	f001 f8c8 	bl	8004118 <HAL_ADC_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002f8e:	f000 fa27 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
<<<<<<< HEAD
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4817      	ldr	r0, [pc, #92]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002eb6:	f002 fc17 	bl	80056e8 <HAL_ADCEx_MultiModeConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002ec0:	f000 fa22 	bl	8003308 <Error_Handler>
=======
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4817      	ldr	r0, [pc, #92]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002f9e:	f002 f98d 	bl	80052bc <HAL_ADCEx_MultiModeConfigChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002fa8:	f000 fa1a 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
<<<<<<< HEAD
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <MX_ADC1_Init+0x108>)
 8002ec6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ec8:	2306      	movs	r3, #6
 8002eca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ed0:	237f      	movs	r3, #127	; 0x7f
 8002ed2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002ee2:	f001 fd77 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002eec:	f000 fa0c 	bl	8003308 <Error_Handler>
=======
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_ADC1_Init+0x108>)
 8002fae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fb0:	2306      	movs	r3, #6
 8002fb2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002fb8:	237f      	movs	r3, #127	; 0x7f
 8002fba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002fca:	f001 fb1f 	bl	800460c <HAL_ADC_ConfigChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002fd4:	f000 fa04 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
<<<<<<< HEAD
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_ADC1_Init+0x10c>)
 8002ef2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_ADC1_Init+0x100>)
 8002efe:	f001 fd69 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002f08:	f000 f9fe 	bl	8003308 <Error_Handler>
=======
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_ADC1_Init+0x10c>)
 8002fda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002fdc:	230c      	movs	r3, #12
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_ADC1_Init+0x100>)
 8002fe6:	f001 fb11 	bl	800460c <HAL_ADC_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002ff0:	f000 f9f6 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8002f0c:	bf00      	nop
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000214 	.word	0x20000214
 8002f18:	50040000 	.word	0x50040000
 8002f1c:	19200040 	.word	0x19200040
 8002f20:	1d500080 	.word	0x1d500080

08002f24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <HAL_ADC_MspInit+0xdc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d157      	bne.n	8002ff6 <HAL_ADC_MspInit+0xd2>
=======
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000214 	.word	0x20000214
 8003000:	50040000 	.word	0x50040000
 8003004:	19200040 	.word	0x19200040
 8003008:	1d500080 	.word	0x1d500080

0800300c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_ADC_MspInit+0xcc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d14f      	bne.n	80030ce <HAL_ADC_MspInit+0xc2>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b29      	ldr	r3, [pc, #164]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	4a28      	ldr	r2, [pc, #160]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_ADC_MspInit+0xe0>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
=======
 800302e:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 8003034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_ADC_MspInit+0xd0>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
<<<<<<< HEAD
 8002f76:	2306      	movs	r3, #6
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f7a:	230b      	movs	r3, #11
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8c:	f002 ff98 	bl	8005ec0 <HAL_GPIO_Init>
=======
 800305e:	2306      	movs	r3, #6
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003062:	230b      	movs	r3, #11
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003074:	f002 fd0e 	bl	8005a94 <HAL_GPIO_Init>
>>>>>>> origin/main

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
<<<<<<< HEAD
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002f92:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_ADC_MspInit+0xe8>)
 8002f94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fca:	480f      	ldr	r0, [pc, #60]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fcc:	f002 fd42 	bl	8005a54 <HAL_DMA_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8002fd6:	f000 f997 	bl	8003308 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fde:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fe0:	4a09      	ldr	r2, [pc, #36]	; (8003008 <HAL_ADC_MspInit+0xe4>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6293      	str	r3, [r2, #40]	; 0x28
=======
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_ADC_MspInit+0xd8>)
 800307c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 8003098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030b4:	f002 fab8 	bl	8005628 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80030be:	f000 f98f 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80030c8:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_ADC_MspInit+0xd4>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6293      	str	r3, [r2, #40]	; 0x28
>>>>>>> origin/main

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2012      	movs	r0, #18
 8002fec:	f002 fcfb 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ff0:	2012      	movs	r0, #18
 8002ff2:	f002 fd14 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002ff6:	bf00      	nop
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	50040000 	.word	0x50040000
 8003004:	40021000 	.word	0x40021000
 8003008:	20000278 	.word	0x20000278
 800300c:	40020008 	.word	0x40020008

08003010 <MX_DMA_Init>:
=======
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	50040000 	.word	0x50040000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	20000278 	.word	0x20000278
 80030e4:	40020008 	.word	0x40020008

080030e8 <MX_DMA_Init>:
>>>>>>> origin/main

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MX_DMA_Init+0x38>)
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <MX_DMA_Init+0x38>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6493      	str	r3, [r2, #72]	; 0x48
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <MX_DMA_Init+0x38>)
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
=======
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_DMA_Init+0x38>)
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <MX_DMA_Init+0x38>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6493      	str	r3, [r2, #72]	; 0x48
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_DMA_Init+0x38>)
 80030fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
>>>>>>> origin/main

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
<<<<<<< HEAD
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	200b      	movs	r0, #11
 8003034:	f002 fcd7 	bl	80059e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003038:	200b      	movs	r0, #11
 800303a:	f002 fcf0 	bl	8005a1e <HAL_NVIC_EnableIRQ>

}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000

0800304c <MX_GPIO_Init>:
=======
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	200b      	movs	r0, #11
 800310c:	f002 fa55 	bl	80055ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003110:	200b      	movs	r0, #11
 8003112:	f002 fa6e 	bl	80055f2 <HAL_NVIC_EnableIRQ>

}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <MX_GPIO_Init>:
>>>>>>> origin/main
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003062:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306e:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <MX_GPIO_Init+0x14c>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4a46      	ldr	r2, [pc, #280]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003086:	4b44      	ldr	r3, [pc, #272]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <MX_GPIO_Init+0x14c>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <MX_GPIO_Init+0x14c>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <MX_GPIO_Init+0x14c>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <MX_GPIO_Init+0x14c>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <MX_GPIO_Init+0x14c>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2119      	movs	r1, #25
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ca:	f003 f883 	bl	80061d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2190      	movs	r1, #144	; 0x90
 80030d2:	4832      	ldr	r0, [pc, #200]	; (800319c <MX_GPIO_Init+0x150>)
 80030d4:	f003 f87e 	bl	80061d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 80030d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	482c      	ldr	r0, [pc, #176]	; (80031a0 <MX_GPIO_Init+0x154>)
 80030ee:	f002 fee7 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 80030f2:	2319      	movs	r3, #25
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2301      	movs	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310c:	f002 fed8 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8003110:	2323      	movs	r3, #35	; 0x23
 8003112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	481e      	ldr	r0, [pc, #120]	; (800319c <MX_GPIO_Init+0x150>)
 8003124:	f002 fecc 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312e:	2303      	movs	r3, #3
 8003130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003140:	f002 febe 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 8003144:	2390      	movs	r3, #144	; 0x90
 8003146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4810      	ldr	r0, [pc, #64]	; (800319c <MX_GPIO_Init+0x150>)
 800315c:	f002 feb0 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003160:	2340      	movs	r3, #64	; 0x40
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003164:	2303      	movs	r3, #3
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4619      	mov	r1, r3
 8003172:	480a      	ldr	r0, [pc, #40]	; (800319c <MX_GPIO_Init+0x150>)
 8003174:	f002 fea4 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003178:	2308      	movs	r3, #8
 800317a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800317c:	2303      	movs	r3, #3
 800317e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	4806      	ldr	r0, [pc, #24]	; (80031a4 <MX_GPIO_Init+0x158>)
 800318c:	f002 fe98 	bl	8005ec0 <HAL_GPIO_Init>

}
 8003190:	bf00      	nop
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	48000400 	.word	0x48000400
 80031a0:	48000800 	.word	0x48000800
 80031a4:	48001c00 	.word	0x48001c00

080031a8 <main>:
=======
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <MX_GPIO_Init+0x14c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	4a4c      	ldr	r2, [pc, #304]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	4a46      	ldr	r2, [pc, #280]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <MX_GPIO_Init+0x14c>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a40      	ldr	r2, [pc, #256]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	4a3a      	ldr	r2, [pc, #232]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <MX_GPIO_Init+0x14c>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2119      	movs	r1, #25
 800319e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a2:	f002 fe01 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2190      	movs	r1, #144	; 0x90
 80031aa:	4832      	ldr	r0, [pc, #200]	; (8003274 <MX_GPIO_Init+0x150>)
 80031ac:	f002 fdfc 	bl	8005da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 80031b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	482c      	ldr	r0, [pc, #176]	; (8003278 <MX_GPIO_Init+0x154>)
 80031c6:	f002 fc65 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 80031ca:	2319      	movs	r3, #25
 80031cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f002 fc56 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 80031e8:	2323      	movs	r3, #35	; 0x23
 80031ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	481e      	ldr	r0, [pc, #120]	; (8003274 <MX_GPIO_Init+0x150>)
 80031fc:	f002 fc4a 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003206:	2303      	movs	r3, #3
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003218:	f002 fc3c 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 800321c:	2390      	movs	r3, #144	; 0x90
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003220:	2301      	movs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4810      	ldr	r0, [pc, #64]	; (8003274 <MX_GPIO_Init+0x150>)
 8003234:	f002 fc2e 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003238:	2340      	movs	r3, #64	; 0x40
 800323a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323c:	2303      	movs	r3, #3
 800323e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	480a      	ldr	r0, [pc, #40]	; (8003274 <MX_GPIO_Init+0x150>)
 800324c:	f002 fc22 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003250:	2308      	movs	r3, #8
 8003252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003254:	2303      	movs	r3, #3
 8003256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4806      	ldr	r0, [pc, #24]	; (800327c <MX_GPIO_Init+0x158>)
 8003264:	f002 fc16 	bl	8005a94 <HAL_GPIO_Init>

}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	48000400 	.word	0x48000400
 8003278:	48000800 	.word	0x48000800
 800327c:	48001c00 	.word	0x48001c00

08003280 <main>:
>>>>>>> origin/main
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
=======
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80031ac:	f000 fc83 	bl	8003ab6 <HAL_Init>
=======
 8003284:	f000 fc79 	bl	8003b7a <HAL_Init>
>>>>>>> origin/main
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80031b0:	f000 f818 	bl	80031e4 <_Z18SystemClock_Configv>
=======
 8003288:	f000 f818 	bl	80032bc <_Z18SystemClock_Configv>
>>>>>>> origin/main
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80031b4:	f7ff ff4a 	bl	800304c <MX_GPIO_Init>
  MX_ADC1_Init();
 80031b8:	f7ff fe2c 	bl	8002e14 <MX_ADC1_Init>
  MX_DMA_Init();
 80031bc:	f7ff ff28 	bl	8003010 <MX_DMA_Init>
  MX_SPI1_Init();
 80031c0:	f000 f8c6 	bl	8003350 <MX_SPI1_Init>
  MX_TIM1_Init();
 80031c4:	f000 fa32 	bl	800362c <MX_TIM1_Init>
  MX_TIM2_Init();
 80031c8:	f000 fa8a 	bl	80036e0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80031cc:	f00b fbdc 	bl	800e988 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80031d0:	f000 faec 	bl	80037ac <MX_TIM6_Init>
  MX_TIM16_Init();
 80031d4:	f000 fb20 	bl	8003818 <MX_TIM16_Init>
=======
 800328c:	f7ff ff4a 	bl	8003124 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003290:	f7ff fe34 	bl	8002efc <MX_ADC1_Init>
  MX_DMA_Init();
 8003294:	f7ff ff28 	bl	80030e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8003298:	f000 f8c6 	bl	8003428 <MX_SPI1_Init>
  MX_TIM1_Init();
 800329c:	f000 fa28 	bl	80036f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80032a0:	f000 fa80 	bl	80037a4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80032a4:	f00b f95a 	bl	800e55c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80032a8:	f000 fae2 	bl	8003870 <MX_TIM6_Init>
  MX_TIM16_Init();
 80032ac:	f000 fb16 	bl	80038dc <MX_TIM16_Init>
>>>>>>> origin/main


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
<<<<<<< HEAD
 80031d8:	4801      	ldr	r0, [pc, #4]	; (80031e0 <main+0x38>)
 80031da:	f7fd facf 	bl	800077c <_ZN7AppMain7StartupEv>
=======
 80032b0:	4801      	ldr	r0, [pc, #4]	; (80032b8 <main+0x38>)
 80032b2:	f7fd fa55 	bl	8000760 <_ZN7AppMain7StartupEv>
>>>>>>> origin/main

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 80031de:	e7fe      	b.n	80031de <main+0x36>
 80031e0:	200002c0 	.word	0x200002c0

080031e4 <_Z18SystemClock_Configv>:
=======
 80032b6:	e7fe      	b.n	80032b6 <main+0x36>
 80032b8:	200002c0 	.word	0x200002c0

080032bc <_Z18SystemClock_Configv>:
>>>>>>> origin/main
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b096      	sub	sp, #88	; 0x58
 80031e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	2244      	movs	r2, #68	; 0x44
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00c f9e0 	bl	800f5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f8:	463b      	mov	r3, r7
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]
=======
 80032bc:	b580      	push	{r7, lr}
 80032be:	b096      	sub	sp, #88	; 0x58
 80032c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	2244      	movs	r2, #68	; 0x44
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f00b ff5e 	bl	800f18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d0:	463b      	mov	r3, r7
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< HEAD
 8003206:	f44f 7000 	mov.w	r0, #512	; 0x200
 800320a:	f004 fdaf 	bl	8007d6c <HAL_PWREx_ControlVoltageScaling>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800321e:	f000 f873 	bl	8003308 <Error_Handler>
=======
 80032de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032e2:	f004 fb2d 	bl	8007940 <HAL_PWREx_ControlVoltageScaling>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80032f6:	f000 f873 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
<<<<<<< HEAD
 8003222:	2312      	movs	r3, #18
 8003224:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003230:	2301      	movs	r3, #1
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003238:	23b0      	movs	r3, #176	; 0xb0
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800323c:	2302      	movs	r3, #2
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003240:	2302      	movs	r3, #2
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003248:	2308      	movs	r3, #8
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800324c:	2302      	movs	r3, #2
 800324e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003250:	2302      	movs	r3, #2
 8003252:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fded 	bl	8007e38 <HAL_RCC_OscConfig>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800326e:	f000 f84b 	bl	8003308 <Error_Handler>
=======
 80032fa:	2312      	movs	r3, #18
 80032fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003308:	2301      	movs	r3, #1
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8003310:	23b0      	movs	r3, #176	; 0xb0
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003314:	2302      	movs	r3, #2
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003318:	2302      	movs	r3, #2
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800331c:	2301      	movs	r3, #1
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003320:	2308      	movs	r3, #8
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003324:	2302      	movs	r3, #2
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003328:	2302      	movs	r3, #2
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fb6b 	bl	8007a0c <HAL_RCC_OscConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8003346:	f000 f84b 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8003272:	230f      	movs	r3, #15
 8003274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003276:	2303      	movs	r3, #3
 8003278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003286:	463b      	mov	r3, r7
 8003288:	2103      	movs	r1, #3
 800328a:	4618      	mov	r0, r3
 800328c:	f005 fa36 	bl	80086fc <HAL_RCC_ClockConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80032a0:	f000 f832 	bl	8003308 <Error_Handler>
  }
}
 80032a4:	bf00      	nop
 80032a6:	3758      	adds	r7, #88	; 0x58
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_PeriodElapsedCallback>:
=======
 800334a:	230f      	movs	r3, #15
 800334c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334e:	2303      	movs	r3, #3
 8003350:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800335e:	463b      	mov	r3, r7
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f004 ffb4 	bl	80082d0 <HAL_RCC_ClockConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003378:	f000 f832 	bl	80033e0 <Error_Handler>
  }
}
 800337c:	bf00      	nop
 800337e:	3758      	adds	r7, #88	; 0x58
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> origin/main

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
<<<<<<< HEAD
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d102      	bne.n	80032c4 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 80032be:	4804      	ldr	r0, [pc, #16]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80032c0:	f7ff fc5e 	bl	8002b80 <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40014400 	.word	0x40014400
 80032d0:	200002c0 	.word	0x200002c0

080032d4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a06      	ldr	r2, [pc, #24]	; (80032fc <HAL_ADC_ConvCpltCallback+0x28>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d106      	bne.n	80032f4 <HAL_ADC_ConvCpltCallback+0x20>
		HAL_ADC_Stop_DMA(&hadc1);
 80032e6:	4806      	ldr	r0, [pc, #24]	; (8003300 <HAL_ADC_ConvCpltCallback+0x2c>)
 80032e8:	f001 f8da 	bl	80044a0 <HAL_ADC_Stop_DMA>
		appMain.ADCRead(hadc);
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <HAL_ADC_ConvCpltCallback+0x30>)
 80032f0:	f7fd fbda 	bl	8000aa8 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>
	}
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	50040000 	.word	0x50040000
 8003300:	20000214 	.word	0x20000214
 8003304:	200002c0 	.word	0x200002c0

08003308 <Error_Handler>:
=======
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d102      	bne.n	800339c <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 8003396:	4804      	ldr	r0, [pc, #16]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003398:	f7ff fc90 	bl	8002cbc <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40014400 	.word	0x40014400
 80033a8:	200002c0 	.word	0x200002c0

080033ac <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <HAL_ADC_ConvCpltCallback+0x28>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d106      	bne.n	80033cc <HAL_ADC_ConvCpltCallback+0x20>
		HAL_ADC_Stop_DMA(&hadc1);
 80033be:	4806      	ldr	r0, [pc, #24]	; (80033d8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80033c0:	f001 f8ae 	bl	8004520 <HAL_ADC_Stop_DMA>
		appMain.ADCRead(hadc);
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <HAL_ADC_ConvCpltCallback+0x30>)
 80033c8:	f7fd fb84 	bl	8000ad4 <_ZN7AppMain7ADCReadEP17ADC_HandleTypeDef>
	}
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	50040000 	.word	0x50040000
 80033d8:	20000214 	.word	0x20000214
 80033dc:	200002c0 	.word	0x200002c0

080033e0 <Error_Handler>:
>>>>>>> origin/main
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
=======
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
=======
 80033e4:	b672      	cpsid	i
}
 80033e6:	bf00      	nop
>>>>>>> origin/main
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8003310:	e7fe      	b.n	8003310 <Error_Handler+0x8>
	...

08003314 <_Z41__static_initialization_and_destruction_0ii>:
=======
 80033e8:	e7fe      	b.n	80033e8 <Error_Handler+0x8>
	...

080033ec <_Z41__static_initialization_and_destruction_0ii>:
>>>>>>> origin/main
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332a:	4293      	cmp	r3, r2
 800332c:	d102      	bne.n	8003334 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 800332e:	4803      	ldr	r0, [pc, #12]	; (800333c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003330:	f7fd f982 	bl	8000638 <_ZN7AppMainC1Ev>
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	200002c0 	.word	0x200002c0

08003340 <_GLOBAL__sub_I_appMain>:
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
 8003344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003348:	2001      	movs	r0, #1
 800334a:	f7ff ffe3 	bl	8003314 <_Z41__static_initialization_and_destruction_0ii>
 800334e:	bd80      	pop	{r7, pc}

08003350 <MX_SPI1_Init>:
=======
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003402:	4293      	cmp	r3, r2
 8003404:	d102      	bne.n	800340c <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003406:	4803      	ldr	r0, [pc, #12]	; (8003414 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003408:	f7fd f90a 	bl	8000620 <_ZN7AppMainC1Ev>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200002c0 	.word	0x200002c0

08003418 <_GLOBAL__sub_I_appMain>:
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
 800341c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003420:	2001      	movs	r0, #1
 8003422:	f7ff ffe3 	bl	80033ec <_Z41__static_initialization_and_destruction_0ii>
 8003426:	bd80      	pop	{r7, pc}

08003428 <MX_SPI1_Init>:
>>>>>>> origin/main

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
=======
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <MX_SPI1_Init+0x78>)
 8003358:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <MX_SPI1_Init+0x74>)
 800335c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003360:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <MX_SPI1_Init+0x74>)
 800336a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800336e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <MX_SPI1_Init+0x74>)
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <MX_SPI1_Init+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <MX_SPI1_Init+0x74>)
 8003398:	2200      	movs	r2, #0
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <MX_SPI1_Init+0x74>)
 800339e:	2207      	movs	r2, #7
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <MX_SPI1_Init+0x74>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <MX_SPI1_Init+0x74>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <MX_SPI1_Init+0x74>)
 80033b0:	f005 fd16 	bl	8008de0 <HAL_SPI_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033ba:	f7ff ffa5 	bl	8003308 <Error_Handler>
=======
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_SPI1_Init+0x74>)
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <MX_SPI1_Init+0x78>)
 8003430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <MX_SPI1_Init+0x74>)
 8003434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_SPI1_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_SPI1_Init+0x74>)
 8003442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <MX_SPI1_Init+0x74>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <MX_SPI1_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_SPI1_Init+0x74>)
 8003456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <MX_SPI1_Init+0x74>)
 800345e:	2220      	movs	r2, #32
 8003460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_SPI1_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <MX_SPI1_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <MX_SPI1_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <MX_SPI1_Init+0x74>)
 8003476:	2207      	movs	r2, #7
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <MX_SPI1_Init+0x74>)
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <MX_SPI1_Init+0x74>)
 8003482:	2200      	movs	r2, #0
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_SPI1_Init+0x74>)
 8003488:	f005 fa94 	bl	80089b4 <HAL_SPI_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003492:	f7ff ffa5 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200003a0 	.word	0x200003a0
 80033c8:	40013000 	.word	0x40013000

080033cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_SPI_MspInit+0x7c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d128      	bne.n	8003440 <HAL_SPI_MspInit+0x74>
=======
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000039c 	.word	0x2000039c
 80034a0:	40013000 	.word	0x40013000

080034a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_SPI_MspInit+0x7c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d128      	bne.n	8003518 <HAL_SPI_MspInit+0x74>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_SPI_MspInit+0x80>)
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <HAL_SPI_MspInit+0x80>)
 80033f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f8:	6613      	str	r3, [r2, #96]	; 0x60
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_SPI_MspInit+0x80>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_SPI_MspInit+0x80>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_SPI_MspInit+0x80>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_SPI_MspInit+0x80>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
=======
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034d0:	6613      	str	r3, [r2, #96]	; 0x60
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_SPI_MspInit+0x80>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 800341e:	23e0      	movs	r3, #224	; 0xe0
 8003420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800342e:	2305      	movs	r3, #5
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343c:	f002 fd40 	bl	8005ec0 <HAL_GPIO_Init>
=======
 80034f6:	23e0      	movs	r3, #224	; 0xe0
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003506:	2305      	movs	r3, #5
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003514:	f002 fabe 	bl	8005a94 <HAL_GPIO_Init>
>>>>>>> origin/main

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003440:	bf00      	nop
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40013000 	.word	0x40013000
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_MspInit>:
=======
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013000 	.word	0x40013000
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_MspInit>:
>>>>>>> origin/main
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
=======
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_MspInit+0x44>)
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345a:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_MspInit+0x44>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6613      	str	r3, [r2, #96]	; 0x60
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_MspInit+0x44>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_MspInit+0x44>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_MspInit+0x44>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_MspInit+0x44>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
=======
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_MspInit+0x44>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	4a0e      	ldr	r2, [pc, #56]	; (800356c <HAL_MspInit+0x44>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6613      	str	r3, [r2, #96]	; 0x60
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_MspInit+0x44>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_MspInit+0x44>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_MspInit+0x44>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_MspInit+0x44>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
>>>>>>> origin/main
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <NMI_Handler>:
=======
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <NMI_Handler>:
>>>>>>> origin/main
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
=======
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 800349c:	e7fe      	b.n	800349c <NMI_Handler+0x4>

0800349e <HardFault_Handler>:
=======
 8003574:	e7fe      	b.n	8003574 <NMI_Handler+0x4>

08003576 <HardFault_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
=======
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80034a2:	e7fe      	b.n	80034a2 <HardFault_Handler+0x4>

080034a4 <MemManage_Handler>:
=======
 800357a:	e7fe      	b.n	800357a <HardFault_Handler+0x4>

0800357c <MemManage_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
=======
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80034a8:	e7fe      	b.n	80034a8 <MemManage_Handler+0x4>

080034aa <BusFault_Handler>:
=======
 8003580:	e7fe      	b.n	8003580 <MemManage_Handler+0x4>

08003582 <BusFault_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
=======
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80034ae:	e7fe      	b.n	80034ae <BusFault_Handler+0x4>

080034b0 <UsageFault_Handler>:
=======
 8003586:	e7fe      	b.n	8003586 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
=======
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80034b4:	e7fe      	b.n	80034b4 <UsageFault_Handler+0x4>

080034b6 <SVC_Handler>:
=======
 800358c:	e7fe      	b.n	800358c <UsageFault_Handler+0x4>

0800358e <SVC_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
=======
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DebugMon_Handler>:
=======
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <DebugMon_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
=======
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <PendSV_Handler>:
=======
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <PendSV_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
=======
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <SysTick_Handler>:
=======
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <SysTick_Handler>:
>>>>>>> origin/main

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
=======
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80034e4:	f000 fb3c 	bl	8003b60 <HAL_IncTick>
=======
 80035bc:	f000 fb32 	bl	8003c24 <HAL_IncTick>
>>>>>>> origin/main
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}

080034ec <DMA1_Channel1_IRQHandler>:
=======
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <DMA1_Channel1_IRQHandler>:
>>>>>>> origin/main

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
=======
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <DMA1_Channel1_IRQHandler+0x10>)
 80034f2:	f002 fc05 	bl	8005d00 <HAL_DMA_IRQHandler>
=======
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA1_Channel1_IRQHandler+0x10>)
 80035ca:	f002 f983 	bl	80058d4 <HAL_DMA_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< HEAD
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000278 	.word	0x20000278

08003500 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <ADC1_2_IRQHandler+0x10>)
 8003506:	f001 f82d 	bl	8004564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000214 	.word	0x20000214

08003514 <TIM1_UP_TIM16_IRQHandler>:
=======
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000278 	.word	0x20000278

080035d8 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> origin/main

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< HEAD
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
=======
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800351a:	f006 fcff 	bl	8009f1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003520:	f006 fcfc 	bl	8009f1c <HAL_TIM_IRQHandler>
=======
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035de:	f006 fa87 	bl	8009af0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80035e4:	f006 fa84 	bl	8009af0 <HAL_TIM_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< HEAD
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000408 	.word	0x20000408
 800352c:	200004ec 	.word	0x200004ec

08003530 <TIM6_IRQHandler>:
=======
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000404 	.word	0x20000404
 80035f0:	200004e8 	.word	0x200004e8

080035f4 <TIM6_IRQHandler>:
>>>>>>> origin/main

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
<<<<<<< HEAD
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
=======
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <TIM6_IRQHandler+0x10>)
 8003536:	f006 fcf1 	bl	8009f1c <HAL_TIM_IRQHandler>
=======
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <TIM6_IRQHandler+0x10>)
 80035fa:	f006 fa79 	bl	8009af0 <HAL_TIM_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
<<<<<<< HEAD
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200004a0 	.word	0x200004a0

08003544 <USB_IRQHandler>:
=======
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000049c 	.word	0x2000049c

08003608 <USB_IRQHandler>:
>>>>>>> origin/main

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
<<<<<<< HEAD
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
=======
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< HEAD
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <USB_IRQHandler+0x10>)
 800354a:	f002 ffae 	bl	80064aa <HAL_PCD_IRQHandler>
=======
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <USB_IRQHandler+0x10>)
 800360e:	f002 fd36 	bl	800607e <HAL_PCD_IRQHandler>
>>>>>>> origin/main
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
<<<<<<< HEAD
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200011e0 	.word	0x200011e0

08003558 <_getpid>:
=======
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200011dc 	.word	0x200011dc

0800361c <_getpid>:
>>>>>>> origin/main
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	return 1;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_kill>:

int _kill(int pid, int sig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003572:	f00b ffef 	bl	800f554 <__errno>
 8003576:	4603      	mov	r3, r0
 8003578:	2216      	movs	r2, #22
 800357a:	601a      	str	r2, [r3, #0]
	return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_exit>:

void _exit (int status)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffe7 	bl	8003568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800359a:	e7fe      	b.n	800359a <_exit+0x12>

0800359c <_sbrk>:
=======
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_kill>:

int _kill(int pid, int sig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003636:	f00b fd77 	bl	800f128 <__errno>
 800363a:	4603      	mov	r3, r0
 800363c:	2216      	movs	r2, #22
 800363e:	601a      	str	r2, [r3, #0]
	return -1;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_exit>:

void _exit (int status)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffe7 	bl	800362c <_kill>
	while (1) {}		/* Make sure we hang here */
 800365e:	e7fe      	b.n	800365e <_exit+0x12>

08003660 <_sbrk>:
>>>>>>> origin/main
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
=======
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <_sbrk+0x5c>)
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <_sbrk+0x60>)
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	613b      	str	r3, [r7, #16]
=======
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <_sbrk+0x5c>)
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <_sbrk+0x60>)
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <_sbrk+0x64>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <_sbrk+0x64>)
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <_sbrk+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
=======
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <_sbrk+0x64>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <_sbrk+0x64>)
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <_sbrk+0x68>)
 8003680:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <_sbrk+0x64>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035cc:	f00b ffc2 	bl	800f554 <__errno>
 80035d0:	4603      	mov	r3, r0
 80035d2:	220c      	movs	r2, #12
 80035d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e009      	b.n	80035f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <_sbrk+0x64>)
 80035ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000a000 	.word	0x2000a000
 80035fc:	00000400 	.word	0x00000400
 8003600:	20000404 	.word	0x20000404
 8003604:	20001710 	.word	0x20001710

08003608 <SystemInit>:
=======
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	429a      	cmp	r2, r3
 800368e:	d207      	bcs.n	80036a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003690:	f00b fd4a 	bl	800f128 <__errno>
 8003694:	4603      	mov	r3, r0
 8003696:	220c      	movs	r2, #12
 8003698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	e009      	b.n	80036b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <_sbrk+0x64>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <_sbrk+0x64>)
 80036b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	2000a000 	.word	0x2000a000
 80036c0:	00000400 	.word	0x00000400
 80036c4:	20000400 	.word	0x20000400
 80036c8:	20001710 	.word	0x20001710

080036cc <SystemInit>:
>>>>>>> origin/main
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
=======
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <SystemInit+0x20>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <SystemInit+0x20>)
 8003614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <MX_TIM1_Init>:
=======
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <SystemInit+0x20>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	4a05      	ldr	r2, [pc, #20]	; (80036ec <SystemInit+0x20>)
 80036d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <MX_TIM1_Init>:
>>>>>>> origin/main
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
=======
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f00b ffbc 	bl	800f5b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003640:	463b      	mov	r3, r7
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
=======
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f00b fd44 	bl	800f18c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003704:	463b      	mov	r3, r7
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <MX_TIM1_Init+0xac>)
 800364c:	4a23      	ldr	r2, [pc, #140]	; (80036dc <MX_TIM1_Init+0xb0>)
 800364e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <MX_TIM1_Init+0xac>)
 8003652:	2200      	movs	r2, #0
 8003654:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <MX_TIM1_Init+0xac>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <MX_TIM1_Init+0xac>)
 800365e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <MX_TIM1_Init+0xac>)
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <MX_TIM1_Init+0xac>)
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <MX_TIM1_Init+0xac>)
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003676:	2301      	movs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800367e:	2301      	movs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800368e:	2301      	movs	r3, #1
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	4619      	mov	r1, r3
 80036a0:	480d      	ldr	r0, [pc, #52]	; (80036d8 <MX_TIM1_Init+0xac>)
 80036a2:	f006 fb07 	bl	8009cb4 <HAL_TIM_Encoder_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80036ac:	f7ff fe2c 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036bc:	463b      	mov	r3, r7
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_TIM1_Init+0xac>)
 80036c2:	f007 f98f 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80036cc:	f7ff fe1c 	bl	8003308 <Error_Handler>
=======
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <MX_TIM1_Init+0xac>)
 8003710:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <MX_TIM1_Init+0xb0>)
 8003712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_TIM1_Init+0xac>)
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <MX_TIM1_Init+0xac>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <MX_TIM1_Init+0xac>)
 8003722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_TIM1_Init+0xac>)
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <MX_TIM1_Init+0xac>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_TIM1_Init+0xac>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800373a:	2301      	movs	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003742:	2301      	movs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003756:	2300      	movs	r3, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4619      	mov	r1, r3
 8003764:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_TIM1_Init+0xac>)
 8003766:	f006 f88f 	bl	8009888 <HAL_TIM_Encoder_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003770:	f7ff fe36 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003778:	2300      	movs	r3, #0
 800377a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003780:	463b      	mov	r3, r7
 8003782:	4619      	mov	r1, r3
 8003784:	4805      	ldr	r0, [pc, #20]	; (800379c <MX_TIM1_Init+0xac>)
 8003786:	f006 ff17 	bl	800a5b8 <HAL_TIMEx_MasterConfigSynchronization>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003790:	f7ff fe26 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 80036d0:	bf00      	nop
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000408 	.word	0x20000408
 80036dc:	40012c00 	.word	0x40012c00

080036e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
=======
 8003794:	bf00      	nop
 8003796:	3730      	adds	r7, #48	; 0x30
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000404 	.word	0x20000404
 80037a0:	40012c00 	.word	0x40012c00

080037a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f2:	463b      	mov	r3, r7
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
 8003700:	615a      	str	r2, [r3, #20]
 8003702:	619a      	str	r2, [r3, #24]
=======
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b6:	463b      	mov	r3, r7
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
 80037c4:	615a      	str	r2, [r3, #20]
 80037c6:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <MX_TIM2_Init+0xc8>)
 8003706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800370a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800370c:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800370e:	2214      	movs	r2, #20
 8003710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <MX_TIM2_Init+0xc8>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800371a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800371e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <MX_TIM2_Init+0xc8>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <MX_TIM2_Init+0xc8>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800372c:	481e      	ldr	r0, [pc, #120]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800372e:	f006 f98b 	bl	8009a48 <HAL_TIM_PWM_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003738:	f7ff fde6 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003744:	f107 031c 	add.w	r3, r7, #28
 8003748:	4619      	mov	r1, r3
 800374a:	4817      	ldr	r0, [pc, #92]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800374c:	f007 f94a 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003756:	f7ff fdd7 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800375a:	2360      	movs	r3, #96	; 0x60
 800375c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 800375e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003762:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003764:	2302      	movs	r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800376c:	463b      	mov	r3, r7
 800376e:	2200      	movs	r2, #0
 8003770:	4619      	mov	r1, r3
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <MX_TIM2_Init+0xc8>)
 8003774:	f006 fcf2 	bl	800a15c <HAL_TIM_PWM_ConfigChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800377e:	f7ff fdc3 	bl	8003308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003782:	463b      	mov	r3, r7
 8003784:	2204      	movs	r2, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4807      	ldr	r0, [pc, #28]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800378a:	f006 fce7 	bl	800a15c <HAL_TIM_PWM_ConfigChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003794:	f7ff fdb8 	bl	8003308 <Error_Handler>
=======
 80037c8:	4b28      	ldr	r3, [pc, #160]	; (800386c <MX_TIM2_Init+0xc8>)
 80037ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <MX_TIM2_Init+0xc8>)
 80037d2:	2214      	movs	r2, #20
 80037d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <MX_TIM2_Init+0xc8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <MX_TIM2_Init+0xc8>)
 80037de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80037e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <MX_TIM2_Init+0xc8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <MX_TIM2_Init+0xc8>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037f0:	481e      	ldr	r0, [pc, #120]	; (800386c <MX_TIM2_Init+0xc8>)
 80037f2:	f005 ff13 	bl	800961c <HAL_TIM_PWM_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80037fc:	f7ff fdf0 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	4619      	mov	r1, r3
 800380e:	4817      	ldr	r0, [pc, #92]	; (800386c <MX_TIM2_Init+0xc8>)
 8003810:	f006 fed2 	bl	800a5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800381a:	f7ff fde1 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800381e:	2360      	movs	r3, #96	; 0x60
 8003820:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 8003822:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003826:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003828:	2302      	movs	r3, #2
 800382a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003830:	463b      	mov	r3, r7
 8003832:	2200      	movs	r2, #0
 8003834:	4619      	mov	r1, r3
 8003836:	480d      	ldr	r0, [pc, #52]	; (800386c <MX_TIM2_Init+0xc8>)
 8003838:	f006 fa7a 	bl	8009d30 <HAL_TIM_PWM_ConfigChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003842:	f7ff fdcd 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003846:	463b      	mov	r3, r7
 8003848:	2204      	movs	r2, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4807      	ldr	r0, [pc, #28]	; (800386c <MX_TIM2_Init+0xc8>)
 800384e:	f006 fa6f 	bl	8009d30 <HAL_TIM_PWM_ConfigChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003858:	f7ff fdc2 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <MX_TIM2_Init+0xc8>)
 800379a:	f000 f90f 	bl	80039bc <HAL_TIM_MspPostInit>

}
 800379e:	bf00      	nop
 80037a0:	3728      	adds	r7, #40	; 0x28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000454 	.word	0x20000454

080037ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
=======
 800385c:	4803      	ldr	r0, [pc, #12]	; (800386c <MX_TIM2_Init+0xc8>)
 800385e:	f000 f90f 	bl	8003a80 <HAL_TIM_MspPostInit>

}
 8003862:	bf00      	nop
 8003864:	3728      	adds	r7, #40	; 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000450 	.word	0x20000450

08003870 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
>>>>>>> origin/main

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
=======
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
<<<<<<< HEAD
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <MX_TIM6_Init+0x64>)
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <MX_TIM6_Init+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <MX_TIM6_Init+0x64>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <MX_TIM6_Init+0x64>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <MX_TIM6_Init+0x64>)
 80037d0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80037d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <MX_TIM6_Init+0x64>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <MX_TIM6_Init+0x64>)
 80037de:	f006 f887 	bl	80098f0 <HAL_TIM_Base_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037e8:	f7ff fd8e 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037ec:	2320      	movs	r3, #32
 80037ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_TIM6_Init+0x64>)
 80037fa:	f007 f8f3 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003804:	f7ff fd80 	bl	8003308 <Error_Handler>
=======
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <MX_TIM6_Init+0x64>)
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <MX_TIM6_Init+0x68>)
 8003884:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <MX_TIM6_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <MX_TIM6_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <MX_TIM6_Init+0x64>)
 8003894:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003898:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_TIM6_Init+0x64>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80038a0:	480c      	ldr	r0, [pc, #48]	; (80038d4 <MX_TIM6_Init+0x64>)
 80038a2:	f005 fe0f 	bl	80094c4 <HAL_TIM_Base_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80038ac:	f7ff fd98 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038b0:	2320      	movs	r3, #32
 80038b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_TIM6_Init+0x64>)
 80038be:	f006 fe7b 	bl	800a5b8 <HAL_TIMEx_MasterConfigSynchronization>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80038c8:	f7ff fd8a 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
<<<<<<< HEAD
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200004a0 	.word	0x200004a0
 8003814:	40001000 	.word	0x40001000

08003818 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
=======
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	2000049c 	.word	0x2000049c
 80038d8:	40001000 	.word	0x40001000

080038dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
<<<<<<< HEAD
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <MX_TIM16_Init+0x44>)
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <MX_TIM16_Init+0x48>)
 8003820:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <MX_TIM16_Init+0x44>)
 8003824:	2201      	movs	r2, #1
 8003826:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <MX_TIM16_Init+0x44>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 31999;
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <MX_TIM16_Init+0x44>)
 8003830:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003834:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <MX_TIM16_Init+0x44>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <MX_TIM16_Init+0x44>)
 800383e:	2200      	movs	r2, #0
 8003840:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <MX_TIM16_Init+0x44>)
 8003844:	2200      	movs	r2, #0
 8003846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <MX_TIM16_Init+0x44>)
 800384a:	f006 f851 	bl	80098f0 <HAL_TIM_Base_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003854:	f7ff fd58 	bl	8003308 <Error_Handler>
=======
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <MX_TIM16_Init+0x44>)
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <MX_TIM16_Init+0x48>)
 80038e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <MX_TIM16_Init+0x44>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <MX_TIM16_Init+0x44>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 31999;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <MX_TIM16_Init+0x44>)
 80038f4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80038f8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <MX_TIM16_Init+0x44>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <MX_TIM16_Init+0x44>)
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <MX_TIM16_Init+0x44>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <MX_TIM16_Init+0x44>)
 800390e:	f005 fdd9 	bl	80094c4 <HAL_TIM_Base_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003918:	f7ff fd62 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
<<<<<<< HEAD
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200004ec 	.word	0x200004ec
 8003860:	40014400 	.word	0x40014400

08003864 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d131      	bne.n	80038ea <HAL_TIM_Encoder_MspInit+0x86>
=======
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200004e8 	.word	0x200004e8
 8003924:	40014400 	.word	0x40014400

08003928 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_TIM_Encoder_MspInit+0x90>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d131      	bne.n	80039ae <HAL_TIM_Encoder_MspInit+0x86>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 800388c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003890:	6613      	str	r3, [r2, #96]	; 0x60
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
=======
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 8003950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003954:	6613      	str	r3, [r2, #96]	; 0x60
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_TIM_Encoder_MspInit+0x94>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 80038b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038c8:	2301      	movs	r3, #1
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d6:	f002 faf3 	bl	8005ec0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	2019      	movs	r0, #25
 80038e0:	f002 f881 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038e4:	2019      	movs	r0, #25
 80038e6:	f002 f89a 	bl	8005a1e <HAL_NVIC_EnableIRQ>
=======
 800397a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800398c:	2301      	movs	r3, #1
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4619      	mov	r1, r3
 8003996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399a:	f002 f87b 	bl	8005a94 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2019      	movs	r0, #25
 80039a4:	f001 fe09 	bl	80055ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039a8:	2019      	movs	r0, #25
 80039aa:	f001 fe22 	bl	80055f2 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< HEAD
 80038ea:	bf00      	nop
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d10b      	bne.n	8003926 <HAL_TIM_PWM_MspInit+0x2a>
=======
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40021000 	.word	0x40021000

080039c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d10b      	bne.n	80039ea <HAL_TIM_PWM_MspInit+0x2a>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_TIM_PWM_MspInit+0x38>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	4a08      	ldr	r2, [pc, #32]	; (8003934 <HAL_TIM_PWM_MspInit+0x38>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6593      	str	r3, [r2, #88]	; 0x58
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_TIM_PWM_MspInit+0x38>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
=======
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_TIM_PWM_MspInit+0x38>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_TIM_PWM_MspInit+0x38>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6593      	str	r3, [r2, #88]	; 0x58
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_TIM_PWM_MspInit+0x38>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <HAL_TIM_Base_MspInit+0x78>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d114      	bne.n	8003974 <HAL_TIM_Base_MspInit+0x3c>
=======
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <HAL_TIM_Base_MspInit+0x78>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d114      	bne.n	8003a38 <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
<<<<<<< HEAD
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	6593      	str	r3, [r2, #88]	; 0x58
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	2036      	movs	r0, #54	; 0x36
 8003968:	f002 f83d 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800396c:	2036      	movs	r0, #54	; 0x36
 800396e:	f002 f856 	bl	8005a1e <HAL_NVIC_EnableIRQ>
=======
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a14:	f043 0310 	orr.w	r3, r3, #16
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	2100      	movs	r1, #0
 8003a2a:	2036      	movs	r0, #54	; 0x36
 8003a2c:	f001 fdc5 	bl	80055ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003a30:	2036      	movs	r0, #54	; 0x36
 8003a32:	f001 fdde 	bl	80055f2 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
<<<<<<< HEAD
 8003972:	e018      	b.n	80039a6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <HAL_TIM_Base_MspInit+0x80>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	6613      	str	r3, [r2, #96]	; 0x60
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_TIM_Base_MspInit+0x7c>)
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2019      	movs	r0, #25
 800399c:	f002 f823 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039a0:	2019      	movs	r0, #25
 80039a2:	f002 f83c 	bl	8005a1e <HAL_NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40001000 	.word	0x40001000
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40014400 	.word	0x40014400

080039bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d139      	bne.n	8003a52 <HAL_TIM_MspPostInit+0x96>
=======
 8003a36:	e018      	b.n	8003a6a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_TIM_Base_MspInit+0x80>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d113      	bne.n	8003a6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_TIM_Base_MspInit+0x7c>)
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	2019      	movs	r0, #25
 8003a60:	f001 fdab 	bl	80055ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a64:	2019      	movs	r0, #25
 8003a66:	f001 fdc4 	bl	80055f2 <HAL_NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40001000 	.word	0x40001000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40014400 	.word	0x40014400

08003a80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d139      	bne.n	8003b16 <HAL_TIM_MspPostInit+0x96>
>>>>>>> origin/main
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_TIM_MspPostInit+0xa0>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
=======
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_TIM_MspPostInit+0xa0>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
<<<<<<< HEAD
 8003a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a20:	2301      	movs	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2e:	f002 fa47 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 8003a32:	2308      	movs	r3, #8
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4804      	ldr	r0, [pc, #16]	; (8003a60 <HAL_TIM_MspPostInit+0xa4>)
 8003a4e:	f002 fa37 	bl	8005ec0 <HAL_GPIO_Init>
=======
 8003ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af2:	f001 ffcf 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 8003af6:	2308      	movs	r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b06:	2301      	movs	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4804      	ldr	r0, [pc, #16]	; (8003b24 <HAL_TIM_MspPostInit+0xa4>)
 8003b12:	f001 ffbf 	bl	8005a94 <HAL_GPIO_Init>
>>>>>>> origin/main
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	48000400 	.word	0x48000400

08003a64 <Reset_Handler>:
=======
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	48000400 	.word	0x48000400

08003b28 <Reset_Handler>:
>>>>>>> origin/main

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 8003a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a68:	f7ff fdce 	bl	8003608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a6c:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a6e:	490d      	ldr	r1, [pc, #52]	; (8003aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <LoopForever+0xe>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a74:	e002      	b.n	8003a7c <LoopCopyDataInit>

08003a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7a:	3304      	adds	r3, #4

08003a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a80:	d3f9      	bcc.n	8003a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a84:	4c0a      	ldr	r4, [pc, #40]	; (8003ab0 <LoopForever+0x16>)
  movs r3, #0
 8003a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a88:	e001      	b.n	8003a8e <LoopFillZerobss>

08003a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a8c:	3204      	adds	r2, #4

08003a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a90:	d3fb      	bcc.n	8003a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a92:	f00b fd65 	bl	800f560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a96:	f7ff fb87 	bl	80031a8 <main>

08003a9a <LoopForever>:

LoopForever:
    b LoopForever
 8003a9a:	e7fe      	b.n	8003a9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a9c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003aa8:	0800f8a4 	.word	0x0800f8a4
  ldr r2, =_sbss
 8003aac:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003ab0:	20001710 	.word	0x20001710

08003ab4 <COMP_IRQHandler>:
=======
 8003b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b2c:	f7ff fdce 	bl	80036cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b30:	480c      	ldr	r0, [pc, #48]	; (8003b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <LoopForever+0xe>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b38:	e002      	b.n	8003b40 <LoopCopyDataInit>

08003b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b3e:	3304      	adds	r3, #4

08003b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b44:	d3f9      	bcc.n	8003b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b48:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <LoopForever+0x16>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b4c:	e001      	b.n	8003b52 <LoopFillZerobss>

08003b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b50:	3204      	adds	r2, #4

08003b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b54:	d3fb      	bcc.n	8003b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b56:	f00b faed 	bl	800f134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b5a:	f7ff fb91 	bl	8003280 <main>

08003b5e <LoopForever>:

LoopForever:
    b LoopForever
 8003b5e:	e7fe      	b.n	8003b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b68:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b6c:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 8003b70:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b74:	2000170c 	.word	0x2000170c

08003b78 <ADC1_2_IRQHandler>:
>>>>>>> origin/main
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8003ab4:	e7fe      	b.n	8003ab4 <COMP_IRQHandler>

08003ab6 <HAL_Init>:
=======
 8003b78:	e7fe      	b.n	8003b78 <ADC1_2_IRQHandler>

08003b7a <HAL_Init>:
>>>>>>> origin/main
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	71fb      	strb	r3, [r7, #7]
=======
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	f001 ff85 	bl	80059d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac6:	200f      	movs	r0, #15
 8003ac8:	f000 f80e 	bl	8003ae8 <HAL_InitTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	71fb      	strb	r3, [r7, #7]
 8003ad6:	e001      	b.n	8003adc <HAL_Init+0x26>
=======
 8003b84:	2003      	movs	r0, #3
 8003b86:	f001 fd0d 	bl	80055a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b8a:	200f      	movs	r0, #15
 8003b8c:	f000 f80e 	bl	8003bac <HAL_InitTick>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	71fb      	strb	r3, [r7, #7]
 8003b9a:	e001      	b.n	8003ba0 <HAL_Init+0x26>
>>>>>>> origin/main
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 8003ad8:	f7ff fcba 	bl	8003450 <HAL_MspInit>
=======
 8003b9c:	f7ff fcc4 	bl	8003528 <HAL_MspInit>
>>>>>>> origin/main
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8003adc:	79fb      	ldrb	r3, [r7, #7]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_InitTick>:
=======
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_InitTick>:
>>>>>>> origin/main
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003af4:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <HAL_InitTick+0x6c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_InitTick+0x70>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <HAL_InitTick+0x6c>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4619      	mov	r1, r3
 8003b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 ff91 	bl	8005a3a <HAL_SYSTICK_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d809      	bhi.n	8003b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b24:	2200      	movs	r2, #0
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f001 ff5b 	bl	80059e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b30:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <HAL_InitTick+0x74>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e007      	b.n	8003b48 <HAL_InitTick+0x60>
=======
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bb8:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_InitTick+0x6c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_InitTick+0x70>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_InitTick+0x6c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fd19 	bl	800560e <HAL_SYSTICK_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d809      	bhi.n	8003bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f001 fce3 	bl	80055ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_InitTick+0x74>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e007      	b.n	8003c0c <HAL_InitTick+0x60>
>>>>>>> origin/main
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e004      	b.n	8003b48 <HAL_InitTick+0x60>
=======
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e004      	b.n	8003c0c <HAL_InitTick+0x60>
>>>>>>> origin/main
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e001      	b.n	8003b48 <HAL_InitTick+0x60>
=======
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e001      	b.n	8003c0c <HAL_InitTick+0x60>
>>>>>>> origin/main
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
=======
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
>>>>>>> origin/main
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000008 	.word	0x20000008
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004

08003b60 <HAL_IncTick>:
=======
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000008 	.word	0x20000008
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_IncTick>:
>>>>>>> origin/main
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_IncTick+0x20>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_IncTick+0x24>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_IncTick+0x24>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008
 8003b84:	20000538 	.word	0x20000538

08003b88 <HAL_GetTick>:
=======
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_IncTick+0x20>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_IncTick+0x24>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_IncTick+0x24>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000008 	.word	0x20000008
 8003c48:	20000534 	.word	0x20000534

08003c4c <HAL_GetTick>:
>>>>>>> origin/main
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_GetTick+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000538 	.word	0x20000538

08003ba0 <HAL_Delay>:
=======
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_GetTick+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000534 	.word	0x20000534

08003c64 <HAL_Delay>:
>>>>>>> origin/main
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff ffee 	bl	8003b88 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000008 	.word	0x20000008

08003be8 <LL_ADC_SetCommonClock>:
=======
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff ffee 	bl	8003c4c <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d005      	beq.n	8003c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_Delay+0x44>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c8a:	bf00      	nop
 8003c8c:	f7ff ffde 	bl	8003c4c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d8f7      	bhi.n	8003c8c <HAL_Delay+0x28>
  {
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000008 	.word	0x20000008

08003cac <LL_ADC_SetCommonClock>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_ADC_SetCommonPathInternalCh>:
=======
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_ADC_GetCommonPathInternalCh>:
=======
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_SetOffset>:
=======
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_SetOffset>:
>>>>>>> origin/main
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3360      	adds	r3, #96	; 0x60
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <LL_ADC_SetOffset+0x44>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	03fff000 	.word	0x03fff000

08003c98 <LL_ADC_GetOffsetChannel>:
=======
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3360      	adds	r3, #96	; 0x60
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <LL_ADC_SetOffset+0x44>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	03fff000 	.word	0x03fff000

08003d5c <LL_ADC_GetOffsetChannel>:
>>>>>>> origin/main
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3360      	adds	r3, #96	; 0x60
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_SetOffsetState>:
=======
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3360      	adds	r3, #96	; 0x60
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_SetOffsetState>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3360      	adds	r3, #96	; 0x60
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3360      	adds	r3, #96	; 0x60
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< HEAD
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	615a      	str	r2, [r3, #20]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> origin/main
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_REG_SetSequencerRanks>:
=======
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> origin/main
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8003d46:	b480      	push	{r7}
 8003d48:	b087      	sub	sp, #28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
=======
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
<<<<<<< HEAD
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3330      	adds	r3, #48	; 0x30
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	211f      	movs	r1, #31
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	f003 011f 	and.w	r1, r3, #31
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_SetChannelSamplingTime>:
=======
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3330      	adds	r3, #48	; 0x30
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	4413      	add	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	211f      	movs	r1, #31
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	f003 011f 	and.w	r1, r3, #31
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_ADC_SetChannelSamplingTime>:
>>>>>>> origin/main
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
=======
 8003e62:	b480      	push	{r7}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
<<<<<<< HEAD
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	0e5b      	lsrs	r3, r3, #25
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	0d1b      	lsrs	r3, r3, #20
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2107      	movs	r1, #7
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	401a      	ands	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <LL_ADC_SetChannelSingleDiff>:
=======
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3314      	adds	r3, #20
 8003e72:	461a      	mov	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0e5b      	lsrs	r3, r3, #25
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	4413      	add	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	0d1b      	lsrs	r3, r3, #20
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2107      	movs	r1, #7
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	0d1b      	lsrs	r3, r3, #20
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
=======
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< HEAD
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0318 	and.w	r3, r3, #24
 8003e3e:	4908      	ldr	r1, [pc, #32]	; (8003e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e40:	40d9      	lsrs	r1, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	400b      	ands	r3, r1
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	0007ffff 	.word	0x0007ffff

08003e64 <LL_ADC_GetMultimode>:
=======
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0318 	and.w	r3, r3, #24
 8003eda:	4908      	ldr	r1, [pc, #32]	; (8003efc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003edc:	40d9      	lsrs	r1, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	0007ffff 	.word	0x0007ffff

08003f00 <LL_ADC_GetMultimode>:
>>>>>>> origin/main
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 031f 	and.w	r3, r3, #31
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_DisableDeepPowerDown>:
=======
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_DisableDeepPowerDown>:
>>>>>>> origin/main
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
=======
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6093      	str	r3, [r2, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_IsDeepPowerDownEnabled>:
=======
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6093      	str	r3, [r2, #8]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_ADC_EnableInternalRegulator>:
=======
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d101      	bne.n	8003f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_EnableInternalRegulator>:
>>>>>>> origin/main
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
=======
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_IsInternalRegulatorEnabled>:
=======
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f24:	d101      	bne.n	8003f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_Enable>:
=======
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa4:	d101      	bne.n	8003faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_Enable>:
>>>>>>> origin/main
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
=======
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_Disable>:
=======
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_Disable>:
>>>>>>> origin/main
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
=======
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f74:	f043 0202 	orr.w	r2, r3, #2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_IsEnabled>:
=======
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ff4:	f043 0202 	orr.w	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_IsEnabled>:
>>>>>>> origin/main
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <LL_ADC_IsEnabled+0x18>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <LL_ADC_IsEnabled+0x1a>
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_IsDisableOngoing>:
=======
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <LL_ADC_IsEnabled+0x18>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <LL_ADC_IsEnabled+0x1a>
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_ADC_IsDisableOngoing>:
>>>>>>> origin/main
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_IsDisableOngoing+0x18>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_IsDisableOngoing+0x1a>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_REG_StartConversion>:
=======
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsDisableOngoing+0x18>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsDisableOngoing+0x1a>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_REG_StartConversion>:
>>>>>>> origin/main
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
=======
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_REG_StopConversion>:
=======
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_REG_StopConversion>:
>>>>>>> origin/main
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
=======
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_REG_IsConversionOngoing>:
=======
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800408c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> origin/main
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d101      	bne.n	800403c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_INJ_StopConversion>:
=======
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d101      	bne.n	80040bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_INJ_StopConversion>:
>>>>>>> origin/main
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
=======
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_ADC_INJ_IsConversionOngoing>:
=======
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> origin/main
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d101      	bne.n	800408a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_ADC_Init>:
=======
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d101      	bne.n	800410a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_ADC_Init>:
>>>>>>> origin/main
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
=======
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e131      	b.n	8004316 <HAL_ADC_Init+0x27e>
=======
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e131      	b.n	8004396 <HAL_ADC_Init+0x27e>
>>>>>>> origin/main
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
=======
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
>>>>>>> origin/main
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_ADC_Init+0x3c>
=======
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_ADC_Init+0x3c>
>>>>>>> origin/main

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe ff2f 	bl	8002f24 <HAL_ADC_MspInit>
=======
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fe ff63 	bl	800300c <HAL_ADC_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> origin/main
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fef1 	bl	8003ec0 <LL_ADC_IsDeepPowerDownEnabled>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fed7 	bl	8003e9c <LL_ADC_DisableDeepPowerDown>
=======
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fef1 	bl	8003f40 <LL_ADC_IsDeepPowerDownEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fed7 	bl	8003f1c <LL_ADC_DisableDeepPowerDown>
>>>>>>> origin/main
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff0c 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d115      	bne.n	800412a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fef0 	bl	8003ee8 <LL_ADC_EnableInternalRegulator>
=======
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff0c 	bl	8003f90 <LL_ADC_IsInternalRegulatorEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fef0 	bl	8003f68 <LL_ADC_EnableInternalRegulator>
>>>>>>> origin/main

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8004108:	4b85      	ldr	r3, [pc, #532]	; (8004320 <HAL_ADC_Init+0x288>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	4a85      	ldr	r2, [pc, #532]	; (8004324 <HAL_ADC_Init+0x28c>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	099b      	lsrs	r3, r3, #6
 8004116:	3301      	adds	r3, #1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800411c:	e002      	b.n	8004124 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f9      	bne.n	800411e <HAL_ADC_Init+0x86>
=======
 8004188:	4b85      	ldr	r3, [pc, #532]	; (80043a0 <HAL_ADC_Init+0x288>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	4a85      	ldr	r2, [pc, #532]	; (80043a4 <HAL_ADC_Init+0x28c>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800419c:	e002      	b.n	80041a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f9      	bne.n	800419e <HAL_ADC_Init+0x86>
>>>>>>> origin/main
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff feee 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77fb      	strb	r3, [r7, #31]
=======
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff feee 	bl	8003f90 <LL_ADC_IsInternalRegulatorEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0210 	orr.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff62 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004160:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 80ca 	bne.w	8004304 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80c6 	bne.w	8004304 <HAL_ADC_Init+0x26c>
=======
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff62 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80041e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 80ca 	bne.w	8004384 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 80c6 	bne.w	8004384 <HAL_ADC_Init+0x26c>
>>>>>>> origin/main
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fefb 	bl	8003f88 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d110      	bne.n	80041ba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004198:	4863      	ldr	r0, [pc, #396]	; (8004328 <HAL_ADC_Init+0x290>)
 800419a:	f7ff fef5 	bl	8003f88 <LL_ADC_IsEnabled>
 800419e:	4604      	mov	r4, r0
 80041a0:	4862      	ldr	r0, [pc, #392]	; (800432c <HAL_ADC_Init+0x294>)
 80041a2:	f7ff fef1 	bl	8003f88 <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4323      	orrs	r3, r4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <HAL_ADC_Init+0x122>
=======
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fefb 	bl	8004008 <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d110      	bne.n	800423a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004218:	4863      	ldr	r0, [pc, #396]	; (80043a8 <HAL_ADC_Init+0x290>)
 800421a:	f7ff fef5 	bl	8004008 <LL_ADC_IsEnabled>
 800421e:	4604      	mov	r4, r0
 8004220:	4862      	ldr	r0, [pc, #392]	; (80043ac <HAL_ADC_Init+0x294>)
 8004222:	f7ff fef1 	bl	8004008 <LL_ADC_IsEnabled>
 8004226:	4603      	mov	r3, r0
 8004228:	4323      	orrs	r3, r4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_ADC_Init+0x122>
>>>>>>> origin/main
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4619      	mov	r1, r3
 80041b4:	485e      	ldr	r0, [pc, #376]	; (8004330 <HAL_ADC_Init+0x298>)
 80041b6:	f7ff fd17 	bl	8003be8 <LL_ADC_SetCommonClock>
=======
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4619      	mov	r1, r3
 8004234:	485e      	ldr	r0, [pc, #376]	; (80043b0 <HAL_ADC_Init+0x298>)
 8004236:	f7ff fd39 	bl	8003cac <LL_ADC_SetCommonClock>
>>>>>>> origin/main
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7e5b      	ldrb	r3, [r3, #25]
 80041be:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041c4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80041ca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80041d0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	3b01      	subs	r3, #1
 80041ee:	045b      	lsls	r3, r3, #17
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
=======
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7e5b      	ldrb	r3, [r3, #25]
 800423e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004244:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800424a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004250:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004258:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	3b01      	subs	r3, #1
 800426e:	045b      	lsls	r3, r3, #17
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
=======
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_ADC_Init+0x29c>)
 800421a:	4013      	ands	r3, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
=======
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_ADC_Init+0x29c>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	69b9      	ldr	r1, [r7, #24]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fefa 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004230:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff1b 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 800423c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d13d      	bne.n	80042c0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d13a      	bne.n	80042c0 <HAL_ADC_Init+0x228>
=======
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fefa 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80042b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ff1b 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 80042bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d13d      	bne.n	8004340 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d13a      	bne.n	8004340 <HAL_ADC_Init+0x228>
>>>>>>> origin/main
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800424e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004256:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004266:	f023 0302 	bic.w	r3, r3, #2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	430b      	orrs	r3, r1
 8004272:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800427a:	2b01      	cmp	r3, #1
 800427c:	d118      	bne.n	80042b0 <HAL_ADC_Init+0x218>
=======
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e6:	f023 0302 	bic.w	r3, r3, #2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d118      	bne.n	8004330 <HAL_ADC_Init+0x218>
>>>>>>> origin/main
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004288:	f023 0304 	bic.w	r3, r3, #4
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042a0:	430a      	orrs	r2, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	e007      	b.n	80042c0 <HAL_ADC_Init+0x228>
=======
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004320:	430a      	orrs	r2, r1
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e007      	b.n	8004340 <HAL_ADC_Init+0x228>
>>>>>>> origin/main
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	611a      	str	r2, [r3, #16]
=======
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f023 010f 	bic.w	r1, r3, #15
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
 80042e0:	e007      	b.n	80042f2 <HAL_ADC_Init+0x25a>
=======
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10c      	bne.n	8004362 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f023 010f 	bic.w	r1, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	1e5a      	subs	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
 8004360:	e007      	b.n	8004372 <HAL_ADC_Init+0x25a>
>>>>>>> origin/main
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020f 	bic.w	r2, r2, #15
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020f 	bic.w	r2, r2, #15
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> origin/main
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	f043 0201 	orr.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
 8004302:	e007      	b.n	8004314 <HAL_ADC_Init+0x27c>
=======
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
 8004382:	e007      	b.n	8004394 <HAL_ADC_Init+0x27c>
>>>>>>> origin/main
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0210 	orr.w	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	77fb      	strb	r3, [r7, #31]
=======
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f043 0210 	orr.w	r2, r3, #16
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8004314:	7ffb      	ldrb	r3, [r7, #31]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	; 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000
 8004324:	053e2d63 	.word	0x053e2d63
 8004328:	50040000 	.word	0x50040000
 800432c:	50040100 	.word	0x50040100
 8004330:	50040300 	.word	0x50040300
 8004334:	fff0c007 	.word	0xfff0c007

08004338 <HAL_ADC_Start_DMA>:
=======
 8004394:	7ffb      	ldrb	r3, [r7, #31]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000
 80043a4:	053e2d63 	.word	0x053e2d63
 80043a8:	50040000 	.word	0x50040000
 80043ac:	50040100 	.word	0x50040100
 80043b0:	50040300 	.word	0x50040300
 80043b4:	fff0c007 	.word	0xfff0c007

080043b8 <HAL_ADC_Start_DMA>:
>>>>>>> origin/main
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004344:	4850      	ldr	r0, [pc, #320]	; (8004488 <HAL_ADC_Start_DMA+0x150>)
 8004346:	f7ff fd8d 	bl	8003e64 <LL_ADC_GetMultimode>
 800434a:	6138      	str	r0, [r7, #16]
=======
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c4:	4850      	ldr	r0, [pc, #320]	; (8004508 <HAL_ADC_Start_DMA+0x150>)
 80043c6:	f7ff fd9b 	bl	8003f00 <LL_ADC_GetMultimode>
 80043ca:	6138      	str	r0, [r7, #16]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fe67 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 808e 	bne.w	800447a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_ADC_Start_DMA+0x34>
 8004368:	2302      	movs	r3, #2
 800436a:	e089      	b.n	8004480 <HAL_ADC_Start_DMA+0x148>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe67 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 808e 	bne.w	80044fa <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_Start_DMA+0x34>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e089      	b.n	8004500 <HAL_ADC_Start_DMA+0x148>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> origin/main

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
<<<<<<< HEAD
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d002      	beq.n	8004386 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b09      	cmp	r3, #9
 8004384:	d172      	bne.n	800446c <HAL_ADC_Start_DMA+0x134>
=======
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d002      	beq.n	8004406 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b09      	cmp	r3, #9
 8004404:	d172      	bne.n	80044ec <HAL_ADC_Start_DMA+0x134>
>>>>>>> origin/main
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
<<<<<<< HEAD
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 ffdc 	bl	8005344 <ADC_Enable>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d165      	bne.n	8004462 <HAL_ADC_Start_DMA+0x12a>
=======
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fdb8 	bl	8004f7c <ADC_Enable>
 800440c:	4603      	mov	r3, r0
 800440e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d165      	bne.n	80044e2 <HAL_ADC_Start_DMA+0x12a>
>>>>>>> origin/main
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< HEAD
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a37      	ldr	r2, [pc, #220]	; (800448c <HAL_ADC_Start_DMA+0x154>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d002      	beq.n	80043ba <HAL_ADC_Start_DMA+0x82>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_ADC_Start_DMA+0x84>
 80043ba:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_ADC_Start_DMA+0x158>)
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d002      	beq.n	80043ca <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a37      	ldr	r2, [pc, #220]	; (800450c <HAL_ADC_Start_DMA+0x154>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d002      	beq.n	800443a <HAL_ADC_Start_DMA+0x82>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	e000      	b.n	800443c <HAL_ADC_Start_DMA+0x84>
 800443a:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_ADC_Start_DMA+0x158>)
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4293      	cmp	r3, r2
 8004442:	d002      	beq.n	800444a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f023 0206 	bic.w	r2, r3, #6
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	659a      	str	r2, [r3, #88]	; 0x58
 80043ee:	e002      	b.n	80043f6 <HAL_ADC_Start_DMA+0xbe>
=======
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	f023 0206 	bic.w	r2, r3, #6
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	659a      	str	r2, [r3, #88]	; 0x58
 800446e:	e002      	b.n	8004476 <HAL_ADC_Start_DMA+0xbe>
>>>>>>> origin/main
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> origin/main
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	4a26      	ldr	r2, [pc, #152]	; (8004494 <HAL_ADC_Start_DMA+0x15c>)
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <HAL_ADC_Start_DMA+0x160>)
 8004404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	4a24      	ldr	r2, [pc, #144]	; (800449c <HAL_ADC_Start_DMA+0x164>)
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_ADC_Start_DMA+0x15c>)
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	4a25      	ldr	r2, [pc, #148]	; (8004518 <HAL_ADC_Start_DMA+0x160>)
 8004484:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	4a24      	ldr	r2, [pc, #144]	; (800451c <HAL_ADC_Start_DMA+0x164>)
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> origin/main
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	221c      	movs	r2, #28
 8004414:	601a      	str	r2, [r3, #0]
=======
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	221c      	movs	r2, #28
 8004494:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> origin/main

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0210 	orr.w	r2, r2, #16
 800442c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3340      	adds	r3, #64	; 0x40
 8004448:	4619      	mov	r1, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f001 fbb9 	bl	8005bc4 <HAL_DMA_Start_IT>
 8004452:	4603      	mov	r3, r0
 8004454:	75fb      	strb	r3, [r7, #23]
=======
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0210 	orr.w	r2, r2, #16
 80044ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3340      	adds	r3, #64	; 0x40
 80044c8:	4619      	mov	r1, r3
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f001 f963 	bl	8005798 <HAL_DMA_Start_IT>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fdba 	bl	8003fd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004460:	e00d      	b.n	800447e <HAL_ADC_Start_DMA+0x146>
=======
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fdba 	bl	8004054 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044e0:	e00d      	b.n	80044fe <HAL_ADC_Start_DMA+0x146>
>>>>>>> origin/main
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800446a:	e008      	b.n	800447e <HAL_ADC_Start_DMA+0x146>
=======
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80044ea:	e008      	b.n	80044fe <HAL_ADC_Start_DMA+0x146>
>>>>>>> origin/main

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004478:	e001      	b.n	800447e <HAL_ADC_Start_DMA+0x146>
=======
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80044f8:	e001      	b.n	80044fe <HAL_ADC_Start_DMA+0x146>
>>>>>>> origin/main
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 800447a:	2302      	movs	r3, #2
 800447c:	75fb      	strb	r3, [r7, #23]
=======
 80044fa:	2302      	movs	r3, #2
 80044fc:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	50040300 	.word	0x50040300
 800448c:	50040100 	.word	0x50040100
 8004490:	50040000 	.word	0x50040000
 8004494:	0800550f 	.word	0x0800550f
 8004498:	080055e7 	.word	0x080055e7
 800449c:	08005603 	.word	0x08005603

080044a0 <HAL_ADC_Stop_DMA>:
=======
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	50040300 	.word	0x50040300
 800450c:	50040100 	.word	0x50040100
 8004510:	50040000 	.word	0x50040000
 8004514:	08005147 	.word	0x08005147
 8004518:	0800521f 	.word	0x0800521f
 800451c:	0800523b 	.word	0x0800523b

08004520 <HAL_ADC_Stop_DMA>:
>>>>>>> origin/main
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
=======
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_Stop_DMA+0x16>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e051      	b.n	800455a <HAL_ADC_Stop_DMA+0xba>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80044be:	2103      	movs	r1, #3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fe83 	bl	80051cc <ADC_ConversionStop>
 80044c6:	4603      	mov	r3, r0
 80044c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d13f      	bne.n	8004550 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	60da      	str	r2, [r3, #12]
=======
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_ADC_Stop_DMA+0x16>
 8004532:	2302      	movs	r3, #2
 8004534:	e051      	b.n	80045da <HAL_ADC_Stop_DMA+0xba>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800453e:	2103      	movs	r1, #3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fc5f 	bl	8004e04 <ADC_ConversionStop>
 8004546:	4603      	mov	r3, r0
 8004548:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d13f      	bne.n	80045d0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d10f      	bne.n	800450e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fbc6 	bl	8005c84 <HAL_DMA_Abort>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d10f      	bne.n	800458e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	4618      	mov	r0, r3
 8004574:	f001 f970 	bl	8005858 <HAL_DMA_Abort>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0210 	bic.w	r2, r2, #16
 800451c:	605a      	str	r2, [r3, #4]
=======
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0210 	bic.w	r2, r2, #16
 800459c:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 ff93 	bl	8005450 <ADC_Disable>
 800452a:	4603      	mov	r3, r0
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e002      	b.n	8004536 <HAL_ADC_Stop_DMA+0x96>
=======
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fd6f 	bl	8005088 <ADC_Disable>
 80045aa:	4603      	mov	r3, r0
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e002      	b.n	80045b6 <HAL_ADC_Stop_DMA+0x96>
>>>>>>> origin/main
    }
    else
    {
      (void)ADC_Disable(hadc);
<<<<<<< HEAD
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 ff8d 	bl	8005450 <ADC_Disable>
=======
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fd69 	bl	8005088 <ADC_Disable>
>>>>>>> origin/main
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f043 0201 	orr.w	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800456c:	2300      	movs	r3, #0
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004580:	4882      	ldr	r0, [pc, #520]	; (800478c <HAL_ADC_IRQHandler+0x228>)
 8004582:	f7ff fc6f 	bl	8003e64 <LL_ADC_GetMultimode>
 8004586:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d017      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x5e>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f001 f88c 	bl	80056d2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2202      	movs	r2, #2
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <HAL_ADC_IRQHandler+0x72>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8083 	beq.w	80046e8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d07d      	beq.n	80046e8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fb89 	bl	8003d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d062      	beq.n	80046da <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5d      	ldr	r2, [pc, #372]	; (8004790 <HAL_ADC_IRQHandler+0x22c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d002      	beq.n	8004624 <HAL_ADC_IRQHandler+0xc0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	e000      	b.n	8004626 <HAL_ADC_IRQHandler+0xc2>
 8004624:	4b5b      	ldr	r3, [pc, #364]	; (8004794 <HAL_ADC_IRQHandler+0x230>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	4293      	cmp	r3, r2
 800462c:	d008      	beq.n	8004640 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d002      	beq.n	8004640 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b09      	cmp	r3, #9
 800463e:	d104      	bne.n	800464a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	e00c      	b.n	8004664 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a50      	ldr	r2, [pc, #320]	; (8004790 <HAL_ADC_IRQHandler+0x22c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d002      	beq.n	800465a <HAL_ADC_IRQHandler+0xf6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	e000      	b.n	800465c <HAL_ADC_IRQHandler+0xf8>
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <HAL_ADC_IRQHandler+0x230>)
 800465c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d135      	bne.n	80046da <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d12e      	bne.n	80046da <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fccf 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 020c 	bic.w	r2, r2, #12
 800469a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d112      	bne.n	80046da <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f043 0201 	orr.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
 80046c0:	e00b      	b.n	80046da <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	f043 0210 	orr.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fe fdfa 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	220c      	movs	r2, #12
 80046e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_ADC_IRQHandler+0x198>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 809f 	beq.w	8004846 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8099 	beq.w	8004846 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fb34 	bl	8003d9e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004736:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff faef 	bl	8003d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004742:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HAL_ADC_IRQHandler+0x22c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d002      	beq.n	8004754 <HAL_ADC_IRQHandler+0x1f0>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e000      	b.n	8004756 <HAL_ADC_IRQHandler+0x1f2>
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_ADC_IRQHandler+0x230>)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4293      	cmp	r3, r2
 800475c:	d008      	beq.n	8004770 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d002      	beq.n	8004770 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b07      	cmp	r3, #7
 800476e:	d104      	bne.n	800477a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	e013      	b.n	80047a2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_ADC_IRQHandler+0x22c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_ADC_IRQHandler+0x234>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	e007      	b.n	800479a <HAL_ADC_IRQHandler+0x236>
 800478a:	bf00      	nop
 800478c:	50040300 	.word	0x50040300
 8004790:	50040100 	.word	0x50040100
 8004794:	50040000 	.word	0x50040000
 8004798:	4b7d      	ldr	r3, [pc, #500]	; (8004990 <HAL_ADC_IRQHandler+0x42c>)
 800479a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d047      	beq.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_ADC_IRQHandler+0x25e>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d03f      	beq.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13a      	bne.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d133      	bne.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12e      	bne.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fc47 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11a      	bne.n	8004820 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d112      	bne.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
 800481e:	e00b      	b.n	8004838 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f043 0210 	orr.w	r2, r3, #16
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 ff22 	bl	8005682 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2260      	movs	r2, #96	; 0x60
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d011      	beq.n	8004874 <HAL_ADC_IRQHandler+0x310>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8a0 	bl	80049ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d012      	beq.n	80048a4 <HAL_ADC_IRQHandler+0x340>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 ff08 	bl	80056aa <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_ADC_IRQHandler+0x370>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fefa 	bl	80056be <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_ADC_IRQHandler+0x3e8>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d031      	beq.n	800494c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	e014      	b.n	8004920 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048fc:	4825      	ldr	r0, [pc, #148]	; (8004994 <HAL_ADC_IRQHandler+0x430>)
 80048fe:	f7ff fabf 	bl	8003e80 <LL_ADC_GetMultiDMATransfer>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004908:	2301      	movs	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	e008      	b.n	8004920 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800491c:	2301      	movs	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10e      	bne.n	8004944 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f83e 	bl	80049c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <HAL_ADC_IRQHandler+0x424>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f043 0208 	orr.w	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fe87 	bl	8005696 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	50040000 	.word	0x50040000
 8004994:	50040300 	.word	0x50040300

08004998 <HAL_ADC_ConvHalfCpltCallback>:
=======
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> origin/main
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
=======
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_ADC_ErrorCallback>:
=======
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_ADC_ErrorCallback>:
>>>>>>> origin/main
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
=======
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_ADC_ConfigChannel>:
=======
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <HAL_ADC_ConfigChannel>:
>>>>>>> origin/main
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b0b6      	sub	sp, #216	; 0xd8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
=======
 800460c:	b580      	push	{r7, lr}
 800460e:	b0b6      	sub	sp, #216	; 0xd8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x22>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e3d5      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x7ce>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x22>
 800462a:	2302      	movs	r3, #2
 800462c:	e3d5      	b.n	8004dda <HAL_ADC_ConfigChannel+0x7ce>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> origin/main
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fb0e 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 83ba 	bne.w	8005184 <HAL_ADC_ConfigChannel+0x7b0>
=======
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd32 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 83ba 	bne.w	8004dbc <HAL_ADC_ConfigChannel+0x7b0>
>>>>>>> origin/main
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
<<<<<<< HEAD
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d824      	bhi.n	8004a62 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	3b02      	subs	r3, #2
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d81b      	bhi.n	8004a5a <HAL_ADC_ConfigChannel+0x86>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_ADC_ConfigChannel+0x54>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a41 	.word	0x08004a41
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a51 	.word	0x08004a51
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	605a      	str	r2, [r3, #4]
          break;
 8004a3e:	e011      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2212      	movs	r2, #18
 8004a44:	605a      	str	r2, [r3, #4]
          break;
 8004a46:	e00d      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2218      	movs	r2, #24
 8004a4c:	605a      	str	r2, [r3, #4]
          break;
 8004a4e:	e009      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a56:	605a      	str	r2, [r3, #4]
          break;
 8004a58:	e004      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2206      	movs	r2, #6
 8004a5e:	605a      	str	r2, [r3, #4]
          break;
 8004a60:	e000      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004a62:	bf00      	nop
=======
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d824      	bhi.n	800469a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	3b02      	subs	r3, #2
 8004656:	2b03      	cmp	r3, #3
 8004658:	d81b      	bhi.n	8004692 <HAL_ADC_ConfigChannel+0x86>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_ADC_ConfigChannel+0x54>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004671 	.word	0x08004671
 8004664:	08004679 	.word	0x08004679
 8004668:	08004681 	.word	0x08004681
 800466c:	08004689 	.word	0x08004689
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	220c      	movs	r2, #12
 8004674:	605a      	str	r2, [r3, #4]
          break;
 8004676:	e011      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2212      	movs	r2, #18
 800467c:	605a      	str	r2, [r3, #4]
          break;
 800467e:	e00d      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2218      	movs	r2, #24
 8004684:	605a      	str	r2, [r3, #4]
          break;
 8004686:	e009      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800468e:	605a      	str	r2, [r3, #4]
          break;
 8004690:	e004      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2206      	movs	r2, #6
 8004696:	605a      	str	r2, [r3, #4]
          break;
 8004698:	e000      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800469a:	bf00      	nop
>>>>>>> origin/main
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
<<<<<<< HEAD
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f7ff f968 	bl	8003d46 <LL_ADC_REG_SetSequencerRanks>
=======
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f7ff fbae 	bl	8003e0a <LL_ADC_REG_SetSequencerRanks>
>>>>>>> origin/main
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fad2 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004a80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff faf2 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 8004a8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 81c1 	bne.w	8004e1e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 81bc 	bne.w	8004e1e <HAL_ADC_ConfigChannel+0x44a>
=======
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fcf6 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80046b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fd16 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 80046c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 81c1 	bne.w	8004a56 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 81bc 	bne.w	8004a56 <HAL_ADC_ConfigChannel+0x44a>
>>>>>>> origin/main
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< HEAD
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aae:	d10f      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7ff f982 	bl	8003dc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff f916 	bl	8003cfa <LL_ADC_SetSamplingTimeCommonConfig>
 8004ace:	e00e      	b.n	8004aee <HAL_ADC_ConfigChannel+0x11a>
=======
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e6:	d10f      	bne.n	8004708 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	4619      	mov	r1, r3
 80046f4:	f7ff fbb5 	bl	8003e62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fb5c 	bl	8003dbe <LL_ADC_SetSamplingTimeCommonConfig>
 8004706:	e00e      	b.n	8004726 <HAL_ADC_ConfigChannel+0x11a>
>>>>>>> origin/main
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
<<<<<<< HEAD
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f7ff f971 	bl	8003dc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff f906 	bl	8003cfa <LL_ADC_SetSamplingTimeCommonConfig>
=======
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	461a      	mov	r2, r3
 8004716:	f7ff fba4 	bl	8003e62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fb4c 	bl	8003dbe <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> origin/main

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
<<<<<<< HEAD
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d00a      	beq.n	8004b26 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6919      	ldr	r1, [r3, #16]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b20:	f7ff f896 	bl	8003c50 <LL_ADC_SetOffset>
 8004b24:	e17b      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x44a>
=======
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d00a      	beq.n	800475e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004758:	f7ff fadc 	bl	8003d14 <LL_ADC_SetOffset>
 800475c:	e17b      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x44a>
>>>>>>> origin/main
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f8b3 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x17e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff f8a8 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	0e9b      	lsrs	r3, r3, #26
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	e01e      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x1bc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f89d 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff faf9 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <HAL_ADC_ConfigChannel+0x17e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff faee 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	e01e      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x1bc>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fae3 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> origin/main
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8004b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 800479c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> origin/main
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 8004b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
=======
 80047a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
>>>>>>> origin/main
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 8004b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e004      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x1d4>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	e018      	b.n	8004bda <HAL_ADC_ConfigChannel+0x206>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bb4:	fa93 f3a3 	rbit	r3, r3
 8004bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e004      	b.n	8004bda <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d106      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff f86c 	bl	8003cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff f850 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x244>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f845 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	0e9b      	lsrs	r3, r3, #26
 8004c12:	f003 021f 	and.w	r2, r3, #31
 8004c16:	e01e      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x282>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f83a 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004c46:	2320      	movs	r3, #32
 8004c48:	e004      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x29a>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0e9b      	lsrs	r3, r3, #26
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	e018      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x2cc>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004c92:	2320      	movs	r3, #32
 8004c94:	e004      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d106      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff f809 	bl	8003cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe ffed 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x30a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe ffe2 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	0e9b      	lsrs	r3, r3, #26
 8004cd8:	f003 021f 	and.w	r2, r3, #31
 8004cdc:	e01e      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x348>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe ffd7 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e004      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x360>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0e9b      	lsrs	r3, r3, #26
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	e016      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x38e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e004      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d106      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe ffa8 	bl	8003cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2103      	movs	r1, #3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe ff8c 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x3cc>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2103      	movs	r1, #3
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe ff81 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004d96:	4603      	mov	r3, r0
 8004d98:	0e9b      	lsrs	r3, r3, #26
 8004d9a:	f003 021f 	and.w	r2, r3, #31
 8004d9e:	e017      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x3fc>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2103      	movs	r1, #3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe ff76 	bl	8003c98 <LL_ADC_GetOffsetChannel>
 8004dac:	4603      	mov	r3, r0
 8004dae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	e003      	b.n	8004dce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc8:	fab3 f383 	clz	r3, r3
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x414>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0e9b      	lsrs	r3, r3, #26
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	e011      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x438>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df0:	fa93 f3a3 	rbit	r3, r3
 8004df4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004e00:	2320      	movs	r3, #32
 8004e02:	e003      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d106      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2103      	movs	r1, #3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe ff53 	bl	8003cc4 <LL_ADC_SetOffsetState>
=======
 80047b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e004      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80047bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1d4>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	e018      	b.n	8004812 <HAL_ADC_ConfigChannel+0x206>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e004      	b.n	8004812 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004812:	429a      	cmp	r2, r3
 8004814:	d106      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fab2 	bl	8003d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fa96 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x244>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fa8b 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 021f 	and.w	r2, r3, #31
 800484e:	e01e      	b.n	800488e <HAL_ADC_ConfigChannel+0x282>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fa80 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800486e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800487e:	2320      	movs	r3, #32
 8004880:	e004      	b.n	800488c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x29a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	e018      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x2cc>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80048ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80048c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80048ca:	2320      	movs	r3, #32
 80048cc:	e004      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80048ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048d8:	429a      	cmp	r2, r3
 80048da:	d106      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fa4f 	bl	8003d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fa33 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x30a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2102      	movs	r1, #2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fa28 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 800490c:	4603      	mov	r3, r0
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	e01e      	b.n	8004954 <HAL_ADC_ConfigChannel+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fa1d 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 8004922:	4603      	mov	r3, r0
 8004924:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800493c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e004      	b.n	8004952 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_ADC_ConfigChannel+0x360>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	e016      	b.n	800499a <HAL_ADC_ConfigChannel+0x38e>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800497e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	e004      	b.n	800499a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800499a:	429a      	cmp	r2, r3
 800499c:	d106      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2102      	movs	r1, #2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f9ee 	bl	8003d88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2103      	movs	r1, #3
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff f9d2 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x3cc>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2103      	movs	r1, #3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff f9c7 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 80049ce:	4603      	mov	r3, r0
 80049d0:	0e9b      	lsrs	r3, r3, #26
 80049d2:	f003 021f 	and.w	r2, r3, #31
 80049d6:	e017      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x3fc>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2103      	movs	r1, #3
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff f9bc 	bl	8003d5c <LL_ADC_GetOffsetChannel>
 80049e4:	4603      	mov	r3, r0
 80049e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ea:	fa93 f3a3 	rbit	r3, r3
 80049ee:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80049f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80049fa:	2320      	movs	r3, #32
 80049fc:	e003      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80049fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x414>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	e011      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x438>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d106      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2103      	movs	r1, #3
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff f999 	bl	8003d88 <LL_ADC_SetOffsetState>
>>>>>>> origin/main
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff f8b0 	bl	8003f88 <LL_ADC_IsEnabled>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8140 	bne.w	80050b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6819      	ldr	r1, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f7fe ffed 	bl	8003e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4a8f      	ldr	r2, [pc, #572]	; (8005084 <HAL_ADC_ConfigChannel+0x6b0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	f040 8131 	bne.w	80050b0 <HAL_ADC_ConfigChannel+0x6dc>
=======
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fad4 	bl	8004008 <LL_ADC_IsEnabled>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 8140 	bne.w	8004ce8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f7ff fa1f 	bl	8003eb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a8f      	ldr	r2, [pc, #572]	; (8004cbc <HAL_ADC_ConfigChannel+0x6b0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f040 8131 	bne.w	8004ce8 <HAL_ADC_ConfigChannel+0x6dc>
>>>>>>> origin/main
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x4a2>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0e9b      	lsrs	r3, r3, #26
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2b09      	cmp	r3, #9
 8004e6c:	bf94      	ite	ls
 8004e6e:	2301      	movls	r3, #1
 8004e70:	2300      	movhi	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e019      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x4d6>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	e003      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	bf94      	ite	ls
 8004ea4:	2301      	movls	r3, #1
 8004ea6:	2300      	movhi	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d079      	beq.n	8004fa2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x4f6>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	0e9b      	lsrs	r3, r3, #26
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	069b      	lsls	r3, r3, #26
 8004ec4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ec8:	e015      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x522>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	e003      	b.n	8004eee <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	069b      	lsls	r3, r3, #26
 8004ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x542>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0e9b      	lsrs	r3, r3, #26
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	e017      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x572>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e003      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	ea42 0103 	orr.w	r1, r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x598>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	0e9b      	lsrs	r3, r3, #26
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f003 021f 	and.w	r2, r3, #31
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	e018      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x5ca>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004f84:	2320      	movs	r3, #32
 8004f86:	e003      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	3301      	adds	r3, #1
 8004f92:	f003 021f 	and.w	r2, r3, #31
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	e081      	b.n	80050a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x5ea>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	0e9b      	lsrs	r3, r3, #26
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	069b      	lsls	r3, r3, #26
 8004fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fbc:	e015      	b.n	8004fea <HAL_ADC_ConfigChannel+0x616>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	e003      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	069b      	lsls	r3, r3, #26
 8004fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <HAL_ADC_ConfigChannel+0x636>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2101      	movs	r1, #1
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	e017      	b.n	800503a <HAL_ADC_ConfigChannel+0x666>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	61fb      	str	r3, [r7, #28]
  return result;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005022:	2320      	movs	r3, #32
 8005024:	e003      	b.n	800502e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	fab3 f383 	clz	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	3301      	adds	r3, #1
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	ea42 0103 	orr.w	r1, r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x692>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	0e9b      	lsrs	r3, r3, #26
 8005050:	3301      	adds	r3, #1
 8005052:	f003 021f 	and.w	r2, r3, #31
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	3b1e      	subs	r3, #30
 800505e:	051b      	lsls	r3, r3, #20
 8005060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005064:	e01e      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x6d0>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	613b      	str	r3, [r7, #16]
  return result;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800507e:	2320      	movs	r3, #32
 8005080:	e006      	b.n	8005090 <HAL_ADC_ConfigChannel+0x6bc>
 8005082:	bf00      	nop
 8005084:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	3301      	adds	r3, #1
 8005092:	f003 021f 	and.w	r2, r3, #31
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	3b1e      	subs	r3, #30
 800509e:	051b      	lsls	r3, r3, #20
 80050a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050a4:	430b      	orrs	r3, r1
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	4619      	mov	r1, r3
 80050ac:	f7fe fe8a 	bl	8003dc4 <LL_ADC_SetChannelSamplingTime>
=======
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x4a2>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	bf94      	ite	ls
 8004aa6:	2301      	movls	r3, #1
 8004aa8:	2300      	movhi	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e019      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x4d6>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004abe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004ac6:	2320      	movs	r3, #32
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	bf94      	ite	ls
 8004adc:	2301      	movls	r3, #1
 8004ade:	2300      	movhi	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d079      	beq.n	8004bda <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x4f6>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	3301      	adds	r3, #1
 8004afa:	069b      	lsls	r3, r3, #26
 8004afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b00:	e015      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x522>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	e003      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3301      	adds	r3, #1
 8004b28:	069b      	lsls	r3, r3, #26
 8004b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x542>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	e017      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x572>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	ea42 0103 	orr.w	r1, r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x598>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	0e9b      	lsrs	r3, r3, #26
 8004b94:	3301      	adds	r3, #1
 8004b96:	f003 021f 	and.w	r2, r3, #31
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	e018      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x5ca>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 021f 	and.w	r2, r3, #31
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	e081      	b.n	8004cde <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x5ea>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	0e9b      	lsrs	r3, r3, #26
 8004bec:	3301      	adds	r3, #1
 8004bee:	069b      	lsls	r3, r3, #26
 8004bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf4:	e015      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x616>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004c0e:	2320      	movs	r3, #32
 8004c10:	e003      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	069b      	lsls	r3, r3, #26
 8004c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x636>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	0e9b      	lsrs	r3, r3, #26
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	e017      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x666>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	e003      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	ea42 0103 	orr.w	r1, r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x692>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 021f 	and.w	r2, r3, #31
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	3b1e      	subs	r3, #30
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	e01e      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x6d0>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	613b      	str	r3, [r7, #16]
  return result;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	e006      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x6bc>
 8004cba:	bf00      	nop
 8004cbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	f003 021f 	and.w	r2, r3, #31
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3b1e      	subs	r3, #30
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6892      	ldr	r2, [r2, #8]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7ff f8bd 	bl	8003e62 <LL_ADC_SetChannelSamplingTime>
>>>>>>> origin/main
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_ADC_ConfigChannel+0x7d8>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d06c      	beq.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050bc:	483c      	ldr	r0, [pc, #240]	; (80051b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80050be:	f7fe fdb9 	bl	8003c34 <LL_ADC_GetCommonPathInternalCh>
 80050c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
=======
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d06c      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cf4:	483c      	ldr	r0, [pc, #240]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cf6:	f7fe ffff 	bl	8003cf8 <LL_ADC_GetCommonPathInternalCh>
 8004cfa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
>>>>>>> origin/main

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a3a      	ldr	r2, [pc, #232]	; (80051b4 <HAL_ADC_ConfigChannel+0x7e0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d127      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d121      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a35      	ldr	r2, [pc, #212]	; (80051b8 <HAL_ADC_ConfigChannel+0x7e4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d157      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ee:	4619      	mov	r1, r3
 80050f0:	482f      	ldr	r0, [pc, #188]	; (80051b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80050f2:	f7fe fd8c 	bl	8003c0e <LL_ADC_SetCommonPathInternalCh>
=======
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <HAL_ADC_ConfigChannel+0x7e0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d127      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d121      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d157      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d26:	4619      	mov	r1, r3
 8004d28:	482f      	ldr	r0, [pc, #188]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d2a:	f7fe ffd2 	bl	8003cd2 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> origin/main
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <HAL_ADC_ConfigChannel+0x7e8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <HAL_ADC_ConfigChannel+0x7ec>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005110:	e002      	b.n	8005118 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b01      	subs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f9      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800511e:	e03a      	b.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
=======
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <HAL_ADC_ConfigChannel+0x7e8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	4a30      	ldr	r2, [pc, #192]	; (8004df8 <HAL_ADC_ConfigChannel+0x7ec>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	099b      	lsrs	r3, r3, #6
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d48:	e002      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f9      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d56:	e03a      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
>>>>>>> origin/main
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
<<<<<<< HEAD
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_ADC_ConfigChannel+0x7f0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d113      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x77e>
 800512a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800512e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10d      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d12a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005144:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005148:	4619      	mov	r1, r3
 800514a:	4819      	ldr	r0, [pc, #100]	; (80051b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800514c:	f7fe fd5f 	bl	8003c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005150:	e021      	b.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
=======
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <HAL_ADC_ConfigChannel+0x7f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x77e>
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d12a      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d80:	4619      	mov	r1, r3
 8004d82:	4819      	ldr	r0, [pc, #100]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d84:	f7fe ffa5 	bl	8003cd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d88:	e021      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
>>>>>>> origin/main
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d11c      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800515c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d116      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <HAL_ADC_ConfigChannel+0x7e4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d111      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800517a:	4619      	mov	r1, r3
 800517c:	480c      	ldr	r0, [pc, #48]	; (80051b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800517e:	f7fe fd46 	bl	8003c0e <LL_ADC_SetCommonPathInternalCh>
 8005182:	e008      	b.n	8005196 <HAL_ADC_ConfigChannel+0x7c2>
=======
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_ADC_ConfigChannel+0x7f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d11c      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d116      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <HAL_ADC_ConfigChannel+0x7e4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d111      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db2:	4619      	mov	r1, r3
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004db6:	f7fe ff8c 	bl	8003cd2 <LL_ADC_SetCommonPathInternalCh>
 8004dba:	e008      	b.n	8004dce <HAL_ADC_ConfigChannel+0x7c2>
>>>>>>> origin/main
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
=======
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
>>>>>>> origin/main
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800519e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	37d8      	adds	r7, #216	; 0xd8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	80080000 	.word	0x80080000
 80051b0:	50040300 	.word	0x50040300
 80051b4:	c7520000 	.word	0xc7520000
 80051b8:	50040000 	.word	0x50040000
 80051bc:	20000000 	.word	0x20000000
 80051c0:	053e2d63 	.word	0x053e2d63
 80051c4:	cb840000 	.word	0xcb840000
 80051c8:	80000001 	.word	0x80000001

080051cc <ADC_ConversionStop>:
=======
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	37d8      	adds	r7, #216	; 0xd8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	80080000 	.word	0x80080000
 8004de8:	50040300 	.word	0x50040300
 8004dec:	c7520000 	.word	0xc7520000
 8004df0:	50040000 	.word	0x50040000
 8004df4:	20000000 	.word	0x20000000
 8004df8:	053e2d63 	.word	0x053e2d63
 8004dfc:	cb840000 	.word	0xcb840000
 8004e00:	80000001 	.word	0x80000001

08004e04 <ADC_ConversionStop>:
>>>>>>> origin/main
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
<<<<<<< HEAD
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	61bb      	str	r3, [r7, #24]
=======
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe ff1e 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 80051e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe ff3f 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 80051f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8098 	beq.w	8005334 <ADC_ConversionStop+0x168>
=======
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f942 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f963 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 8004e2c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8098 	beq.w	8004f6c <ADC_ConversionStop+0x168>
>>>>>>> origin/main
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
<<<<<<< HEAD
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02a      	beq.n	8005268 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7e5b      	ldrb	r3, [r3, #25]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d126      	bne.n	8005268 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7e1b      	ldrb	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d122      	bne.n	8005268 <ADC_ConversionStop+0x9c>
=======
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02a      	beq.n	8004ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7e5b      	ldrb	r3, [r3, #25]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d126      	bne.n	8004ea0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7e1b      	ldrb	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d122      	bne.n	8004ea0 <ADC_ConversionStop+0x9c>
>>>>>>> origin/main
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
<<<<<<< HEAD
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005226:	e014      	b.n	8005252 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4a45      	ldr	r2, [pc, #276]	; (8005340 <ADC_ConversionStop+0x174>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d90d      	bls.n	800524c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f043 0210 	orr.w	r2, r3, #16
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e074      	b.n	8005336 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d1e3      	bne.n	8005228 <ADC_ConversionStop+0x5c>
=======
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e5e:	e014      	b.n	8004e8a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <ADC_ConversionStop+0x174>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d90d      	bls.n	8004e84 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e074      	b.n	8004f6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3301      	adds	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d1e3      	bne.n	8004e60 <ADC_ConversionStop+0x5c>
>>>>>>> origin/main
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
<<<<<<< HEAD
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2240      	movs	r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]
=======
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2240      	movs	r2, #64	; 0x40
 8004e9e:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
<<<<<<< HEAD
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d014      	beq.n	8005298 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fed6 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fe93 	bl	8003fae <LL_ADC_IsDisableOngoing>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe feb2 	bl	8003ffc <LL_ADC_REG_StopConversion>
=======
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d014      	beq.n	8004ed0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff f8fa 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff f8b7 	bl	800402e <LL_ADC_IsDisableOngoing>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f8d6 	bl	800407c <LL_ADC_REG_StopConversion>
>>>>>>> origin/main
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
<<<<<<< HEAD
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d014      	beq.n	80052c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fee5 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fe7b 	bl	8003fae <LL_ADC_IsDisableOngoing>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fec1 	bl	800404a <LL_ADC_INJ_StopConversion>
=======
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d014      	beq.n	8004f00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f909 	bl	80040f2 <LL_ADC_INJ_IsConversionOngoing>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00c      	beq.n	8004f00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f89f 	bl	800402e <LL_ADC_IsDisableOngoing>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff f8e5 	bl	80040ca <LL_ADC_INJ_StopConversion>
>>>>>>> origin/main
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
<<<<<<< HEAD
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d005      	beq.n	80052da <ADC_ConversionStop+0x10e>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d105      	bne.n	80052e0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80052d4:	230c      	movs	r3, #12
 80052d6:	617b      	str	r3, [r7, #20]
        break;
 80052d8:	e005      	b.n	80052e6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80052da:	2308      	movs	r3, #8
 80052dc:	617b      	str	r3, [r7, #20]
        break;
 80052de:	e002      	b.n	80052e6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80052e0:	2304      	movs	r3, #4
 80052e2:	617b      	str	r3, [r7, #20]
        break;
 80052e4:	bf00      	nop
=======
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d005      	beq.n	8004f12 <ADC_ConversionStop+0x10e>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d105      	bne.n	8004f18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	617b      	str	r3, [r7, #20]
        break;
 8004f10:	e005      	b.n	8004f1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004f12:	2308      	movs	r3, #8
 8004f14:	617b      	str	r3, [r7, #20]
        break;
 8004f16:	e002      	b.n	8004f1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004f18:	2304      	movs	r3, #4
 8004f1a:	617b      	str	r3, [r7, #20]
        break;
 8004f1c:	bf00      	nop
>>>>>>> origin/main
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80052e6:	f7fe fc4f 	bl	8003b88 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80052ec:	e01b      	b.n	8005326 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80052ee:	f7fe fc4b 	bl	8003b88 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	d914      	bls.n	8005326 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f043 0210 	orr.w	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	f043 0201 	orr.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1dc      	bne.n	80052ee <ADC_ConversionStop+0x122>
=======
 8004f1e:	f7fe fe95 	bl	8003c4c <HAL_GetTick>
 8004f22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f24:	e01b      	b.n	8004f5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004f26:	f7fe fe91 	bl	8003c4c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d914      	bls.n	8004f5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f043 0210 	orr.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1dc      	bne.n	8004f26 <ADC_ConversionStop+0x122>
>>>>>>> origin/main
    }

  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	a33fffff 	.word	0xa33fffff

08005344 <ADC_Enable>:
=======
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	a33fffff 	.word	0xa33fffff

08004f7c <ADC_Enable>:
>>>>>>> origin/main
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
=======
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60bb      	str	r3, [r7, #8]
>>>>>>> origin/main

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe fe17 	bl	8003f88 <LL_ADC_IsEnabled>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d169      	bne.n	8005434 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <ADC_Enable+0xfc>)
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <ADC_Enable+0x46>
=======
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff f83b 	bl	8004008 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d169      	bne.n	800506c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b36      	ldr	r3, [pc, #216]	; (8005078 <ADC_Enable+0xfc>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <ADC_Enable+0x46>
>>>>>>> origin/main
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f043 0210 	orr.w	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f043 0201 	orr.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e055      	b.n	8005436 <ADC_Enable+0xf2>
=======
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0210 	orr.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e055      	b.n	800506e <ADC_Enable+0xf2>
>>>>>>> origin/main
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fdd2 	bl	8003f38 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005394:	482b      	ldr	r0, [pc, #172]	; (8005444 <ADC_Enable+0x100>)
 8005396:	f7fe fc4d 	bl	8003c34 <LL_ADC_GetCommonPathInternalCh>
 800539a:	4603      	mov	r3, r0
 800539c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d013      	beq.n	80053cc <ADC_Enable+0x88>
=======
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fff6 	bl	8003fb8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004fcc:	482b      	ldr	r0, [pc, #172]	; (800507c <ADC_Enable+0x100>)
 8004fce:	f7fe fe93 	bl	8003cf8 <LL_ADC_GetCommonPathInternalCh>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <ADC_Enable+0x88>
>>>>>>> origin/main

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80053a4:	4b28      	ldr	r3, [pc, #160]	; (8005448 <ADC_Enable+0x104>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	099b      	lsrs	r3, r3, #6
 80053aa:	4a28      	ldr	r2, [pc, #160]	; (800544c <ADC_Enable+0x108>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80053be:	e002      	b.n	80053c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f9      	bne.n	80053c0 <ADC_Enable+0x7c>
=======
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <ADC_Enable+0x104>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	4a28      	ldr	r2, [pc, #160]	; (8005084 <ADC_Enable+0x108>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004ff6:	e002      	b.n	8004ffe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f9      	bne.n	8004ff8 <ADC_Enable+0x7c>
>>>>>>> origin/main
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80053cc:	f7fe fbdc 	bl	8003b88 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053d2:	e028      	b.n	8005426 <ADC_Enable+0xe2>
=======
 8005004:	f7fe fe22 	bl	8003c4c <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800500a:	e028      	b.n	800505e <ADC_Enable+0xe2>
>>>>>>> origin/main
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fdd5 	bl	8003f88 <LL_ADC_IsEnabled>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe fda5 	bl	8003f38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053ee:	f7fe fbcb 	bl	8003b88 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d914      	bls.n	8005426 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00d      	beq.n	8005426 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0210 	orr.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e007      	b.n	8005436 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d1cf      	bne.n	80053d4 <ADC_Enable+0x90>
=======
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fff9 	bl	8004008 <LL_ADC_IsEnabled>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe ffc9 	bl	8003fb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005026:	f7fe fe11 	bl	8003c4c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d914      	bls.n	800505e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d00d      	beq.n	800505e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f043 0210 	orr.w	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e007      	b.n	800506e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d1cf      	bne.n	800500c <ADC_Enable+0x90>
>>>>>>> origin/main
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	8000003f 	.word	0x8000003f
 8005444:	50040300 	.word	0x50040300
 8005448:	20000000 	.word	0x20000000
 800544c:	053e2d63 	.word	0x053e2d63

08005450 <ADC_Disable>:
=======
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	8000003f 	.word	0x8000003f
 800507c:	50040300 	.word	0x50040300
 8005080:	20000000 	.word	0x20000000
 8005084:	053e2d63 	.word	0x053e2d63

08005088 <ADC_Disable>:
>>>>>>> origin/main
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fda6 	bl	8003fae <LL_ADC_IsDisableOngoing>
 8005462:	60f8      	str	r0, [r7, #12]
=======
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe ffca 	bl	800402e <LL_ADC_IsDisableOngoing>
 800509a:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fd8d 	bl	8003f88 <LL_ADC_IsEnabled>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d047      	beq.n	8005504 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d144      	bne.n	8005504 <ADC_Disable+0xb4>
=======
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe ffb1 	bl	8004008 <LL_ADC_IsEnabled>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d047      	beq.n	800513c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d144      	bne.n	800513c <ADC_Disable+0xb4>
>>>>>>> origin/main
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
<<<<<<< HEAD
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 030d 	and.w	r3, r3, #13
 8005484:	2b01      	cmp	r3, #1
 8005486:	d10c      	bne.n	80054a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fd67 	bl	8003f60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2203      	movs	r2, #3
 8005498:	601a      	str	r2, [r3, #0]
=======
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030d 	and.w	r3, r3, #13
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10c      	bne.n	80050da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe ff8b 	bl	8003fe0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2203      	movs	r2, #3
 80050d0:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800549a:	f7fe fb75 	bl	8003b88 <HAL_GetTick>
 800549e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054a0:	e029      	b.n	80054f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f043 0210 	orr.w	r2, r3, #16
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	f043 0201 	orr.w	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e023      	b.n	8005506 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054be:	f7fe fb63 	bl	8003b88 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d914      	bls.n	80054f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f043 0210 	orr.w	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	f043 0201 	orr.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e007      	b.n	8005506 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1dc      	bne.n	80054be <ADC_Disable+0x6e>
=======
 80050d2:	f7fe fdbb 	bl	8003c4c <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050d8:	e029      	b.n	800512e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f043 0210 	orr.w	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e023      	b.n	800513e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050f6:	f7fe fda9 	bl	8003c4c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d914      	bls.n	800512e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f043 0201 	orr.w	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e007      	b.n	800513e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1dc      	bne.n	80050f6 <ADC_Disable+0x6e>
>>>>>>> origin/main
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <ADC_DMAConvCplt>:
=======
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <ADC_DMAConvCplt>:
>>>>>>> origin/main
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005524:	2b00      	cmp	r3, #0
 8005526:	d14b      	bne.n	80055c0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d14b      	bne.n	80051f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d021      	beq.n	8005586 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe fbea 	bl	8003d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d032      	beq.n	80055b8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d12b      	bne.n	80055b8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11f      	bne.n	80055b8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	f043 0201 	orr.w	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
 8005584:	e018      	b.n	80055b8 <ADC_DMAConvCplt+0xaa>
=======
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d021      	beq.n	80051be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fe30 	bl	8003de4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d032      	beq.n	80051f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d12b      	bne.n	80051f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11f      	bne.n	80051f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0201 	orr.w	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
 80051bc:	e018      	b.n	80051f0 <ADC_DMAConvCplt+0xaa>
>>>>>>> origin/main
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d111      	bne.n	80055b8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d111      	bne.n	80051f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> origin/main

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7fd fe8b 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
=======
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7fe f8db 	bl	80033ac <HAL_ADC_ConvCpltCallback>
>>>>>>> origin/main
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 80055be:	e00e      	b.n	80055de <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff f9f7 	bl	80049c0 <HAL_ADC_ErrorCallback>
}
 80055d2:	e004      	b.n	80055de <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <ADC_DMAHalfConvCplt>:
=======
 80051f6:	e00e      	b.n	8005216 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff f9f6 	bl	80045f6 <HAL_ADC_ErrorCallback>
}
 800520a:	e004      	b.n	8005216 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <ADC_DMAHalfConvCplt>:
>>>>>>> origin/main
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	60fb      	str	r3, [r7, #12]
=======
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff f9cf 	bl	8004998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <ADC_DMAError>:
=======
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff f9d8 	bl	80045e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <ADC_DMAError>:
>>>>>>> origin/main
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	f043 0204 	orr.w	r2, r3, #4
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> origin/main

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff f9c9 	bl	80049c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <LL_ADC_IsEnabled>:
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <LL_ADC_IsEnabled+0x18>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <LL_ADC_IsEnabled+0x1a>
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_ADC_REG_IsConversionOngoing>:
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d101      	bne.n	8005674 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_ADCEx_MultiModeConfigChannel>:
=======
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff f9c8 	bl	80045f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <LL_ADC_IsEnabled>:
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <LL_ADC_IsEnabled+0x18>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <LL_ADC_IsEnabled+0x1a>
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_ADC_REG_IsConversionOngoing>:
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d101      	bne.n	80052ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> origin/main
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
<<<<<<< HEAD
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b09f      	sub	sp, #124	; 0x7c
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
=======
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b09f      	sub	sp, #124	; 0x7c
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
>>>>>>> origin/main
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005702:	2302      	movs	r3, #2
 8005704:	e089      	b.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800570e:	2300      	movs	r3, #0
 8005710:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005712:	2300      	movs	r3, #0
 8005714:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d102      	bne.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005720:	4b41      	ldr	r3, [pc, #260]	; (8005828 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	e001      	b.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e068      	b.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x132>
=======
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e089      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80052e2:	2300      	movs	r3, #0
 80052e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80052e6:	2300      	movs	r3, #0
 80052e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a42      	ldr	r2, [pc, #264]	; (80053f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d102      	bne.n	80052fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052f4:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	e001      	b.n	80052fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e068      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
>>>>>>> origin/main
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
<<<<<<< HEAD
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff86 	bl	800565c <LL_ADC_REG_IsConversionOngoing>
 8005750:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff80 	bl	800565c <LL_ADC_REG_IsConversionOngoing>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d14a      	bne.n	80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005764:	2b00      	cmp	r3, #0
 8005766:	d147      	bne.n	80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005768:	4b30      	ldr	r3, [pc, #192]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800576a:	66fb      	str	r3, [r7, #108]	; 0x6c
=======
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff ffb8 	bl	8005294 <LL_ADC_REG_IsConversionOngoing>
 8005324:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ffb2 	bl	8005294 <LL_ADC_REG_IsConversionOngoing>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d14a      	bne.n	80053cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005338:	2b00      	cmp	r3, #0
 800533a:	d147      	bne.n	80053cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800533c:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800533e:	66fb      	str	r3, [r7, #108]	; 0x6c
>>>>>>> origin/main

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d027      	beq.n	80057c4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005786:	035b      	lsls	r3, r3, #13
 8005788:	430b      	orrs	r3, r1
 800578a:	431a      	orrs	r2, r3
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	609a      	str	r2, [r3, #8]
=======
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d027      	beq.n	8005398 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800535a:	035b      	lsls	r3, r3, #13
 800535c:	430b      	orrs	r3, r1
 800535e:	431a      	orrs	r2, r3
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8005790:	4824      	ldr	r0, [pc, #144]	; (8005824 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005792:	f7ff ff50 	bl	8005636 <LL_ADC_IsEnabled>
 8005796:	4604      	mov	r4, r0
 8005798:	4823      	ldr	r0, [pc, #140]	; (8005828 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800579a:	f7ff ff4c 	bl	8005636 <LL_ADC_IsEnabled>
 800579e:	4603      	mov	r3, r0
 80057a0:	4323      	orrs	r3, r4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d132      	bne.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	6892      	ldr	r2, [r2, #8]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	431a      	orrs	r2, r3
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c2:	e023      	b.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0x124>
=======
 8005364:	4824      	ldr	r0, [pc, #144]	; (80053f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005366:	f7ff ff82 	bl	800526e <LL_ADC_IsEnabled>
 800536a:	4604      	mov	r4, r0
 800536c:	4823      	ldr	r0, [pc, #140]	; (80053fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800536e:	f7ff ff7e 	bl	800526e <LL_ADC_IsEnabled>
 8005372:	4603      	mov	r3, r0
 8005374:	4323      	orrs	r3, r4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d132      	bne.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005382:	f023 030f 	bic.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	6811      	ldr	r1, [r2, #0]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	6892      	ldr	r2, [r2, #8]
 800538e:	430a      	orrs	r2, r1
 8005390:	431a      	orrs	r2, r3
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005396:	e023      	b.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
>>>>>>> origin/main
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 80057c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	609a      	str	r2, [r3, #8]
=======
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 80057d0:	4814      	ldr	r0, [pc, #80]	; (8005824 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80057d2:	f7ff ff30 	bl	8005636 <LL_ADC_IsEnabled>
 80057d6:	4604      	mov	r4, r0
 80057d8:	4813      	ldr	r0, [pc, #76]	; (8005828 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057da:	f7ff ff2c 	bl	8005636 <LL_ADC_IsEnabled>
 80057de:	4603      	mov	r3, r0
 80057e0:	4323      	orrs	r3, r4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d112      	bne.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057ee:	f023 030f 	bic.w	r3, r3, #15
 80057f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057f6:	e009      	b.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0x124>
=======
 80053a4:	4814      	ldr	r0, [pc, #80]	; (80053f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80053a6:	f7ff ff62 	bl	800526e <LL_ADC_IsEnabled>
 80053aa:	4604      	mov	r4, r0
 80053ac:	4813      	ldr	r0, [pc, #76]	; (80053fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80053ae:	f7ff ff5e 	bl	800526e <LL_ADC_IsEnabled>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4323      	orrs	r3, r4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d112      	bne.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80053c2:	f023 030f 	bic.w	r3, r3, #15
 80053c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053ca:	e009      	b.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
>>>>>>> origin/main
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800580a:	e000      	b.n	800580e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800580c:	bf00      	nop
=======
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80053de:	e000      	b.n	80053e2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053e0:	bf00      	nop
>>>>>>> origin/main
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005816:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800581a:	4618      	mov	r0, r3
 800581c:	377c      	adds	r7, #124	; 0x7c
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	bf00      	nop
 8005824:	50040000 	.word	0x50040000
 8005828:	50040100 	.word	0x50040100
 800582c:	50040300 	.word	0x50040300

08005830 <__NVIC_SetPriorityGrouping>:
=======
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	377c      	adds	r7, #124	; 0x7c
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	50040000 	.word	0x50040000
 80053fc:	50040100 	.word	0x50040100
 8005400:	50040300 	.word	0x50040300

08005404 <__NVIC_SetPriorityGrouping>:
>>>>>>> origin/main
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800584c:	4013      	ands	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800585c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	60d3      	str	r3, [r2, #12]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_GetPriorityGrouping>:
=======
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005420:	4013      	ands	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800542c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	60d3      	str	r3, [r2, #12]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <__NVIC_GetPriorityGrouping>:
>>>>>>> origin/main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <__NVIC_GetPriorityGrouping+0x18>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 0307 	and.w	r3, r3, #7
}
 8005886:	4618      	mov	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <__NVIC_EnableIRQ>:
=======
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <__NVIC_GetPriorityGrouping+0x18>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 0307 	and.w	r3, r3, #7
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_EnableIRQ>:
>>>>>>> origin/main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db0b      	blt.n	80058be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	4907      	ldr	r1, [pc, #28]	; (80058cc <__NVIC_EnableIRQ+0x38>)
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2001      	movs	r0, #1
 80058b6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000e100 	.word	0xe000e100

080058d0 <__NVIC_SetPriority>:
=======
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	db0b      	blt.n	8005492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	f003 021f 	and.w	r2, r3, #31
 8005480:	4907      	ldr	r1, [pc, #28]	; (80054a0 <__NVIC_EnableIRQ+0x38>)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2001      	movs	r0, #1
 800548a:	fa00 f202 	lsl.w	r2, r0, r2
 800548e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000e100 	.word	0xe000e100

080054a4 <__NVIC_SetPriority>:
>>>>>>> origin/main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db0a      	blt.n	80058fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	490c      	ldr	r1, [pc, #48]	; (800591c <__NVIC_SetPriority+0x4c>)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	440b      	add	r3, r1
 80058f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	6039      	str	r1, [r7, #0]
 80054ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db0a      	blt.n	80054ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	490c      	ldr	r1, [pc, #48]	; (80054f0 <__NVIC_SetPriority+0x4c>)
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	0112      	lsls	r2, r2, #4
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	440b      	add	r3, r1
 80054c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> origin/main
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80058f8:	e00a      	b.n	8005910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4908      	ldr	r1, [pc, #32]	; (8005920 <__NVIC_SetPriority+0x50>)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3b04      	subs	r3, #4
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	440b      	add	r3, r1
 800590e:	761a      	strb	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000e100 	.word	0xe000e100
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <NVIC_EncodePriority>:
=======
 80054cc:	e00a      	b.n	80054e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4908      	ldr	r1, [pc, #32]	; (80054f4 <__NVIC_SetPriority+0x50>)
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	3b04      	subs	r3, #4
 80054dc:	0112      	lsls	r2, r2, #4
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	440b      	add	r3, r1
 80054e2:	761a      	strb	r2, [r3, #24]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	e000e100 	.word	0xe000e100
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <NVIC_EncodePriority>:
>>>>>>> origin/main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	; 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	61fb      	str	r3, [r7, #28]
=======
 80054f8:	b480      	push	{r7}
 80054fa:	b089      	sub	sp, #36	; 0x24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	61fb      	str	r3, [r7, #28]
>>>>>>> origin/main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	bf28      	it	cs
 8005942:	2304      	movcs	r3, #4
 8005944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3304      	adds	r3, #4
 800594a:	2b06      	cmp	r3, #6
 800594c:	d902      	bls.n	8005954 <NVIC_EncodePriority+0x30>
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3b03      	subs	r3, #3
 8005952:	e000      	b.n	8005956 <NVIC_EncodePriority+0x32>
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800596c:	f04f 31ff 	mov.w	r1, #4294967295
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	43d9      	mvns	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	4313      	orrs	r3, r2
         );
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <SysTick_Config>:
=======
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f1c3 0307 	rsb	r3, r3, #7
 8005512:	2b04      	cmp	r3, #4
 8005514:	bf28      	it	cs
 8005516:	2304      	movcs	r3, #4
 8005518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	3304      	adds	r3, #4
 800551e:	2b06      	cmp	r3, #6
 8005520:	d902      	bls.n	8005528 <NVIC_EncodePriority+0x30>
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3b03      	subs	r3, #3
 8005526:	e000      	b.n	800552a <NVIC_EncodePriority+0x32>
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	401a      	ands	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005540:	f04f 31ff 	mov.w	r1, #4294967295
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43d9      	mvns	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005550:	4313      	orrs	r3, r2
         );
}
 8005552:	4618      	mov	r0, r3
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <SysTick_Config>:
>>>>>>> origin/main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800599c:	d301      	bcc.n	80059a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800599e:	2301      	movs	r3, #1
 80059a0:	e00f      	b.n	80059c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <SysTick_Config+0x40>)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059aa:	210f      	movs	r1, #15
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	f7ff ff8e 	bl	80058d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <SysTick_Config+0x40>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <SysTick_Config+0x40>)
 80059bc:	2207      	movs	r2, #7
 80059be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000e010 	.word	0xe000e010

080059d0 <HAL_NVIC_SetPriorityGrouping>:
=======
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005570:	d301      	bcc.n	8005576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005572:	2301      	movs	r3, #1
 8005574:	e00f      	b.n	8005596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005576:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <SysTick_Config+0x40>)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3b01      	subs	r3, #1
 800557c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800557e:	210f      	movs	r1, #15
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	f7ff ff8e 	bl	80054a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <SysTick_Config+0x40>)
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <SysTick_Config+0x40>)
 8005590:	2207      	movs	r2, #7
 8005592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	e000e010 	.word	0xe000e010

080055a4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> origin/main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
=======
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff ff29 	bl	8005830 <__NVIC_SetPriorityGrouping>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	4603      	mov	r3, r0
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059f8:	f7ff ff3e 	bl	8005878 <__NVIC_GetPriorityGrouping>
 80059fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f7ff ff8e 	bl	8005924 <NVIC_EncodePriority>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff5d 	bl	80058d0 <__NVIC_SetPriority>
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4603      	mov	r3, r0
 8005a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff31 	bl	8005894 <__NVIC_EnableIRQ>
=======
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff29 	bl	8005404 <__NVIC_SetPriorityGrouping>
>>>>>>> origin/main
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08005a3a <HAL_SYSTICK_Config>:
=======
080055ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	4603      	mov	r3, r0
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055cc:	f7ff ff3e 	bl	800544c <__NVIC_GetPriorityGrouping>
 80055d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7ff ff8e 	bl	80054f8 <NVIC_EncodePriority>
 80055dc:	4602      	mov	r2, r0
 80055de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ff5d 	bl	80054a4 <__NVIC_SetPriority>
}
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	4603      	mov	r3, r0
 80055fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ff31 	bl	8005468 <__NVIC_EnableIRQ>
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_SYSTICK_Config>:
>>>>>>> origin/main
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff ffa2 	bl	800598c <SysTick_Config>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_DMA_Init>:
=======
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ffa2 	bl	8005560 <SysTick_Config>
 800561c:	4603      	mov	r3, r0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_DMA_Init>:
>>>>>>> origin/main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
=======
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
<<<<<<< HEAD
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e098      	b.n	8005b98 <HAL_DMA_Init+0x144>
=======
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e098      	b.n	800576c <HAL_DMA_Init+0x144>
>>>>>>> origin/main
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_DMA_Init+0x150>)
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d80f      	bhi.n	8005a92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b4b      	ldr	r3, [pc, #300]	; (8005ba8 <HAL_DMA_Init+0x154>)
 8005a7a:	4413      	add	r3, r2
 8005a7c:	4a4b      	ldr	r2, [pc, #300]	; (8005bac <HAL_DMA_Init+0x158>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	009a      	lsls	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a48      	ldr	r2, [pc, #288]	; (8005bb0 <HAL_DMA_Init+0x15c>)
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a90:	e00e      	b.n	8005ab0 <HAL_DMA_Init+0x5c>
=======
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_DMA_Init+0x150>)
 8005642:	429a      	cmp	r2, r3
 8005644:	d80f      	bhi.n	8005666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_DMA_Init+0x154>)
 800564e:	4413      	add	r3, r2
 8005650:	4a4b      	ldr	r2, [pc, #300]	; (8005780 <HAL_DMA_Init+0x158>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	009a      	lsls	r2, r3, #2
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a48      	ldr	r2, [pc, #288]	; (8005784 <HAL_DMA_Init+0x15c>)
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
 8005664:	e00e      	b.n	8005684 <HAL_DMA_Init+0x5c>
>>>>>>> origin/main
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
<<<<<<< HEAD
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_DMA_Init+0x160>)
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4a43      	ldr	r2, [pc, #268]	; (8005bac <HAL_DMA_Init+0x158>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	009a      	lsls	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a42      	ldr	r2, [pc, #264]	; (8005bb8 <HAL_DMA_Init+0x164>)
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	4b46      	ldr	r3, [pc, #280]	; (8005788 <HAL_DMA_Init+0x160>)
 800566e:	4413      	add	r3, r2
 8005670:	4a43      	ldr	r2, [pc, #268]	; (8005780 <HAL_DMA_Init+0x158>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	009a      	lsls	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a42      	ldr	r2, [pc, #264]	; (800578c <HAL_DMA_Init+0x164>)
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> origin/main
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
=======
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]
=======
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
<<<<<<< HEAD
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0a:	d039      	beq.n	8005b80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	4a27      	ldr	r2, [pc, #156]	; (8005bb0 <HAL_DMA_Init+0x15c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d11a      	bne.n	8005b4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f003 031c 	and.w	r3, r3, #28
 8005b22:	210f      	movs	r1, #15
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	4924      	ldr	r1, [pc, #144]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b30:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	f003 031c 	and.w	r3, r3, #28
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	491d      	ldr	r1, [pc, #116]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
 8005b4a:	e019      	b.n	8005b80 <HAL_DMA_Init+0x12c>
=======
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056de:	d039      	beq.n	8005754 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	4a27      	ldr	r2, [pc, #156]	; (8005784 <HAL_DMA_Init+0x15c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d11a      	bne.n	8005720 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <HAL_DMA_Init+0x168>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f003 031c 	and.w	r3, r3, #28
 80056f6:	210f      	movs	r1, #15
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	4924      	ldr	r1, [pc, #144]	; (8005790 <HAL_DMA_Init+0x168>)
 8005700:	4013      	ands	r3, r2
 8005702:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_DMA_Init+0x168>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	f003 031c 	and.w	r3, r3, #28
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	491d      	ldr	r1, [pc, #116]	; (8005790 <HAL_DMA_Init+0x168>)
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
 800571e:	e019      	b.n	8005754 <HAL_DMA_Init+0x12c>
>>>>>>> origin/main
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	f003 031c 	and.w	r3, r3, #28
 8005b58:	210f      	movs	r1, #15
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	4917      	ldr	r1, [pc, #92]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f003 031c 	and.w	r3, r3, #28
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	4911      	ldr	r1, [pc, #68]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
=======
 8005720:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <HAL_DMA_Init+0x16c>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	f003 031c 	and.w	r3, r3, #28
 800572c:	210f      	movs	r1, #15
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	4917      	ldr	r1, [pc, #92]	; (8005794 <HAL_DMA_Init+0x16c>)
 8005736:	4013      	ands	r3, r2
 8005738:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <HAL_DMA_Init+0x16c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f003 031c 	and.w	r3, r3, #28
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	4911      	ldr	r1, [pc, #68]	; (8005794 <HAL_DMA_Init+0x16c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40020407 	.word	0x40020407
 8005ba8:	bffdfff8 	.word	0xbffdfff8
 8005bac:	cccccccd 	.word	0xcccccccd
 8005bb0:	40020000 	.word	0x40020000
 8005bb4:	bffdfbf8 	.word	0xbffdfbf8
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	400200a8 	.word	0x400200a8
 8005bc0:	400204a8 	.word	0x400204a8

08005bc4 <HAL_DMA_Start_IT>:
=======
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40020407 	.word	0x40020407
 800577c:	bffdfff8 	.word	0xbffdfff8
 8005780:	cccccccd 	.word	0xcccccccd
 8005784:	40020000 	.word	0x40020000
 8005788:	bffdfbf8 	.word	0xbffdfbf8
 800578c:	40020400 	.word	0x40020400
 8005790:	400200a8 	.word	0x400200a8
 8005794:	400204a8 	.word	0x400204a8

08005798 <HAL_DMA_Start_IT>:
>>>>>>> origin/main
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
=======
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_DMA_Start_IT+0x20>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e04b      	b.n	8005c7c <HAL_DMA_Start_IT+0xb8>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d13a      	bne.n	8005c6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f91e 	bl	8005e5e <DMA_SetConfig>
=======
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_DMA_Start_IT+0x20>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e04b      	b.n	8005850 <HAL_DMA_Start_IT+0xb8>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d13a      	bne.n	8005842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f91e 	bl	8005a32 <DMA_SetConfig>
>>>>>>> origin/main

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
<<<<<<< HEAD
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 020e 	orr.w	r2, r2, #14
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e00f      	b.n	8005c5c <HAL_DMA_Start_IT+0x98>
=======
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 020e 	orr.w	r2, r2, #14
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e00f      	b.n	8005830 <HAL_DMA_Start_IT+0x98>
>>>>>>> origin/main
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0204 	bic.w	r2, r2, #4
 8005c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 020a 	orr.w	r2, r2, #10
 8005c5a:	601a      	str	r2, [r3, #0]
=======
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 020a 	orr.w	r2, r2, #10
 800582e:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e005      	b.n	8005c7a <HAL_DMA_Start_IT+0xb6>
=======
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e005      	b.n	800584e <HAL_DMA_Start_IT+0xb6>
>>>>>>> origin/main
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_DMA_Abort>:
=======
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_DMA_Abort>:
>>>>>>> origin/main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e022      	b.n	8005cf4 <HAL_DMA_Abort+0x70>
=======
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d008      	beq.n	8005882 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2204      	movs	r2, #4
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e022      	b.n	80058c8 <HAL_DMA_Abort+0x70>
>>>>>>> origin/main
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 020e 	bic.w	r2, r2, #14
 8005cbc:	601a      	str	r2, [r3, #0]
=======
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 020e 	bic.w	r2, r2, #14
 8005890:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f003 021c 	and.w	r2, r3, #28
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2101      	movs	r1, #1
 8005cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce0:	605a      	str	r2, [r3, #4]
=======
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	f003 021c 	and.w	r2, r3, #28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2101      	movs	r1, #1
 80058b0:	fa01 f202 	lsl.w	r2, r1, r2
 80058b4:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_DMA_IRQHandler>:
=======
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_DMA_IRQHandler>:
>>>>>>> origin/main
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1c:	f003 031c 	and.w	r3, r3, #28
 8005d20:	2204      	movs	r2, #4
 8005d22:	409a      	lsls	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d026      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x7a>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d021      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0204 	bic.w	r2, r2, #4
 8005d52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	f003 021c 	and.w	r2, r3, #28
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2104      	movs	r1, #4
 8005d62:	fa01 f202 	lsl.w	r2, r1, r2
 8005d66:	605a      	str	r2, [r3, #4]
=======
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f0:	f003 031c 	and.w	r3, r3, #28
 80058f4:	2204      	movs	r2, #4
 80058f6:	409a      	lsls	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d026      	beq.n	800594e <HAL_DMA_IRQHandler+0x7a>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0204 	bic.w	r2, r2, #4
 8005926:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	f003 021c 	and.w	r2, r3, #28
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	2104      	movs	r1, #4
 8005936:	fa01 f202 	lsl.w	r2, r1, r2
 800593a:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d071      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005d78:	e06c      	b.n	8005e54 <HAL_DMA_IRQHandler+0x154>
=======
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	d071      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800594c:	e06c      	b.n	8005a28 <HAL_DMA_IRQHandler+0x154>
>>>>>>> origin/main
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
<<<<<<< HEAD
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f003 031c 	and.w	r3, r3, #28
 8005d82:	2202      	movs	r2, #2
 8005d84:	409a      	lsls	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02e      	beq.n	8005dec <HAL_DMA_IRQHandler+0xec>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d029      	beq.n	8005dec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <HAL_DMA_IRQHandler+0xbe>
=======
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	f003 031c 	and.w	r3, r3, #28
 8005956:	2202      	movs	r2, #2
 8005958:	409a      	lsls	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d02e      	beq.n	80059c0 <HAL_DMA_IRQHandler+0xec>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d029      	beq.n	80059c0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <HAL_DMA_IRQHandler+0xbe>
>>>>>>> origin/main
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
<<<<<<< HEAD
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 020a 	bic.w	r2, r2, #10
 8005db4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f003 021c 	and.w	r2, r3, #28
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2102      	movs	r1, #2
 8005dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d038      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005dea:	e033      	b.n	8005e54 <HAL_DMA_IRQHandler+0x154>
=======
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 020a 	bic.w	r2, r2, #10
 8005988:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	f003 021c 	and.w	r2, r3, #28
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2102      	movs	r1, #2
 80059a0:	fa01 f202 	lsl.w	r2, r1, r2
 80059a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d038      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80059be:	e033      	b.n	8005a28 <HAL_DMA_IRQHandler+0x154>
>>>>>>> origin/main
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
<<<<<<< HEAD
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	f003 031c 	and.w	r3, r3, #28
 8005df4:	2208      	movs	r2, #8
 8005df6:	409a      	lsls	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02a      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x156>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d025      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x156>
=======
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f003 031c 	and.w	r3, r3, #28
 80059c8:	2208      	movs	r2, #8
 80059ca:	409a      	lsls	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02a      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x156>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d025      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x156>
>>>>>>> origin/main
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 020e 	bic.w	r2, r2, #14
 8005e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1e:	f003 021c 	and.w	r2, r3, #28
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2101      	movs	r1, #1
 8005e28:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
=======
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 020e 	bic.w	r2, r2, #14
 80059ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f003 021c 	and.w	r2, r3, #28
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
>>>>>>> origin/main
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
}
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <DMA_SetConfig>:
=======
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
}
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <DMA_SetConfig>:
>>>>>>> origin/main
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
=======
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
<<<<<<< HEAD
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f003 021c 	and.w	r2, r3, #28
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e7e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d108      	bne.n	8005ea2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	60da      	str	r2, [r3, #12]
=======
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	f003 021c 	and.w	r2, r3, #28
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d108      	bne.n	8005a76 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 8005ea0:	e007      	b.n	8005eb2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
}
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_GPIO_Init>:
=======
 8005a74:	e007      	b.n	8005a86 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_GPIO_Init>:
>>>>>>> origin/main
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
=======
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8005ece:	e14e      	b.n	800616e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8140 	beq.w	8006168 <HAL_GPIO_Init+0x2a8>
=======
 8005aa2:	e14e      	b.n	8005d42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8140 	beq.w	8005d3c <HAL_GPIO_Init+0x2a8>
>>>>>>> origin/main
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d005      	beq.n	8005f00 <HAL_GPIO_Init+0x40>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d130      	bne.n	8005f62 <HAL_GPIO_Init+0xa2>
=======
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d005      	beq.n	8005ad4 <HAL_GPIO_Init+0x40>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d130      	bne.n	8005b36 <HAL_GPIO_Init+0xa2>
>>>>>>> origin/main
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f36:	2201      	movs	r2, #1
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0201 	and.w	r2, r3, #1
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	605a      	str	r2, [r3, #4]
=======
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	2203      	movs	r2, #3
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4013      	ands	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	f003 0201 	and.w	r2, r3, #1
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d017      	beq.n	8005f9e <HAL_GPIO_Init+0xde>
=======
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d017      	beq.n	8005b72 <HAL_GPIO_Init+0xde>
>>>>>>> origin/main
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	2203      	movs	r2, #3
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	60da      	str	r2, [r3, #12]
=======
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d123      	bne.n	8005ff2 <HAL_GPIO_Init+0x132>
=======
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d123      	bne.n	8005bc6 <HAL_GPIO_Init+0x132>
>>>>>>> origin/main
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	08da      	lsrs	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3208      	adds	r2, #8
 8005fec:	6939      	ldr	r1, [r7, #16]
 8005fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	08da      	lsrs	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3208      	adds	r2, #8
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	220f      	movs	r2, #15
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	08da      	lsrs	r2, r3, #3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3208      	adds	r2, #8
 8005bc0:	6939      	ldr	r1, [r7, #16]
 8005bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> origin/main
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	601a      	str	r2, [r3, #0]
=======
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0203 	and.w	r2, r3, #3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 809a 	beq.w	8006168 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006034:	4b55      	ldr	r3, [pc, #340]	; (800618c <HAL_GPIO_Init+0x2cc>)
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_GPIO_Init+0x2cc>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6613      	str	r3, [r2, #96]	; 0x60
 8006040:	4b52      	ldr	r3, [pc, #328]	; (800618c <HAL_GPIO_Init+0x2cc>)
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800604c:	4a50      	ldr	r2, [pc, #320]	; (8006190 <HAL_GPIO_Init+0x2d0>)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	089b      	lsrs	r3, r3, #2
 8006052:	3302      	adds	r3, #2
 8006054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	220f      	movs	r2, #15
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006076:	d013      	beq.n	80060a0 <HAL_GPIO_Init+0x1e0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a46      	ldr	r2, [pc, #280]	; (8006194 <HAL_GPIO_Init+0x2d4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00d      	beq.n	800609c <HAL_GPIO_Init+0x1dc>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a45      	ldr	r2, [pc, #276]	; (8006198 <HAL_GPIO_Init+0x2d8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <HAL_GPIO_Init+0x1d8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a44      	ldr	r2, [pc, #272]	; (800619c <HAL_GPIO_Init+0x2dc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d101      	bne.n	8006094 <HAL_GPIO_Init+0x1d4>
 8006090:	2303      	movs	r3, #3
 8006092:	e006      	b.n	80060a2 <HAL_GPIO_Init+0x1e2>
 8006094:	2307      	movs	r3, #7
 8006096:	e004      	b.n	80060a2 <HAL_GPIO_Init+0x1e2>
 8006098:	2302      	movs	r3, #2
 800609a:	e002      	b.n	80060a2 <HAL_GPIO_Init+0x1e2>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_GPIO_Init+0x1e2>
 80060a0:	2300      	movs	r3, #0
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	f002 0203 	and.w	r2, r2, #3
 80060a8:	0092      	lsls	r2, r2, #2
 80060aa:	4093      	lsls	r3, r2
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060b2:	4937      	ldr	r1, [pc, #220]	; (8006190 <HAL_GPIO_Init+0x2d0>)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	3302      	adds	r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060c0:	4b37      	ldr	r3, [pc, #220]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060e4:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80060ea:	4b2d      	ldr	r3, [pc, #180]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800610e:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	43db      	mvns	r3, r3
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x278>
=======
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 809a 	beq.w	8005d3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c08:	4b55      	ldr	r3, [pc, #340]	; (8005d60 <HAL_GPIO_Init+0x2cc>)
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	4a54      	ldr	r2, [pc, #336]	; (8005d60 <HAL_GPIO_Init+0x2cc>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	6613      	str	r3, [r2, #96]	; 0x60
 8005c14:	4b52      	ldr	r3, [pc, #328]	; (8005d60 <HAL_GPIO_Init+0x2cc>)
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c20:	4a50      	ldr	r2, [pc, #320]	; (8005d64 <HAL_GPIO_Init+0x2d0>)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	3302      	adds	r3, #2
 8005c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	220f      	movs	r2, #15
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c4a:	d013      	beq.n	8005c74 <HAL_GPIO_Init+0x1e0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a46      	ldr	r2, [pc, #280]	; (8005d68 <HAL_GPIO_Init+0x2d4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00d      	beq.n	8005c70 <HAL_GPIO_Init+0x1dc>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a45      	ldr	r2, [pc, #276]	; (8005d6c <HAL_GPIO_Init+0x2d8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <HAL_GPIO_Init+0x1d8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a44      	ldr	r2, [pc, #272]	; (8005d70 <HAL_GPIO_Init+0x2dc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d101      	bne.n	8005c68 <HAL_GPIO_Init+0x1d4>
 8005c64:	2303      	movs	r3, #3
 8005c66:	e006      	b.n	8005c76 <HAL_GPIO_Init+0x1e2>
 8005c68:	2307      	movs	r3, #7
 8005c6a:	e004      	b.n	8005c76 <HAL_GPIO_Init+0x1e2>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e002      	b.n	8005c76 <HAL_GPIO_Init+0x1e2>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_GPIO_Init+0x1e2>
 8005c74:	2300      	movs	r3, #0
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	f002 0203 	and.w	r2, r2, #3
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	4093      	lsls	r3, r2
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c86:	4937      	ldr	r1, [pc, #220]	; (8005d64 <HAL_GPIO_Init+0x2d0>)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c94:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x224>
>>>>>>> origin/main
        {
          temp |= iocurrent;
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
        }
<<<<<<< HEAD
        EXTI->EMR1 = temp;
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	43db      	mvns	r3, r3
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4013      	ands	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_Init+0x2a2>
=======
        EXTI->RTSR1 = temp;
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_Init+0x24e>
>>>>>>> origin/main
        {
          temp |= iocurrent;
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
        }
<<<<<<< HEAD
        EXTI->IMR1 = temp;
 8006162:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6013      	str	r3, [r2, #0]
=======
        EXTI->FTSR1 = temp;
 8005ce2:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d36:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_GPIO_Init+0x2e0>)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
      }
    }

    position++;
<<<<<<< HEAD
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	3301      	adds	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	f47f aea9 	bne.w	8005ed0 <HAL_GPIO_Init+0x10>
  }
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	40021000 	.word	0x40021000
 8006190:	40010000 	.word	0x40010000
 8006194:	48000400 	.word	0x48000400
 8006198:	48000800 	.word	0x48000800
 800619c:	48000c00 	.word	0x48000c00
 80061a0:	40010400 	.word	0x40010400

080061a4 <HAL_GPIO_ReadPin>:
=======
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f aea9 	bne.w	8005aa4 <HAL_GPIO_Init+0x10>
  }
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40010000 	.word	0x40010000
 8005d68:	48000400 	.word	0x48000400
 8005d6c:	48000800 	.word	0x48000800
 8005d70:	48000c00 	.word	0x48000c00
 8005d74:	40010400 	.word	0x40010400

08005d78 <HAL_GPIO_ReadPin>:
>>>>>>> origin/main
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
=======
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
>>>>>>> origin/main
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
<<<<<<< HEAD
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	887b      	ldrh	r3, [r7, #2]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e001      	b.n	80061c6 <HAL_GPIO_ReadPin+0x22>
=======
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e001      	b.n	8005d9a <HAL_GPIO_ReadPin+0x22>
>>>>>>> origin/main
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_GPIO_WritePin>:
=======
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_GPIO_WritePin>:
>>>>>>> origin/main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	807b      	strh	r3, [r7, #2]
 80061e0:	4613      	mov	r3, r2
 80061e2:	707b      	strb	r3, [r7, #1]
=======
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
>>>>>>> origin/main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80061e4:	787b      	ldrb	r3, [r7, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	619a      	str	r2, [r3, #24]
=======
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 80061f0:	e002      	b.n	80061f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_GPIO_TogglePin>:
=======
 8005dc4:	e002      	b.n	8005dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc6:	887a      	ldrh	r2, [r7, #2]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_GPIO_TogglePin>:
>>>>>>> origin/main
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	807b      	strh	r3, [r7, #2]
=======
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006216:	887a      	ldrh	r2, [r7, #2]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4013      	ands	r3, r2
 800621c:	041a      	lsls	r2, r3, #16
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	43d9      	mvns	r1, r3
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	400b      	ands	r3, r1
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	619a      	str	r2, [r3, #24]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_PCD_Init>:
=======
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4013      	ands	r3, r2
 8005df0:	041a      	lsls	r2, r3, #16
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	43d9      	mvns	r1, r3
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	400b      	ands	r3, r1
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_PCD_Init>:
>>>>>>> origin/main
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	b08b      	sub	sp, #44	; 0x2c
 800623c:	af06      	add	r7, sp, #24
 800623e:	6078      	str	r0, [r7, #4]
=======
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0e:	b08b      	sub	sp, #44	; 0x2c
 8005e10:	af06      	add	r7, sp, #24
 8005e12:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e109      	b.n	800645e <HAL_PCD_Init+0x226>
=======
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e109      	b.n	8006032 <HAL_PCD_Init+0x226>
>>>>>>> origin/main

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
=======
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
>>>>>>> origin/main

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f008 fd84 	bl	800ed6c <HAL_PCD_MspInit>
=======
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f008 fd84 	bl	800e940 <HAL_PCD_MspInit>
>>>>>>> origin/main
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2203      	movs	r2, #3
 8006268:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
=======
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
>>>>>>> origin/main
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f004 fc63 	bl	800ab3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	687e      	ldr	r6, [r7, #4]
 800627e:	466d      	mov	r5, sp
 8006280:	f106 0410 	add.w	r4, r6, #16
 8006284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006288:	e894 0003 	ldmia.w	r4, {r0, r1}
 800628c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006290:	1d33      	adds	r3, r6, #4
 8006292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006294:	6838      	ldr	r0, [r7, #0]
 8006296:	f004 fc29 	bl	800aaec <USB_CoreInit>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0d8      	b.n	800645e <HAL_PCD_Init+0x226>
=======
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f004 fc63 	bl	800a710 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	687e      	ldr	r6, [r7, #4]
 8005e52:	466d      	mov	r5, sp
 8005e54:	f106 0410 	add.w	r4, r6, #16
 8005e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e64:	1d33      	adds	r3, r6, #4
 8005e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e68:	6838      	ldr	r0, [r7, #0]
 8005e6a:	f004 fc29 	bl	800a6c0 <USB_CoreInit>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0d8      	b.n	8006032 <HAL_PCD_Init+0x226>
>>>>>>> origin/main
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< HEAD
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 fc5d 	bl	800ab72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	e04d      	b.n	800635a <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	440b      	add	r3, r1
 80062ce:	3305      	adds	r3, #5
 80062d0:	2201      	movs	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	440b      	add	r3, r1
 80062e4:	3304      	adds	r3, #4
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	b298      	uxth	r0, r3
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	440b      	add	r3, r1
 80062fc:	333a      	adds	r3, #58	; 0x3a
 80062fe:	4602      	mov	r2, r0
 8006300:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	440b      	add	r3, r1
 8006312:	3307      	adds	r3, #7
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	440b      	add	r3, r1
 8006326:	333c      	adds	r3, #60	; 0x3c
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	440b      	add	r3, r1
 800633a:	3340      	adds	r3, #64	; 0x40
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006340:	7bfa      	ldrb	r2, [r7, #15]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	3344      	adds	r3, #68	; 0x44
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	3301      	adds	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3ac      	bcc.n	80062be <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e044      	b.n	80063f4 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800636a:	7bfa      	ldrb	r2, [r7, #15]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006380:	7bfa      	ldrb	r2, [r7, #15]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	440b      	add	r3, r1
 800638e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	440b      	add	r3, r1
 80063a4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	440b      	add	r3, r1
 80063ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	440b      	add	r3, r1
 80063d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	440b      	add	r3, r1
 80063e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	3301      	adds	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d3b5      	bcc.n	800636a <HAL_PCD_Init+0x132>
=======
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f004 fc5d 	bl	800a746 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e04d      	b.n	8005f2e <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3305      	adds	r3, #5
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3304      	adds	r3, #4
 8005eba:	7bfa      	ldrb	r2, [r7, #15]
 8005ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	b298      	uxth	r0, r3
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	333a      	adds	r3, #58	; 0x3a
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	440b      	add	r3, r1
 8005efa:	333c      	adds	r3, #60	; 0x3c
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3340      	adds	r3, #64	; 0x40
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	3344      	adds	r3, #68	; 0x44
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	7bfa      	ldrb	r2, [r7, #15]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d3ac      	bcc.n	8005e92 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e044      	b.n	8005fc8 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	440b      	add	r3, r1
 8005fa4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fac:	7bfa      	ldrb	r2, [r7, #15]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	7bfa      	ldrb	r2, [r7, #15]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3b5      	bcc.n	8005f3e <HAL_PCD_Init+0x132>
>>>>>>> origin/main
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	687e      	ldr	r6, [r7, #4]
 8006406:	466d      	mov	r5, sp
 8006408:	f106 0410 	add.w	r4, r6, #16
 800640c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800640e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006410:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006414:	e885 0003 	stmia.w	r5, {r0, r1}
 8006418:	1d33      	adds	r3, r6, #4
 800641a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800641c:	6838      	ldr	r0, [r7, #0]
 800641e:	f004 fbb5 	bl	800ab8c <USB_DevInit>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e014      	b.n	800645e <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d102      	bne.n	8006452 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fc55 	bl	8007cfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f006 fdc1 	bl	800cfde <USB_DevDisconnect>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006466 <HAL_PCD_Start>:
=======
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	687e      	ldr	r6, [r7, #4]
 8005fda:	466d      	mov	r5, sp
 8005fdc:	f106 0410 	add.w	r4, r6, #16
 8005fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fec:	1d33      	adds	r3, r6, #4
 8005fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f004 fbb5 	bl	800a760 <USB_DevInit>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e014      	b.n	8006032 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fc55 	bl	80078d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f006 fdc1 	bl	800cbb2 <USB_DevDisconnect>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800603a <HAL_PCD_Start>:
>>>>>>> origin/main
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
=======
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
<<<<<<< HEAD
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_PCD_Start+0x16>
 8006478:	2302      	movs	r3, #2
 800647a:	e012      	b.n	80064a2 <HAL_PCD_Start+0x3c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
=======
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_PCD_Start+0x16>
 800604c:	2302      	movs	r3, #2
 800604e:	e012      	b.n	8006076 <HAL_PCD_Start+0x3c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
>>>>>>> origin/main
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
<<<<<<< HEAD
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f004 fb40 	bl	800ab0e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f006 fd8c 	bl	800cfb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_PCD_IRQHandler>:
=======
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f004 fb40 	bl	800a6e2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f006 fd8c 	bl	800cb84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_PCD_IRQHandler>:
>>>>>>> origin/main
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f006 fda6 	bl	800d008 <USB_ReadInterrupts>
 80064bc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x26>
=======
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f006 fda6 	bl	800cbdc <USB_ReadInterrupts>
 8006090:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_PCD_IRQHandler+0x26>
>>>>>>> origin/main
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< HEAD
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb3e 	bl	8006b4a <PCD_EP_ISR_Handler>

    return;
 80064ce:	e110      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	b292      	uxth	r2, r2
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fb3e 	bl	800671e <PCD_EP_ISR_Handler>

    return;
 80060a2:	e110      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	b292      	uxth	r2, r2
 80060c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> origin/main

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f008 fcf1 	bl	800eeda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80064f8:	2100      	movs	r1, #0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8fc 	bl	80066f8 <HAL_PCD_SetAddress>

    return;
 8006500:	e0f7      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00c      	beq.n	8006526 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800651e:	b292      	uxth	r2, r2
 8006520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006524:	e0e5      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006542:	b292      	uxth	r2, r2
 8006544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006548:	e0d3      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d034      	beq.n	80065be <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	b292      	uxth	r2, r2
 8006568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0208 	bic.w	r2, r2, #8
 800657e:	b292      	uxth	r2, r2
 8006580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800658a:	2b01      	cmp	r3, #1
 800658c:	d107      	bne.n	800659e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
=======
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f008 fcf1 	bl	800eaae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80060cc:	2100      	movs	r1, #0
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8fc 	bl	80062cc <HAL_PCD_SetAddress>

    return;
 80060d4:	e0f7      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00c      	beq.n	80060fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060f2:	b292      	uxth	r2, r2
 80060f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80060f8:	e0e5      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006116:	b292      	uxth	r2, r2
 8006118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800611c:	e0d3      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d034      	beq.n	8006192 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	b292      	uxth	r2, r2
 800613c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006148:	b29a      	uxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0208 	bic.w	r2, r2, #8
 8006152:	b292      	uxth	r2, r2
 8006154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800615e:	2b01      	cmp	r3, #1
 8006160:	d107      	bne.n	8006172 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< HEAD
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f008 ff4f 	bl	800f43c <HAL_PCDEx_LPM_Callback>
=======
 800616a:	2100      	movs	r1, #0
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f008 ff4f 	bl	800f010 <HAL_PCDEx_LPM_Callback>
>>>>>>> origin/main
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f008 fcd4 	bl	800ef4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065b6:	b292      	uxth	r2, r2
 80065b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065bc:	e099      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d027      	beq.n	8006618 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0208 	orr.w	r2, r2, #8
 80065da:	b292      	uxth	r2, r2
 80065dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f2:	b292      	uxth	r2, r2
 80065f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0204 	orr.w	r2, r2, #4
 800660a:	b292      	uxth	r2, r2
 800660c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f008 fcd4 	bl	800eb20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006180:	b29a      	uxth	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800618a:	b292      	uxth	r2, r2
 800618c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006190:	e099      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d027      	beq.n	80061ec <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0208 	orr.w	r2, r2, #8
 80061ae:	b292      	uxth	r2, r2
 80061b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c6:	b292      	uxth	r2, r2
 80061c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0204 	orr.w	r2, r2, #4
 80061de:	b292      	uxth	r2, r2
 80061e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> origin/main

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f008 fc81 	bl	800ef18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006616:	e06c      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
=======
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f008 fc81 	bl	800eaec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80061ea:	e06c      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
>>>>>>> origin/main
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
<<<<<<< HEAD
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d040      	beq.n	80066a4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006634:	b292      	uxth	r2, r2
 8006636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d12b      	bne.n	800669c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0204 	orr.w	r2, r2, #4
 8006656:	b292      	uxth	r2, r2
 8006658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0208 	orr.w	r2, r2, #8
 800666e:	b292      	uxth	r2, r2
 8006670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006684:	b29b      	uxth	r3, r3
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
=======
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d040      	beq.n	8006278 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006208:	b292      	uxth	r2, r2
 800620a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d12b      	bne.n	8006270 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0204 	orr.w	r2, r2, #4
 800622a:	b292      	uxth	r2, r2
 800622c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0208 	orr.w	r2, r2, #8
 8006242:	b292      	uxth	r2, r2
 8006244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006258:	b29b      	uxth	r3, r3
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
<<<<<<< HEAD
 8006692:	2101      	movs	r1, #1
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f008 fed1 	bl	800f43c <HAL_PCDEx_LPM_Callback>
=======
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f008 fed1 	bl	800f010 <HAL_PCDEx_LPM_Callback>
>>>>>>> origin/main
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
<<<<<<< HEAD
 800669a:	e02a      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f008 fc3b 	bl	800ef18 <HAL_PCD_SuspendCallback>
    return;
 80066a2:	e026      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066c0:	b292      	uxth	r2, r2
 80066c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 800626e:	e02a      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f008 fc3b 	bl	800eaec <HAL_PCD_SuspendCallback>
    return;
 8006276:	e026      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006294:	b292      	uxth	r2, r2
 8006296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> origin/main

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f008 fbf9 	bl	800eebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80066cc:	e011      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ea:	b292      	uxth	r2, r2
 80066ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80066f0:	bf00      	nop
  }
}
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_PCD_SetAddress>:
=======
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f008 fbf9 	bl	800ea92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062a0:	e011      	b.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00c      	beq.n	80062c6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062be:	b292      	uxth	r2, r2
 80062c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062c4:	bf00      	nop
  }
}
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_PCD_SetAddress>:
>>>>>>> origin/main
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_PCD_SetAddress+0x1a>
 800670e:	2302      	movs	r3, #2
 8006710:	e013      	b.n	800673a <HAL_PCD_SetAddress+0x42>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f006 fc2c 	bl	800cf88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_PCD_EP_Open>:
=======
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_PCD_SetAddress+0x1a>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e013      	b.n	800630e <HAL_PCD_SetAddress+0x42>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f006 fc2c 	bl	800cb5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_PCD_EP_Open>:
>>>>>>> origin/main
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	4608      	mov	r0, r1
 800674c:	4611      	mov	r1, r2
 800674e:	461a      	mov	r2, r3
 8006750:	4603      	mov	r3, r0
 8006752:	70fb      	strb	r3, [r7, #3]
 8006754:	460b      	mov	r3, r1
 8006756:	803b      	strh	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006764:	2b00      	cmp	r3, #0
 8006766:	da0f      	bge.n	8006788 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	3304      	adds	r3, #4
 800677e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	705a      	strb	r2, [r3, #1]
 8006786:	e00f      	b.n	80067a8 <HAL_PCD_EP_Open+0x66>
=======
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	4608      	mov	r0, r1
 8006320:	4611      	mov	r1, r2
 8006322:	461a      	mov	r2, r3
 8006324:	4603      	mov	r3, r0
 8006326:	70fb      	strb	r3, [r7, #3]
 8006328:	460b      	mov	r3, r1
 800632a:	803b      	strh	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da0f      	bge.n	800635c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	3304      	adds	r3, #4
 8006352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	705a      	strb	r2, [r3, #1]
 800635a:	e00f      	b.n	800637c <HAL_PCD_EP_Open+0x66>
>>>>>>> origin/main
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 0207 	and.w	r2, r3, #7
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	3304      	adds	r3, #4
 80067a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067b4:	883a      	ldrh	r2, [r7, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	78ba      	ldrb	r2, [r7, #2]
 80067be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067d2:	78bb      	ldrb	r3, [r7, #2]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d102      	bne.n	80067de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_PCD_EP_Open+0xaa>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e00e      	b.n	800680a <HAL_PCD_EP_Open+0xc8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f004 f9e8 	bl	800abd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8006808:	7afb      	ldrb	r3, [r7, #11]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_PCD_EP_Close>:
=======
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	f003 0207 	and.w	r2, r3, #7
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	b2da      	uxtb	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006388:	883a      	ldrh	r2, [r7, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	78ba      	ldrb	r2, [r7, #2]
 8006392:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063a6:	78bb      	ldrb	r3, [r7, #2]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d102      	bne.n	80063b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_PCD_EP_Open+0xaa>
 80063bc:	2302      	movs	r3, #2
 80063be:	e00e      	b.n	80063de <HAL_PCD_EP_Open+0xc8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68f9      	ldr	r1, [r7, #12]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 f9e8 	bl	800a7a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_PCD_EP_Close>:
>>>>>>> origin/main
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800681e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0f      	bge.n	8006846 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	705a      	strb	r2, [r3, #1]
 8006844:	e00f      	b.n	8006866 <HAL_PCD_EP_Close+0x54>
=======
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0f      	bge.n	800641a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	705a      	strb	r2, [r3, #1]
 8006418:	e00f      	b.n	800643a <HAL_PCD_EP_Close+0x54>
>>>>>>> origin/main
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	f003 0207 	and.w	r2, r3, #7
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	3304      	adds	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_PCD_EP_Close+0x6e>
 800687c:	2302      	movs	r3, #2
 800687e:	e00e      	b.n	800689e <HAL_PCD_EP_Close+0x8c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f004 fd58 	bl	800b344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_PCD_EP_Receive>:
=======
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 0207 	and.w	r2, r3, #7
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	3304      	adds	r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_PCD_EP_Close+0x6e>
 8006450:	2302      	movs	r3, #2
 8006452:	e00e      	b.n	8006472 <HAL_PCD_EP_Close+0x8c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68f9      	ldr	r1, [r7, #12]
 8006462:	4618      	mov	r0, r3
 8006464:	f004 fd58 	bl	800af18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_PCD_EP_Receive>:
>>>>>>> origin/main
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	460b      	mov	r3, r1
 80068b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	f003 0207 	and.w	r2, r3, #7
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2200      	movs	r2, #0
 80068e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068f4:	7afb      	ldrb	r3, [r7, #11]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6979      	ldr	r1, [r7, #20]
 8006904:	4618      	mov	r0, r3
 8006906:	f004 ff0a 	bl	800b71e <USB_EPStartXfer>
 800690a:	e005      	b.n	8006918 <HAL_PCD_EP_Receive+0x72>
=======
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	460b      	mov	r3, r1
 8006488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	f003 0207 	and.w	r2, r3, #7
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	3304      	adds	r3, #4
 80064a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	4618      	mov	r0, r3
 80064da:	f004 ff0a 	bl	800b2f2 <USB_EPStartXfer>
 80064de:	e005      	b.n	80064ec <HAL_PCD_EP_Receive+0x72>
>>>>>>> origin/main
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	4618      	mov	r0, r3
 8006914:	f004 ff03 	bl	800b71e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_PCD_EP_GetRxCount>:
=======
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f004 ff03 	bl	800b2f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_PCD_EP_GetRxCount>:
>>>>>>> origin/main
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 0207 	and.w	r2, r3, #7
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	440b      	add	r3, r1
 8006940:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006944:	681b      	ldr	r3, [r3, #0]
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_PCD_EP_Transmit>:
=======
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 0207 	and.w	r2, r3, #7
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	440b      	add	r3, r1
 8006514:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006518:	681b      	ldr	r3, [r3, #0]
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_PCD_EP_Transmit>:
>>>>>>> origin/main
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	460b      	mov	r3, r1
 8006960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	3304      	adds	r3, #4
 8006978:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2201      	movs	r2, #1
 800699e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	4618      	mov	r0, r3
 80069be:	f004 feae 	bl	800b71e <USB_EPStartXfer>
 80069c2:	e005      	b.n	80069d0 <HAL_PCD_EP_Transmit+0x7e>
=======
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	460b      	mov	r3, r1
 8006534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	3304      	adds	r3, #4
 800654c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2200      	movs	r2, #0
 800656c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2201      	movs	r2, #1
 8006572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	b2da      	uxtb	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	4618      	mov	r0, r3
 8006592:	f004 feae 	bl	800b2f2 <USB_EPStartXfer>
 8006596:	e005      	b.n	80065a4 <HAL_PCD_EP_Transmit+0x7e>
>>>>>>> origin/main
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6979      	ldr	r1, [r7, #20]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f004 fea7 	bl	800b71e <USB_EPStartXfer>
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_PCD_EP_SetStall>:
=======
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	4618      	mov	r0, r3
 80065a0:	f004 fea7 	bl	800b2f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_PCD_EP_SetStall>:
>>>>>>> origin/main
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	f003 0207 	and.w	r2, r3, #7
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d901      	bls.n	80069f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e04e      	b.n	8006a96 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0f      	bge.n	8006a20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	705a      	strb	r2, [r3, #1]
 8006a1e:	e00d      	b.n	8006a3c <HAL_PCD_EP_SetStall+0x62>
=======
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 0207 	and.w	r2, r3, #7
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d901      	bls.n	80065cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e04e      	b.n	800666a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da0f      	bge.n	80065f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	705a      	strb	r2, [r3, #1]
 80065f2:	e00d      	b.n	8006610 <HAL_PCD_EP_SetStall+0x62>
>>>>>>> origin/main
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	3304      	adds	r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_PCD_EP_SetStall+0x82>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e01c      	b.n	8006a96 <HAL_PCD_EP_SetStall+0xbc>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 f98d 	bl	800cd8a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f006 face 	bl	800d028 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_PCD_EP_ClrStall>:
=======
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	3304      	adds	r3, #4
 8006608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_PCD_EP_SetStall+0x82>
 800662c:	2302      	movs	r3, #2
 800662e:	e01c      	b.n	800666a <HAL_PCD_EP_SetStall+0xbc>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	4618      	mov	r0, r3
 8006640:	f006 f98d 	bl	800c95e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f006 face 	bl	800cbfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_PCD_EP_ClrStall>:
>>>>>>> origin/main
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d901      	bls.n	8006abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e042      	b.n	8006b42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da0f      	bge.n	8006ae4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3304      	adds	r3, #4
 8006ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	705a      	strb	r2, [r3, #1]
 8006ae2:	e00f      	b.n	8006b04 <HAL_PCD_EP_ClrStall+0x66>
=======
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f003 020f 	and.w	r2, r3, #15
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d901      	bls.n	8006690 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e042      	b.n	8006716 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006694:	2b00      	cmp	r3, #0
 8006696:	da0f      	bge.n	80066b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4413      	add	r3, r2
 80066ac:	3304      	adds	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	705a      	strb	r2, [r3, #1]
 80066b6:	e00f      	b.n	80066d8 <HAL_PCD_EP_ClrStall+0x66>
>>>>>>> origin/main
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f003 0207 	and.w	r2, r3, #7
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	3304      	adds	r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_PCD_EP_ClrStall+0x86>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e00e      	b.n	8006b42 <HAL_PCD_EP_ClrStall+0xa4>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68f9      	ldr	r1, [r7, #12]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f006 f97a 	bl	800ce2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <PCD_EP_ISR_Handler>:
=======
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 0207 	and.w	r2, r3, #7
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	3304      	adds	r3, #4
 80066d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_PCD_EP_ClrStall+0x86>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e00e      	b.n	8006716 <HAL_PCD_EP_ClrStall+0xa4>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	4618      	mov	r0, r3
 8006708:	f006 f97a 	bl	800ca00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <PCD_EP_ISR_Handler>:
>>>>>>> origin/main
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b096      	sub	sp, #88	; 0x58
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
=======
 800671e:	b580      	push	{r7, lr}
 8006720:	b096      	sub	sp, #88	; 0x58
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< HEAD
 8006b52:	e3a9      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006b60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006b6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 8169 	bne.w	8006e4a <PCD_EP_ISR_Handler+0x300>
=======
 8006726:	e3a9      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006730:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006734:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006742:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 8169 	bne.w	8006a1e <PCD_EP_ISR_Handler+0x300>
>>>>>>> origin/main
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< HEAD
 8006b78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d150      	bne.n	8006c26 <PCD_EP_ISR_Handler+0xdc>
=======
 800674c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	d150      	bne.n	80067fa <PCD_EP_ISR_Handler+0xdc>
>>>>>>> origin/main
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	81fb      	strh	r3, [r7, #14]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	332c      	adds	r3, #44	; 0x2c
 8006bac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	441a      	add	r2, r3
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	615a      	str	r2, [r3, #20]
=======
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006768:	81fb      	strh	r3, [r7, #14]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	89fb      	ldrh	r3, [r7, #14]
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29b      	uxth	r3, r3
 800677a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	332c      	adds	r3, #44	; 0x2c
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	4413      	add	r3, r2
 800679c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	441a      	add	r2, r3
 80067b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b6:	615a      	str	r2, [r3, #20]
>>>>>>> origin/main

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f008 f94f 	bl	800ee8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8357 	beq.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 8352 	bne.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	b292      	uxth	r2, r2
 8006c18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c24:	e340      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
=======
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f008 f94f 	bl	800ea5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8357 	beq.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 8352 	bne.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	b292      	uxth	r2, r2
 80067ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80067f8:	e340      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
>>>>>>> origin/main
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< HEAD
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d032      	beq.n	8006caa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f006 fa20 	bl	800d0c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c90:	4013      	ands	r3, r2
 8006c92:	823b      	strh	r3, [r7, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	8a3a      	ldrh	r2, [r7, #16]
 8006c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	801a      	strh	r2, [r3, #0]
=======
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006800:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800680c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006814:	2b00      	cmp	r3, #0
 8006816:	d032      	beq.n	800687e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	4413      	add	r3, r2
 8006832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006852:	b29b      	uxth	r3, r3
 8006854:	f006 fa20 	bl	800cc98 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29a      	uxth	r2, r3
 8006860:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006864:	4013      	ands	r3, r2
 8006866:	823b      	strh	r3, [r7, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	8a3a      	ldrh	r2, [r7, #16]
 800686e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006872:	b292      	uxth	r2, r2
 8006874:	801a      	strh	r2, [r3, #0]
>>>>>>> origin/main

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f008 f8c4 	bl	800ee30 <HAL_PCD_SetupStageCallback>
 8006ca8:	e2fe      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006caa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f280 82fa 	bge.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	83fb      	strh	r3, [r7, #30]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	8bfa      	ldrh	r2, [r7, #30]
 8006cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d019      	beq.n	8006d36 <PCD_EP_ISR_Handler+0x1ec>
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d015      	beq.n	8006d36 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d10:	6959      	ldr	r1, [r3, #20]
 8006d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d14:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f006 f9d2 	bl	800d0c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	441a      	add	r2, r3
 8006d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2c:	615a      	str	r2, [r3, #20]
=======
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f008 f8c4 	bl	800ea04 <HAL_PCD_SetupStageCallback>
 800687c:	e2fe      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800687e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006882:	2b00      	cmp	r3, #0
 8006884:	f280 82fa 	bge.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29a      	uxth	r2, r3
 8006890:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006894:	4013      	ands	r3, r2
 8006896:	83fb      	strh	r3, [r7, #30]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	8bfa      	ldrh	r2, [r7, #30]
 800689e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068a2:	b292      	uxth	r2, r2
 80068a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d019      	beq.n	800690a <PCD_EP_ISR_Handler+0x1ec>
 80068d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d015      	beq.n	800690a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	6959      	ldr	r1, [r3, #20]
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f006 f9d2 	bl	800cc98 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	441a      	add	r2, r3
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	615a      	str	r2, [r3, #20]
>>>>>>> origin/main

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f008 f88f 	bl	800ee54 <HAL_PCD_DataOutStageCallback>
=======
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f008 f88f 	bl	800ea28 <HAL_PCD_DataOutStageCallback>
>>>>>>> origin/main
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006d40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 82ad 	bne.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
 8006d4e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d5a:	f000 82a5 	beq.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	4413      	add	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b3e      	cmp	r3, #62	; 0x3e
 8006d84:	d918      	bls.n	8006db8 <PCD_EP_ISR_Handler+0x26e>
 8006d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d102      	bne.n	8006da0 <PCD_EP_ISR_Handler+0x256>
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	029b      	lsls	r3, r3, #10
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	e029      	b.n	8006e0c <PCD_EP_ISR_Handler+0x2c2>
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d112      	bne.n	8006de6 <PCD_EP_ISR_Handler+0x29c>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e012      	b.n	8006e0c <PCD_EP_ISR_Handler+0x2c2>
 8006de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
 8006dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <PCD_EP_ISR_Handler+0x2b6>
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	029b      	lsls	r3, r3, #10
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	827b      	strh	r3, [r7, #18]
 8006e1e:	8a7b      	ldrh	r3, [r7, #18]
 8006e20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e24:	827b      	strh	r3, [r7, #18]
 8006e26:	8a7b      	ldrh	r3, [r7, #18]
 8006e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e2c:	827b      	strh	r3, [r7, #18]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	8a7b      	ldrh	r3, [r7, #18]
 8006e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	8013      	strh	r3, [r2, #0]
 8006e48:	e22e      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
=======
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006914:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 82ad 	bne.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
 8006922:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006926:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800692a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800692e:	f000 82a5 	beq.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	4413      	add	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b3e      	cmp	r3, #62	; 0x3e
 8006958:	d918      	bls.n	800698c <PCD_EP_ISR_Handler+0x26e>
 800695a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	647b      	str	r3, [r7, #68]	; 0x44
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <PCD_EP_ISR_Handler+0x256>
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	3b01      	subs	r3, #1
 8006972:	647b      	str	r3, [r7, #68]	; 0x44
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	b29b      	uxth	r3, r3
 8006978:	029b      	lsls	r3, r3, #10
 800697a:	b29b      	uxth	r3, r3
 800697c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006984:	b29a      	uxth	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	e029      	b.n	80069e0 <PCD_EP_ISR_Handler+0x2c2>
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d112      	bne.n	80069ba <PCD_EP_ISR_Handler+0x29c>
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699e:	b29a      	uxth	r2, r3
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e012      	b.n	80069e0 <PCD_EP_ISR_Handler+0x2c2>
 80069ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
 80069c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <PCD_EP_ISR_Handler+0x2b6>
 80069ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d0:	3301      	adds	r3, #1
 80069d2:	647b      	str	r3, [r7, #68]	; 0x44
 80069d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29a      	uxth	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	827b      	strh	r3, [r7, #18]
 80069f2:	8a7b      	ldrh	r3, [r7, #18]
 80069f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069f8:	827b      	strh	r3, [r7, #18]
 80069fa:	8a7b      	ldrh	r3, [r7, #18]
 80069fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a00:	827b      	strh	r3, [r7, #18]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	8a7b      	ldrh	r3, [r7, #18]
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
 8006a1c:	e22e      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
>>>>>>> origin/main
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< HEAD
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e5e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f280 80f7 	bge.w	8007056 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e7e:	4013      	ands	r3, r2
 8006e80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006e9e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	7b1b      	ldrb	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d123      	bne.n	8006f06 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006ee6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 808e 	beq.w	800700c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef6:	6959      	ldr	r1, [r3, #20]
 8006ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efa:	88da      	ldrh	r2, [r3, #6]
 8006efc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f00:	f006 f8e0 	bl	800d0c4 <USB_ReadPMA>
 8006f04:	e082      	b.n	800700c <PCD_EP_ISR_Handler+0x4c2>
=======
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a32:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f280 80f7 	bge.w	8006c2a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a52:	4013      	ands	r3, r2
 8006a54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006a72:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	3304      	adds	r3, #4
 8006a88:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8c:	7b1b      	ldrb	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d123      	bne.n	8006ada <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006aba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 808e 	beq.w	8006be0 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	6959      	ldr	r1, [r3, #20]
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	88da      	ldrh	r2, [r3, #6]
 8006ad0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ad4:	f006 f8e0 	bl	800cc98 <USB_ReadPMA>
 8006ad8:	e082      	b.n	8006be0 <PCD_EP_ISR_Handler+0x4c2>
>>>>>>> origin/main
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8006f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f08:	78db      	ldrb	r3, [r3, #3]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d10a      	bne.n	8006f24 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006f0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f12:	461a      	mov	r2, r3
 8006f14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9d4 	bl	80072c4 <HAL_PCD_EP_DB_Receive>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f22:	e073      	b.n	800700c <PCD_EP_ISR_Handler+0x4c2>
=======
 8006ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d10a      	bne.n	8006af8 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006ae2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9d4 	bl	8006e98 <HAL_PCD_EP_DB_Receive>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006af6:	e073      	b.n	8006be0 <PCD_EP_ISR_Handler+0x4c2>
>>>>>>> origin/main
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
<<<<<<< HEAD
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d022      	beq.n	8006fc8 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006faa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02c      	beq.n	800700c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbc:	891a      	ldrh	r2, [r3, #8]
 8006fbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006fc2:	f006 f87f 	bl	800d0c4 <USB_ReadPMA>
 8006fc6:	e021      	b.n	800700c <PCD_EP_ISR_Handler+0x4c2>
=======
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d022      	beq.n	8006b9c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4413      	add	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006b7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d02c      	beq.n	8006be0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	6959      	ldr	r1, [r3, #20]
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b90:	891a      	ldrh	r2, [r3, #8]
 8006b92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b96:	f006 f87f 	bl	800cc98 <USB_ReadPMA>
 8006b9a:	e021      	b.n	8006be0 <PCD_EP_ISR_Handler+0x4c2>
>>>>>>> origin/main
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	4413      	add	r3, r2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006ff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffe:	6959      	ldr	r1, [r3, #20]
 8007000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007002:	895a      	ldrh	r2, [r3, #10]
 8007004:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007008:	f006 f85c 	bl	800d0c4 <USB_ReadPMA>
=======
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4413      	add	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006bc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	6959      	ldr	r1, [r3, #20]
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd6:	895a      	ldrh	r2, [r3, #10]
 8006bd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006bdc:	f006 f85c 	bl	800cc98 <USB_ReadPMA>
>>>>>>> origin/main
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< HEAD
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007014:	441a      	add	r2, r3
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007022:	441a      	add	r2, r3
 8007024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007026:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <PCD_EP_ISR_Handler+0x4f2>
 8007030:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d206      	bcs.n	800704a <PCD_EP_ISR_Handler+0x500>
=======
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006be8:	441a      	add	r2, r3
 8006bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006bf6:	441a      	add	r2, r3
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <PCD_EP_ISR_Handler+0x4f2>
 8006c04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d206      	bcs.n	8006c1e <PCD_EP_ISR_Handler+0x500>
>>>>>>> origin/main
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f007 ff06 	bl	800ee54 <HAL_PCD_DataOutStageCallback>
 8007048:	e005      	b.n	8007056 <PCD_EP_ISR_Handler+0x50c>
=======
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f007 ff06 	bl	800ea28 <HAL_PCD_DataOutStageCallback>
 8006c1c:	e005      	b.n	8006c2a <PCD_EP_ISR_Handler+0x50c>
>>>>>>> origin/main
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007050:	4618      	mov	r0, r3
 8007052:	f004 fb64 	bl	800b71e <USB_EPStartXfer>
=======
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c24:	4618      	mov	r0, r3
 8006c26:	f004 fb64 	bl	800b2f2 <USB_EPStartXfer>
>>>>>>> origin/main
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< HEAD
 8007056:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800705a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8122 	beq.w	80072a8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007064:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	3304      	adds	r3, #4
 8007078:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	f040 80a2 	bne.w	8007204 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 80070c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c2:	2200      	movs	r2, #0
 80070c4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80070c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c8:	7b1b      	ldrb	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8093 	beq.w	80071f6 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d046      	beq.n	800716a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d126      	bne.n	8007132 <PCD_EP_ISR_Handler+0x5e8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	4413      	add	r3, r2
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
 80070fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	00da      	lsls	r2, r3, #3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	4413      	add	r3, r2
 8007106:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800710a:	623b      	str	r3, [r7, #32]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007116:	b29a      	uxth	r2, r3
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e061      	b.n	80071f6 <PCD_EP_ISR_Handler+0x6ac>
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d15d      	bne.n	80071f6 <PCD_EP_ISR_Handler+0x6ac>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007148:	b29b      	uxth	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	4413      	add	r3, r2
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	00da      	lsls	r2, r3, #3
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	4413      	add	r3, r2
 800715c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	2200      	movs	r2, #0
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e045      	b.n	80071f6 <PCD_EP_ISR_Handler+0x6ac>
=======
 8006c2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8122 	beq.w	8006e7c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006c38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	78db      	ldrb	r3, [r3, #3]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	f040 80a2 	bne.w	8006dd8 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c96:	2200      	movs	r2, #0
 8006c98:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9c:	7b1b      	ldrb	r3, [r3, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8093 	beq.w	8006dca <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ca4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d046      	beq.n	8006d3e <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d126      	bne.n	8006d06 <PCD_EP_ISR_Handler+0x5e8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	4413      	add	r3, r2
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	00da      	lsls	r2, r3, #3
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cde:	623b      	str	r3, [r7, #32]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	e061      	b.n	8006dca <PCD_EP_ISR_Handler+0x6ac>
 8006d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d15d      	bne.n	8006dca <PCD_EP_ISR_Handler+0x6ac>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	4413      	add	r3, r2
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	00da      	lsls	r2, r3, #3
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	4413      	add	r3, r2
 8006d30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e045      	b.n	8006dca <PCD_EP_ISR_Handler+0x6ac>
>>>>>>> origin/main
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
<<<<<<< HEAD
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d126      	bne.n	80071c6 <PCD_EP_ISR_Handler+0x67c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007186:	b29b      	uxth	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	4413      	add	r3, r2
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	00da      	lsls	r2, r3, #3
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	4413      	add	r3, r2
 800719a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e017      	b.n	80071f6 <PCD_EP_ISR_Handler+0x6ac>
 80071c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d113      	bne.n	80071f6 <PCD_EP_ISR_Handler+0x6ac>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071dc:	4413      	add	r3, r2
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	00da      	lsls	r2, r3, #3
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2200      	movs	r2, #0
 80071f4:	801a      	strh	r2, [r3, #0]
=======
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d126      	bne.n	8006d9a <PCD_EP_ISR_Handler+0x67c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	4413      	add	r3, r2
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
 8006d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	00da      	lsls	r2, r3, #3
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e017      	b.n	8006dca <PCD_EP_ISR_Handler+0x6ac>
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d113      	bne.n	8006dca <PCD_EP_ISR_Handler+0x6ac>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db0:	4413      	add	r3, r2
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00da      	lsls	r2, r3, #3
 8006dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	801a      	strh	r2, [r3, #0]
>>>>>>> origin/main

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f007 fe44 	bl	800ee8a <HAL_PCD_DataInStageCallback>
 8007202:	e051      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
=======
 8006dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f007 fe44 	bl	800ea5e <HAL_PCD_DataInStageCallback>
 8006dd6:	e051      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
>>>>>>> origin/main
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
<<<<<<< HEAD
 8007204:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d144      	bne.n	800729a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4413      	add	r3, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	4413      	add	r3, r2
 800722a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007234:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007240:	429a      	cmp	r2, r3
 8007242:	d907      	bls.n	8007254 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8007244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007250:	619a      	str	r2, [r3, #24]
 8007252:	e002      	b.n	800725a <PCD_EP_ISR_Handler+0x710>
=======
 8006dd8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d144      	bne.n	8006e6e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	4413      	add	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6812      	ldr	r2, [r2, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d907      	bls.n	8006e28 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8006e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	619a      	str	r2, [r3, #24]
 8006e26:	e002      	b.n	8006e2e <PCD_EP_ISR_Handler+0x710>
>>>>>>> origin/main
            }
            else
            {
              ep->xfer_len = 0U;
<<<<<<< HEAD
 8007254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007256:	2200      	movs	r2, #0
 8007258:	619a      	str	r2, [r3, #24]
=======
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
<<<<<<< HEAD
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <PCD_EP_ISR_Handler+0x726>
=======
 8006e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <PCD_EP_ISR_Handler+0x726>
>>>>>>> origin/main
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8007262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f007 fe0e 	bl	800ee8a <HAL_PCD_DataInStageCallback>
 800726e:	e01b      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
=======
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f007 fe0e 	bl	800ea5e <HAL_PCD_DataInStageCallback>
 8006e42:	e01b      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
>>>>>>> origin/main
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
<<<<<<< HEAD
 8007270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007278:	441a      	add	r2, r3
 800727a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007280:	69da      	ldr	r2, [r3, #28]
 8007282:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007286:	441a      	add	r2, r3
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007292:	4618      	mov	r0, r3
 8007294:	f004 fa43 	bl	800b71e <USB_EPStartXfer>
 8007298:	e006      	b.n	80072a8 <PCD_EP_ISR_Handler+0x75e>
=======
 8006e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e4c:	441a      	add	r2, r3
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e50:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e5a:	441a      	add	r2, r3
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e66:	4618      	mov	r0, r3
 8006e68:	f004 fa43 	bl	800b2f2 <USB_EPStartXfer>
 8006e6c:	e006      	b.n	8006e7c <PCD_EP_ISR_Handler+0x75e>
>>>>>>> origin/main
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< HEAD
 800729a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800729e:	461a      	mov	r2, r3
 80072a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f917 	bl	80074d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	b21b      	sxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f6ff ac4d 	blt.w	8006b54 <PCD_EP_ISR_Handler+0xa>
=======
 8006e6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e72:	461a      	mov	r2, r3
 8006e74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f917 	bl	80070aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	b21b      	sxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f6ff ac4d 	blt.w	8006728 <PCD_EP_ISR_Handler+0xa>
>>>>>>> origin/main
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3758      	adds	r7, #88	; 0x58
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_PCD_EP_DB_Receive>:
=======
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3758      	adds	r7, #88	; 0x58
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_PCD_EP_DB_Receive>:
>>>>>>> origin/main
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
=======
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
>>>>>>> origin/main
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d07c      	beq.n	80073d6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	8b7b      	ldrh	r3, [r7, #26]
 8007308:	429a      	cmp	r2, r3
 800730a:	d306      	bcc.n	800731a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	8b7b      	ldrh	r3, [r7, #26]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	619a      	str	r2, [r3, #24]
 8007318:	e002      	b.n	8007320 <HAL_PCD_EP_DB_Receive+0x5c>
=======
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d07c      	beq.n	8006faa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	8b7b      	ldrh	r3, [r7, #26]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d306      	bcc.n	8006eee <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	8b7b      	ldrh	r3, [r7, #26]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	619a      	str	r2, [r3, #24]
 8006eec:	e002      	b.n	8006ef4 <HAL_PCD_EP_DB_Receive+0x5c>
>>>>>>> origin/main
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2200      	movs	r2, #0
 800731e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d123      	bne.n	8007370 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	833b      	strh	r3, [r7, #24]
 8007344:	8b3b      	ldrh	r3, [r7, #24]
 8007346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800734a:	833b      	strh	r3, [r7, #24]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	8b3b      	ldrh	r3, [r7, #24]
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]
=======
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d123      	bne.n	8006f44 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	833b      	strh	r3, [r7, #24]
 8006f18:	8b3b      	ldrh	r3, [r7, #24]
 8006f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f1e:	833b      	strh	r3, [r7, #24]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	8b3b      	ldrh	r3, [r7, #24]
 8006f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01f      	beq.n	80073ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	82fb      	strh	r3, [r7, #22]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80073ba:	8b7b      	ldrh	r3, [r7, #26]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8085 	beq.w	80074cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6959      	ldr	r1, [r3, #20]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	891a      	ldrh	r2, [r3, #8]
 80073ce:	8b7b      	ldrh	r3, [r7, #26]
 80073d0:	f005 fe78 	bl	800d0c4 <USB_ReadPMA>
 80073d4:	e07a      	b.n	80074cc <HAL_PCD_EP_DB_Receive+0x208>
=======
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01f      	beq.n	8006f8e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	82fb      	strh	r3, [r7, #22]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006f8e:	8b7b      	ldrh	r3, [r7, #26]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8085 	beq.w	80070a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6959      	ldr	r1, [r3, #20]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	891a      	ldrh	r2, [r3, #8]
 8006fa2:	8b7b      	ldrh	r3, [r7, #26]
 8006fa4:	f005 fe78 	bl	800cc98 <USB_ReadPMA>
 8006fa8:	e07a      	b.n	80070a0 <HAL_PCD_EP_DB_Receive+0x208>
>>>>>>> origin/main
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073de:	b29b      	uxth	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	8b7b      	ldrh	r3, [r7, #26]
 8007402:	429a      	cmp	r2, r3
 8007404:	d306      	bcc.n	8007414 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	8b7b      	ldrh	r3, [r7, #26]
 800740c:	1ad2      	subs	r2, r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	619a      	str	r2, [r3, #24]
 8007412:	e002      	b.n	800741a <HAL_PCD_EP_DB_Receive+0x156>
=======
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	8b7b      	ldrh	r3, [r7, #26]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d306      	bcc.n	8006fe8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	8b7b      	ldrh	r3, [r7, #26]
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	e002      	b.n	8006fee <HAL_PCD_EP_DB_Receive+0x156>
>>>>>>> origin/main
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d123      	bne.n	800746a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743c:	83fb      	strh	r3, [r7, #30]
 800743e:	8bfb      	ldrh	r3, [r7, #30]
 8007440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007444:	83fb      	strh	r3, [r7, #30]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	441a      	add	r2, r3
 8007454:	8bfb      	ldrh	r3, [r7, #30]
 8007456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007466:	b29b      	uxth	r3, r3
 8007468:	8013      	strh	r3, [r2, #0]
=======
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d123      	bne.n	800703e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	83fb      	strh	r3, [r7, #30]
 8007012:	8bfb      	ldrh	r3, [r7, #30]
 8007014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007018:	83fb      	strh	r3, [r7, #30]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	8bfb      	ldrh	r3, [r7, #30]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< HEAD
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11f      	bne.n	80074b4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	83bb      	strh	r3, [r7, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	8bbb      	ldrh	r3, [r7, #28]
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074b4:	8b7b      	ldrh	r3, [r7, #26]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6959      	ldr	r1, [r3, #20]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	895a      	ldrh	r2, [r3, #10]
 80074c6:	8b7b      	ldrh	r3, [r7, #26]
 80074c8:	f005 fdfc 	bl	800d0c4 <USB_ReadPMA>
=======
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11f      	bne.n	8007088 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	83bb      	strh	r3, [r7, #28]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	8bbb      	ldrh	r3, [r7, #28]
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007088:	8b7b      	ldrh	r3, [r7, #26]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6959      	ldr	r1, [r3, #20]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	895a      	ldrh	r2, [r3, #10]
 800709a:	8b7b      	ldrh	r3, [r7, #26]
 800709c:	f005 fdfc 	bl	800cc98 <USB_ReadPMA>
>>>>>>> origin/main
    }
  }

  return count;
<<<<<<< HEAD
 80074cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_PCD_EP_DB_Transmit>:
=======
 80070a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_PCD_EP_DB_Transmit>:
>>>>>>> origin/main
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b0a2      	sub	sp, #136	; 0x88
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	4613      	mov	r3, r2
 80074e2:	80fb      	strh	r3, [r7, #6]
=======
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b0a2      	sub	sp, #136	; 0x88
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	4613      	mov	r3, r2
 80070b6:	80fb      	strh	r3, [r7, #6]
>>>>>>> origin/main
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 81c5 	beq.w	800787a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	4413      	add	r3, r2
 800750a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007514:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007520:	429a      	cmp	r2, r3
 8007522:	d907      	bls.n	8007534 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	619a      	str	r2, [r3, #24]
 8007532:	e002      	b.n	800753a <HAL_PCD_EP_DB_Transmit+0x64>
=======
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 81c5 	beq.w	800744e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d907      	bls.n	8007108 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	619a      	str	r2, [r3, #24]
 8007106:	e002      	b.n	800710e <HAL_PCD_EP_DB_Transmit+0x64>
>>>>>>> origin/main
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
=======
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 80b9 	bne.w	80076b6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d126      	bne.n	800759a <HAL_PCD_EP_DB_Transmit+0xc4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	4413      	add	r3, r2
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	4413      	add	r3, r2
 800756e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800757e:	b29a      	uxth	r2, r3
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007592:	b29a      	uxth	r2, r3
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	e01a      	b.n	80075d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d116      	bne.n	80075d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	4413      	add	r3, r2
 80075b8:	633b      	str	r3, [r7, #48]	; 0x30
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	00da      	lsls	r2, r3, #3
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	2200      	movs	r2, #0
 80075ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	623b      	str	r3, [r7, #32]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d126      	bne.n	800762c <HAL_PCD_EP_DB_Transmit+0x156>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	4413      	add	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	00da      	lsls	r2, r3, #3
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	4413      	add	r3, r2
 8007600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007610:	b29a      	uxth	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007624:	b29a      	uxth	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e017      	b.n	800765c <HAL_PCD_EP_DB_Transmit+0x186>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d113      	bne.n	800765c <HAL_PCD_EP_DB_Transmit+0x186>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	4413      	add	r3, r2
 8007644:	623b      	str	r3, [r7, #32]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	00da      	lsls	r2, r3, #3
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	4413      	add	r3, r2
 8007650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	801a      	strh	r2, [r3, #0]
=======
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 80b9 	bne.w	800728a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d126      	bne.n	800716e <HAL_PCD_EP_DB_Transmit+0xc4>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	4413      	add	r3, r2
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	00da      	lsls	r2, r3, #3
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	4413      	add	r3, r2
 8007142:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007152:	b29a      	uxth	r2, r3
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e01a      	b.n	80071a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d116      	bne.n	80071a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	4413      	add	r3, r2
 800718c:	633b      	str	r3, [r7, #48]	; 0x30
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	00da      	lsls	r2, r3, #3
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	4413      	add	r3, r2
 8007198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	2200      	movs	r2, #0
 80071a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d126      	bne.n	8007200 <HAL_PCD_EP_DB_Transmit+0x156>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4413      	add	r3, r2
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	4413      	add	r3, r2
 80071d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	e017      	b.n	8007230 <HAL_PCD_EP_DB_Transmit+0x186>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d113      	bne.n	8007230 <HAL_PCD_EP_DB_Transmit+0x186>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007210:	b29b      	uxth	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	4413      	add	r3, r2
 8007218:	623b      	str	r3, [r7, #32]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	00da      	lsls	r2, r3, #3
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	4413      	add	r3, r2
 8007224:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2200      	movs	r2, #0
 800722e:	801a      	strh	r2, [r3, #0]
>>>>>>> origin/main

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	4619      	mov	r1, r3
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f007 fc11 	bl	800ee8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 82d2 	beq.w	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	827b      	strh	r3, [r7, #18]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	441a      	add	r2, r3
 800769e:	8a7b      	ldrh	r3, [r7, #18]
 80076a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8013      	strh	r3, [r2, #0]
 80076b4:	e2b0      	b.n	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
=======
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f007 fc11 	bl	800ea5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 82d2 	beq.w	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007262:	827b      	strh	r3, [r7, #18]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	441a      	add	r2, r3
 8007272:	8a7b      	ldrh	r3, [r7, #18]
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]
 8007288:	e2b0      	b.n	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
>>>>>>> origin/main
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d021      	beq.n	8007704 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	441a      	add	r2, r3
 80076ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80076f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007700:	b29b      	uxth	r3, r3
 8007702:	8013      	strh	r3, [r2, #0]
=======
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800770a:	2b01      	cmp	r3, #1
 800770c:	f040 8284 	bne.w	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007718:	441a      	add	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	69da      	ldr	r2, [r3, #28]
 8007722:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007726:	441a      	add	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	429a      	cmp	r2, r3
 8007736:	d309      	bcc.n	800774c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	621a      	str	r2, [r3, #32]
 800774a:	e015      	b.n	8007778 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d107      	bne.n	8007764 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007754:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007758:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007762:	e009      	b.n	8007778 <HAL_PCD_EP_DB_Transmit+0x2a2>
=======
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072de:	2b01      	cmp	r3, #1
 80072e0:	f040 8284 	bne.w	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072ec:	441a      	add	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	69da      	ldr	r2, [r3, #28]
 80072f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072fa:	441a      	add	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	429a      	cmp	r2, r3
 800730a:	d309      	bcc.n	8007320 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	621a      	str	r2, [r3, #32]
 800731e:	e015      	b.n	800734c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d107      	bne.n	8007338 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800732c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007336:	e009      	b.n	800734c <HAL_PCD_EP_DB_Transmit+0x2a2>
>>>>>>> origin/main
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< HEAD
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	621a      	str	r2, [r3, #32]
=======
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	621a      	str	r2, [r3, #32]
>>>>>>> origin/main
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d155      	bne.n	800782c <HAL_PCD_EP_DB_Transmit+0x356>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	63bb      	str	r3, [r7, #56]	; 0x38
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	4413      	add	r3, r2
 8007796:	63bb      	str	r3, [r7, #56]	; 0x38
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	00da      	lsls	r2, r3, #3
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	4413      	add	r3, r2
 80077a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
 80077a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077aa:	2b3e      	cmp	r3, #62	; 0x3e
 80077ac:	d916      	bls.n	80077dc <HAL_PCD_EP_DB_Transmit+0x306>
 80077ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80077be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c0:	3b01      	subs	r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	029b      	lsls	r3, r3, #10
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e043      	b.n	8007864 <HAL_PCD_EP_DB_Transmit+0x38e>
 80077dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d112      	bne.n	8007808 <HAL_PCD_EP_DB_Transmit+0x332>
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	e02d      	b.n	8007864 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
 800780e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_PCD_EP_DB_Transmit+0x348>
 8007818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781a:	3301      	adds	r3, #1
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29a      	uxth	r2, r3
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	e01b      	b.n	8007864 <HAL_PCD_EP_DB_Transmit+0x38e>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d117      	bne.n	8007864 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	643b      	str	r3, [r7, #64]	; 0x40
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007842:	b29b      	uxth	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007848:	4413      	add	r3, r2
 800784a:	643b      	str	r3, [r7, #64]	; 0x40
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	00da      	lsls	r2, r3, #3
 8007852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007854:	4413      	add	r3, r2
 8007856:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800785c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785e:	b29a      	uxth	r2, r3
 8007860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007862:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6959      	ldr	r1, [r3, #20]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	891a      	ldrh	r2, [r3, #8]
 8007870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	f005 fbe4 	bl	800d040 <USB_WritePMA>
 8007878:	e1ce      	b.n	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
=======
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d155      	bne.n	8007400 <HAL_PCD_EP_DB_Transmit+0x356>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	4413      	add	r3, r2
 800736a:	63bb      	str	r3, [r7, #56]	; 0x38
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	00da      	lsls	r2, r3, #3
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	4413      	add	r3, r2
 8007376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
 800737c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737e:	2b3e      	cmp	r3, #62	; 0x3e
 8007380:	d916      	bls.n	80073b0 <HAL_PCD_EP_DB_Transmit+0x306>
 8007382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	64bb      	str	r3, [r7, #72]	; 0x48
 8007388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007394:	3b01      	subs	r3, #1
 8007396:	64bb      	str	r3, [r7, #72]	; 0x48
 8007398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739a:	b29b      	uxth	r3, r3
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	b29b      	uxth	r3, r3
 80073a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e043      	b.n	8007438 <HAL_PCD_EP_DB_Transmit+0x38e>
 80073b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d112      	bne.n	80073dc <HAL_PCD_EP_DB_Transmit+0x332>
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e02d      	b.n	8007438 <HAL_PCD_EP_DB_Transmit+0x38e>
 80073dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_PCD_EP_DB_Transmit+0x348>
 80073ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ee:	3301      	adds	r3, #1
 80073f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	029b      	lsls	r3, r3, #10
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e01b      	b.n	8007438 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d117      	bne.n	8007438 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	643b      	str	r3, [r7, #64]	; 0x40
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741c:	4413      	add	r3, r2
 800741e:	643b      	str	r3, [r7, #64]	; 0x40
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	00da      	lsls	r2, r3, #3
 8007426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007428:	4413      	add	r3, r2
 800742a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007432:	b29a      	uxth	r2, r3
 8007434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007436:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6959      	ldr	r1, [r3, #20]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	891a      	ldrh	r2, [r3, #8]
 8007444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007446:	b29b      	uxth	r3, r3
 8007448:	f005 fbe4 	bl	800cc14 <USB_WritePMA>
 800744c:	e1ce      	b.n	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
>>>>>>> origin/main
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007882:	b29b      	uxth	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4413      	add	r3, r2
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	4413      	add	r3, r2
 8007894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800789e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d307      	bcc.n	80078be <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	619a      	str	r2, [r3, #24]
 80078bc:	e002      	b.n	80078c4 <HAL_PCD_EP_DB_Transmit+0x3ee>
=======
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	4413      	add	r3, r2
 8007468:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007472:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800747e:	429a      	cmp	r2, r3
 8007480:	d307      	bcc.n	8007492 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	619a      	str	r2, [r3, #24]
 8007490:	e002      	b.n	8007498 <HAL_PCD_EP_DB_Transmit+0x3ee>
>>>>>>> origin/main
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	619a      	str	r2, [r3, #24]
=======
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 80c4 	bne.w	8007a56 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d126      	bne.n	8007924 <HAL_PCD_EP_DB_Transmit+0x44e>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	66bb      	str	r3, [r7, #104]	; 0x68
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ea:	4413      	add	r3, r2
 80078ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00da      	lsls	r2, r3, #3
 80078f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078fc:	667b      	str	r3, [r7, #100]	; 0x64
 80078fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007908:	b29a      	uxth	r2, r3
 800790a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29a      	uxth	r2, r3
 800791e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	e01a      	b.n	800795a <HAL_PCD_EP_DB_Transmit+0x484>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d116      	bne.n	800795a <HAL_PCD_EP_DB_Transmit+0x484>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	673b      	str	r3, [r7, #112]	; 0x70
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007940:	4413      	add	r3, r2
 8007942:	673b      	str	r3, [r7, #112]	; 0x70
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00da      	lsls	r2, r3, #3
 800794a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794c:	4413      	add	r3, r2
 800794e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007956:	2200      	movs	r2, #0
 8007958:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d12f      	bne.n	80079c8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007978:	b29b      	uxth	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007980:	4413      	add	r3, r2
 8007982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	00da      	lsls	r2, r3, #3
 800798c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007990:	4413      	add	r3, r2
 8007992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800799a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079ac:	801a      	strh	r2, [r3, #0]
 80079ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e017      	b.n	80079f8 <HAL_PCD_EP_DB_Transmit+0x522>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d113      	bne.n	80079f8 <HAL_PCD_EP_DB_Transmit+0x522>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079de:	4413      	add	r3, r2
 80079e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	00da      	lsls	r2, r3, #3
 80079e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80079f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f4:	2200      	movs	r2, #0
 80079f6:	801a      	strh	r2, [r3, #0]
=======
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 80c4 	bne.w	800762a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d126      	bne.n	80074f8 <HAL_PCD_EP_DB_Transmit+0x44e>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074be:	4413      	add	r3, r2
 80074c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	00da      	lsls	r2, r3, #3
 80074c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074d0:	667b      	str	r3, [r7, #100]	; 0x64
 80074d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e01a      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x484>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d116      	bne.n	800752e <HAL_PCD_EP_DB_Transmit+0x484>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	673b      	str	r3, [r7, #112]	; 0x70
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007514:	4413      	add	r3, r2
 8007516:	673b      	str	r3, [r7, #112]	; 0x70
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	00da      	lsls	r2, r3, #3
 800751e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007520:	4413      	add	r3, r2
 8007522:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752a:	2200      	movs	r2, #0
 800752c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d12f      	bne.n	800759c <HAL_PCD_EP_DB_Transmit+0x4f2>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800754c:	b29b      	uxth	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007554:	4413      	add	r3, r2
 8007556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00da      	lsls	r2, r3, #3
 8007560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007564:	4413      	add	r3, r2
 8007566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800756a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800756e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e017      	b.n	80075cc <HAL_PCD_EP_DB_Transmit+0x522>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d113      	bne.n	80075cc <HAL_PCD_EP_DB_Transmit+0x522>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075b2:	4413      	add	r3, r2
 80075b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075be:	4413      	add	r3, r2
 80075c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80075c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c8:	2200      	movs	r2, #0
 80075ca:	801a      	strh	r2, [r3, #0]
>>>>>>> origin/main

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f007 fa43 	bl	800ee8a <HAL_PCD_DataInStageCallback>
=======
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f007 fa43 	bl	800ea5e <HAL_PCD_DataInStageCallback>
>>>>>>> origin/main
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 8007a04:	88fb      	ldrh	r3, [r7, #6]
 8007a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f040 8104 	bne.w	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	441a      	add	r2, r3
 8007a3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	8013      	strh	r3, [r2, #0]
 8007a54:	e0e0      	b.n	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
=======
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 8104 	bne.w	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
 8007628:	e0e0      	b.n	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
>>>>>>> origin/main
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d121      	bne.n	8007aa4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	441a      	add	r2, r3
 8007a8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	8013      	strh	r3, [r2, #0]
=======
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d121      	bne.n	8007678 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	441a      	add	r2, r3
 8007660:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007674:	b29b      	uxth	r3, r3
 8007676:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f040 80b4 	bne.w	8007c18 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	695a      	ldr	r2, [r3, #20]
 8007ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ab8:	441a      	add	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	69da      	ldr	r2, [r3, #28]
 8007ac2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d309      	bcc.n	8007aec <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae4:	1ad2      	subs	r2, r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	621a      	str	r2, [r3, #32]
 8007aea:	e015      	b.n	8007b18 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d107      	bne.n	8007b04 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007af4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b02:	e009      	b.n	8007b18 <HAL_PCD_EP_DB_Transmit+0x642>
=======
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800767e:	2b01      	cmp	r3, #1
 8007680:	f040 80b4 	bne.w	80077ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800768c:	441a      	add	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800769a:	441a      	add	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d309      	bcc.n	80076c0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6a1a      	ldr	r2, [r3, #32]
 80076b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b8:	1ad2      	subs	r2, r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	621a      	str	r2, [r3, #32]
 80076be:	e015      	b.n	80076ec <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80076c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80076d6:	e009      	b.n	80076ec <HAL_PCD_EP_DB_Transmit+0x642>
>>>>>>> origin/main
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> origin/main
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d155      	bne.n	8007bd2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b3a:	4413      	add	r3, r2
 8007b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	00da      	lsls	r2, r3, #3
 8007b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b46:	4413      	add	r3, r2
 8007b48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b50:	2b3e      	cmp	r3, #62	; 0x3e
 8007b52:	d916      	bls.n	8007b82 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	677b      	str	r3, [r7, #116]	; 0x74
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <HAL_PCD_EP_DB_Transmit+0x694>
 8007b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b66:	3b01      	subs	r3, #1
 8007b68:	677b      	str	r3, [r7, #116]	; 0x74
 8007b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	029b      	lsls	r3, r3, #10
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	e040      	b.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d112      	bne.n	8007bae <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e02a      	b.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	677b      	str	r3, [r7, #116]	; 0x74
 8007bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e018      	b.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d114      	bne.n	8007c04 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007be8:	4413      	add	r3, r2
 8007bea:	663b      	str	r3, [r7, #96]	; 0x60
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	00da      	lsls	r2, r3, #3
 8007bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c02:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	6959      	ldr	r1, [r3, #20]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	895a      	ldrh	r2, [r3, #10]
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	f005 fa14 	bl	800d040 <USB_WritePMA>
=======
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	663b      	str	r3, [r7, #96]	; 0x60
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d155      	bne.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800770e:	4413      	add	r3, r2
 8007710:	65bb      	str	r3, [r7, #88]	; 0x58
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	00da      	lsls	r2, r3, #3
 8007718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800771a:	4413      	add	r3, r2
 800771c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007720:	657b      	str	r3, [r7, #84]	; 0x54
 8007722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007724:	2b3e      	cmp	r3, #62	; 0x3e
 8007726:	d916      	bls.n	8007756 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	677b      	str	r3, [r7, #116]	; 0x74
 800772e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <HAL_PCD_EP_DB_Transmit+0x694>
 8007738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800773a:	3b01      	subs	r3, #1
 800773c:	677b      	str	r3, [r7, #116]	; 0x74
 800773e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007740:	b29b      	uxth	r3, r3
 8007742:	029b      	lsls	r3, r3, #10
 8007744:	b29b      	uxth	r3, r3
 8007746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774e:	b29a      	uxth	r2, r3
 8007750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e040      	b.n	80077d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007758:	2b00      	cmp	r3, #0
 800775a:	d112      	bne.n	8007782 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800775c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007766:	b29a      	uxth	r2, r3
 8007768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777a:	b29a      	uxth	r2, r3
 800777c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	e02a      	b.n	80077d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	677b      	str	r3, [r7, #116]	; 0x74
 8007788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007794:	3301      	adds	r3, #1
 8007796:	677b      	str	r3, [r7, #116]	; 0x74
 8007798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779a:	b29b      	uxth	r3, r3
 800779c:	029b      	lsls	r3, r3, #10
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e018      	b.n	80077d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d114      	bne.n	80077d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077bc:	4413      	add	r3, r2
 80077be:	663b      	str	r3, [r7, #96]	; 0x60
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	00da      	lsls	r2, r3, #3
 80077c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6959      	ldr	r1, [r3, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	895a      	ldrh	r2, [r3, #10]
 80077e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f005 fa14 	bl	800cc14 <USB_WritePMA>
>>>>>>> origin/main
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c32:	823b      	strh	r3, [r7, #16]
 8007c34:	8a3b      	ldrh	r3, [r7, #16]
 8007c36:	f083 0310 	eor.w	r3, r3, #16
 8007c3a:	823b      	strh	r3, [r7, #16]
 8007c3c:	8a3b      	ldrh	r3, [r7, #16]
 8007c3e:	f083 0320 	eor.w	r3, r3, #32
 8007c42:	823b      	strh	r3, [r7, #16]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	8a3b      	ldrh	r3, [r7, #16]
 8007c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3788      	adds	r7, #136	; 0x88
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_PCDEx_PMAConfig>:
=======
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007806:	823b      	strh	r3, [r7, #16]
 8007808:	8a3b      	ldrh	r3, [r7, #16]
 800780a:	f083 0310 	eor.w	r3, r3, #16
 800780e:	823b      	strh	r3, [r7, #16]
 8007810:	8a3b      	ldrh	r3, [r7, #16]
 8007812:	f083 0320 	eor.w	r3, r3, #32
 8007816:	823b      	strh	r3, [r7, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	8a3b      	ldrh	r3, [r7, #16]
 8007828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007838:	b29b      	uxth	r3, r3
 800783a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3788      	adds	r7, #136	; 0x88
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_PCDEx_PMAConfig>:
>>>>>>> origin/main
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< HEAD
 8007c72:	b480      	push	{r7}
 8007c74:	b087      	sub	sp, #28
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	817b      	strh	r3, [r7, #10]
 8007c80:	4613      	mov	r3, r2
 8007c82:	813b      	strh	r3, [r7, #8]
=======
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	817b      	strh	r3, [r7, #10]
 8007854:	4613      	mov	r3, r2
 8007856:	813b      	strh	r3, [r7, #8]
>>>>>>> origin/main
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 8007c84:	897b      	ldrh	r3, [r7, #10]
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00c      	beq.n	8007caa <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c90:	897b      	ldrh	r3, [r7, #10]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e00a      	b.n	8007cc0 <HAL_PCDEx_PMAConfig+0x4e>
=======
 8007858:	897b      	ldrh	r3, [r7, #10]
 800785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00c      	beq.n	800787e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007864:	897b      	ldrh	r3, [r7, #10]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	3304      	adds	r3, #4
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e00a      	b.n	8007894 <HAL_PCDEx_PMAConfig+0x4e>
>>>>>>> origin/main
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8007caa:	897a      	ldrh	r2, [r7, #10]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	617b      	str	r3, [r7, #20]
=======
 800787e:	897a      	ldrh	r2, [r7, #10]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< HEAD
 8007cc0:	893b      	ldrh	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	80da      	strh	r2, [r3, #6]
 8007cd4:	e00b      	b.n	8007cee <HAL_PCDEx_PMAConfig+0x7c>
=======
 8007894:	893b      	ldrh	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	80da      	strh	r2, [r3, #6]
 80078a8:	e00b      	b.n	80078c2 <HAL_PCDEx_PMAConfig+0x7c>
>>>>>>> origin/main
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< HEAD
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	815a      	strh	r2, [r3, #10]
=======
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2201      	movs	r2, #1
 80078ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	b29a      	uxth	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	815a      	strh	r2, [r3, #10]
>>>>>>> origin/main
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_PCDEx_ActivateLPM>:
=======
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_PCDEx_ActivateLPM>:
>>>>>>> origin/main
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f043 0302 	orr.w	r3, r3, #2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_PWREx_GetVoltageRange>:
=======
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007908:	b29b      	uxth	r3, r3
 800790a:	f043 0302 	orr.w	r3, r3, #2
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_PWREx_GetVoltageRange>:
>>>>>>> origin/main
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
=======
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
>>>>>>> origin/main
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< HEAD
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40007000 	.word	0x40007000

08007d6c <HAL_PWREx_ControlVoltageScaling>:
=======
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <HAL_PWREx_GetVoltageRange+0x18>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40007000 	.word	0x40007000

08007940 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> origin/main
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
=======
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7a:	d130      	bne.n	8007dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d7c:	4b23      	ldr	r3, [pc, #140]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d88:	d038      	beq.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d92:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d9a:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2232      	movs	r2, #50	; 0x32
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
 8007da4:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007da6:	fba2 2303 	umull	r2, r3, r2, r3
 8007daa:	0c9b      	lsrs	r3, r3, #18
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007db0:	e002      	b.n	8007db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007db8:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc4:	d102      	bne.n	8007dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f2      	bne.n	8007db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dcc:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d110      	bne.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e00f      	b.n	8007dfe <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794e:	d130      	bne.n	80079b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007950:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800795c:	d038      	beq.n	80079d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800796c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800796e:	4b1d      	ldr	r3, [pc, #116]	; (80079e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2232      	movs	r2, #50	; 0x32
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800797a:	fba2 2303 	umull	r2, r3, r2, r3
 800797e:	0c9b      	lsrs	r3, r3, #18
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007984:	e002      	b.n	800798c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3b01      	subs	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800798c:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007998:	d102      	bne.n	80079a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f2      	bne.n	8007986 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ac:	d110      	bne.n	80079d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e00f      	b.n	80079d2 <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> origin/main
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< HEAD
 8007dde:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dea:	d007      	beq.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007df4:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dfa:	6013      	str	r3, [r2, #0]
=======
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079be:	d007      	beq.n	80079d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80079c8:	4a05      	ldr	r2, [pc, #20]	; (80079e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079ce:	6013      	str	r3, [r2, #0]
>>>>>>> origin/main
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40007000 	.word	0x40007000
 8007e10:	20000000 	.word	0x20000000
 8007e14:	431bde83 	.word	0x431bde83

08007e18 <HAL_PWREx_EnableVddUSB>:
=======
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40007000 	.word	0x40007000
 80079e4:	20000000 	.word	0x20000000
 80079e8:	431bde83 	.word	0x431bde83

080079ec <HAL_PWREx_EnableVddUSB>:
>>>>>>> origin/main
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
<<<<<<< HEAD
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e26:	6053      	str	r3, [r2, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40007000 	.word	0x40007000

08007e38 <HAL_RCC_OscConfig>:
=======
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80079f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079fa:	6053      	str	r3, [r2, #4]
}
 80079fc:	bf00      	nop
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40007000 	.word	0x40007000

08007a0c <HAL_RCC_OscConfig>:
>>>>>>> origin/main
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	; 0x28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
=======
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f000 bc4f 	b.w	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f000 bc4f 	b.w	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8007e4c:	4b97      	ldr	r3, [pc, #604]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f003 030c 	and.w	r3, r3, #12
 8007e54:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e56:	4b95      	ldr	r3, [pc, #596]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80e6 	beq.w	800803a <HAL_RCC_OscConfig+0x202>
=======
 8007a20:	4b97      	ldr	r3, [pc, #604]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 030c 	and.w	r3, r3, #12
 8007a28:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a2a:	4b95      	ldr	r3, [pc, #596]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80e6 	beq.w	8007c0e <HAL_RCC_OscConfig+0x202>
>>>>>>> origin/main
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_RCC_OscConfig+0x4c>
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	2b0c      	cmp	r3, #12
 8007e78:	f040 808d 	bne.w	8007f96 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f040 8089 	bne.w	8007f96 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e84:	4b89      	ldr	r3, [pc, #548]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <HAL_RCC_OscConfig+0x66>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f000 bc26 	b.w	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <HAL_RCC_OscConfig+0x4c>
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	f040 808d 	bne.w	8007b6a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	f040 8089 	bne.w	8007b6a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a58:	4b89      	ldr	r3, [pc, #548]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <HAL_RCC_OscConfig+0x66>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f000 bc26 	b.w	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ea2:	4b82      	ldr	r3, [pc, #520]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x80>
 8007eae:	4b7f      	ldr	r3, [pc, #508]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eb6:	e005      	b.n	8007ec4 <HAL_RCC_OscConfig+0x8c>
 8007eb8:	4b7c      	ldr	r3, [pc, #496]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d224      	bcs.n	8007f12 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fda1 	bl	8008a14 <RCC_SetFlashLatencyFromMSIRange>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f000 bc06 	b.w	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a76:	4b82      	ldr	r3, [pc, #520]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <HAL_RCC_OscConfig+0x80>
 8007a82:	4b7f      	ldr	r3, [pc, #508]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a8a:	e005      	b.n	8007a98 <HAL_RCC_OscConfig+0x8c>
 8007a8c:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a92:	091b      	lsrs	r3, r3, #4
 8007a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d224      	bcs.n	8007ae6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fda1 	bl	80085e8 <RCC_SetFlashLatencyFromMSIRange>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f000 bc06 	b.w	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8007ede:	4b73      	ldr	r3, [pc, #460]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a72      	ldr	r2, [pc, #456]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ee4:	f043 0308 	orr.w	r3, r3, #8
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	4b70      	ldr	r3, [pc, #448]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	496d      	ldr	r1, [pc, #436]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007efc:	4b6b      	ldr	r3, [pc, #428]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	4968      	ldr	r1, [pc, #416]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	604b      	str	r3, [r1, #4]
 8007f10:	e025      	b.n	8007f5e <HAL_RCC_OscConfig+0x126>
=======
 8007ab2:	4b73      	ldr	r3, [pc, #460]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a72      	ldr	r2, [pc, #456]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ab8:	f043 0308 	orr.w	r3, r3, #8
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	4b70      	ldr	r3, [pc, #448]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	496d      	ldr	r1, [pc, #436]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ad0:	4b6b      	ldr	r3, [pc, #428]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	4968      	ldr	r1, [pc, #416]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]
 8007ae4:	e025      	b.n	8007b32 <HAL_RCC_OscConfig+0x126>
>>>>>>> origin/main
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8007f12:	4b66      	ldr	r3, [pc, #408]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a65      	ldr	r2, [pc, #404]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f18:	f043 0308 	orr.w	r3, r3, #8
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	4b63      	ldr	r3, [pc, #396]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	4960      	ldr	r1, [pc, #384]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f30:	4b5e      	ldr	r3, [pc, #376]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	495b      	ldr	r1, [pc, #364]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	604b      	str	r3, [r1, #4]
=======
 8007ae6:	4b66      	ldr	r3, [pc, #408]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a65      	ldr	r2, [pc, #404]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007aec:	f043 0308 	orr.w	r3, r3, #8
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4b63      	ldr	r3, [pc, #396]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	4960      	ldr	r1, [pc, #384]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b04:	4b5e      	ldr	r3, [pc, #376]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	495b      	ldr	r1, [pc, #364]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	604b      	str	r3, [r1, #4]
>>>>>>> origin/main

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fd60 	bl	8008a14 <RCC_SetFlashLatencyFromMSIRange>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e3c5      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fd60 	bl	80085e8 <RCC_SetFlashLatencyFromMSIRange>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e3c5      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8007f5e:	f000 fccd 	bl	80088fc <HAL_RCC_GetSysClockFreq>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b51      	ldr	r3, [pc, #324]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	4950      	ldr	r1, [pc, #320]	; (80080b0 <HAL_RCC_OscConfig+0x278>)
 8007f70:	5ccb      	ldrb	r3, [r1, r3]
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7a:	4a4e      	ldr	r2, [pc, #312]	; (80080b4 <HAL_RCC_OscConfig+0x27c>)
 8007f7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007f7e:	4b4e      	ldr	r3, [pc, #312]	; (80080b8 <HAL_RCC_OscConfig+0x280>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fb fdb0 	bl	8003ae8 <HAL_InitTick>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d052      	beq.n	8008038 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	e3a9      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007b32:	f000 fccd 	bl	80084d0 <HAL_RCC_GetSysClockFreq>
 8007b36:	4602      	mov	r2, r0
 8007b38:	4b51      	ldr	r3, [pc, #324]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	4950      	ldr	r1, [pc, #320]	; (8007c84 <HAL_RCC_OscConfig+0x278>)
 8007b44:	5ccb      	ldrb	r3, [r1, r3]
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	4a4e      	ldr	r2, [pc, #312]	; (8007c88 <HAL_RCC_OscConfig+0x27c>)
 8007b50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007b52:	4b4e      	ldr	r3, [pc, #312]	; (8007c8c <HAL_RCC_OscConfig+0x280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fc f828 	bl	8003bac <HAL_InitTick>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d052      	beq.n	8007c0c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	e3a9      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d032      	beq.n	8008004 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f9e:	4b43      	ldr	r3, [pc, #268]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a42      	ldr	r2, [pc, #264]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007faa:	f7fb fded 	bl	8003b88 <HAL_GetTick>
 8007fae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fb2:	f7fb fde9 	bl	8003b88 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e392      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fc4:	4b39      	ldr	r3, [pc, #228]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0f0      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x17a>
=======
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d032      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b72:	4b43      	ldr	r3, [pc, #268]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a42      	ldr	r2, [pc, #264]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b78:	f043 0301 	orr.w	r3, r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b7e:	f7fc f865 	bl	8003c4c <HAL_GetTick>
 8007b82:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b86:	f7fc f861 	bl	8003c4c <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e392      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b98:	4b39      	ldr	r3, [pc, #228]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0f0      	beq.n	8007b86 <HAL_RCC_OscConfig+0x17a>
>>>>>>> origin/main
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8007fd0:	4b36      	ldr	r3, [pc, #216]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a35      	ldr	r2, [pc, #212]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fd6:	f043 0308 	orr.w	r3, r3, #8
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4b33      	ldr	r3, [pc, #204]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	4930      	ldr	r1, [pc, #192]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fee:	4b2f      	ldr	r3, [pc, #188]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	492b      	ldr	r1, [pc, #172]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
 8008002:	e01a      	b.n	800803a <HAL_RCC_OscConfig+0x202>
=======
 8007ba4:	4b36      	ldr	r3, [pc, #216]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a35      	ldr	r2, [pc, #212]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007baa:	f043 0308 	orr.w	r3, r3, #8
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	4b33      	ldr	r3, [pc, #204]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	4930      	ldr	r1, [pc, #192]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	492b      	ldr	r1, [pc, #172]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	604b      	str	r3, [r1, #4]
 8007bd6:	e01a      	b.n	8007c0e <HAL_RCC_OscConfig+0x202>
>>>>>>> origin/main

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8008004:	4b29      	ldr	r3, [pc, #164]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a28      	ldr	r2, [pc, #160]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 800800a:	f023 0301 	bic.w	r3, r3, #1
 800800e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008010:	f7fb fdba 	bl	8003b88 <HAL_GetTick>
 8008014:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008016:	e008      	b.n	800802a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008018:	f7fb fdb6 	bl	8003b88 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e35f      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800802a:	4b20      	ldr	r3, [pc, #128]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1f0      	bne.n	8008018 <HAL_RCC_OscConfig+0x1e0>
 8008036:	e000      	b.n	800803a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008038:	bf00      	nop
=======
 8007bd8:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a28      	ldr	r2, [pc, #160]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007be4:	f7fc f832 	bl	8003c4c <HAL_GetTick>
 8007be8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bec:	f7fc f82e 	bl	8003c4c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e35f      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007bfe:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f0      	bne.n	8007bec <HAL_RCC_OscConfig+0x1e0>
 8007c0a:	e000      	b.n	8007c0e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c0c:	bf00      	nop
>>>>>>> origin/main
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d073      	beq.n	800812e <HAL_RCC_OscConfig+0x2f6>
=======
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d073      	beq.n	8007d02 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d005      	beq.n	8008058 <HAL_RCC_OscConfig+0x220>
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	2b0c      	cmp	r3, #12
 8008050:	d10e      	bne.n	8008070 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d10b      	bne.n	8008070 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008058:	4b14      	ldr	r3, [pc, #80]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d063      	beq.n	800812c <HAL_RCC_OscConfig+0x2f4>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d15f      	bne.n	800812c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e33c      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCC_OscConfig+0x220>
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	2b0c      	cmp	r3, #12
 8007c24:	d10e      	bne.n	8007c44 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d10b      	bne.n	8007c44 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c2c:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d063      	beq.n	8007d00 <HAL_RCC_OscConfig+0x2f4>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d15f      	bne.n	8007d00 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e33c      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008078:	d106      	bne.n	8008088 <HAL_RCC_OscConfig+0x250>
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a0b      	ldr	r2, [pc, #44]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8008080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	e025      	b.n	80080d4 <HAL_RCC_OscConfig+0x29c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008090:	d114      	bne.n	80080bc <HAL_RCC_OscConfig+0x284>
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a05      	ldr	r2, [pc, #20]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 8008098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a02      	ldr	r2, [pc, #8]	; (80080ac <HAL_RCC_OscConfig+0x274>)
 80080a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e013      	b.n	80080d4 <HAL_RCC_OscConfig+0x29c>
 80080ac:	40021000 	.word	0x40021000
 80080b0:	0800f850 	.word	0x0800f850
 80080b4:	20000000 	.word	0x20000000
 80080b8:	20000004 	.word	0x20000004
 80080bc:	4b8f      	ldr	r3, [pc, #572]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a8e      	ldr	r2, [pc, #568]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80080c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4b8c      	ldr	r3, [pc, #560]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a8b      	ldr	r2, [pc, #556]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80080ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d013      	beq.n	8008104 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fb fd54 	bl	8003b88 <HAL_GetTick>
 80080e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e4:	f7fb fd50 	bl	8003b88 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	; 0x64
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e2f9      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080f6:	4b81      	ldr	r3, [pc, #516]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0x2ac>
 8008102:	e014      	b.n	800812e <HAL_RCC_OscConfig+0x2f6>
=======
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d106      	bne.n	8007c5c <HAL_RCC_OscConfig+0x250>
 8007c4e:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e025      	b.n	8007ca8 <HAL_RCC_OscConfig+0x29c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c64:	d114      	bne.n	8007c90 <HAL_RCC_OscConfig+0x284>
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a02      	ldr	r2, [pc, #8]	; (8007c80 <HAL_RCC_OscConfig+0x274>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e013      	b.n	8007ca8 <HAL_RCC_OscConfig+0x29c>
 8007c80:	40021000 	.word	0x40021000
 8007c84:	0800f424 	.word	0x0800f424
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	20000004 	.word	0x20000004
 8007c90:	4b8f      	ldr	r3, [pc, #572]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a8e      	ldr	r2, [pc, #568]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	4b8c      	ldr	r3, [pc, #560]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a8b      	ldr	r2, [pc, #556]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d013      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb0:	f7fb ffcc 	bl	8003c4c <HAL_GetTick>
 8007cb4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cb8:	f7fb ffc8 	bl	8003c4c <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b64      	cmp	r3, #100	; 0x64
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e2f9      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cca:	4b81      	ldr	r3, [pc, #516]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f0      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x2ac>
 8007cd6:	e014      	b.n	8007d02 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> origin/main
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8008104:	f7fb fd40 	bl	8003b88 <HAL_GetTick>
 8008108:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800810c:	f7fb fd3c 	bl	8003b88 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b64      	cmp	r3, #100	; 0x64
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e2e5      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800811e:	4b77      	ldr	r3, [pc, #476]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x2d4>
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812c:	bf00      	nop
=======
 8007cd8:	f7fb ffb8 	bl	8003c4c <HAL_GetTick>
 8007cdc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cde:	e008      	b.n	8007cf2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ce0:	f7fb ffb4 	bl	8003c4c <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b64      	cmp	r3, #100	; 0x64
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e2e5      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cf2:	4b77      	ldr	r3, [pc, #476]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x2d4>
 8007cfe:	e000      	b.n	8007d02 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d00:	bf00      	nop
>>>>>>> origin/main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d060      	beq.n	80081fc <HAL_RCC_OscConfig+0x3c4>
=======
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d060      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x3c4>
>>>>>>> origin/main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	2b04      	cmp	r3, #4
 800813e:	d005      	beq.n	800814c <HAL_RCC_OscConfig+0x314>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	2b0c      	cmp	r3, #12
 8008144:	d119      	bne.n	800817a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d116      	bne.n	800817a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800814c:	4b6b      	ldr	r3, [pc, #428]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <HAL_RCC_OscConfig+0x32c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e2c2      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_OscConfig+0x314>
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	d119      	bne.n	8007d4e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d116      	bne.n	8007d4e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d20:	4b6b      	ldr	r3, [pc, #428]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_RCC_OscConfig+0x32c>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e2c2      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8008164:	4b65      	ldr	r3, [pc, #404]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	061b      	lsls	r3, r3, #24
 8008172:	4962      	ldr	r1, [pc, #392]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008174:	4313      	orrs	r3, r2
 8008176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008178:	e040      	b.n	80081fc <HAL_RCC_OscConfig+0x3c4>
=======
 8007d38:	4b65      	ldr	r3, [pc, #404]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	061b      	lsls	r3, r3, #24
 8007d46:	4962      	ldr	r1, [pc, #392]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d4c:	e040      	b.n	8007dd0 <HAL_RCC_OscConfig+0x3c4>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d023      	beq.n	80081ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008182:	4b5e      	ldr	r3, [pc, #376]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a5d      	ldr	r2, [pc, #372]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818e:	f7fb fcfb 	bl	8003b88 <HAL_GetTick>
 8008192:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008196:	f7fb fcf7 	bl	8003b88 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e2a0      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081a8:	4b54      	ldr	r3, [pc, #336]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0f0      	beq.n	8008196 <HAL_RCC_OscConfig+0x35e>
=======
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d023      	beq.n	8007d9e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d56:	4b5e      	ldr	r3, [pc, #376]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a5d      	ldr	r2, [pc, #372]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d62:	f7fb ff73 	bl	8003c4c <HAL_GetTick>
 8007d66:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d68:	e008      	b.n	8007d7c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d6a:	f7fb ff6f 	bl	8003c4c <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e2a0      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d7c:	4b54      	ldr	r3, [pc, #336]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0f0      	beq.n	8007d6a <HAL_RCC_OscConfig+0x35e>
>>>>>>> origin/main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80081b4:	4b51      	ldr	r3, [pc, #324]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	061b      	lsls	r3, r3, #24
 80081c2:	494e      	ldr	r1, [pc, #312]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	604b      	str	r3, [r1, #4]
 80081c8:	e018      	b.n	80081fc <HAL_RCC_OscConfig+0x3c4>
=======
 8007d88:	4b51      	ldr	r3, [pc, #324]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	061b      	lsls	r3, r3, #24
 8007d96:	494e      	ldr	r1, [pc, #312]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	604b      	str	r3, [r1, #4]
 8007d9c:	e018      	b.n	8007dd0 <HAL_RCC_OscConfig+0x3c4>
>>>>>>> origin/main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80081ca:	4b4c      	ldr	r3, [pc, #304]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a4b      	ldr	r2, [pc, #300]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d6:	f7fb fcd7 	bl	8003b88 <HAL_GetTick>
 80081da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081de:	f7fb fcd3 	bl	8003b88 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e27c      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081f0:	4b42      	ldr	r3, [pc, #264]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f0      	bne.n	80081de <HAL_RCC_OscConfig+0x3a6>
=======
 8007d9e:	4b4c      	ldr	r3, [pc, #304]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a4b      	ldr	r2, [pc, #300]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fb ff4f 	bl	8003c4c <HAL_GetTick>
 8007dae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db2:	f7fb ff4b 	bl	8003c4c <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e27c      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dc4:	4b42      	ldr	r3, [pc, #264]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f0      	bne.n	8007db2 <HAL_RCC_OscConfig+0x3a6>
>>>>>>> origin/main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8082 	beq.w	800830e <HAL_RCC_OscConfig+0x4d6>
=======
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8082 	beq.w	8007ee2 <HAL_RCC_OscConfig+0x4d6>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d05f      	beq.n	80082d2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8008212:	4b3a      	ldr	r3, [pc, #232]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008218:	613b      	str	r3, [r7, #16]
=======
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d05f      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007de6:	4b3a      	ldr	r3, [pc, #232]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dec:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
<<<<<<< HEAD
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	429a      	cmp	r2, r3
 8008226:	d037      	beq.n	8008298 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d006      	beq.n	8008240 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_RCC_OscConfig+0x408>
=======
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d037      	beq.n	8007e6c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d006      	beq.n	8007e14 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_RCC_OscConfig+0x408>
>>>>>>> origin/main
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
<<<<<<< HEAD
 800823c:	2301      	movs	r3, #1
 800823e:	e254      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 8007e10:	2301      	movs	r3, #1
 8007e12:	e254      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
<<<<<<< HEAD
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01b      	beq.n	8008282 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 800824c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008250:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800825a:	f7fb fc95 	bl	8003b88 <HAL_GetTick>
 800825e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008262:	f7fb fc91 	bl	8003b88 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b11      	cmp	r3, #17
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e23a      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008274:	4b21      	ldr	r3, [pc, #132]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ef      	bne.n	8008262 <HAL_RCC_OscConfig+0x42a>
=======
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01b      	beq.n	8007e56 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8007e1e:	4b2c      	ldr	r3, [pc, #176]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e24:	4a2a      	ldr	r2, [pc, #168]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e2e:	f7fb ff0d 	bl	8003c4c <HAL_GetTick>
 8007e32:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e36:	f7fb ff09 	bl	8003c4c <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b11      	cmp	r3, #17
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e23a      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e48:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1ef      	bne.n	8007e36 <HAL_RCC_OscConfig+0x42a>
>>>>>>> origin/main
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
<<<<<<< HEAD
 8008282:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008288:	f023 0210 	bic.w	r2, r3, #16
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	491a      	ldr	r1, [pc, #104]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
=======
 8007e56:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5c:	f023 0210 	bic.w	r2, r3, #16
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	491a      	ldr	r1, [pc, #104]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
>>>>>>> origin/main
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 8008298:	4b18      	ldr	r3, [pc, #96]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 800829a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800829e:	4a17      	ldr	r2, [pc, #92]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a8:	f7fb fc6e 	bl	8003b88 <HAL_GetTick>
 80082ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b0:	f7fb fc6a 	bl	8003b88 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b11      	cmp	r3, #17
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e213      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80082c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0ef      	beq.n	80082b0 <HAL_RCC_OscConfig+0x478>
 80082d0:	e01d      	b.n	800830e <HAL_RCC_OscConfig+0x4d6>
=======
 8007e6c:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7c:	f7fb fee6 	bl	8003c4c <HAL_GetTick>
 8007e80:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e84:	f7fb fee2 	bl	8003c4c <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b11      	cmp	r3, #17
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e213      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e96:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0ef      	beq.n	8007e84 <HAL_RCC_OscConfig+0x478>
 8007ea4:	e01d      	b.n	8007ee2 <HAL_RCC_OscConfig+0x4d6>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80082d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <HAL_RCC_OscConfig+0x4c4>)
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e2:	f7fb fc51 	bl	8003b88 <HAL_GetTick>
 80082e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082e8:	e00a      	b.n	8008300 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ea:	f7fb fc4d 	bl	8003b88 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b11      	cmp	r3, #17
 80082f6:	d903      	bls.n	8008300 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e1f6      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
 80082fc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008300:	4ba9      	ldr	r3, [pc, #676]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1ed      	bne.n	80082ea <HAL_RCC_OscConfig+0x4b2>
=======
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <HAL_RCC_OscConfig+0x4c4>)
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb6:	f7fb fec9 	bl	8003c4c <HAL_GetTick>
 8007eba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ebc:	e00a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ebe:	f7fb fec5 	bl	8003c4c <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b11      	cmp	r3, #17
 8007eca:	d903      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e1f6      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
 8007ed0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ed4:	4ba9      	ldr	r3, [pc, #676]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1ed      	bne.n	8007ebe <HAL_RCC_OscConfig+0x4b2>
>>>>>>> origin/main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80bd 	beq.w	8008496 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0304 	and.w	r3, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80bd 	beq.w	800806a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> origin/main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 8008322:	4ba1      	ldr	r3, [pc, #644]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10e      	bne.n	800834c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800832e:	4b9e      	ldr	r3, [pc, #632]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008332:	4a9d      	ldr	r2, [pc, #628]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008338:	6593      	str	r3, [r2, #88]	; 0x58
 800833a:	4b9b      	ldr	r3, [pc, #620]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800834c:	4b97      	ldr	r3, [pc, #604]	; (80085ac <HAL_RCC_OscConfig+0x774>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d118      	bne.n	800838a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008358:	4b94      	ldr	r3, [pc, #592]	; (80085ac <HAL_RCC_OscConfig+0x774>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a93      	ldr	r2, [pc, #588]	; (80085ac <HAL_RCC_OscConfig+0x774>)
 800835e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008364:	f7fb fc10 	bl	8003b88 <HAL_GetTick>
 8008368:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800836c:	f7fb fc0c 	bl	8003b88 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e1b5      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800837e:	4b8b      	ldr	r3, [pc, #556]	; (80085ac <HAL_RCC_OscConfig+0x774>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f0      	beq.n	800836c <HAL_RCC_OscConfig+0x534>
=======
 8007ef6:	4ba1      	ldr	r3, [pc, #644]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10e      	bne.n	8007f20 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f02:	4b9e      	ldr	r3, [pc, #632]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	4a9d      	ldr	r2, [pc, #628]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f0e:	4b9b      	ldr	r3, [pc, #620]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f20:	4b97      	ldr	r3, [pc, #604]	; (8008180 <HAL_RCC_OscConfig+0x774>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d118      	bne.n	8007f5e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f2c:	4b94      	ldr	r3, [pc, #592]	; (8008180 <HAL_RCC_OscConfig+0x774>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a93      	ldr	r2, [pc, #588]	; (8008180 <HAL_RCC_OscConfig+0x774>)
 8007f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f38:	f7fb fe88 	bl	8003c4c <HAL_GetTick>
 8007f3c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f40:	f7fb fe84 	bl	8003c4c <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e1b5      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f52:	4b8b      	ldr	r3, [pc, #556]	; (8008180 <HAL_RCC_OscConfig+0x774>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCC_OscConfig+0x534>
>>>>>>> origin/main
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
<<<<<<< HEAD
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008396:	4b84      	ldr	r3, [pc, #528]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a8:	497f      	ldr	r1, [pc, #508]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d010      	beq.n	80083de <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80083bc:	4b7a      	ldr	r3, [pc, #488]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c2:	4a79      	ldr	r2, [pc, #484]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083c4:	f043 0304 	orr.w	r3, r3, #4
 80083c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80083cc:	4b76      	ldr	r3, [pc, #472]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d2:	4a75      	ldr	r2, [pc, #468]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083dc:	e018      	b.n	8008410 <HAL_RCC_OscConfig+0x5d8>
=======
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d02c      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007f6a:	4b84      	ldr	r3, [pc, #528]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7c:	497f      	ldr	r1, [pc, #508]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d010      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007f90:	4b7a      	ldr	r3, [pc, #488]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	4a79      	ldr	r2, [pc, #484]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007f98:	f043 0304 	orr.w	r3, r3, #4
 8007f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007fa0:	4b76      	ldr	r3, [pc, #472]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa6:	4a75      	ldr	r2, [pc, #468]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fb0:	e018      	b.n	8007fe4 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> origin/main
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< HEAD
 80083de:	4b72      	ldr	r3, [pc, #456]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e4:	4a70      	ldr	r2, [pc, #448]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083ee:	e00f      	b.n	8008410 <HAL_RCC_OscConfig+0x5d8>
=======
 8007fb2:	4b72      	ldr	r3, [pc, #456]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	4a70      	ldr	r2, [pc, #448]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fc2:	e00f      	b.n	8007fe4 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> origin/main
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< HEAD
 80083f0:	4b6d      	ldr	r3, [pc, #436]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f6:	4a6c      	ldr	r2, [pc, #432]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008400:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	4a68      	ldr	r2, [pc, #416]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008408:	f023 0304 	bic.w	r3, r3, #4
 800840c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8007fc4:	4b6d      	ldr	r3, [pc, #436]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	4a6c      	ldr	r2, [pc, #432]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007fd4:	4b69      	ldr	r3, [pc, #420]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fda:	4a68      	ldr	r2, [pc, #416]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8007fdc:	f023 0304 	bic.w	r3, r3, #4
 8007fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> origin/main
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d016      	beq.n	8008446 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008418:	f7fb fbb6 	bl	8003b88 <HAL_GetTick>
 800841c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008420:	f7fb fbb2 	bl	8003b88 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	; 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e159      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008436:	4b5c      	ldr	r3, [pc, #368]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0ed      	beq.n	8008420 <HAL_RCC_OscConfig+0x5e8>
 8008444:	e01d      	b.n	8008482 <HAL_RCC_OscConfig+0x64a>
=======
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d016      	beq.n	800801a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fb fe2e 	bl	8003c4c <HAL_GetTick>
 8007ff0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fb fe2a 	bl	8003c4c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e159      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800800a:	4b5c      	ldr	r3, [pc, #368]	; (800817c <HAL_RCC_OscConfig+0x770>)
 800800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0ed      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x5e8>
 8008018:	e01d      	b.n	8008056 <HAL_RCC_OscConfig+0x64a>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8008446:	f7fb fb9f 	bl	8003b88 <HAL_GetTick>
 800844a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800844c:	e00a      	b.n	8008464 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800844e:	f7fb fb9b 	bl	8003b88 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	f241 3288 	movw	r2, #5000	; 0x1388
 800845c:	4293      	cmp	r3, r2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e142      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008464:	4b50      	ldr	r3, [pc, #320]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1ed      	bne.n	800844e <HAL_RCC_OscConfig+0x616>
=======
 800801a:	f7fb fe17 	bl	8003c4c <HAL_GetTick>
 800801e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008020:	e00a      	b.n	8008038 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fb fe13 	bl	8003c4c <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e142      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008038:	4b50      	ldr	r3, [pc, #320]	; (800817c <HAL_RCC_OscConfig+0x770>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1ed      	bne.n	8008022 <HAL_RCC_OscConfig+0x616>
>>>>>>> origin/main
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
<<<<<<< HEAD
 8008472:	4b4d      	ldr	r3, [pc, #308]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008478:	4a4b      	ldr	r2, [pc, #300]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 800847a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8008046:	4b4d      	ldr	r3, [pc, #308]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	4a4b      	ldr	r2, [pc, #300]	; (800817c <HAL_RCC_OscConfig+0x770>)
 800804e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> origin/main
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8008482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008486:	2b01      	cmp	r3, #1
 8008488:	d105      	bne.n	8008496 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800848a:	4b47      	ldr	r3, [pc, #284]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	4a46      	ldr	r2, [pc, #280]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008494:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8008056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805a:	2b01      	cmp	r3, #1
 800805c:	d105      	bne.n	800806a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800805e:	4b47      	ldr	r3, [pc, #284]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	4a46      	ldr	r2, [pc, #280]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008068:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> origin/main
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d03c      	beq.n	800851c <HAL_RCC_OscConfig+0x6e4>
=======
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d03c      	beq.n	80080f0 <HAL_RCC_OscConfig+0x6e4>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01c      	beq.n	80084e4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084aa:	4b3f      	ldr	r3, [pc, #252]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80084ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084b0:	4a3d      	ldr	r2, [pc, #244]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ba:	f7fb fb65 	bl	8003b88 <HAL_GetTick>
 80084be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084c2:	f7fb fb61 	bl	8003b88 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e10a      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084d4:	4b34      	ldr	r3, [pc, #208]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80084d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0ef      	beq.n	80084c2 <HAL_RCC_OscConfig+0x68a>
 80084e2:	e01b      	b.n	800851c <HAL_RCC_OscConfig+0x6e4>
=======
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01c      	beq.n	80080b8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800807e:	4b3f      	ldr	r3, [pc, #252]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008084:	4a3d      	ldr	r2, [pc, #244]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008086:	f043 0301 	orr.w	r3, r3, #1
 800808a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fb fddd 	bl	8003c4c <HAL_GetTick>
 8008092:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008096:	f7fb fdd9 	bl	8003c4c <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e10a      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080a8:	4b34      	ldr	r3, [pc, #208]	; (800817c <HAL_RCC_OscConfig+0x770>)
 80080aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0ef      	beq.n	8008096 <HAL_RCC_OscConfig+0x68a>
 80080b6:	e01b      	b.n	80080f0 <HAL_RCC_OscConfig+0x6e4>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 80084e4:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80084e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084ea:	4a2f      	ldr	r2, [pc, #188]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f4:	f7fb fb48 	bl	8003b88 <HAL_GetTick>
 80084f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084fc:	f7fb fb44 	bl	8003b88 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e0ed      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1ef      	bne.n	80084fc <HAL_RCC_OscConfig+0x6c4>
=======
 80080b8:	4b30      	ldr	r3, [pc, #192]	; (800817c <HAL_RCC_OscConfig+0x770>)
 80080ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080be:	4a2f      	ldr	r2, [pc, #188]	; (800817c <HAL_RCC_OscConfig+0x770>)
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c8:	f7fb fdc0 	bl	8003c4c <HAL_GetTick>
 80080cc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080d0:	f7fb fdbc 	bl	8003c4c <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e0ed      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080e2:	4b26      	ldr	r3, [pc, #152]	; (800817c <HAL_RCC_OscConfig+0x770>)
 80080e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1ef      	bne.n	80080d0 <HAL_RCC_OscConfig+0x6c4>
>>>>>>> origin/main
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80e1 	beq.w	80086e8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	2b02      	cmp	r3, #2
 800852c:	f040 80b5 	bne.w	800869a <HAL_RCC_OscConfig+0x862>
=======
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80e1 	beq.w	80082bc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	2b02      	cmp	r3, #2
 8008100:	f040 80b5 	bne.w	800826e <HAL_RCC_OscConfig+0x862>
>>>>>>> origin/main
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8008530:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f003 0203 	and.w	r2, r3, #3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	429a      	cmp	r2, r3
 8008542:	d124      	bne.n	800858e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	3b01      	subs	r3, #1
 8008550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d11b      	bne.n	800858e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d113      	bne.n	800858e <HAL_RCC_OscConfig+0x756>
=======
 8008104:	4b1d      	ldr	r3, [pc, #116]	; (800817c <HAL_RCC_OscConfig+0x770>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f003 0203 	and.w	r2, r3, #3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	429a      	cmp	r2, r3
 8008116:	d124      	bne.n	8008162 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	3b01      	subs	r3, #1
 8008124:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d11b      	bne.n	8008162 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008134:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008136:	429a      	cmp	r2, r3
 8008138:	d113      	bne.n	8008162 <HAL_RCC_OscConfig+0x756>
>>>>>>> origin/main
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	3b01      	subs	r3, #1
 8008574:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d109      	bne.n	800858e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	3b01      	subs	r3, #1
 8008588:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d05f      	beq.n	800864e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d05a      	beq.n	800864a <HAL_RCC_OscConfig+0x812>
=======
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	3b01      	subs	r3, #1
 8008148:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800814a:	429a      	cmp	r2, r3
 800814c:	d109      	bne.n	8008162 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	3b01      	subs	r3, #1
 800815c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d05f      	beq.n	8008222 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	2b0c      	cmp	r3, #12
 8008166:	d05a      	beq.n	800821e <HAL_RCC_OscConfig+0x812>
>>>>>>> origin/main
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a03      	ldr	r2, [pc, #12]	; (80085a8 <HAL_RCC_OscConfig+0x770>)
 800859a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800859e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085a0:	f7fb faf2 	bl	8003b88 <HAL_GetTick>
 80085a4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085a6:	e00c      	b.n	80085c2 <HAL_RCC_OscConfig+0x78a>
 80085a8:	40021000 	.word	0x40021000
 80085ac:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b0:	f7fb faea 	bl	8003b88 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e093      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085c2:	4b4c      	ldr	r3, [pc, #304]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f0      	bne.n	80085b0 <HAL_RCC_OscConfig+0x778>
=======
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <HAL_RCC_OscConfig+0x770>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a03      	ldr	r2, [pc, #12]	; (800817c <HAL_RCC_OscConfig+0x770>)
 800816e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008172:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008174:	f7fb fd6a 	bl	8003c4c <HAL_GetTick>
 8008178:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800817a:	e00c      	b.n	8008196 <HAL_RCC_OscConfig+0x78a>
 800817c:	40021000 	.word	0x40021000
 8008180:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008184:	f7fb fd62 	bl	8003c4c <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e093      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008196:	4b4c      	ldr	r3, [pc, #304]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f0      	bne.n	8008184 <HAL_RCC_OscConfig+0x778>
>>>>>>> origin/main
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80085ce:	4b49      	ldr	r3, [pc, #292]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	4b49      	ldr	r3, [pc, #292]	; (80086f8 <HAL_RCC_OscConfig+0x8c0>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085de:	3a01      	subs	r2, #1
 80085e0:	0112      	lsls	r2, r2, #4
 80085e2:	4311      	orrs	r1, r2
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085e8:	0212      	lsls	r2, r2, #8
 80085ea:	4311      	orrs	r1, r2
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085f0:	0852      	lsrs	r2, r2, #1
 80085f2:	3a01      	subs	r2, #1
 80085f4:	0552      	lsls	r2, r2, #21
 80085f6:	4311      	orrs	r1, r2
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80085fc:	0852      	lsrs	r2, r2, #1
 80085fe:	3a01      	subs	r2, #1
 8008600:	0652      	lsls	r2, r2, #25
 8008602:	430a      	orrs	r2, r1
 8008604:	493b      	ldr	r1, [pc, #236]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008606:	4313      	orrs	r3, r2
 8008608:	60cb      	str	r3, [r1, #12]
=======
 80081a2:	4b49      	ldr	r3, [pc, #292]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	4b49      	ldr	r3, [pc, #292]	; (80082cc <HAL_RCC_OscConfig+0x8c0>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081b2:	3a01      	subs	r2, #1
 80081b4:	0112      	lsls	r2, r2, #4
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081bc:	0212      	lsls	r2, r2, #8
 80081be:	4311      	orrs	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80081c4:	0852      	lsrs	r2, r2, #1
 80081c6:	3a01      	subs	r2, #1
 80081c8:	0552      	lsls	r2, r2, #21
 80081ca:	4311      	orrs	r1, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081d0:	0852      	lsrs	r2, r2, #1
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0652      	lsls	r2, r2, #25
 80081d6:	430a      	orrs	r2, r1
 80081d8:	493b      	ldr	r1, [pc, #236]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	60cb      	str	r3, [r1, #12]
>>>>>>> origin/main
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800860a:	4b3a      	ldr	r3, [pc, #232]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a39      	ldr	r2, [pc, #228]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008614:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008616:	4b37      	ldr	r3, [pc, #220]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	4a36      	ldr	r2, [pc, #216]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800861c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008620:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008622:	f7fb fab1 	bl	8003b88 <HAL_GetTick>
 8008626:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800862a:	f7fb faad 	bl	8003b88 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e056      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800863c:	4b2d      	ldr	r3, [pc, #180]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008648:	e04e      	b.n	80086e8 <HAL_RCC_OscConfig+0x8b0>
=======
 80081de:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a39      	ldr	r2, [pc, #228]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081e8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081ea:	4b37      	ldr	r3, [pc, #220]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	4a36      	ldr	r2, [pc, #216]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80081f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081f6:	f7fb fd29 	bl	8003c4c <HAL_GetTick>
 80081fa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fc:	e008      	b.n	8008210 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081fe:	f7fb fd25 	bl	8003c4c <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e056      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008210:	4b2d      	ldr	r3, [pc, #180]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0f0      	beq.n	80081fe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800821c:	e04e      	b.n	80082bc <HAL_RCC_OscConfig+0x8b0>
>>>>>>> origin/main
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 800864a:	2301      	movs	r3, #1
 800864c:	e04d      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 800821e:	2301      	movs	r3, #1
 8008220:	e04d      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 800864e:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d146      	bne.n	80086e8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a25      	ldr	r2, [pc, #148]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008664:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008666:	4b23      	ldr	r3, [pc, #140]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800866c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008670:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008672:	f7fb fa89 	bl	8003b88 <HAL_GetTick>
 8008676:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008678:	e008      	b.n	800868c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800867a:	f7fb fa85 	bl	8003b88 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e02e      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800868c:	4b19      	ldr	r3, [pc, #100]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f0      	beq.n	800867a <HAL_RCC_OscConfig+0x842>
 8008698:	e026      	b.n	80086e8 <HAL_RCC_OscConfig+0x8b0>
=======
 8008222:	4b29      	ldr	r3, [pc, #164]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d146      	bne.n	80082bc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800822e:	4b26      	ldr	r3, [pc, #152]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a25      	ldr	r2, [pc, #148]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008238:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800823a:	4b23      	ldr	r3, [pc, #140]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	4a22      	ldr	r2, [pc, #136]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008244:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008246:	f7fb fd01 	bl	8003c4c <HAL_GetTick>
 800824a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800824e:	f7fb fcfd 	bl	8003c4c <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e02e      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008260:	4b19      	ldr	r3, [pc, #100]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f0      	beq.n	800824e <HAL_RCC_OscConfig+0x842>
 800826c:	e026      	b.n	80082bc <HAL_RCC_OscConfig+0x8b0>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d021      	beq.n	80086e4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80086a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7fb fa6c 	bl	8003b88 <HAL_GetTick>
 80086b0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b4:	f7fb fa68 	bl	8003b88 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e011      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f0      	bne.n	80086b4 <HAL_RCC_OscConfig+0x87c>
=======
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	2b0c      	cmp	r3, #12
 8008272:	d021      	beq.n	80082b8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008274:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 800827a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800827e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fb fce4 	bl	8003c4c <HAL_GetTick>
 8008284:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008288:	f7fb fce0 	bl	8003c4c <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e011      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1f0      	bne.n	8008288 <HAL_RCC_OscConfig+0x87c>
>>>>>>> origin/main
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
<<<<<<< HEAD
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <HAL_RCC_OscConfig+0x8bc>)
 80086d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80086dc:	f023 0303 	bic.w	r3, r3, #3
 80086e0:	60d3      	str	r3, [r2, #12]
 80086e2:	e001      	b.n	80086e8 <HAL_RCC_OscConfig+0x8b0>
=======
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4a07      	ldr	r2, [pc, #28]	; (80082c8 <HAL_RCC_OscConfig+0x8bc>)
 80082ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	60d3      	str	r3, [r2, #12]
 80082b6:	e001      	b.n	80082bc <HAL_RCC_OscConfig+0x8b0>
>>>>>>> origin/main
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <HAL_RCC_OscConfig+0x8b2>
=======
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <HAL_RCC_OscConfig+0x8b2>
>>>>>>> origin/main
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3728      	adds	r7, #40	; 0x28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40021000 	.word	0x40021000
 80086f8:	f99f808c 	.word	0xf99f808c

080086fc <HAL_RCC_ClockConfig>:
=======
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3728      	adds	r7, #40	; 0x28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40021000 	.word	0x40021000
 80082cc:	f99f808c 	.word	0xf99f808c

080082d0 <HAL_RCC_ClockConfig>:
>>>>>>> origin/main
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
=======
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0e7      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e0e7      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8008710:	4b75      	ldr	r3, [pc, #468]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d910      	bls.n	8008740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871e:	4b72      	ldr	r3, [pc, #456]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f023 0207 	bic.w	r2, r3, #7
 8008726:	4970      	ldr	r1, [pc, #448]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	4313      	orrs	r3, r2
 800872c:	600b      	str	r3, [r1, #0]
=======
 80082e4:	4b75      	ldr	r3, [pc, #468]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d910      	bls.n	8008314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f2:	4b72      	ldr	r3, [pc, #456]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f023 0207 	bic.w	r2, r3, #7
 80082fa:	4970      	ldr	r1, [pc, #448]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	4313      	orrs	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800872e:	4b6e      	ldr	r3, [pc, #440]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0cf      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8008302:	4b6e      	ldr	r3, [pc, #440]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d001      	beq.n	8008314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0cf      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d010      	beq.n	800876e <HAL_RCC_ClockConfig+0x72>
=======
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <HAL_RCC_ClockConfig+0x72>
>>>>>>> origin/main
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	4b66      	ldr	r3, [pc, #408]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008758:	429a      	cmp	r2, r3
 800875a:	d908      	bls.n	800876e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800875c:	4b63      	ldr	r3, [pc, #396]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4960      	ldr	r1, [pc, #384]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800876a:	4313      	orrs	r3, r2
 800876c:	608b      	str	r3, [r1, #8]
=======
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	4b66      	ldr	r3, [pc, #408]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800832c:	429a      	cmp	r2, r3
 800832e:	d908      	bls.n	8008342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008330:	4b63      	ldr	r3, [pc, #396]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	4960      	ldr	r1, [pc, #384]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 800833e:	4313      	orrs	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d04c      	beq.n	8008814 <HAL_RCC_ClockConfig+0x118>
=======
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d04c      	beq.n	80083e8 <HAL_RCC_ClockConfig+0x118>
>>>>>>> origin/main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b03      	cmp	r3, #3
 8008780:	d107      	bne.n	8008792 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008782:	4b5a      	ldr	r3, [pc, #360]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d121      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e0a6      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d107      	bne.n	8008366 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008356:	4b5a      	ldr	r3, [pc, #360]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d121      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e0a6      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d107      	bne.n	80087aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800879a:	4b54      	ldr	r3, [pc, #336]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d115      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e09a      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d107      	bne.n	800837e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800836e:	4b54      	ldr	r3, [pc, #336]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d115      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e09a      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087b2:	4b4e      	ldr	r3, [pc, #312]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e08e      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d107      	bne.n	8008396 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008386:	4b4e      	ldr	r3, [pc, #312]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e08e      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 80087c2:	4b4a      	ldr	r3, [pc, #296]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e086      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8008396:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e086      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80087d2:	4b46      	ldr	r3, [pc, #280]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 0203 	bic.w	r2, r3, #3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4943      	ldr	r1, [pc, #268]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e4:	f7fb f9d0 	bl	8003b88 <HAL_GetTick>
 80087e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ea:	e00a      	b.n	8008802 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087ec:	f7fb f9cc 	bl	8003b88 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e06e      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008802:	4b3a      	ldr	r3, [pc, #232]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 020c 	and.w	r2, r3, #12
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	429a      	cmp	r2, r3
 8008812:	d1eb      	bne.n	80087ec <HAL_RCC_ClockConfig+0xf0>
=======
 80083a6:	4b46      	ldr	r3, [pc, #280]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f023 0203 	bic.w	r2, r3, #3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4943      	ldr	r1, [pc, #268]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b8:	f7fb fc48 	bl	8003c4c <HAL_GetTick>
 80083bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083be:	e00a      	b.n	80083d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083c0:	f7fb fc44 	bl	8003c4c <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e06e      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d6:	4b3a      	ldr	r3, [pc, #232]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 020c 	and.w	r2, r3, #12
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d1eb      	bne.n	80083c0 <HAL_RCC_ClockConfig+0xf0>
>>>>>>> origin/main
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	4b31      	ldr	r3, [pc, #196]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800882c:	429a      	cmp	r2, r3
 800882e:	d208      	bcs.n	8008842 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008830:	4b2e      	ldr	r3, [pc, #184]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	492b      	ldr	r1, [pc, #172]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800883e:	4313      	orrs	r3, r2
 8008840:	608b      	str	r3, [r1, #8]
=======
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d010      	beq.n	8008416 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008400:	429a      	cmp	r2, r3
 8008402:	d208      	bcs.n	8008416 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008404:	4b2e      	ldr	r3, [pc, #184]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	492b      	ldr	r1, [pc, #172]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008412:	4313      	orrs	r3, r2
 8008414:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d210      	bcs.n	8008872 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008850:	4b25      	ldr	r3, [pc, #148]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f023 0207 	bic.w	r2, r3, #7
 8008858:	4923      	ldr	r1, [pc, #140]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	4313      	orrs	r3, r2
 800885e:	600b      	str	r3, [r1, #0]
=======
 8008416:	4b29      	ldr	r3, [pc, #164]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d210      	bcs.n	8008446 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f023 0207 	bic.w	r2, r3, #7
 800842c:	4923      	ldr	r1, [pc, #140]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8008860:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d001      	beq.n	8008872 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e036      	b.n	80088e0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8008434:	4b21      	ldr	r3, [pc, #132]	; (80084bc <HAL_RCC_ClockConfig+0x1ec>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d001      	beq.n	8008446 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e036      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> origin/main
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800887e:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	4918      	ldr	r1, [pc, #96]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800888c:	4313      	orrs	r3, r2
 800888e:	608b      	str	r3, [r1, #8]
=======
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0304 	and.w	r3, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4918      	ldr	r1, [pc, #96]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008460:	4313      	orrs	r3, r2
 8008462:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800889c:	4b13      	ldr	r3, [pc, #76]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4910      	ldr	r1, [pc, #64]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	608b      	str	r3, [r1, #8]
=======
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008470:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4910      	ldr	r1, [pc, #64]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 8008480:	4313      	orrs	r3, r2
 8008482:	608b      	str	r3, [r1, #8]
>>>>>>> origin/main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 80088b0:	f000 f824 	bl	80088fc <HAL_RCC_GetSysClockFreq>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <HAL_RCC_ClockConfig+0x1f0>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	091b      	lsrs	r3, r3, #4
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	490b      	ldr	r1, [pc, #44]	; (80088f0 <HAL_RCC_ClockConfig+0x1f4>)
 80088c2:	5ccb      	ldrb	r3, [r1, r3]
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	fa22 f303 	lsr.w	r3, r2, r3
 80088cc:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <HAL_RCC_ClockConfig+0x1f8>)
 80088ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <HAL_RCC_ClockConfig+0x1fc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fb f907 	bl	8003ae8 <HAL_InitTick>
 80088da:	4603      	mov	r3, r0
 80088dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80088de:	7afb      	ldrb	r3, [r7, #11]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40022000 	.word	0x40022000
 80088ec:	40021000 	.word	0x40021000
 80088f0:	0800f850 	.word	0x0800f850
 80088f4:	20000000 	.word	0x20000000
 80088f8:	20000004 	.word	0x20000004

080088fc <HAL_RCC_GetSysClockFreq>:
=======
 8008484:	f000 f824 	bl	80084d0 <HAL_RCC_GetSysClockFreq>
 8008488:	4602      	mov	r2, r0
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <HAL_RCC_ClockConfig+0x1f0>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	490b      	ldr	r1, [pc, #44]	; (80084c4 <HAL_RCC_ClockConfig+0x1f4>)
 8008496:	5ccb      	ldrb	r3, [r1, r3]
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
 80084a0:	4a09      	ldr	r2, [pc, #36]	; (80084c8 <HAL_RCC_ClockConfig+0x1f8>)
 80084a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80084a4:	4b09      	ldr	r3, [pc, #36]	; (80084cc <HAL_RCC_ClockConfig+0x1fc>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fb fb7f 	bl	8003bac <HAL_InitTick>
 80084ae:	4603      	mov	r3, r0
 80084b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40022000 	.word	0x40022000
 80084c0:	40021000 	.word	0x40021000
 80084c4:	0800f424 	.word	0x0800f424
 80084c8:	20000000 	.word	0x20000000
 80084cc:	20000004 	.word	0x20000004

080084d0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> origin/main
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80088fc:	b480      	push	{r7}
 80088fe:	b089      	sub	sp, #36	; 0x24
 8008900:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	2300      	movs	r3, #0
 8008908:	61bb      	str	r3, [r7, #24]
=======
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	; 0x24
 80084d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	2300      	movs	r3, #0
 80084dc:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 800890a:	4b3e      	ldr	r3, [pc, #248]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 030c 	and.w	r3, r3, #12
 8008912:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008914:	4b3b      	ldr	r3, [pc, #236]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 0303 	and.w	r3, r3, #3
 800891c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_GetSysClockFreq+0x34>
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b0c      	cmp	r3, #12
 8008928:	d121      	bne.n	800896e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d11e      	bne.n	800896e <HAL_RCC_GetSysClockFreq+0x72>
=======
 80084de:	4b3e      	ldr	r3, [pc, #248]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
 80084e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084e8:	4b3b      	ldr	r3, [pc, #236]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <HAL_RCC_GetSysClockFreq+0x34>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b0c      	cmp	r3, #12
 80084fc:	d121      	bne.n	8008542 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d11e      	bne.n	8008542 <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> origin/main
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8008930:	4b34      	ldr	r3, [pc, #208]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d107      	bne.n	800894c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800893c:	4b31      	ldr	r3, [pc, #196]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800893e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e005      	b.n	8008958 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8008504:	4b34      	ldr	r3, [pc, #208]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d107      	bne.n	8008520 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008510:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	e005      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> origin/main
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 800894c:	4b2d      	ldr	r3, [pc, #180]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	091b      	lsrs	r3, r3, #4
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008958:	4a2b      	ldr	r2, [pc, #172]	; (8008a08 <HAL_RCC_GetSysClockFreq+0x10c>)
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008960:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10d      	bne.n	8008984 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800896c:	e00a      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d102      	bne.n	800897a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <HAL_RCC_GetSysClockFreq+0x110>)
 8008976:	61bb      	str	r3, [r7, #24]
 8008978:	e004      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d101      	bne.n	8008984 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008980:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <HAL_RCC_GetSysClockFreq+0x114>)
 8008982:	61bb      	str	r3, [r7, #24]
=======
 8008520:	4b2d      	ldr	r3, [pc, #180]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800852c:	4a2b      	ldr	r2, [pc, #172]	; (80085dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008534:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10d      	bne.n	8008558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008540:	e00a      	b.n	8008558 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b04      	cmp	r3, #4
 8008546:	d102      	bne.n	800854e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008548:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800854a:	61bb      	str	r3, [r7, #24]
 800854c:	e004      	b.n	8008558 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b08      	cmp	r3, #8
 8008552:	d101      	bne.n	8008558 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008554:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008556:	61bb      	str	r3, [r7, #24]
>>>>>>> origin/main
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b0c      	cmp	r3, #12
 8008988:	d134      	bne.n	80089f4 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b0c      	cmp	r3, #12
 800855c:	d134      	bne.n	80085c8 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> origin/main
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 800898a:	4b1e      	ldr	r3, [pc, #120]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d003      	beq.n	80089a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d003      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0xac>
 80089a0:	e005      	b.n	80089ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80089a2:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <HAL_RCC_GetSysClockFreq+0x110>)
 80089a4:	617b      	str	r3, [r7, #20]
      break;
 80089a6:	e005      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80089a8:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <HAL_RCC_GetSysClockFreq+0x114>)
 80089aa:	617b      	str	r3, [r7, #20]
      break;
 80089ac:	e002      	b.n	80089b4 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d003      	beq.n	8008576 <HAL_RCC_GetSysClockFreq+0xa6>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d003      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0xac>
 8008574:	e005      	b.n	8008582 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008576:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008578:	617b      	str	r3, [r7, #20]
      break;
 800857a:	e005      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800857e:	617b      	str	r3, [r7, #20]
      break;
 8008580:	e002      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> origin/main

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	617b      	str	r3, [r7, #20]
      break;
 80089b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	091b      	lsrs	r3, r3, #4
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	3301      	adds	r3, #1
 80089c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80089c2:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	fb03 f202 	mul.w	r2, r3, r2
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <HAL_RCC_GetSysClockFreq+0x108>)
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	0e5b      	lsrs	r3, r3, #25
 80089e0:	f003 0303 	and.w	r3, r3, #3
 80089e4:	3301      	adds	r3, #1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80089f4:	69bb      	ldr	r3, [r7, #24]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3724      	adds	r7, #36	; 0x24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40021000 	.word	0x40021000
 8008a08:	0800f860 	.word	0x0800f860
 8008a0c:	00f42400 	.word	0x00f42400
 8008a10:	007a1200 	.word	0x007a1200

08008a14 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	617b      	str	r3, [r7, #20]
      break;
 8008586:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008588:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	091b      	lsrs	r3, r3, #4
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	3301      	adds	r3, #1
 8008594:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008596:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	fb03 f202 	mul.w	r2, r3, r2
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	0e5b      	lsrs	r3, r3, #25
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	3301      	adds	r3, #1
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80085c8:	69bb      	ldr	r3, [r7, #24]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3724      	adds	r7, #36	; 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40021000 	.word	0x40021000
 80085dc:	0800f434 	.word	0x0800f434
 80085e0:	00f42400 	.word	0x00f42400
 80085e4:	007a1200 	.word	0x007a1200

080085e8 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> origin/main
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a20:	4b2a      	ldr	r3, [pc, #168]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a2c:	f7ff f990 	bl	8007d50 <HAL_PWREx_GetVoltageRange>
 8008a30:	6178      	str	r0, [r7, #20]
 8008a32:	e014      	b.n	8008a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80085f0:	2300      	movs	r3, #0
 80085f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008600:	f7ff f990 	bl	8007924 <HAL_PWREx_GetVoltageRange>
 8008604:	6178      	str	r0, [r7, #20]
 8008606:	e014      	b.n	8008632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> origin/main
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8008a34:	4b25      	ldr	r3, [pc, #148]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a38:	4a24      	ldr	r2, [pc, #144]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8008a40:	4b22      	ldr	r3, [pc, #136]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a4c:	f7ff f980 	bl	8007d50 <HAL_PWREx_GetVoltageRange>
 8008a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a52:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a56:	4a1d      	ldr	r2, [pc, #116]	; (8008acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a64:	d10b      	bne.n	8008a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b80      	cmp	r3, #128	; 0x80
 8008a6a:	d919      	bls.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8008a70:	d902      	bls.n	8008a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a72:	2302      	movs	r3, #2
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	e013      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8008608:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800860a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860c:	4a24      	ldr	r2, [pc, #144]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800860e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008612:	6593      	str	r3, [r2, #88]	; 0x58
 8008614:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008620:	f7ff f980 	bl	8007924 <HAL_PWREx_GetVoltageRange>
 8008624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008626:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862a:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800862c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008638:	d10b      	bne.n	8008652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d919      	bls.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2ba0      	cmp	r3, #160	; 0xa0
 8008644:	d902      	bls.n	800864c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008646:	2302      	movs	r3, #2
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	e013      	b.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> origin/main
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 8008a78:	2301      	movs	r3, #1
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	e010      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 800864c:	2301      	movs	r3, #1
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	e010      	b.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> origin/main
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< HEAD
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d902      	bls.n	8008a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008a84:	2303      	movs	r3, #3
 8008a86:	613b      	str	r3, [r7, #16]
 8008a88:	e00a      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b80      	cmp	r3, #128	; 0x80
 8008656:	d902      	bls.n	800865e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008658:	2303      	movs	r3, #3
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	e00a      	b.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> origin/main
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< HEAD
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b80      	cmp	r3, #128	; 0x80
 8008a8e:	d102      	bne.n	8008a96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a90:	2302      	movs	r3, #2
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	e004      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b70      	cmp	r3, #112	; 0x70
 8008a9a:	d101      	bne.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]
=======
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d102      	bne.n	800866a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008664:	2302      	movs	r3, #2
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	e004      	b.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b70      	cmp	r3, #112	; 0x70
 800866e:	d101      	bne.n	8008674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008670:	2301      	movs	r3, #1
 8008672:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f023 0207 	bic.w	r2, r3, #7
 8008aa8:	4909      	ldr	r1, [pc, #36]	; (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	600b      	str	r3, [r1, #0]
=======
 8008674:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f023 0207 	bic.w	r2, r3, #7
 800867c:	4909      	ldr	r1, [pc, #36]	; (80086a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	600b      	str	r3, [r1, #0]
>>>>>>> origin/main

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d001      	beq.n	8008ac2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40021000 	.word	0x40021000
 8008ad0:	40022000 	.word	0x40022000

08008ad4 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	429a      	cmp	r2, r3
 8008690:	d001      	beq.n	8008696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e000      	b.n	8008698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40021000 	.word	0x40021000
 80086a4:	40022000 	.word	0x40022000

080086a8 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> origin/main
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008adc:	2300      	movs	r3, #0
 8008ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	74bb      	strb	r3, [r7, #18]
=======
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b0:	2300      	movs	r3, #0
 80086b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086b4:	2300      	movs	r3, #0
 80086b6:	74bb      	strb	r3, [r7, #18]
>>>>>>> origin/main
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 809e 	beq.w	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008af2:	2300      	movs	r3, #0
 8008af4:	747b      	strb	r3, [r7, #17]
=======
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 809e 	beq.w	8008802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086c6:	2300      	movs	r3, #0
 80086c8:	747b      	strb	r3, [r7, #17]
>>>>>>> origin/main

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 8008af6:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b0c:	4b40      	ldr	r3, [pc, #256]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b10:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b16:	6593      	str	r3, [r2, #88]	; 0x58
 8008b18:	4b3d      	ldr	r3, [pc, #244]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b24:	2301      	movs	r3, #1
 8008b26:	747b      	strb	r3, [r7, #17]
=======
 80086ca:	4b46      	ldr	r3, [pc, #280]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80086cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00d      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e0:	4b40      	ldr	r3, [pc, #256]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	4a3f      	ldr	r2, [pc, #252]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80086e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ea:	6593      	str	r3, [r2, #88]	; 0x58
 80086ec:	4b3d      	ldr	r3, [pc, #244]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f4:	60bb      	str	r3, [r7, #8]
 80086f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086f8:	2301      	movs	r3, #1
 80086fa:	747b      	strb	r3, [r7, #17]
>>>>>>> origin/main
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 8008b28:	4b3a      	ldr	r3, [pc, #232]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a39      	ldr	r2, [pc, #228]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b34:	f7fb f828 	bl	8003b88 <HAL_GetTick>
 8008b38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b3a:	e009      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b3c:	f7fb f824 	bl	8003b88 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d902      	bls.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	74fb      	strb	r3, [r7, #19]
        break;
 8008b4e:	e005      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b50:	4b30      	ldr	r3, [pc, #192]	; (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0ef      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 80086fc:	4b3a      	ldr	r3, [pc, #232]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a39      	ldr	r2, [pc, #228]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008708:	f7fb faa0 	bl	8003c4c <HAL_GetTick>
 800870c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800870e:	e009      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008710:	f7fb fa9c 	bl	8003c4c <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d902      	bls.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	74fb      	strb	r3, [r7, #19]
        break;
 8008722:	e005      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008724:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0ef      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> origin/main
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8008b5c:	7cfb      	ldrb	r3, [r7, #19]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d15a      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b62:	4b2b      	ldr	r3, [pc, #172]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01e      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d019      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b7e:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b8a:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b90:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b9a:	4b1d      	ldr	r3, [pc, #116]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba0:	4a1b      	ldr	r2, [pc, #108]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008baa:	4a19      	ldr	r2, [pc, #100]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8008730:	7cfb      	ldrb	r3, [r7, #19]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d15a      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008736:	4b2b      	ldr	r3, [pc, #172]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01e      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	429a      	cmp	r2, r3
 8008750:	d019      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008752:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800875e:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008764:	4a1f      	ldr	r2, [pc, #124]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800876a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800876e:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	4a1b      	ldr	r2, [pc, #108]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800877a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800877e:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> origin/main
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d016      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7fa ffe4 	bl	8003b88 <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bc2:	e00b      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc4:	f7fa ffe0 	bl	8003b88 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d902      	bls.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	74fb      	strb	r3, [r7, #19]
            break;
 8008bda:	e006      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0ec      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
=======
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d016      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fb fa5c 	bl	8003c4c <HAL_GetTick>
 8008794:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008796:	e00b      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008798:	f7fb fa58 	bl	8003c4c <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d902      	bls.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	74fb      	strb	r3, [r7, #19]
            break;
 80087ae:	e006      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0ec      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xf0>
>>>>>>> origin/main
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8008bea:	7cfb      	ldrb	r3, [r7, #19]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	4904      	ldr	r1, [pc, #16]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008c06:	e009      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x148>
=======
 80087be:	7cfb      	ldrb	r3, [r7, #19]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	4904      	ldr	r1, [pc, #16]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087da:	e009      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
>>>>>>> origin/main
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8008c08:	7cfb      	ldrb	r3, [r7, #19]
 8008c0a:	74bb      	strb	r3, [r7, #18]
 8008c0c:	e006      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c0e:	bf00      	nop
 8008c10:	40021000 	.word	0x40021000
 8008c14:	40007000 	.word	0x40007000
=======
 80087dc:	7cfb      	ldrb	r3, [r7, #19]
 80087de:	74bb      	strb	r3, [r7, #18]
 80087e0:	e006      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80087e2:	bf00      	nop
 80087e4:	40021000 	.word	0x40021000
 80087e8:	40007000 	.word	0x40007000
>>>>>>> origin/main
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8008c18:	7cfb      	ldrb	r3, [r7, #19]
 8008c1a:	74bb      	strb	r3, [r7, #18]
=======
 80087ec:	7cfb      	ldrb	r3, [r7, #19]
 80087ee:	74bb      	strb	r3, [r7, #18]
>>>>>>> origin/main
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8008c1c:	7c7b      	ldrb	r3, [r7, #17]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d105      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c22:	4b6e      	ldr	r3, [pc, #440]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c26:	4a6d      	ldr	r2, [pc, #436]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c2c:	6593      	str	r3, [r2, #88]	; 0x58
=======
 80087f0:	7c7b      	ldrb	r3, [r7, #17]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f6:	4b6e      	ldr	r3, [pc, #440]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	4a6d      	ldr	r2, [pc, #436]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80087fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008800:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> origin/main
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
=======
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x17c>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8008c3a:	4b68      	ldr	r3, [pc, #416]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c40:	f023 0203 	bic.w	r2, r3, #3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4964      	ldr	r1, [pc, #400]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800880e:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f023 0203 	bic.w	r2, r3, #3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4964      	ldr	r1, [pc, #400]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
=======
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8008c5c:	4b5f      	ldr	r3, [pc, #380]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	f023 020c 	bic.w	r2, r3, #12
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	495c      	ldr	r1, [pc, #368]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8008830:	4b5f      	ldr	r3, [pc, #380]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008836:	f023 020c 	bic.w	r2, r3, #12
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	495c      	ldr	r1, [pc, #368]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
=======
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8008c7e:	4b57      	ldr	r3, [pc, #348]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	4953      	ldr	r1, [pc, #332]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8008852:	4b57      	ldr	r3, [pc, #348]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4953      	ldr	r1, [pc, #332]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
=======
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8008ca0:	4b4e      	ldr	r3, [pc, #312]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	494b      	ldr	r1, [pc, #300]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8008874:	4b4e      	ldr	r3, [pc, #312]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	494b      	ldr	r1, [pc, #300]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008884:	4313      	orrs	r3, r2
 8008886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cc2:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	4942      	ldr	r1, [pc, #264]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008896:	4b46      	ldr	r3, [pc, #280]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	4942      	ldr	r1, [pc, #264]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ce4:	4b3d      	ldr	r3, [pc, #244]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	493a      	ldr	r1, [pc, #232]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088b8:	4b3d      	ldr	r3, [pc, #244]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	493a      	ldr	r1, [pc, #232]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x248>
=======
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8008d06:	4b35      	ldr	r3, [pc, #212]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	4931      	ldr	r1, [pc, #196]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80088da:	4b35      	ldr	r3, [pc, #212]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	4931      	ldr	r1, [pc, #196]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
=======
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x26a>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8008d28:	4b2c      	ldr	r3, [pc, #176]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	4929      	ldr	r1, [pc, #164]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80088fc:	4b2c      	ldr	r3, [pc, #176]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4929      	ldr	r1, [pc, #164]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800890c:	4313      	orrs	r3, r2
 800890e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
=======
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x28c>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8008d4a:	4b24      	ldr	r3, [pc, #144]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	4920      	ldr	r1, [pc, #128]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4920      	ldr	r1, [pc, #128]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800892e:	4313      	orrs	r3, r2
 8008930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> origin/main
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d015      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d6c:	4b1b      	ldr	r3, [pc, #108]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	4918      	ldr	r1, [pc, #96]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d8a:	d105      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d8c:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	4a12      	ldr	r2, [pc, #72]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d96:	60d3      	str	r3, [r2, #12]
=======
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d015      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	4918      	ldr	r1, [pc, #96]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008950:	4313      	orrs	r3, r2
 8008952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800895e:	d105      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008960:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	4a12      	ldr	r2, [pc, #72]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800896a:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d015      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008da4:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	490a      	ldr	r1, [pc, #40]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc2:	d105      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dce:	60d3      	str	r3, [r2, #12]
=======
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d015      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800897a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	490a      	ldr	r1, [pc, #40]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008988:	4313      	orrs	r3, r2
 800898a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008996:	d105      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a04      	ldr	r2, [pc, #16]	; (80089b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800899e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a2:	60d3      	str	r3, [r2, #12]
>>>>>>> origin/main
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 8008dd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40021000 	.word	0x40021000

08008de0 <HAL_SPI_Init>:
=======
 80089a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40021000 	.word	0x40021000

080089b4 <HAL_SPI_Init>:
>>>>>>> origin/main
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
=======
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e095      	b.n	8008f1e <HAL_SPI_Init+0x13e>
=======
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e095      	b.n	8008af2 <HAL_SPI_Init+0x13e>
>>>>>>> origin/main
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d108      	bne.n	8008e0c <HAL_SPI_Init+0x2c>
=======
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d108      	bne.n	80089e0 <HAL_SPI_Init+0x2c>
>>>>>>> origin/main
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e02:	d009      	beq.n	8008e18 <HAL_SPI_Init+0x38>
=======
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d6:	d009      	beq.n	80089ec <HAL_SPI_Init+0x38>
>>>>>>> origin/main
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	61da      	str	r2, [r3, #28]
 8008e0a:	e005      	b.n	8008e18 <HAL_SPI_Init+0x38>
=======
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	61da      	str	r2, [r3, #28]
 80089de:	e005      	b.n	80089ec <HAL_SPI_Init+0x38>
>>>>>>> origin/main
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	615a      	str	r2, [r3, #20]
=======
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	615a      	str	r2, [r3, #20]
>>>>>>> origin/main
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> origin/main

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fa faca 	bl	80033cc <HAL_SPI_MspInit>
=======
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fa fd4c 	bl	80034a4 <HAL_SPI_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e58:	d902      	bls.n	8008e60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e002      	b.n	8008e66 <HAL_SPI_Init+0x86>
=======
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a2c:	d902      	bls.n	8008a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e002      	b.n	8008a3a <HAL_SPI_Init+0x86>
>>>>>>> origin/main
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< HEAD
 8008e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e64:	60fb      	str	r3, [r7, #12]
=======
 8008a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a38:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< HEAD
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e6e:	d007      	beq.n	8008e80 <HAL_SPI_Init+0xa0>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e78:	d002      	beq.n	8008e80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a42:	d007      	beq.n	8008a54 <HAL_SPI_Init+0xa0>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a4c:	d002      	beq.n	8008a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> origin/main
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec2:	ea42 0103 	orr.w	r1, r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]
=======
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	ea42 0103 	orr.w	r1, r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< HEAD
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	f003 0204 	and.w	r2, r3, #4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008efc:	ea42 0103 	orr.w	r1, r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	605a      	str	r2, [r3, #4]
=======
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	f003 0204 	and.w	r2, r3, #4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ad0:	ea42 0103 	orr.w	r1, r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_SPI_Transmit>:
=======
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_SPI_Transmit>:
>>>>>>> origin/main
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	77fb      	strb	r3, [r7, #31]
=======
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b088      	sub	sp, #32
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	77fb      	strb	r3, [r7, #31]
>>>>>>> origin/main

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_SPI_Transmit+0x22>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e158      	b.n	80091fa <HAL_SPI_Transmit+0x2d4>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f50:	f7fa fe1a 	bl	8003b88 <HAL_GetTick>
 8008f54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d002      	beq.n	8008f6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
 8008f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f6a:	e13d      	b.n	80091e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <HAL_SPI_Transmit+0x52>
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f7c:	e134      	b.n	80091e8 <HAL_SPI_Transmit+0x2c2>
=======
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_SPI_Transmit+0x22>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e158      	b.n	8008dce <HAL_SPI_Transmit+0x2d4>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b24:	f7fb f892 	bl	8003c4c <HAL_GetTick>
 8008b28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d002      	beq.n	8008b40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b3e:	e13d      	b.n	8008dbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_SPI_Transmit+0x52>
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b50:	e134      	b.n	8008dbc <HAL_SPI_Transmit+0x2c2>
>>>>>>> origin/main
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2203      	movs	r2, #3
 8008f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	88fa      	ldrh	r2, [r7, #6]
 8008f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc8:	d10f      	bne.n	8008fea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fe8:	601a      	str	r2, [r3, #0]
=======
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2203      	movs	r2, #3
 8008b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	88fa      	ldrh	r2, [r7, #6]
 8008b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b9c:	d10f      	bne.n	8008bbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bbc:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff4:	2b40      	cmp	r3, #64	; 0x40
 8008ff6:	d007      	beq.n	8009008 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009006:	601a      	str	r2, [r3, #0]
=======
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	d007      	beq.n	8008bdc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bda:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009010:	d94b      	bls.n	80090aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_SPI_Transmit+0xfa>
 800901a:	8afb      	ldrh	r3, [r7, #22]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d13e      	bne.n	800909e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	881a      	ldrh	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	1c9a      	adds	r2, r3, #2
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009044:	e02b      	b.n	800909e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b02      	cmp	r3, #2
 8009052:	d112      	bne.n	800907a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	881a      	ldrh	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	1c9a      	adds	r2, r3, #2
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009078:	e011      	b.n	800909e <HAL_SPI_Transmit+0x178>
=======
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008be4:	d94b      	bls.n	8008c7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_SPI_Transmit+0xfa>
 8008bee:	8afb      	ldrh	r3, [r7, #22]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d13e      	bne.n	8008c72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	881a      	ldrh	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	1c9a      	adds	r2, r3, #2
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c18:	e02b      	b.n	8008c72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d112      	bne.n	8008c4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	881a      	ldrh	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	1c9a      	adds	r2, r3, #2
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c4c:	e011      	b.n	8008c72 <HAL_SPI_Transmit+0x178>
>>>>>>> origin/main
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 800907a:	f7fa fd85 	bl	8003b88 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d803      	bhi.n	8009092 <HAL_SPI_Transmit+0x16c>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Transmit+0x172>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800909c:	e0a4      	b.n	80091e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ce      	bne.n	8009046 <HAL_SPI_Transmit+0x120>
 80090a8:	e07c      	b.n	80091a4 <HAL_SPI_Transmit+0x27e>
=======
 8008c4e:	f7fa fffd 	bl	8003c4c <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d803      	bhi.n	8008c66 <HAL_SPI_Transmit+0x16c>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c64:	d102      	bne.n	8008c6c <HAL_SPI_Transmit+0x172>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c70:	e0a4      	b.n	8008dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ce      	bne.n	8008c1a <HAL_SPI_Transmit+0x120>
 8008c7c:	e07c      	b.n	8008d78 <HAL_SPI_Transmit+0x27e>
>>>>>>> origin/main
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_Transmit+0x192>
 80090b2:	8afb      	ldrh	r3, [r7, #22]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d170      	bne.n	800919a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d912      	bls.n	80090e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	881a      	ldrh	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	1c9a      	adds	r2, r3, #2
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	3b02      	subs	r3, #2
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090e6:	e058      	b.n	800919a <HAL_SPI_Transmit+0x274>
=======
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <HAL_SPI_Transmit+0x192>
 8008c86:	8afb      	ldrh	r3, [r7, #22]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d170      	bne.n	8008d6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d912      	bls.n	8008cbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	881a      	ldrh	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	1c9a      	adds	r2, r3, #2
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	3b02      	subs	r3, #2
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cba:	e058      	b.n	8008d6e <HAL_SPI_Transmit+0x274>
>>>>>>> origin/main
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< HEAD
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	330c      	adds	r3, #12
 80090f2:	7812      	ldrb	r2, [r2, #0]
 80090f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800910e:	e044      	b.n	800919a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d12b      	bne.n	8009176 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b01      	cmp	r3, #1
 8009126:	d912      	bls.n	800914e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	881a      	ldrh	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b02      	subs	r3, #2
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800914c:	e025      	b.n	800919a <HAL_SPI_Transmit+0x274>
=======
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	7812      	ldrb	r2, [r2, #0]
 8008cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ce2:	e044      	b.n	8008d6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d12b      	bne.n	8008d4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d912      	bls.n	8008d22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	881a      	ldrh	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	1c9a      	adds	r2, r3, #2
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b02      	subs	r3, #2
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d20:	e025      	b.n	8008d6e <HAL_SPI_Transmit+0x274>
>>>>>>> origin/main
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< HEAD
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009174:	e011      	b.n	800919a <HAL_SPI_Transmit+0x274>
=======
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	7812      	ldrb	r2, [r2, #0]
 8008d2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d48:	e011      	b.n	8008d6e <HAL_SPI_Transmit+0x274>
>>>>>>> origin/main
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8009176:	f7fa fd07 	bl	8003b88 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d803      	bhi.n	800918e <HAL_SPI_Transmit+0x268>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Transmit+0x26e>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009198:	e026      	b.n	80091e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1b5      	bne.n	8009110 <HAL_SPI_Transmit+0x1ea>
=======
 8008d4a:	f7fa ff7f 	bl	8003c4c <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d803      	bhi.n	8008d62 <HAL_SPI_Transmit+0x268>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d102      	bne.n	8008d68 <HAL_SPI_Transmit+0x26e>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d6c:	e026      	b.n	8008dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1b5      	bne.n	8008ce4 <HAL_SPI_Transmit+0x1ea>
>>>>>>> origin/main
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 fb5b 	bl	8009864 <SPI_EndRxTxTransaction>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2220      	movs	r2, #32
 80091b8:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 fb5b 	bl	8009438 <SPI_EndRxTxTransaction>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> origin/main
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e000      	b.n	80091e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80091e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_SPI_TransmitReceive>:
=======
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	77fb      	strb	r3, [r7, #31]
 8008db8:	e000      	b.n	8008dbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_SPI_TransmitReceive>:
>>>>>>> origin/main
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8009202:	b580      	push	{r7, lr}
 8009204:	b08a      	sub	sp, #40	; 0x28
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	807b      	strh	r3, [r7, #2]
=======
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b08a      	sub	sp, #40	; 0x28
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	607a      	str	r2, [r7, #4]
 8008de2:	807b      	strh	r3, [r7, #2]
>>>>>>> origin/main
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8009210:	2301      	movs	r3, #1
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
=======
 8008de4:	2301      	movs	r3, #1
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
>>>>>>> origin/main

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x26>
 8009224:	2302      	movs	r3, #2
 8009226:	e1fb      	b.n	8009620 <HAL_SPI_TransmitReceive+0x41e>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009230:	f7fa fcaa 	bl	8003b88 <HAL_GetTick>
 8009234:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800923c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009244:	887b      	ldrh	r3, [r7, #2]
 8009246:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	823b      	strh	r3, [r7, #16]
=======
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x26>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e1fb      	b.n	80091f4 <HAL_SPI_TransmitReceive+0x41e>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e04:	f7fa ff22 	bl	8003c4c <HAL_GetTick>
 8008e08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008e18:	887b      	ldrh	r3, [r7, #2]
 8008e1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008e1c:	887b      	ldrh	r3, [r7, #2]
 8008e1e:	823b      	strh	r3, [r7, #16]
>>>>>>> origin/main
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
<<<<<<< HEAD
 800924c:	7efb      	ldrb	r3, [r7, #27]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d00e      	beq.n	8009270 <HAL_SPI_TransmitReceive+0x6e>
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009258:	d106      	bne.n	8009268 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d102      	bne.n	8009268 <HAL_SPI_TransmitReceive+0x66>
 8009262:	7efb      	ldrb	r3, [r7, #27]
 8009264:	2b04      	cmp	r3, #4
 8009266:	d003      	beq.n	8009270 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009268:	2302      	movs	r3, #2
 800926a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800926e:	e1cd      	b.n	800960c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_SPI_TransmitReceive+0x80>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_TransmitReceive+0x80>
 800927c:	887b      	ldrh	r3, [r7, #2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009288:	e1c0      	b.n	800960c <HAL_SPI_TransmitReceive+0x40a>
=======
 8008e20:	7efb      	ldrb	r3, [r7, #27]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d00e      	beq.n	8008e44 <HAL_SPI_TransmitReceive+0x6e>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e2c:	d106      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x66>
 8008e36:	7efb      	ldrb	r3, [r7, #27]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d003      	beq.n	8008e44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e42:	e1cd      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_SPI_TransmitReceive+0x80>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_SPI_TransmitReceive+0x80>
 8008e50:	887b      	ldrh	r3, [r7, #2]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e5c:	e1c0      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x40a>
>>>>>>> origin/main
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b04      	cmp	r3, #4
 8009294:	d003      	beq.n	800929e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2205      	movs	r2, #5
 800929a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d003      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> origin/main
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	887a      	ldrh	r2, [r7, #2]
 80092ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	887a      	ldrh	r2, [r7, #2]
 80092b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	887a      	ldrh	r2, [r7, #2]
 80092c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	887a      	ldrh	r2, [r7, #2]
 80092ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	887a      	ldrh	r2, [r7, #2]
 8008e82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	887a      	ldrh	r2, [r7, #2]
 8008e98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	887a      	ldrh	r2, [r7, #2]
 8008e9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> origin/main
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
<<<<<<< HEAD
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092e0:	d802      	bhi.n	80092e8 <HAL_SPI_TransmitReceive+0xe6>
 80092e2:	8a3b      	ldrh	r3, [r7, #16]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d908      	bls.n	80092fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092f6:	605a      	str	r2, [r3, #4]
 80092f8:	e007      	b.n	800930a <HAL_SPI_TransmitReceive+0x108>
=======
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008eb4:	d802      	bhi.n	8008ebc <HAL_SPI_TransmitReceive+0xe6>
 8008eb6:	8a3b      	ldrh	r3, [r7, #16]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d908      	bls.n	8008ece <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008eca:	605a      	str	r2, [r3, #4]
 8008ecc:	e007      	b.n	8008ede <HAL_SPI_TransmitReceive+0x108>
>>>>>>> origin/main
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< HEAD
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009308:	605a      	str	r2, [r3, #4]
=======
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008edc:	605a      	str	r2, [r3, #4]
>>>>>>> origin/main
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d007      	beq.n	8009328 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009326:	601a      	str	r2, [r3, #0]
=======
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d007      	beq.n	8008efc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008efa:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009330:	d97c      	bls.n	800942c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <HAL_SPI_TransmitReceive+0x13e>
 800933a:	8a7b      	ldrh	r3, [r7, #18]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d169      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009364:	e056      	b.n	8009414 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b02      	cmp	r3, #2
 8009372:	d11b      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x1aa>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <HAL_SPI_TransmitReceive+0x1aa>
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	2b01      	cmp	r3, #1
 8009382:	d113      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	1c9a      	adds	r2, r3, #2
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f04:	d97c      	bls.n	8009000 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_SPI_TransmitReceive+0x13e>
 8008f0e:	8a7b      	ldrh	r3, [r7, #18]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d169      	bne.n	8008fe8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	881a      	ldrh	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	1c9a      	adds	r2, r3, #2
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	3b01      	subs	r3, #1
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f38:	e056      	b.n	8008fe8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d11b      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x1aa>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d016      	beq.n	8008f80 <HAL_SPI_TransmitReceive+0x1aa>
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d113      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	881a      	ldrh	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> origin/main
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d11c      	bne.n	80093f4 <HAL_SPI_TransmitReceive+0x1f2>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	b292      	uxth	r2, r2
 80093d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	1c9a      	adds	r2, r3, #2
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093f0:	2301      	movs	r3, #1
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093f4:	f7fa fbc8 	bl	8003b88 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009400:	429a      	cmp	r2, r3
 8009402:	d807      	bhi.n	8009414 <HAL_SPI_TransmitReceive+0x212>
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d003      	beq.n	8009414 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009412:	e0fb      	b.n	800960c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1a3      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x164>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009424:	b29b      	uxth	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d19d      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x164>
 800942a:	e0df      	b.n	80095ec <HAL_SPI_TransmitReceive+0x3ea>
=======
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d11c      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x1f2>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d016      	beq.n	8008fc8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa4:	b292      	uxth	r2, r2
 8008fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	1c9a      	adds	r2, r3, #2
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008fc8:	f7fa fe40 	bl	8003c4c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d807      	bhi.n	8008fe8 <HAL_SPI_TransmitReceive+0x212>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d003      	beq.n	8008fe8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008fe6:	e0fb      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1a3      	bne.n	8008f3a <HAL_SPI_TransmitReceive+0x164>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d19d      	bne.n	8008f3a <HAL_SPI_TransmitReceive+0x164>
 8008ffe:	e0df      	b.n	80091c0 <HAL_SPI_TransmitReceive+0x3ea>
>>>>>>> origin/main
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <HAL_SPI_TransmitReceive+0x23a>
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	2b01      	cmp	r3, #1
 8009438:	f040 80cb 	bne.w	80095d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009440:	b29b      	uxth	r3, r3
 8009442:	2b01      	cmp	r3, #1
 8009444:	d912      	bls.n	800946c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	881a      	ldrh	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b02      	subs	r3, #2
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	87da      	strh	r2, [r3, #62]	; 0x3e
 800946a:	e0b2      	b.n	80095d2 <HAL_SPI_TransmitReceive+0x3d0>
=======
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <HAL_SPI_TransmitReceive+0x23a>
 8009008:	8a7b      	ldrh	r3, [r7, #18]
 800900a:	2b01      	cmp	r3, #1
 800900c:	f040 80cb 	bne.w	80091a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d912      	bls.n	8009040 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	881a      	ldrh	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	1c9a      	adds	r2, r3, #2
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b02      	subs	r3, #2
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800903e:	e0b2      	b.n	80091a6 <HAL_SPI_TransmitReceive+0x3d0>
>>>>>>> origin/main
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< HEAD
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330c      	adds	r3, #12
 8009476:	7812      	ldrb	r2, [r2, #0]
 8009478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009492:	e09e      	b.n	80095d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d134      	bne.n	800950c <HAL_SPI_TransmitReceive+0x30a>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d02f      	beq.n	800950c <HAL_SPI_TransmitReceive+0x30a>
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d12c      	bne.n	800950c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d912      	bls.n	80094e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	1c9a      	adds	r2, r3, #2
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b02      	subs	r3, #2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094e0:	e012      	b.n	8009508 <HAL_SPI_TransmitReceive+0x306>
=======
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	7812      	ldrb	r2, [r2, #0]
 800904c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009066:	e09e      	b.n	80091a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b02      	cmp	r3, #2
 8009074:	d134      	bne.n	80090e0 <HAL_SPI_TransmitReceive+0x30a>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d02f      	beq.n	80090e0 <HAL_SPI_TransmitReceive+0x30a>
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	2b01      	cmp	r3, #1
 8009084:	d12c      	bne.n	80090e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b01      	cmp	r3, #1
 800908e:	d912      	bls.n	80090b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	881a      	ldrh	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	1c9a      	adds	r2, r3, #2
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b02      	subs	r3, #2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090b4:	e012      	b.n	80090dc <HAL_SPI_TransmitReceive+0x306>
>>>>>>> origin/main
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< HEAD
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	330c      	adds	r3, #12
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> origin/main
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b01      	cmp	r3, #1
 8009518:	d148      	bne.n	80095ac <HAL_SPI_TransmitReceive+0x3aa>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009520:	b29b      	uxth	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d042      	beq.n	80095ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b01      	cmp	r3, #1
 8009530:	d923      	bls.n	800957a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	b292      	uxth	r2, r2
 800953e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	1c9a      	adds	r2, r3, #2
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009550:	b29b      	uxth	r3, r3
 8009552:	3b02      	subs	r3, #2
 8009554:	b29a      	uxth	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009562:	b29b      	uxth	r3, r3
 8009564:	2b01      	cmp	r3, #1
 8009566:	d81f      	bhi.n	80095a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	e016      	b.n	80095a8 <HAL_SPI_TransmitReceive+0x3a6>
=======
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d148      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x3aa>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d042      	beq.n	8009180 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	d923      	bls.n	800914e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	b292      	uxth	r2, r2
 8009112:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	1c9a      	adds	r2, r3, #2
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b02      	subs	r3, #2
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	d81f      	bhi.n	800917c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	e016      	b.n	800917c <HAL_SPI_TransmitReceive+0x3a6>
>>>>>>> origin/main
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
<<<<<<< HEAD
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f103 020c 	add.w	r2, r3, #12
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095a8:	2301      	movs	r3, #1
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095ac:	f7fa faec 	bl	8003b88 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d803      	bhi.n	80095c4 <HAL_SPI_TransmitReceive+0x3c2>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d102      	bne.n	80095ca <HAL_SPI_TransmitReceive+0x3c8>
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80095d0:	e01c      	b.n	800960c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f47f af5b 	bne.w	8009494 <HAL_SPI_TransmitReceive+0x292>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f47f af54 	bne.w	8009494 <HAL_SPI_TransmitReceive+0x292>
=======
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f103 020c 	add.w	r2, r3, #12
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915a:	7812      	ldrb	r2, [r2, #0]
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009170:	b29b      	uxth	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800917c:	2301      	movs	r3, #1
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009180:	f7fa fd64 	bl	8003c4c <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918c:	429a      	cmp	r2, r3
 800918e:	d803      	bhi.n	8009198 <HAL_SPI_TransmitReceive+0x3c2>
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d102      	bne.n	800919e <HAL_SPI_TransmitReceive+0x3c8>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80091a4:	e01c      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f47f af5b 	bne.w	8009068 <HAL_SPI_TransmitReceive+0x292>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f47f af54 	bne.w	8009068 <HAL_SPI_TransmitReceive+0x292>
>>>>>>> origin/main
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f937 	bl	8009864 <SPI_EndRxTxTransaction>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d006      	beq.n	800960a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	661a      	str	r2, [r3, #96]	; 0x60
 8009608:	e000      	b.n	800960c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800960a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800961c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009620:	4618      	mov	r0, r3
 8009622:	3728      	adds	r7, #40	; 0x28
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SPI_WaitFlagStateUntilTimeout>:
=======
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f937 	bl	8009438 <SPI_EndRxTxTransaction>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	661a      	str	r2, [r3, #96]	; 0x60
 80091dc:	e000      	b.n	80091e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80091de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3728      	adds	r7, #40	; 0x28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> origin/main
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
=======
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8009638:	f7fa faa6 	bl	8003b88 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4413      	add	r3, r2
 8009646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009648:	f7fa fa9e 	bl	8003b88 <HAL_GetTick>
 800964c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800964e:	4b39      	ldr	r3, [pc, #228]	; (8009734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	015b      	lsls	r3, r3, #5
 8009654:	0d1b      	lsrs	r3, r3, #20
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	fb02 f303 	mul.w	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800965e:	e054      	b.n	800970a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d050      	beq.n	800970a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009668:	f7fa fa8e 	bl	8003b88 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	429a      	cmp	r2, r3
 8009676:	d902      	bls.n	800967e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d13d      	bne.n	80096fa <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 800920c:	f7fa fd1e 	bl	8003c4c <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4413      	add	r3, r2
 800921a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800921c:	f7fa fd16 	bl	8003c4c <HAL_GetTick>
 8009220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009222:	4b39      	ldr	r3, [pc, #228]	; (8009308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	015b      	lsls	r3, r3, #5
 8009228:	0d1b      	lsrs	r3, r3, #20
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	fb02 f303 	mul.w	r3, r2, r3
 8009230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009232:	e054      	b.n	80092de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d050      	beq.n	80092de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800923c:	f7fa fd06 	bl	8003c4c <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	429a      	cmp	r2, r3
 800924a:	d902      	bls.n	8009252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d13d      	bne.n	80092ce <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> origin/main
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800968c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009696:	d111      	bne.n	80096bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a0:	d004      	beq.n	80096ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096aa:	d107      	bne.n	80096bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ba:	601a      	str	r2, [r3, #0]
=======
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800926a:	d111      	bne.n	8009290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009274:	d004      	beq.n	8009280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800927e:	d107      	bne.n	8009290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800928e:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c4:	d10f      	bne.n	80096e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e017      	b.n	800972a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3b01      	subs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4013      	ands	r3, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf0c      	ite	eq
 800971a:	2301      	moveq	r3, #1
 800971c:	2300      	movne	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	429a      	cmp	r2, r3
 8009726:	d19b      	bne.n	8009660 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009298:	d10f      	bne.n	80092ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e017      	b.n	80092fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	3b01      	subs	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4013      	ands	r3, r2
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d19b      	bne.n	8009234 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> origin/main
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000000 	.word	0x20000000

08009738 <SPI_WaitFifoStateUntilTimeout>:
=======
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20000000 	.word	0x20000000

0800930c <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> origin/main
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
=======
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	; 0x28
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
>>>>>>> origin/main
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
<<<<<<< HEAD
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800974a:	f7fa fa1d 	bl	8003b88 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	1a9b      	subs	r3, r3, r2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	4413      	add	r3, r2
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800975a:	f7fa fa15 	bl	8003b88 <HAL_GetTick>
 800975e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	330c      	adds	r3, #12
 8009766:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009768:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	00da      	lsls	r2, r3, #3
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	0d1b      	lsrs	r3, r3, #20
 8009778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009780:	e060      	b.n	8009844 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009788:	d107      	bne.n	800979a <SPI_WaitFifoStateUntilTimeout+0x62>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009798:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a0:	d050      	beq.n	8009844 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097a2:	f7fa f9f1 	bl	8003b88 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d902      	bls.n	80097b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d13d      	bne.n	8009834 <SPI_WaitFifoStateUntilTimeout+0xfc>
=======
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800931e:	f7fa fc95 	bl	8003c4c <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4413      	add	r3, r2
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800932e:	f7fa fc8d 	bl	8003c4c <HAL_GetTick>
 8009332:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	330c      	adds	r3, #12
 800933a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800933c:	4b3d      	ldr	r3, [pc, #244]	; (8009434 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	00da      	lsls	r2, r3, #3
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	0d1b      	lsrs	r3, r3, #20
 800934c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009354:	e060      	b.n	8009418 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800935c:	d107      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0x62>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d104      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800936c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d050      	beq.n	8009418 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009376:	f7fa fc69 	bl	8003c4c <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	429a      	cmp	r2, r3
 8009384:	d902      	bls.n	800938c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d13d      	bne.n	8009408 <SPI_WaitFifoStateUntilTimeout+0xfc>
>>>>>>> origin/main
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d0:	d111      	bne.n	80097f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097da:	d004      	beq.n	80097e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e4:	d107      	bne.n	80097f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f4:	601a      	str	r2, [r3, #0]
=======
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800939a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093a4:	d111      	bne.n	80093ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ae:	d004      	beq.n	80093ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b8:	d107      	bne.n	80093ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c8:	601a      	str	r2, [r3, #0]
>>>>>>> origin/main
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fe:	d10f      	bne.n	8009820 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800981e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e010      	b.n	8009856 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	3b01      	subs	r3, #1
 8009842:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4013      	ands	r3, r2
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d196      	bne.n	8009782 <SPI_WaitFifoStateUntilTimeout+0x4a>
=======
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d2:	d10f      	bne.n	80093f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e010      	b.n	800942a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	3b01      	subs	r3, #1
 8009416:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4013      	ands	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d196      	bne.n	8009356 <SPI_WaitFifoStateUntilTimeout+0x4a>
>>>>>>> origin/main
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3728      	adds	r7, #40	; 0x28
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000000 	.word	0x20000000

08009864 <SPI_EndRxTxTransaction>:
=======
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3728      	adds	r7, #40	; 0x28
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000000 	.word	0x20000000

08009438 <SPI_EndRxTxTransaction>:
>>>>>>> origin/main
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff ff5b 	bl	8009738 <SPI_WaitFifoStateUntilTimeout>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988c:	f043 0220 	orr.w	r2, r3, #32
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e027      	b.n	80098e8 <SPI_EndRxTxTransaction+0x84>
=======
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff ff5b 	bl	800930c <SPI_WaitFifoStateUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009460:	f043 0220 	orr.w	r2, r3, #32
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e027      	b.n	80094bc <SPI_EndRxTxTransaction+0x84>
>>>>>>> origin/main
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	2180      	movs	r1, #128	; 0x80
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff fec0 	bl	8009628 <SPI_WaitFlagStateUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	f043 0220 	orr.w	r2, r3, #32
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e014      	b.n	80098e8 <SPI_EndRxTxTransaction+0x84>
=======
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fec0 	bl	80091fc <SPI_WaitFlagStateUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009486:	f043 0220 	orr.w	r2, r3, #32
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e014      	b.n	80094bc <SPI_EndRxTxTransaction+0x84>
>>>>>>> origin/main
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff ff34 	bl	8009738 <SPI_WaitFifoStateUntilTimeout>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098da:	f043 0220 	orr.w	r2, r3, #32
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e000      	b.n	80098e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_TIM_Base_Init>:
=======
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff ff34 	bl	800930c <SPI_WaitFifoStateUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e000      	b.n	80094bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_TIM_Base_Init>:
>>>>>>> origin/main
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e049      	b.n	8009996 <HAL_TIM_Base_Init+0xa6>
=======
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e049      	b.n	800956a <HAL_TIM_Base_Init+0xa6>
>>>>>>> origin/main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7fa f80e 	bl	8003938 <HAL_TIM_Base_MspInit>
=======
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fa fa86 	bl	80039fc <HAL_TIM_Base_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f000 fd50 	bl	800a3d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <HAL_TIM_Base_Start_IT>:
=======
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f000 fd50 	bl	8009fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <HAL_TIM_Base_Start_IT>:
>>>>>>> origin/main
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
=======
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d001      	beq.n	80099b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e03b      	b.n	8009a30 <HAL_TIM_Base_Start_IT+0x90>
=======
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d001      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e03b      	b.n	8009604 <HAL_TIM_Base_Start_IT+0x90>
>>>>>>> origin/main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0201 	orr.w	r2, r2, #1
 80099ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a19      	ldr	r2, [pc, #100]	; (8009a3c <HAL_TIM_Base_Start_IT+0x9c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d009      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x4e>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e2:	d004      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x4e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <HAL_TIM_Base_Start_IT+0xa0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d115      	bne.n	8009a1a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	4b13      	ldr	r3, [pc, #76]	; (8009a44 <HAL_TIM_Base_Start_IT+0xa4>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b06      	cmp	r3, #6
 80099fe:	d015      	beq.n	8009a2c <HAL_TIM_Base_Start_IT+0x8c>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a06:	d011      	beq.n	8009a2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a18:	e008      	b.n	8009a2c <HAL_TIM_Base_Start_IT+0x8c>
=======
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f042 0201 	orr.w	r2, r2, #1
 80095a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a19      	ldr	r2, [pc, #100]	; (8009610 <HAL_TIM_Base_Start_IT+0x9c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d009      	beq.n	80095c2 <HAL_TIM_Base_Start_IT+0x4e>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b6:	d004      	beq.n	80095c2 <HAL_TIM_Base_Start_IT+0x4e>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a15      	ldr	r2, [pc, #84]	; (8009614 <HAL_TIM_Base_Start_IT+0xa0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d115      	bne.n	80095ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	4b13      	ldr	r3, [pc, #76]	; (8009618 <HAL_TIM_Base_Start_IT+0xa4>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d015      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x8c>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095da:	d011      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ec:	e008      	b.n	8009600 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e000      	b.n	8009a2e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2c:	bf00      	nop
=======
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0201 	orr.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e000      	b.n	8009602 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009600:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40014000 	.word	0x40014000
 8009a44:	00010007 	.word	0x00010007

08009a48 <HAL_TIM_PWM_Init>:
=======
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	40012c00 	.word	0x40012c00
 8009614:	40014000 	.word	0x40014000
 8009618:	00010007 	.word	0x00010007

0800961c <HAL_TIM_PWM_Init>:
>>>>>>> origin/main
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e049      	b.n	8009aee <HAL_TIM_PWM_Init+0xa6>
=======
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e049      	b.n	80096c2 <HAL_TIM_PWM_Init+0xa6>
>>>>>>> origin/main
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f9 ff44 	bl	80038fc <HAL_TIM_PWM_MspInit>
=======
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fa f9bc 	bl	80039c0 <HAL_TIM_PWM_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f000 fca4 	bl	800a3d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_TIM_PWM_Start>:
=======
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fca4 	bl	8009fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <HAL_TIM_PWM_Start>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
=======
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d109      	bne.n	8009b1c <HAL_TIM_PWM_Start+0x24>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	bf14      	ite	ne
 8009b14:	2301      	movne	r3, #1
 8009b16:	2300      	moveq	r3, #0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	e03c      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d109      	bne.n	8009b36 <HAL_TIM_PWM_Start+0x3e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	bf14      	ite	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	2300      	moveq	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	e02f      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d109      	bne.n	8009b50 <HAL_TIM_PWM_Start+0x58>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	bf14      	ite	ne
 8009b48:	2301      	movne	r3, #1
 8009b4a:	2300      	moveq	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e022      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b0c      	cmp	r3, #12
 8009b54:	d109      	bne.n	8009b6a <HAL_TIM_PWM_Start+0x72>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	bf14      	ite	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	2300      	moveq	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	e015      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b10      	cmp	r3, #16
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x8c>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e008      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e07e      	b.n	8009c9c <HAL_TIM_PWM_Start+0x1a4>
=======
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <HAL_TIM_PWM_Start+0x24>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	bf14      	ite	ne
 80096e8:	2301      	movne	r3, #1
 80096ea:	2300      	moveq	r3, #0
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	e03c      	b.n	800976a <HAL_TIM_PWM_Start+0x9e>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d109      	bne.n	800970a <HAL_TIM_PWM_Start+0x3e>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b01      	cmp	r3, #1
 8009700:	bf14      	ite	ne
 8009702:	2301      	movne	r3, #1
 8009704:	2300      	moveq	r3, #0
 8009706:	b2db      	uxtb	r3, r3
 8009708:	e02f      	b.n	800976a <HAL_TIM_PWM_Start+0x9e>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b08      	cmp	r3, #8
 800970e:	d109      	bne.n	8009724 <HAL_TIM_PWM_Start+0x58>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	bf14      	ite	ne
 800971c:	2301      	movne	r3, #1
 800971e:	2300      	moveq	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	e022      	b.n	800976a <HAL_TIM_PWM_Start+0x9e>
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b0c      	cmp	r3, #12
 8009728:	d109      	bne.n	800973e <HAL_TIM_PWM_Start+0x72>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b01      	cmp	r3, #1
 8009734:	bf14      	ite	ne
 8009736:	2301      	movne	r3, #1
 8009738:	2300      	moveq	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	e015      	b.n	800976a <HAL_TIM_PWM_Start+0x9e>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b10      	cmp	r3, #16
 8009742:	d109      	bne.n	8009758 <HAL_TIM_PWM_Start+0x8c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b01      	cmp	r3, #1
 800974e:	bf14      	ite	ne
 8009750:	2301      	movne	r3, #1
 8009752:	2300      	moveq	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	e008      	b.n	800976a <HAL_TIM_PWM_Start+0x9e>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	bf14      	ite	ne
 8009764:	2301      	movne	r3, #1
 8009766:	2300      	moveq	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e07e      	b.n	8009870 <HAL_TIM_PWM_Start+0x1a4>
>>>>>>> origin/main
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_PWM_Start+0xb6>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bac:	e023      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d104      	bne.n	8009bbe <HAL_TIM_PWM_Start+0xc6>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bbc:	e01b      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d104      	bne.n	8009bce <HAL_TIM_PWM_Start+0xd6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bcc:	e013      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d104      	bne.n	8009bde <HAL_TIM_PWM_Start+0xe6>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bdc:	e00b      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_PWM_Start+0xf6>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bec:	e003      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 feca 	bl	800a998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a26      	ldr	r2, [pc, #152]	; (8009ca4 <HAL_TIM_PWM_Start+0x1ac>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d009      	beq.n	8009c22 <HAL_TIM_PWM_Start+0x12a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a25      	ldr	r2, [pc, #148]	; (8009ca8 <HAL_TIM_PWM_Start+0x1b0>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_TIM_PWM_Start+0x12a>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a23      	ldr	r2, [pc, #140]	; (8009cac <HAL_TIM_PWM_Start+0x1b4>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d101      	bne.n	8009c26 <HAL_TIM_PWM_Start+0x12e>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <HAL_TIM_PWM_Start+0x130>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3a:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <HAL_TIM_PWM_Start+0xb6>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009780:	e023      	b.n	80097ca <HAL_TIM_PWM_Start+0xfe>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b04      	cmp	r3, #4
 8009786:	d104      	bne.n	8009792 <HAL_TIM_PWM_Start+0xc6>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009790:	e01b      	b.n	80097ca <HAL_TIM_PWM_Start+0xfe>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b08      	cmp	r3, #8
 8009796:	d104      	bne.n	80097a2 <HAL_TIM_PWM_Start+0xd6>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a0:	e013      	b.n	80097ca <HAL_TIM_PWM_Start+0xfe>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b0c      	cmp	r3, #12
 80097a6:	d104      	bne.n	80097b2 <HAL_TIM_PWM_Start+0xe6>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097b0:	e00b      	b.n	80097ca <HAL_TIM_PWM_Start+0xfe>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b10      	cmp	r3, #16
 80097b6:	d104      	bne.n	80097c2 <HAL_TIM_PWM_Start+0xf6>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097c0:	e003      	b.n	80097ca <HAL_TIM_PWM_Start+0xfe>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2201      	movs	r2, #1
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 feca 	bl	800a56c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a26      	ldr	r2, [pc, #152]	; (8009878 <HAL_TIM_PWM_Start+0x1ac>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d009      	beq.n	80097f6 <HAL_TIM_PWM_Start+0x12a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a25      	ldr	r2, [pc, #148]	; (800987c <HAL_TIM_PWM_Start+0x1b0>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d004      	beq.n	80097f6 <HAL_TIM_PWM_Start+0x12a>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a23      	ldr	r2, [pc, #140]	; (8009880 <HAL_TIM_PWM_Start+0x1b4>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d101      	bne.n	80097fa <HAL_TIM_PWM_Start+0x12e>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <HAL_TIM_PWM_Start+0x130>
 80097fa:	2300      	movs	r3, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800980e:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> origin/main
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a18      	ldr	r2, [pc, #96]	; (8009ca4 <HAL_TIM_PWM_Start+0x1ac>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d009      	beq.n	8009c5a <HAL_TIM_PWM_Start+0x162>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d004      	beq.n	8009c5a <HAL_TIM_PWM_Start+0x162>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a14      	ldr	r2, [pc, #80]	; (8009ca8 <HAL_TIM_PWM_Start+0x1b0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d115      	bne.n	8009c86 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <HAL_TIM_PWM_Start+0x1b8>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b06      	cmp	r3, #6
 8009c6a:	d015      	beq.n	8009c98 <HAL_TIM_PWM_Start+0x1a0>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c72:	d011      	beq.n	8009c98 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c84:	e008      	b.n	8009c98 <HAL_TIM_PWM_Start+0x1a0>
=======
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a18      	ldr	r2, [pc, #96]	; (8009878 <HAL_TIM_PWM_Start+0x1ac>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d009      	beq.n	800982e <HAL_TIM_PWM_Start+0x162>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009822:	d004      	beq.n	800982e <HAL_TIM_PWM_Start+0x162>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a14      	ldr	r2, [pc, #80]	; (800987c <HAL_TIM_PWM_Start+0x1b0>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d115      	bne.n	800985a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	4b13      	ldr	r3, [pc, #76]	; (8009884 <HAL_TIM_PWM_Start+0x1b8>)
 8009836:	4013      	ands	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b06      	cmp	r3, #6
 800983e:	d015      	beq.n	800986c <HAL_TIM_PWM_Start+0x1a0>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009846:	d011      	beq.n	800986c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	e008      	b.n	800986c <HAL_TIM_PWM_Start+0x1a0>
>>>>>>> origin/main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f042 0201 	orr.w	r2, r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	e000      	b.n	8009c9a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c98:	bf00      	nop
=======
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f042 0201 	orr.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e000      	b.n	800986e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986c:	bf00      	nop
>>>>>>> origin/main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	40012c00 	.word	0x40012c00
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	40014400 	.word	0x40014400
 8009cb0:	00010007 	.word	0x00010007

08009cb4 <HAL_TIM_Encoder_Init>:
=======
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	40012c00 	.word	0x40012c00
 800987c:	40014000 	.word	0x40014000
 8009880:	40014400 	.word	0x40014400
 8009884:	00010007 	.word	0x00010007

08009888 <HAL_TIM_Encoder_Init>:
>>>>>>> origin/main
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
=======
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e097      	b.n	8009df8 <HAL_TIM_Encoder_Init+0x144>
=======
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e097      	b.n	80099cc <HAL_TIM_Encoder_Init+0x144>
>>>>>>> origin/main
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d106      	bne.n	8009ce2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> origin/main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7f9 fdc1 	bl	8003864 <HAL_TIM_Encoder_MspInit>
=======
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7fa f839 	bl	8003928 <HAL_TIM_Encoder_MspInit>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009cf8:	f023 0307 	bic.w	r3, r3, #7
 8009cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f000 fb63 	bl	800a3d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	4313      	orrs	r3, r2
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009d54:	f023 030c 	bic.w	r3, r3, #12
 8009d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	4313      	orrs	r3, r2
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	011a      	lsls	r2, r3, #4
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	031b      	lsls	r3, r3, #12
 8009d84:	4313      	orrs	r3, r2
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009d92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009d9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	4313      	orrs	r3, r2
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_TIM_Encoder_Start>:
=======
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80098cc:	f023 0307 	bic.w	r3, r3, #7
 80098d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3304      	adds	r3, #4
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f000 fb63 	bl	8009fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	4313      	orrs	r3, r2
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009928:	f023 030c 	bic.w	r3, r3, #12
 800992c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	4313      	orrs	r3, r2
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	011a      	lsls	r2, r3, #4
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	031b      	lsls	r3, r3, #12
 8009958:	4313      	orrs	r3, r2
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009966:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800996e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	4313      	orrs	r3, r2
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_TIM_Encoder_Start>:
>>>>>>> origin/main
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e28:	733b      	strb	r3, [r7, #12]
=======
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fc:	733b      	strb	r3, [r7, #12]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
<<<<<<< HEAD
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d110      	bne.n	8009e52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d102      	bne.n	8009e3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e36:	7b7b      	ldrb	r3, [r7, #13]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d001      	beq.n	8009e40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e069      	b.n	8009f14 <HAL_TIM_Encoder_Start+0x114>
=======
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d110      	bne.n	8009a26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d102      	bne.n	8009a10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a0a:	7b7b      	ldrb	r3, [r7, #13]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d001      	beq.n	8009a14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e069      	b.n	8009ae8 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> origin/main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e50:	e031      	b.n	8009eb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d110      	bne.n	8009e7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d102      	bne.n	8009e64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e5e:	7b3b      	ldrb	r3, [r7, #12]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d001      	beq.n	8009e68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e055      	b.n	8009f14 <HAL_TIM_Encoder_Start+0x114>
=======
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a24:	e031      	b.n	8009a8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d110      	bne.n	8009a4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d102      	bne.n	8009a38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a32:	7b3b      	ldrb	r3, [r7, #12]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d001      	beq.n	8009a3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e055      	b.n	8009ae8 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> origin/main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e78:	e01d      	b.n	8009eb6 <HAL_TIM_Encoder_Start+0xb6>
=======
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a4c:	e01d      	b.n	8009a8a <HAL_TIM_Encoder_Start+0xb6>
>>>>>>> origin/main
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d108      	bne.n	8009e92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d105      	bne.n	8009e92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e86:	7b7b      	ldrb	r3, [r7, #13]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d102      	bne.n	8009e92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e8c:	7b3b      	ldrb	r3, [r7, #12]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d001      	beq.n	8009e96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e03e      	b.n	8009f14 <HAL_TIM_Encoder_Start+0x114>
=======
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d108      	bne.n	8009a66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d105      	bne.n	8009a66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a5a:	7b7b      	ldrb	r3, [r7, #13]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d102      	bne.n	8009a66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a60:	7b3b      	ldrb	r3, [r7, #12]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d001      	beq.n	8009a6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e03e      	b.n	8009ae8 <HAL_TIM_Encoder_Start+0x114>
>>>>>>> origin/main
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> origin/main
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_TIM_Encoder_Start+0xc4>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d008      	beq.n	8009ed4 <HAL_TIM_Encoder_Start+0xd4>
 8009ec2:	e00f      	b.n	8009ee4 <HAL_TIM_Encoder_Start+0xe4>
=======
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <HAL_TIM_Encoder_Start+0xc4>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d008      	beq.n	8009aa8 <HAL_TIM_Encoder_Start+0xd4>
 8009a96:	e00f      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0xe4>
>>>>>>> origin/main
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fd63 	bl	800a998 <TIM_CCxChannelCmd>
      break;
 8009ed2:	e016      	b.n	8009f02 <HAL_TIM_Encoder_Start+0x102>
=======
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fd63 	bl	800a56c <TIM_CCxChannelCmd>
      break;
 8009aa6:	e016      	b.n	8009ad6 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> origin/main
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	2104      	movs	r1, #4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fd5b 	bl	800a998 <TIM_CCxChannelCmd>
      break;
 8009ee2:	e00e      	b.n	8009f02 <HAL_TIM_Encoder_Start+0x102>
=======
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2201      	movs	r2, #1
 8009aae:	2104      	movs	r1, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fd5b 	bl	800a56c <TIM_CCxChannelCmd>
      break;
 8009ab6:	e00e      	b.n	8009ad6 <HAL_TIM_Encoder_Start+0x102>
>>>>>>> origin/main
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fd53 	bl	800a998 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	2104      	movs	r1, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fd4c 	bl	800a998 <TIM_CCxChannelCmd>
      break;
 8009f00:	bf00      	nop
=======
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2201      	movs	r2, #1
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fd53 	bl	800a56c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2201      	movs	r2, #1
 8009acc:	2104      	movs	r1, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fd4c 	bl	800a56c <TIM_CCxChannelCmd>
      break;
 8009ad4:	bf00      	nop
>>>>>>> origin/main
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0201 	orr.w	r2, r2, #1
 8009f10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_TIM_IRQHandler>:
=======
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0201 	orr.w	r2, r2, #1
 8009ae4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_TIM_IRQHandler>:
>>>>>>> origin/main
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d122      	bne.n	8009f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d11b      	bne.n	8009f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f06f 0202 	mvn.w	r2, #2
 8009f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_TIM_IRQHandler+0x4a>
=======
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d122      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d11b      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0202 	mvn.w	r2, #2
 8009b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> origin/main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa1a 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009f64:	e005      	b.n	8009f72 <HAL_TIM_IRQHandler+0x56>
=======
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa1a 	bl	8009f6c <HAL_TIM_IC_CaptureCallback>
 8009b38:	e005      	b.n	8009b46 <HAL_TIM_IRQHandler+0x56>
>>>>>>> origin/main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa0c 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa1d 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	771a      	strb	r2, [r3, #28]
=======
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fa0c 	bl	8009f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fa1d 	bl	8009f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]
>>>>>>> origin/main
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d122      	bne.n	8009fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d11b      	bne.n	8009fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f06f 0204 	mvn.w	r2, #4
 8009f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9f0 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 8009fb8:	e005      	b.n	8009fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f9e2 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9f3 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0308 	and.w	r3, r3, #8
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d122      	bne.n	800a020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f003 0308 	and.w	r3, r3, #8
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d11b      	bne.n	800a020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f06f 0208 	mvn.w	r2, #8
 8009ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2204      	movs	r2, #4
 8009ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 0303 	and.w	r3, r3, #3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_TIM_IRQHandler+0xf2>
=======
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d122      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d11b      	bne.n	8009ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0204 	mvn.w	r2, #4
 8009b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9c6 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 800a00c:	e005      	b.n	800a01a <HAL_TIM_IRQHandler+0xfe>
=======
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f9f0 	bl	8009f6c <HAL_TIM_IC_CaptureCallback>
 8009b8c:	e005      	b.n	8009b9a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9b8 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f9c9 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9e2 	bl	8009f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f9f3 	bl	8009f80 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	771a      	strb	r2, [r3, #28]
    }
  }
<<<<<<< HEAD
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	d122      	bne.n	800a074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2b10      	cmp	r3, #16
 800a03a:	d11b      	bne.n	800a074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f06f 0210 	mvn.w	r2, #16
 800a044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2208      	movs	r2, #8
 800a04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <HAL_TIM_IRQHandler+0x146>
=======
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d122      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b08      	cmp	r3, #8
 8009bba:	d11b      	bne.n	8009bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0208 	mvn.w	r2, #8
 8009bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2204      	movs	r2, #4
 8009bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f99c 	bl	800a398 <HAL_TIM_IC_CaptureCallback>
 800a060:	e005      	b.n	800a06e <HAL_TIM_IRQHandler+0x152>
=======
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f9c6 	bl	8009f6c <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0xfe>
>>>>>>> origin/main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f98e 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f99f 	bl	800a3ac <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9b8 	bl	8009f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f9c9 	bl	8009f80 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	771a      	strb	r2, [r3, #28]
    }
  }
<<<<<<< HEAD
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d10e      	bne.n	800a0a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d107      	bne.n	800a0a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0201 	mvn.w	r2, #1
 800a098:	611a      	str	r2, [r3, #16]
=======
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b10      	cmp	r3, #16
 8009c00:	d122      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d11b      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f06f 0210 	mvn.w	r2, #16
 8009c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f99c 	bl	8009f6c <HAL_TIM_IC_CaptureCallback>
 8009c34:	e005      	b.n	8009c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f98e 	bl	8009f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f99f 	bl	8009f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d10e      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d107      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f06f 0201 	mvn.w	r2, #1
 8009c6c:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f9 f906 	bl	80032ac <HAL_TIM_PeriodElapsedCallback>
=======
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f9 fb88 	bl	8003384 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0aa:	2b80      	cmp	r3, #128	; 0x80
 800a0ac:	d10e      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b8:	2b80      	cmp	r3, #128	; 0x80
 800a0ba:	d107      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0c4:	611a      	str	r2, [r3, #16]
=======
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7e:	2b80      	cmp	r3, #128	; 0x80
 8009c80:	d10e      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8c:	2b80      	cmp	r3, #128	; 0x80
 8009c8e:	d107      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c98:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fcfc 	bl	800aac4 <HAL_TIMEx_BreakCallback>
=======
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fcfc 	bl	800a698 <HAL_TIMEx_BreakCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0da:	d10e      	bne.n	800a0fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e6:	2b80      	cmp	r3, #128	; 0x80
 800a0e8:	d107      	bne.n	800a0fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0f2:	611a      	str	r2, [r3, #16]
=======
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cae:	d10e      	bne.n	8009cce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cba:	2b80      	cmp	r3, #128	; 0x80
 8009cbc:	d107      	bne.n	8009cce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cc6:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fcef 	bl	800aad8 <HAL_TIMEx_Break2Callback>
=======
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fcef 	bl	800a6ac <HAL_TIMEx_Break2Callback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a104:	2b40      	cmp	r3, #64	; 0x40
 800a106:	d10e      	bne.n	800a126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a112:	2b40      	cmp	r3, #64	; 0x40
 800a114:	d107      	bne.n	800a126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a11e:	611a      	str	r2, [r3, #16]
=======
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd8:	2b40      	cmp	r3, #64	; 0x40
 8009cda:	d10e      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d107      	bne.n	8009cfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cf2:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f94d 	bl	800a3c0 <HAL_TIM_TriggerCallback>
=======
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f94d 	bl	8009f94 <HAL_TIM_TriggerCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	f003 0320 	and.w	r3, r3, #32
 800a130:	2b20      	cmp	r3, #32
 800a132:	d10e      	bne.n	800a152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b20      	cmp	r3, #32
 800a140:	d107      	bne.n	800a152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f06f 0220 	mvn.w	r2, #32
 800a14a:	611a      	str	r2, [r3, #16]
=======
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	d10e      	bne.n	8009d26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d107      	bne.n	8009d26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f06f 0220 	mvn.w	r2, #32
 8009d1e:	611a      	str	r2, [r3, #16]
>>>>>>> origin/main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fcaf 	bl	800aab0 <HAL_TIMEx_CommutCallback>
=======
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fcaf 	bl	800a684 <HAL_TIMEx_CommutCallback>
>>>>>>> origin/main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <HAL_TIM_PWM_ConfigChannel>:
=======
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> origin/main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	75fb      	strb	r3, [r7, #23]
=======
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a176:	2302      	movs	r3, #2
 800a178:	e0ff      	b.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b14      	cmp	r3, #20
 800a186:	f200 80f0 	bhi.w	800a36a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a18a:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1e5 	.word	0x0800a1e5
 800a194:	0800a36b 	.word	0x0800a36b
 800a198:	0800a36b 	.word	0x0800a36b
 800a19c:	0800a36b 	.word	0x0800a36b
 800a1a0:	0800a225 	.word	0x0800a225
 800a1a4:	0800a36b 	.word	0x0800a36b
 800a1a8:	0800a36b 	.word	0x0800a36b
 800a1ac:	0800a36b 	.word	0x0800a36b
 800a1b0:	0800a267 	.word	0x0800a267
 800a1b4:	0800a36b 	.word	0x0800a36b
 800a1b8:	0800a36b 	.word	0x0800a36b
 800a1bc:	0800a36b 	.word	0x0800a36b
 800a1c0:	0800a2a7 	.word	0x0800a2a7
 800a1c4:	0800a36b 	.word	0x0800a36b
 800a1c8:	0800a36b 	.word	0x0800a36b
 800a1cc:	0800a36b 	.word	0x0800a36b
 800a1d0:	0800a2e9 	.word	0x0800a2e9
 800a1d4:	0800a36b 	.word	0x0800a36b
 800a1d8:	0800a36b 	.word	0x0800a36b
 800a1dc:	0800a36b 	.word	0x0800a36b
 800a1e0:	0800a329 	.word	0x0800a329
=======
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e0ff      	b.n	8009f4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b14      	cmp	r3, #20
 8009d5a:	f200 80f0 	bhi.w	8009f3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009f3f 	.word	0x08009f3f
 8009d6c:	08009f3f 	.word	0x08009f3f
 8009d70:	08009f3f 	.word	0x08009f3f
 8009d74:	08009df9 	.word	0x08009df9
 8009d78:	08009f3f 	.word	0x08009f3f
 8009d7c:	08009f3f 	.word	0x08009f3f
 8009d80:	08009f3f 	.word	0x08009f3f
 8009d84:	08009e3b 	.word	0x08009e3b
 8009d88:	08009f3f 	.word	0x08009f3f
 8009d8c:	08009f3f 	.word	0x08009f3f
 8009d90:	08009f3f 	.word	0x08009f3f
 8009d94:	08009e7b 	.word	0x08009e7b
 8009d98:	08009f3f 	.word	0x08009f3f
 8009d9c:	08009f3f 	.word	0x08009f3f
 8009da0:	08009f3f 	.word	0x08009f3f
 8009da4:	08009ebd 	.word	0x08009ebd
 8009da8:	08009f3f 	.word	0x08009f3f
 8009dac:	08009f3f 	.word	0x08009f3f
 8009db0:	08009f3f 	.word	0x08009f3f
 8009db4:	08009efd 	.word	0x08009efd
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f956 	bl	800a49c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0208 	orr.w	r2, r2, #8
 800a1fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0204 	bic.w	r2, r2, #4
 800a20e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6999      	ldr	r1, [r3, #24]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	619a      	str	r2, [r3, #24]
      break;
 800a222:	e0a5      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f956 	bl	800a070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0208 	orr.w	r2, r2, #8
 8009dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0204 	bic.w	r2, r2, #4
 8009de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6999      	ldr	r1, [r3, #24]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	691a      	ldr	r2, [r3, #16]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	619a      	str	r2, [r3, #24]
      break;
 8009df6:	e0a5      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f9b2 	bl	800a594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a23e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699a      	ldr	r2, [r3, #24]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a24e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6999      	ldr	r1, [r3, #24]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	021a      	lsls	r2, r3, #8
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	619a      	str	r2, [r3, #24]
      break;
 800a264:	e084      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f9b2 	bl	800a168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6999      	ldr	r1, [r3, #24]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	021a      	lsls	r2, r3, #8
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	619a      	str	r2, [r3, #24]
      break;
 8009e38:	e084      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fa0b 	bl	800a688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	69da      	ldr	r2, [r3, #28]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0208 	orr.w	r2, r2, #8
 800a280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0204 	bic.w	r2, r2, #4
 800a290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	69d9      	ldr	r1, [r3, #28]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	61da      	str	r2, [r3, #28]
      break;
 800a2a4:	e064      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fa0b 	bl	800a25c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69da      	ldr	r2, [r3, #28]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0208 	orr.w	r2, r2, #8
 8009e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0204 	bic.w	r2, r2, #4
 8009e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69d9      	ldr	r1, [r3, #28]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	61da      	str	r2, [r3, #28]
      break;
 8009e78:	e064      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fa63 	bl	800a778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69da      	ldr	r2, [r3, #28]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69da      	ldr	r2, [r3, #28]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69d9      	ldr	r1, [r3, #28]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	021a      	lsls	r2, r3, #8
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	61da      	str	r2, [r3, #28]
      break;
 800a2e6:	e043      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fa63 	bl	800a34c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69da      	ldr	r2, [r3, #28]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69d9      	ldr	r1, [r3, #28]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	021a      	lsls	r2, r3, #8
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	61da      	str	r2, [r3, #28]
      break;
 8009eba:	e043      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 faa0 	bl	800a834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0208 	orr.w	r2, r2, #8
 800a302:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f022 0204 	bic.w	r2, r2, #4
 800a312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a326:	e023      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 faa0 	bl	800a408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0208 	orr.w	r2, r2, #8
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0204 	bic.w	r2, r2, #4
 8009ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	691a      	ldr	r2, [r3, #16]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009efa:	e023      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68b9      	ldr	r1, [r7, #8]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fad8 	bl	800a8e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	021a      	lsls	r2, r3, #8
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a368:	e002      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fad8 	bl	800a4b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	021a      	lsls	r2, r3, #8
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f3c:	e002      	b.n	8009f44 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> origin/main
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
      break;
 800a36e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop

0800a384 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75fb      	strb	r3, [r7, #23]
      break;
 8009f42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop

08009f58 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> origin/main
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
=======
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIM_IC_CaptureCallback>:
=======
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_TIM_IC_CaptureCallback>:
>>>>>>> origin/main
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
=======
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> origin/main
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
=======
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIM_TriggerCallback>:
=======
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_TIM_TriggerCallback>:
>>>>>>> origin/main
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
=======
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <TIM_Base_SetConfig>:
=======
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <TIM_Base_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a2a      	ldr	r2, [pc, #168]	; (800a490 <TIM_Base_SetConfig+0xbc>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d003      	beq.n	800a3f4 <TIM_Base_SetConfig+0x20>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f2:	d108      	bne.n	800a406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a21      	ldr	r2, [pc, #132]	; (800a490 <TIM_Base_SetConfig+0xbc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00b      	beq.n	800a426 <TIM_Base_SetConfig+0x52>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a414:	d007      	beq.n	800a426 <TIM_Base_SetConfig+0x52>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a1e      	ldr	r2, [pc, #120]	; (800a494 <TIM_Base_SetConfig+0xc0>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d003      	beq.n	800a426 <TIM_Base_SetConfig+0x52>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1d      	ldr	r2, [pc, #116]	; (800a498 <TIM_Base_SetConfig+0xc4>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d108      	bne.n	800a438 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a42c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
=======
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a2a      	ldr	r2, [pc, #168]	; (800a064 <TIM_Base_SetConfig+0xbc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_Base_SetConfig+0x20>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d108      	bne.n	8009fda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a21      	ldr	r2, [pc, #132]	; (800a064 <TIM_Base_SetConfig+0xbc>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00b      	beq.n	8009ffa <TIM_Base_SetConfig+0x52>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe8:	d007      	beq.n	8009ffa <TIM_Base_SetConfig+0x52>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a1e      	ldr	r2, [pc, #120]	; (800a068 <TIM_Base_SetConfig+0xc0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_Base_SetConfig+0x52>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a1d      	ldr	r2, [pc, #116]	; (800a06c <TIM_Base_SetConfig+0xc4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d108      	bne.n	800a00c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a0c      	ldr	r2, [pc, #48]	; (800a490 <TIM_Base_SetConfig+0xbc>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d007      	beq.n	800a474 <TIM_Base_SetConfig+0xa0>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a0b      	ldr	r2, [pc, #44]	; (800a494 <TIM_Base_SetConfig+0xc0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_Base_SetConfig+0xa0>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <TIM_Base_SetConfig+0xc4>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d103      	bne.n	800a47c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	691a      	ldr	r2, [r3, #16]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a0c      	ldr	r2, [pc, #48]	; (800a064 <TIM_Base_SetConfig+0xbc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d007      	beq.n	800a048 <TIM_Base_SetConfig+0xa0>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a0b      	ldr	r2, [pc, #44]	; (800a068 <TIM_Base_SetConfig+0xc0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d003      	beq.n	800a048 <TIM_Base_SetConfig+0xa0>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <TIM_Base_SetConfig+0xc4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d103      	bne.n	800a050 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	691a      	ldr	r2, [r3, #16]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> origin/main
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	615a      	str	r2, [r3, #20]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40012c00 	.word	0x40012c00
 800a494:	40014000 	.word	0x40014000
 800a498:	40014400 	.word	0x40014400

0800a49c <TIM_OC1_SetConfig>:
=======
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	615a      	str	r2, [r3, #20]
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	40012c00 	.word	0x40012c00
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400

0800a070 <TIM_OC1_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
=======
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	f023 0201 	bic.w	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0303 	bic.w	r3, r3, #3
 800a4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f023 0302 	bic.w	r3, r3, #2
 800a4e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a24      	ldr	r2, [pc, #144]	; (800a588 <TIM_OC1_SetConfig+0xec>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <TIM_OC1_SetConfig+0x70>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a23      	ldr	r2, [pc, #140]	; (800a58c <TIM_OC1_SetConfig+0xf0>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d003      	beq.n	800a50c <TIM_OC1_SetConfig+0x70>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a22      	ldr	r2, [pc, #136]	; (800a590 <TIM_OC1_SetConfig+0xf4>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d10c      	bne.n	800a526 <TIM_OC1_SetConfig+0x8a>
=======
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f023 0201 	bic.w	r2, r3, #1
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f023 0302 	bic.w	r3, r3, #2
 800a0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a24      	ldr	r2, [pc, #144]	; (800a15c <TIM_OC1_SetConfig+0xec>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d007      	beq.n	800a0e0 <TIM_OC1_SetConfig+0x70>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a23      	ldr	r2, [pc, #140]	; (800a160 <TIM_OC1_SetConfig+0xf0>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d003      	beq.n	800a0e0 <TIM_OC1_SetConfig+0x70>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a22      	ldr	r2, [pc, #136]	; (800a164 <TIM_OC1_SetConfig+0xf4>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d10c      	bne.n	800a0fa <TIM_OC1_SetConfig+0x8a>
>>>>>>> origin/main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f023 0308 	bic.w	r3, r3, #8
 800a512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f023 0304 	bic.w	r3, r3, #4
 800a524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a17      	ldr	r2, [pc, #92]	; (800a588 <TIM_OC1_SetConfig+0xec>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d007      	beq.n	800a53e <TIM_OC1_SetConfig+0xa2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a16      	ldr	r2, [pc, #88]	; (800a58c <TIM_OC1_SetConfig+0xf0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_OC1_SetConfig+0xa2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <TIM_OC1_SetConfig+0xf4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d111      	bne.n	800a562 <TIM_OC1_SetConfig+0xc6>
=======
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f023 0308 	bic.w	r3, r3, #8
 800a0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f023 0304 	bic.w	r3, r3, #4
 800a0f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a17      	ldr	r2, [pc, #92]	; (800a15c <TIM_OC1_SetConfig+0xec>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d007      	beq.n	800a112 <TIM_OC1_SetConfig+0xa2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a16      	ldr	r2, [pc, #88]	; (800a160 <TIM_OC1_SetConfig+0xf0>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d003      	beq.n	800a112 <TIM_OC1_SetConfig+0xa2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a15      	ldr	r2, [pc, #84]	; (800a164 <TIM_OC1_SetConfig+0xf4>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d111      	bne.n	800a136 <TIM_OC1_SetConfig+0xc6>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a54c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
=======
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	621a      	str	r2, [r3, #32]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40012c00 	.word	0x40012c00
 800a58c:	40014000 	.word	0x40014000
 800a590:	40014400 	.word	0x40014400

0800a594 <TIM_OC2_SetConfig>:
=======
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	621a      	str	r2, [r3, #32]
}
 800a150:	bf00      	nop
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	40012c00 	.word	0x40012c00
 800a160:	40014000 	.word	0x40014000
 800a164:	40014400 	.word	0x40014400

0800a168 <TIM_OC2_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
=======
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f023 0210 	bic.w	r2, r3, #16
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f023 0320 	bic.w	r3, r3, #32
 800a5e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a22      	ldr	r2, [pc, #136]	; (800a67c <TIM_OC2_SetConfig+0xe8>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d10d      	bne.n	800a614 <TIM_OC2_SetConfig+0x80>
=======
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	f023 0210 	bic.w	r2, r3, #16
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f023 0320 	bic.w	r3, r3, #32
 800a1b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a22      	ldr	r2, [pc, #136]	; (800a250 <TIM_OC2_SetConfig+0xe8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d10d      	bne.n	800a1e8 <TIM_OC2_SetConfig+0x80>
>>>>>>> origin/main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	4313      	orrs	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a612:	617b      	str	r3, [r7, #20]
=======
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e6:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a19      	ldr	r2, [pc, #100]	; (800a67c <TIM_OC2_SetConfig+0xe8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d007      	beq.n	800a62c <TIM_OC2_SetConfig+0x98>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a18      	ldr	r2, [pc, #96]	; (800a680 <TIM_OC2_SetConfig+0xec>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d003      	beq.n	800a62c <TIM_OC2_SetConfig+0x98>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a17      	ldr	r2, [pc, #92]	; (800a684 <TIM_OC2_SetConfig+0xf0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d113      	bne.n	800a654 <TIM_OC2_SetConfig+0xc0>
=======
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a19      	ldr	r2, [pc, #100]	; (800a250 <TIM_OC2_SetConfig+0xe8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d007      	beq.n	800a200 <TIM_OC2_SetConfig+0x98>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a18      	ldr	r2, [pc, #96]	; (800a254 <TIM_OC2_SetConfig+0xec>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC2_SetConfig+0x98>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <TIM_OC2_SetConfig+0xf0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d113      	bne.n	800a228 <TIM_OC2_SetConfig+0xc0>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a63a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
=======
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a20e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40012c00 	.word	0x40012c00
 800a680:	40014000 	.word	0x40014000
 800a684:	40014400 	.word	0x40014400

0800a688 <TIM_OC3_SetConfig>:
=======
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40014000 	.word	0x40014000
 800a258:	40014400 	.word	0x40014400

0800a25c <TIM_OC3_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
=======
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0303 	bic.w	r3, r3, #3
 800a6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	021b      	lsls	r3, r3, #8
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a21      	ldr	r2, [pc, #132]	; (800a76c <TIM_OC3_SetConfig+0xe4>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d10d      	bne.n	800a706 <TIM_OC3_SetConfig+0x7e>
=======
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0303 	bic.w	r3, r3, #3
 800a296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a21      	ldr	r2, [pc, #132]	; (800a340 <TIM_OC3_SetConfig+0xe4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d10d      	bne.n	800a2da <TIM_OC3_SetConfig+0x7e>
>>>>>>> origin/main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a18      	ldr	r2, [pc, #96]	; (800a76c <TIM_OC3_SetConfig+0xe4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d007      	beq.n	800a71e <TIM_OC3_SetConfig+0x96>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a17      	ldr	r2, [pc, #92]	; (800a770 <TIM_OC3_SetConfig+0xe8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d003      	beq.n	800a71e <TIM_OC3_SetConfig+0x96>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a16      	ldr	r2, [pc, #88]	; (800a774 <TIM_OC3_SetConfig+0xec>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d113      	bne.n	800a746 <TIM_OC3_SetConfig+0xbe>
=======
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a18      	ldr	r2, [pc, #96]	; (800a340 <TIM_OC3_SetConfig+0xe4>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d007      	beq.n	800a2f2 <TIM_OC3_SetConfig+0x96>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a17      	ldr	r2, [pc, #92]	; (800a344 <TIM_OC3_SetConfig+0xe8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d003      	beq.n	800a2f2 <TIM_OC3_SetConfig+0x96>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a16      	ldr	r2, [pc, #88]	; (800a348 <TIM_OC3_SetConfig+0xec>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d113      	bne.n	800a31a <TIM_OC3_SetConfig+0xbe>
>>>>>>> origin/main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4313      	orrs	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]
=======
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	621a      	str	r2, [r3, #32]
}
 800a760:	bf00      	nop
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	40012c00 	.word	0x40012c00
 800a770:	40014000 	.word	0x40014000
 800a774:	40014400 	.word	0x40014400

0800a778 <TIM_OC4_SetConfig>:
=======
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	621a      	str	r2, [r3, #32]
}
 800a334:	bf00      	nop
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	40012c00 	.word	0x40012c00
 800a344:	40014000 	.word	0x40014000
 800a348:	40014400 	.word	0x40014400

0800a34c <TIM_OC4_SetConfig>:
>>>>>>> origin/main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
=======
 800a34c:	b480      	push	{r7}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	031b      	lsls	r3, r3, #12
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a14      	ldr	r2, [pc, #80]	; (800a828 <TIM_OC4_SetConfig+0xb0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d007      	beq.n	800a7ec <TIM_OC4_SetConfig+0x74>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a13      	ldr	r2, [pc, #76]	; (800a82c <TIM_OC4_SetConfig+0xb4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d003      	beq.n	800a7ec <TIM_OC4_SetConfig+0x74>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a12      	ldr	r2, [pc, #72]	; (800a830 <TIM_OC4_SetConfig+0xb8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d109      	bne.n	800a800 <TIM_OC4_SetConfig+0x88>
=======
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4313      	orrs	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	031b      	lsls	r3, r3, #12
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a14      	ldr	r2, [pc, #80]	; (800a3fc <TIM_OC4_SetConfig+0xb0>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d007      	beq.n	800a3c0 <TIM_OC4_SetConfig+0x74>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a13      	ldr	r2, [pc, #76]	; (800a400 <TIM_OC4_SetConfig+0xb4>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_OC4_SetConfig+0x74>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a12      	ldr	r2, [pc, #72]	; (800a404 <TIM_OC4_SetConfig+0xb8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d109      	bne.n	800a3d4 <TIM_OC4_SetConfig+0x88>
>>>>>>> origin/main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	019b      	lsls	r3, r3, #6
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
=======
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	019b      	lsls	r3, r3, #6
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	621a      	str	r2, [r3, #32]
}
 800a81a:	bf00      	nop
 800a81c:	371c      	adds	r7, #28
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40012c00 	.word	0x40012c00
 800a82c:	40014000 	.word	0x40014000
 800a830:	40014400 	.word	0x40014400

0800a834 <TIM_OC5_SetConfig>:
=======
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40012c00 	.word	0x40012c00
 800a400:	40014000 	.word	0x40014000
 800a404:	40014400 	.word	0x40014400

0800a408 <TIM_OC5_SetConfig>:
>>>>>>> origin/main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
=======
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	4313      	orrs	r3, r2
 800a884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a13      	ldr	r2, [pc, #76]	; (800a8d8 <TIM_OC5_SetConfig+0xa4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d007      	beq.n	800a89e <TIM_OC5_SetConfig+0x6a>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <TIM_OC5_SetConfig+0xa8>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_OC5_SetConfig+0x6a>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a11      	ldr	r2, [pc, #68]	; (800a8e0 <TIM_OC5_SetConfig+0xac>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d109      	bne.n	800a8b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	621a      	str	r2, [r3, #32]
}
 800a8cc:	bf00      	nop
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	40012c00 	.word	0x40012c00
 800a8dc:	40014000 	.word	0x40014000
 800a8e0:	40014400 	.word	0x40014400

0800a8e4 <TIM_OC6_SetConfig>:
=======
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a44c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	041b      	lsls	r3, r3, #16
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a13      	ldr	r2, [pc, #76]	; (800a4ac <TIM_OC5_SetConfig+0xa4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d007      	beq.n	800a472 <TIM_OC5_SetConfig+0x6a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a12      	ldr	r2, [pc, #72]	; (800a4b0 <TIM_OC5_SetConfig+0xa8>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d003      	beq.n	800a472 <TIM_OC5_SetConfig+0x6a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a11      	ldr	r2, [pc, #68]	; (800a4b4 <TIM_OC5_SetConfig+0xac>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d109      	bne.n	800a486 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	621a      	str	r2, [r3, #32]
}
 800a4a0:	bf00      	nop
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	40012c00 	.word	0x40012c00
 800a4b0:	40014000 	.word	0x40014000
 800a4b4:	40014400 	.word	0x40014400

0800a4b8 <TIM_OC6_SetConfig>:
>>>>>>> origin/main
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
=======
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a92a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	051b      	lsls	r3, r3, #20
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a14      	ldr	r2, [pc, #80]	; (800a98c <TIM_OC6_SetConfig+0xa8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d007      	beq.n	800a950 <TIM_OC6_SetConfig+0x6c>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a13      	ldr	r2, [pc, #76]	; (800a990 <TIM_OC6_SetConfig+0xac>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_OC6_SetConfig+0x6c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a12      	ldr	r2, [pc, #72]	; (800a994 <TIM_OC6_SetConfig+0xb0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d109      	bne.n	800a964 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	029b      	lsls	r3, r3, #10
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	4313      	orrs	r3, r2
 800a962:	617b      	str	r3, [r7, #20]
=======
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	051b      	lsls	r3, r3, #20
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a14      	ldr	r2, [pc, #80]	; (800a560 <TIM_OC6_SetConfig+0xa8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d007      	beq.n	800a524 <TIM_OC6_SetConfig+0x6c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a13      	ldr	r2, [pc, #76]	; (800a564 <TIM_OC6_SetConfig+0xac>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d003      	beq.n	800a524 <TIM_OC6_SetConfig+0x6c>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a12      	ldr	r2, [pc, #72]	; (800a568 <TIM_OC6_SetConfig+0xb0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d109      	bne.n	800a538 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a52a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	029b      	lsls	r3, r3, #10
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	40012c00 	.word	0x40012c00
 800a990:	40014000 	.word	0x40014000
 800a994:	40014400 	.word	0x40014400

0800a998 <TIM_CCxChannelCmd>:
=======
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40012c00 	.word	0x40012c00
 800a564:	40014000 	.word	0x40014000
 800a568:	40014400 	.word	0x40014400

0800a56c <TIM_CCxChannelCmd>:
>>>>>>> origin/main
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
=======
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
>>>>>>> origin/main

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a1a      	ldr	r2, [r3, #32]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	401a      	ands	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a1a      	ldr	r2, [r3, #32]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 031f 	and.w	r3, r3, #31
 800a57e:	2201      	movs	r2, #1
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a1a      	ldr	r2, [r3, #32]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	43db      	mvns	r3, r3
 800a58e:	401a      	ands	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1a      	ldr	r2, [r3, #32]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 031f 	and.w	r3, r3, #31
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	621a      	str	r2, [r3, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> origin/main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
=======
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e04f      	b.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a21      	ldr	r2, [pc, #132]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d108      	bne.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
=======
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e04f      	b.n	800a670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a21      	ldr	r2, [pc, #132]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d108      	bne.n	800a60c <HAL_TIMEx_MasterConfigSynchronization+0x54>
>>>>>>> origin/main
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
=======
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d009      	beq.n	800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa64:	d004      	beq.n	800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a10      	ldr	r2, [pc, #64]	; (800aaac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10c      	bne.n	800aa8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	609a      	str	r2, [r3, #8]
=======
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a14      	ldr	r2, [pc, #80]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d009      	beq.n	800a644 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a638:	d004      	beq.n	800a644 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a10      	ldr	r2, [pc, #64]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d10c      	bne.n	800a65e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a64a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	4313      	orrs	r3, r2
 800a654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	609a      	str	r2, [r3, #8]
>>>>>>> origin/main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	40012c00 	.word	0x40012c00
 800aaac:	40014000 	.word	0x40014000

0800aab0 <HAL_TIMEx_CommutCallback>:
=======
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	40012c00 	.word	0x40012c00
 800a680:	40014000 	.word	0x40014000

0800a684 <HAL_TIMEx_CommutCallback>:
>>>>>>> origin/main
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
=======
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIMEx_BreakCallback>:
=======
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_TIMEx_BreakCallback>:
>>>>>>> origin/main
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
=======
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIMEx_Break2Callback>:
=======
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIMEx_Break2Callback>:
>>>>>>> origin/main
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
=======
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USB_CoreInit>:
=======
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_CoreInit>:
>>>>>>> origin/main
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800aaec:	b084      	sub	sp, #16
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	f107 0014 	add.w	r0, r7, #20
 800aafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	f107 0014 	add.w	r0, r7, #20
 800a6ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> origin/main
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	b004      	add	sp, #16
 800ab0c:	4770      	bx	lr

0800ab0e <USB_EnableGlobalInt>:
=======
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	b004      	add	sp, #16
 800a6e0:	4770      	bx	lr

0800a6e2 <USB_EnableGlobalInt>:
>>>>>>> origin/main
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800ab0e:	b480      	push	{r7}
 800ab10:	b085      	sub	sp, #20
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
=======
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< HEAD
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ab1e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ab22:	60fb      	str	r3, [r7, #12]
=======
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6f6:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< HEAD
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <USB_DisableGlobalInt>:
=======
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USB_DisableGlobalInt>:
>>>>>>> origin/main
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
=======
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 800ab44:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ab48:	60fb      	str	r3, [r7, #12]
=======
 800a718:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a71c:	60fb      	str	r3, [r7, #12]
>>>>>>> origin/main
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	43db      	mvns	r3, r3
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <USB_SetCurrentMode>:
=======
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	43db      	mvns	r3, r3
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	4013      	ands	r3, r2
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <USB_SetCurrentMode>:
>>>>>>> origin/main
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
<<<<<<< HEAD
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
=======
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	70fb      	strb	r3, [r7, #3]
>>>>>>> origin/main

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_DevInit>:
=======
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <USB_DevInit>:
>>>>>>> origin/main
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	f107 0014 	add.w	r0, r7, #20
 800ab9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800a760:	b084      	sub	sp, #16
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	f107 0014 	add.w	r0, r7, #20
 800a76e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> origin/main
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	b004      	add	sp, #16
 800abcc:	4770      	bx	lr
	...

0800abd0 <USB_ActivateEndpoint>:
=======
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	b004      	add	sp, #16
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <USB_ActivateEndpoint>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800abd0:	b480      	push	{r7}
 800abd2:	b09d      	sub	sp, #116	; 0x74
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	b29b      	uxth	r3, r3
 800abee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800abf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	78db      	ldrb	r3, [r3, #3]
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d81f      	bhi.n	800ac42 <USB_ActivateEndpoint+0x72>
 800ac02:	a201      	add	r2, pc, #4	; (adr r2, 800ac08 <USB_ActivateEndpoint+0x38>)
 800ac04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac08:	0800ac19 	.word	0x0800ac19
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac4b 	.word	0x0800ac4b
 800ac14:	0800ac27 	.word	0x0800ac27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ac18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ac1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ac24:	e012      	b.n	800ac4c <USB_ActivateEndpoint+0x7c>
=======
 800a7a4:	b480      	push	{r7}
 800a7a6:	b09d      	sub	sp, #116	; 0x74
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	78db      	ldrb	r3, [r3, #3]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d81f      	bhi.n	800a816 <USB_ActivateEndpoint+0x72>
 800a7d6:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <USB_ActivateEndpoint+0x38>)
 800a7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7dc:	0800a7ed 	.word	0x0800a7ed
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a81f 	.word	0x0800a81f
 800a7e8:	0800a7fb 	.word	0x0800a7fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a7ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7f8:	e012      	b.n	800a820 <USB_ActivateEndpoint+0x7c>
>>>>>>> origin/main
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
<<<<<<< HEAD
 800ac26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ac2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ac2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ac32:	e00b      	b.n	800ac4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ac34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ac38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ac40:	e004      	b.n	800ac4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ac48:	e000      	b.n	800ac4c <USB_ActivateEndpoint+0x7c>
      break;
 800ac4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	441a      	add	r2, r3
 800ac56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ac5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	b21b      	sxth	r3, r3
 800ac7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac86:	b21a      	sxth	r2, r3
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	b21b      	sxth	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	441a      	add	r2, r3
 800aca0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800aca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	7b1b      	ldrb	r3, [r3, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 816e 	bne.w	800af9e <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 8084 	beq.w	800add4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	61bb      	str	r3, [r7, #24]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	4413      	add	r3, r2
 800acde:	61bb      	str	r3, [r7, #24]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	00da      	lsls	r2, r3, #3
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	88db      	ldrh	r3, [r3, #6]
 800acf4:	085b      	lsrs	r3, r3, #1
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	827b      	strh	r3, [r7, #18]
 800ad0e:	8a7b      	ldrh	r3, [r7, #18]
 800ad10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01b      	beq.n	800ad50 <USB_ActivateEndpoint+0x180>
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2e:	823b      	strh	r3, [r7, #16]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	441a      	add	r2, r3
 800ad3a:	8a3b      	ldrh	r3, [r7, #16]
 800ad3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	78db      	ldrb	r3, [r3, #3]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d020      	beq.n	800ad9a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad6e:	81bb      	strh	r3, [r7, #12]
 800ad70:	89bb      	ldrh	r3, [r7, #12]
 800ad72:	f083 0320 	eor.w	r3, r3, #32
 800ad76:	81bb      	strh	r3, [r7, #12]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	441a      	add	r2, r3
 800ad82:	89bb      	ldrh	r3, [r7, #12]
 800ad84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	8013      	strh	r3, [r2, #0]
 800ad98:	e2cb      	b.n	800b332 <USB_ActivateEndpoint+0x762>
=======
 800a7fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a802:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a806:	e00b      	b.n	800a820 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a808:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a80c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a810:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a814:	e004      	b.n	800a820 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a81c:	e000      	b.n	800a820 <USB_ActivateEndpoint+0x7c>
      break;
 800a81e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	441a      	add	r2, r3
 800a82a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a82e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83e:	b29b      	uxth	r3, r3
 800a840:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	b21b      	sxth	r3, r3
 800a852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85a:	b21a      	sxth	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b21b      	sxth	r3, r3
 800a862:	4313      	orrs	r3, r2
 800a864:	b21b      	sxth	r3, r3
 800a866:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	441a      	add	r2, r3
 800a874:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a87c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a888:	b29b      	uxth	r3, r3
 800a88a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	7b1b      	ldrb	r3, [r3, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 816e 	bne.w	800ab72 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 8084 	beq.w	800a9a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	00da      	lsls	r2, r3, #3
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	88db      	ldrh	r3, [r3, #6]
 800a8c8:	085b      	lsrs	r3, r3, #1
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	827b      	strh	r3, [r7, #18]
 800a8e2:	8a7b      	ldrh	r3, [r7, #18]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01b      	beq.n	800a924 <USB_ActivateEndpoint+0x180>
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a902:	823b      	strh	r3, [r7, #16]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	8a3b      	ldrh	r3, [r7, #16]
 800a910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a920:	b29b      	uxth	r3, r3
 800a922:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d020      	beq.n	800a96e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a942:	81bb      	strh	r3, [r7, #12]
 800a944:	89bb      	ldrh	r3, [r7, #12]
 800a946:	f083 0320 	eor.w	r3, r3, #32
 800a94a:	81bb      	strh	r3, [r7, #12]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	441a      	add	r2, r3
 800a956:	89bb      	ldrh	r3, [r7, #12]
 800a958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a95c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a968:	b29b      	uxth	r3, r3
 800a96a:	8013      	strh	r3, [r2, #0]
 800a96c:	e2cb      	b.n	800af06 <USB_ActivateEndpoint+0x762>
>>>>>>> origin/main
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb0:	81fb      	strh	r3, [r7, #14]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	441a      	add	r2, r3
 800adbc:	89fb      	ldrh	r3, [r7, #14]
 800adbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adce:	b29b      	uxth	r3, r3
 800add0:	8013      	strh	r3, [r2, #0]
 800add2:	e2ae      	b.n	800b332 <USB_ActivateEndpoint+0x762>
=======
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a984:	81fb      	strh	r3, [r7, #14]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	441a      	add	r2, r3
 800a990:	89fb      	ldrh	r3, [r7, #14]
 800a992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	8013      	strh	r3, [r2, #0]
 800a9a6:	e2ae      	b.n	800af06 <USB_ActivateEndpoint+0x762>
>>>>>>> origin/main
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< HEAD
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adde:	b29b      	uxth	r3, r3
 800ade0:	461a      	mov	r2, r3
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	4413      	add	r3, r2
 800ade6:	633b      	str	r3, [r7, #48]	; 0x30
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	00da      	lsls	r2, r3, #3
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	4413      	add	r3, r2
 800adf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	88db      	ldrh	r3, [r3, #6]
 800adfc:	085b      	lsrs	r3, r3, #1
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	4413      	add	r3, r2
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	00da      	lsls	r2, r3, #3
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	4413      	add	r3, r2
 800ae26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	2b3e      	cmp	r3, #62	; 0x3e
 800ae32:	d918      	bls.n	800ae66 <USB_ActivateEndpoint+0x296>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	095b      	lsrs	r3, r3, #5
 800ae3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	f003 031f 	and.w	r3, r3, #31
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <USB_ActivateEndpoint+0x27e>
 800ae48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	029b      	lsls	r3, r3, #10
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	e029      	b.n	800aeba <USB_ActivateEndpoint+0x2ea>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d112      	bne.n	800ae94 <USB_ActivateEndpoint+0x2c4>
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	801a      	strh	r2, [r3, #0]
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	e012      	b.n	800aeba <USB_ActivateEndpoint+0x2ea>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	085b      	lsrs	r3, r3, #1
 800ae9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <USB_ActivateEndpoint+0x2de>
 800aea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeaa:	3301      	adds	r3, #1
 800aeac:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	029b      	lsls	r3, r3, #10
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	847b      	strh	r3, [r7, #34]	; 0x22
 800aec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d01b      	beq.n	800af0a <USB_ActivateEndpoint+0x33a>
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee8:	843b      	strh	r3, [r7, #32]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	441a      	add	r2, r3
 800aef4:	8c3b      	ldrh	r3, [r7, #32]
 800aef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aefa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aefe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af06:	b29b      	uxth	r3, r3
 800af08:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d124      	bne.n	800af5c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af28:	83bb      	strh	r3, [r7, #28]
 800af2a:	8bbb      	ldrh	r3, [r7, #28]
 800af2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800af30:	83bb      	strh	r3, [r7, #28]
 800af32:	8bbb      	ldrh	r3, [r7, #28]
 800af34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af38:	83bb      	strh	r3, [r7, #28]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	441a      	add	r2, r3
 800af44:	8bbb      	ldrh	r3, [r7, #28]
 800af46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af56:	b29b      	uxth	r3, r3
 800af58:	8013      	strh	r3, [r2, #0]
 800af5a:	e1ea      	b.n	800b332 <USB_ActivateEndpoint+0x762>
=======
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	4413      	add	r3, r2
 800a9ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	00da      	lsls	r2, r3, #3
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	085b      	lsrs	r3, r3, #1
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	4413      	add	r3, r2
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	00da      	lsls	r2, r3, #3
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	2b3e      	cmp	r3, #62	; 0x3e
 800aa06:	d918      	bls.n	800aa3a <USB_ActivateEndpoint+0x296>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	095b      	lsrs	r3, r3, #5
 800aa0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 031f 	and.w	r3, r3, #31
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <USB_ActivateEndpoint+0x27e>
 800aa1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	029b      	lsls	r3, r3, #10
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	e029      	b.n	800aa8e <USB_ActivateEndpoint+0x2ea>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d112      	bne.n	800aa68 <USB_ActivateEndpoint+0x2c4>
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	801a      	strh	r2, [r3, #0]
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	801a      	strh	r2, [r3, #0]
 800aa66:	e012      	b.n	800aa8e <USB_ActivateEndpoint+0x2ea>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <USB_ActivateEndpoint+0x2de>
 800aa7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa7e:	3301      	adds	r3, #1
 800aa80:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	029b      	lsls	r3, r3, #10
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01b      	beq.n	800aade <USB_ActivateEndpoint+0x33a>
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabc:	843b      	strh	r3, [r7, #32]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	441a      	add	r2, r3
 800aac8:	8c3b      	ldrh	r3, [r7, #32]
 800aaca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aada:	b29b      	uxth	r3, r3
 800aadc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d124      	bne.n	800ab30 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafc:	83bb      	strh	r3, [r7, #28]
 800aafe:	8bbb      	ldrh	r3, [r7, #28]
 800ab00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab04:	83bb      	strh	r3, [r7, #28]
 800ab06:	8bbb      	ldrh	r3, [r7, #28]
 800ab08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab0c:	83bb      	strh	r3, [r7, #28]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	441a      	add	r2, r3
 800ab18:	8bbb      	ldrh	r3, [r7, #28]
 800ab1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8013      	strh	r3, [r2, #0]
 800ab2e:	e1ea      	b.n	800af06 <USB_ActivateEndpoint+0x762>
>>>>>>> origin/main
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
<<<<<<< HEAD
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af72:	83fb      	strh	r3, [r7, #30]
 800af74:	8bfb      	ldrh	r3, [r7, #30]
 800af76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af7a:	83fb      	strh	r3, [r7, #30]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	441a      	add	r2, r3
 800af86:	8bfb      	ldrh	r3, [r7, #30]
 800af88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af98:	b29b      	uxth	r3, r3
 800af9a:	8013      	strh	r3, [r2, #0]
 800af9c:	e1c9      	b.n	800b332 <USB_ActivateEndpoint+0x762>
=======
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab46:	83fb      	strh	r3, [r7, #30]
 800ab48:	8bfb      	ldrh	r3, [r7, #30]
 800ab4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab4e:	83fb      	strh	r3, [r7, #30]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	441a      	add	r2, r3
 800ab5a:	8bfb      	ldrh	r3, [r7, #30]
 800ab5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	8013      	strh	r3, [r2, #0]
 800ab70:	e1c9      	b.n	800af06 <USB_ActivateEndpoint+0x762>
>>>>>>> origin/main
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	78db      	ldrb	r3, [r3, #3]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d11e      	bne.n	800afe4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	441a      	add	r2, r3
 800afca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800afce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800afda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afde:	b29b      	uxth	r3, r3
 800afe0:	8013      	strh	r3, [r2, #0]
 800afe2:	e01d      	b.n	800b020 <USB_ActivateEndpoint+0x450>
=======
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	78db      	ldrb	r3, [r3, #3]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d11e      	bne.n	800abb8 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	441a      	add	r2, r3
 800ab9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800abae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	8013      	strh	r3, [r2, #0]
 800abb6:	e01d      	b.n	800abf4 <USB_ActivateEndpoint+0x450>
>>>>>>> origin/main
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
<<<<<<< HEAD
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	441a      	add	r2, r3
 800b008:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b00c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	8013      	strh	r3, [r2, #0]
=======
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800abca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	441a      	add	r2, r3
 800abdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800abe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
<<<<<<< HEAD
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b030:	4413      	add	r3, r2
 800b032:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	00da      	lsls	r2, r3, #3
 800b03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b042:	65bb      	str	r3, [r7, #88]	; 0x58
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	891b      	ldrh	r3, [r3, #8]
 800b048:	085b      	lsrs	r3, r3, #1
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b052:	801a      	strh	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	657b      	str	r3, [r7, #84]	; 0x54
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b05e:	b29b      	uxth	r3, r3
 800b060:	461a      	mov	r2, r3
 800b062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b064:	4413      	add	r3, r2
 800b066:	657b      	str	r3, [r7, #84]	; 0x54
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	00da      	lsls	r2, r3, #3
 800b06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b070:	4413      	add	r3, r2
 800b072:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b076:	653b      	str	r3, [r7, #80]	; 0x50
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	895b      	ldrh	r3, [r3, #10]
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	b29b      	uxth	r3, r3
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b086:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	785b      	ldrb	r3, [r3, #1]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 8093 	bne.w	800b1b8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b0a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b0a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01b      	beq.n	800b0e6 <USB_ActivateEndpoint+0x516>
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	441a      	add	r2, r3
 800b0d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b0f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01b      	beq.n	800b136 <USB_ActivateEndpoint+0x566>
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b114:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	441a      	add	r2, r3
 800b120:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b132:	b29b      	uxth	r3, r3
 800b134:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b14e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b150:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b154:	873b      	strh	r3, [r7, #56]	; 0x38
 800b156:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b158:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b15c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	441a      	add	r2, r3
 800b168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b16a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b16e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b194:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	441a      	add	r2, r3
 800b1a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	8013      	strh	r3, [r2, #0]
 800b1b6:	e0bc      	b.n	800b332 <USB_ActivateEndpoint+0x762>
=======
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	461a      	mov	r2, r3
 800ac02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac04:	4413      	add	r3, r2
 800ac06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	00da      	lsls	r2, r3, #3
 800ac0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac16:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	891b      	ldrh	r3, [r3, #8]
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac26:	801a      	strh	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	461a      	mov	r2, r3
 800ac36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac38:	4413      	add	r3, r2
 800ac3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	00da      	lsls	r2, r3, #3
 800ac42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac44:	4413      	add	r3, r2
 800ac46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac4a:	653b      	str	r3, [r7, #80]	; 0x50
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	895b      	ldrh	r3, [r3, #10]
 800ac50:	085b      	lsrs	r3, r3, #1
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 8093 	bne.w	800ad8c <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ac76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d01b      	beq.n	800acba <USB_ActivateEndpoint+0x516>
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	441a      	add	r2, r3
 800aca4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800acc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d01b      	beq.n	800ad0a <USB_ActivateEndpoint+0x566>
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	441a      	add	r2, r3
 800acf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800acf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad20:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad28:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad30:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	441a      	add	r2, r3
 800ad3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad68:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	441a      	add	r2, r3
 800ad74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	8013      	strh	r3, [r2, #0]
 800ad8a:	e0bc      	b.n	800af06 <USB_ActivateEndpoint+0x762>
>>>>>>> origin/main
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b1c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b1cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01d      	beq.n	800b210 <USB_ActivateEndpoint+0x640>
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	441a      	add	r2, r3
 800b1f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b1fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b220:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01d      	beq.n	800b268 <USB_ActivateEndpoint+0x698>
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b242:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	441a      	add	r2, r3
 800b250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b25c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b260:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b264:	b29b      	uxth	r3, r3
 800b266:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	78db      	ldrb	r3, [r3, #3]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d024      	beq.n	800b2ba <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b28a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b28e:	f083 0320 	eor.w	r3, r3, #32
 800b292:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	441a      	add	r2, r3
 800b2a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	8013      	strh	r3, [r2, #0]
 800b2b8:	e01d      	b.n	800b2f6 <USB_ActivateEndpoint+0x726>
=======
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ad9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ada0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01d      	beq.n	800ade4 <USB_ActivateEndpoint+0x640>
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adbe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	441a      	add	r2, r3
 800adcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800add0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800add4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800add8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800addc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800adf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800adf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01d      	beq.n	800ae3c <USB_ActivateEndpoint+0x698>
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	441a      	add	r2, r3
 800ae24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ae28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	78db      	ldrb	r3, [r3, #3]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d024      	beq.n	800ae8e <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae62:	f083 0320 	eor.w	r3, r3, #32
 800ae66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	441a      	add	r2, r3
 800ae74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	8013      	strh	r3, [r2, #0]
 800ae8c:	e01d      	b.n	800aeca <USB_ActivateEndpoint+0x726>
>>>>>>> origin/main
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	441a      	add	r2, r3
 800b2de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b2e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	881b      	ldrh	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b30c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	441a      	add	r2, r3
 800b31a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b31e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b32e:	b29b      	uxth	r3, r3
 800b330:	8013      	strh	r3, [r2, #0]
=======
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aea4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	441a      	add	r2, r3
 800aeb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aeb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	441a      	add	r2, r3
 800aeee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aefa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af02:	b29b      	uxth	r3, r3
 800af04:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
<<<<<<< HEAD
 800b332:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b336:	4618      	mov	r0, r3
 800b338:	3774      	adds	r7, #116	; 0x74
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop

0800b344 <USB_DeactivateEndpoint>:
=======
 800af06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3774      	adds	r7, #116	; 0x74
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop

0800af18 <USB_DeactivateEndpoint>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800b344:	b480      	push	{r7}
 800b346:	b08d      	sub	sp, #52	; 0x34
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	7b1b      	ldrb	r3, [r3, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 808e 	bne.w	800b474 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	785b      	ldrb	r3, [r3, #1]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d044      	beq.n	800b3ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	881b      	ldrh	r3, [r3, #0]
 800b36c:	81bb      	strh	r3, [r7, #12]
 800b36e:	89bb      	ldrh	r3, [r7, #12]
 800b370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b374:	2b00      	cmp	r3, #0
 800b376:	d01b      	beq.n	800b3b0 <USB_DeactivateEndpoint+0x6c>
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	817b      	strh	r3, [r7, #10]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	441a      	add	r2, r3
 800b39a:	897b      	ldrh	r3, [r7, #10]
 800b39c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c6:	813b      	strh	r3, [r7, #8]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	441a      	add	r2, r3
 800b3d2:	893b      	ldrh	r3, [r7, #8]
 800b3d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	8013      	strh	r3, [r2, #0]
 800b3e8:	e192      	b.n	800b710 <USB_DeactivateEndpoint+0x3cc>
=======
 800af18:	b480      	push	{r7}
 800af1a:	b08d      	sub	sp, #52	; 0x34
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	7b1b      	ldrb	r3, [r3, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 808e 	bne.w	800b048 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d044      	beq.n	800afbe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	81bb      	strh	r3, [r7, #12]
 800af42:	89bb      	ldrh	r3, [r7, #12]
 800af44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d01b      	beq.n	800af84 <USB_DeactivateEndpoint+0x6c>
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af62:	817b      	strh	r3, [r7, #10]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	441a      	add	r2, r3
 800af6e:	897b      	ldrh	r3, [r7, #10]
 800af70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af80:	b29b      	uxth	r3, r3
 800af82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af9a:	813b      	strh	r3, [r7, #8]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	441a      	add	r2, r3
 800afa6:	893b      	ldrh	r3, [r7, #8]
 800afa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb8:	b29b      	uxth	r3, r3
 800afba:	8013      	strh	r3, [r2, #0]
 800afbc:	e192      	b.n	800b2e4 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> origin/main
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	827b      	strh	r3, [r7, #18]
 800b3f8:	8a7b      	ldrh	r3, [r7, #18]
 800b3fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d01b      	beq.n	800b43a <USB_DeactivateEndpoint+0xf6>
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b418:	823b      	strh	r3, [r7, #16]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	441a      	add	r2, r3
 800b424:	8a3b      	ldrh	r3, [r7, #16]
 800b426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b42a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b42e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b436:	b29b      	uxth	r3, r3
 800b438:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	b29b      	uxth	r3, r3
 800b448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b44c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b450:	81fb      	strh	r3, [r7, #14]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	441a      	add	r2, r3
 800b45c:	89fb      	ldrh	r3, [r7, #14]
 800b45e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46e:	b29b      	uxth	r3, r3
 800b470:	8013      	strh	r3, [r2, #0]
 800b472:	e14d      	b.n	800b710 <USB_DeactivateEndpoint+0x3cc>
=======
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	827b      	strh	r3, [r7, #18]
 800afcc:	8a7b      	ldrh	r3, [r7, #18]
 800afce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01b      	beq.n	800b00e <USB_DeactivateEndpoint+0xf6>
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afec:	823b      	strh	r3, [r7, #16]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	441a      	add	r2, r3
 800aff8:	8a3b      	ldrh	r3, [r7, #16]
 800affa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800affe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	881b      	ldrh	r3, [r3, #0]
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b024:	81fb      	strh	r3, [r7, #14]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	441a      	add	r2, r3
 800b030:	89fb      	ldrh	r3, [r7, #14]
 800b032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b042:	b29b      	uxth	r3, r3
 800b044:	8013      	strh	r3, [r2, #0]
 800b046:	e14d      	b.n	800b2e4 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> origin/main
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
<<<<<<< HEAD
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f040 80a5 	bne.w	800b5c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	843b      	strh	r3, [r7, #32]
 800b48c:	8c3b      	ldrh	r3, [r7, #32]
 800b48e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d01b      	beq.n	800b4ce <USB_DeactivateEndpoint+0x18a>
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ac:	83fb      	strh	r3, [r7, #30]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	441a      	add	r2, r3
 800b4b8:	8bfb      	ldrh	r3, [r7, #30]
 800b4ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	83bb      	strh	r3, [r7, #28]
 800b4dc:	8bbb      	ldrh	r3, [r7, #28]
 800b4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01b      	beq.n	800b51e <USB_DeactivateEndpoint+0x1da>
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fc:	837b      	strh	r3, [r7, #26]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	441a      	add	r2, r3
 800b508:	8b7b      	ldrh	r3, [r7, #26]
 800b50a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b50e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b534:	833b      	strh	r3, [r7, #24]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	441a      	add	r2, r3
 800b540:	8b3b      	ldrh	r3, [r7, #24]
 800b542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b54a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b54e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b552:	b29b      	uxth	r3, r3
 800b554:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	b29b      	uxth	r3, r3
 800b564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b56c:	82fb      	strh	r3, [r7, #22]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	441a      	add	r2, r3
 800b578:	8afb      	ldrh	r3, [r7, #22]
 800b57a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b57e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a4:	82bb      	strh	r3, [r7, #20]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	441a      	add	r2, r3
 800b5b0:	8abb      	ldrh	r3, [r7, #20]
 800b5b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	8013      	strh	r3, [r2, #0]
 800b5c6:	e0a3      	b.n	800b710 <USB_DeactivateEndpoint+0x3cc>
=======
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	785b      	ldrb	r3, [r3, #1]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 80a5 	bne.w	800b19c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	843b      	strh	r3, [r7, #32]
 800b060:	8c3b      	ldrh	r3, [r7, #32]
 800b062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d01b      	beq.n	800b0a2 <USB_DeactivateEndpoint+0x18a>
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	b29b      	uxth	r3, r3
 800b078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b080:	83fb      	strh	r3, [r7, #30]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	441a      	add	r2, r3
 800b08c:	8bfb      	ldrh	r3, [r7, #30]
 800b08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	83bb      	strh	r3, [r7, #28]
 800b0b0:	8bbb      	ldrh	r3, [r7, #28]
 800b0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d01b      	beq.n	800b0f2 <USB_DeactivateEndpoint+0x1da>
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0d0:	837b      	strh	r3, [r7, #26]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	441a      	add	r2, r3
 800b0dc:	8b7b      	ldrh	r3, [r7, #26]
 800b0de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b108:	833b      	strh	r3, [r7, #24]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	441a      	add	r2, r3
 800b114:	8b3b      	ldrh	r3, [r7, #24]
 800b116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b11a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b126:	b29b      	uxth	r3, r3
 800b128:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	b29b      	uxth	r3, r3
 800b138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b13c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b140:	82fb      	strh	r3, [r7, #22]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	441a      	add	r2, r3
 800b14c:	8afb      	ldrh	r3, [r7, #22]
 800b14e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15e:	b29b      	uxth	r3, r3
 800b160:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b178:	82bb      	strh	r3, [r7, #20]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	441a      	add	r2, r3
 800b184:	8abb      	ldrh	r3, [r7, #20]
 800b186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b18a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b196:	b29b      	uxth	r3, r3
 800b198:	8013      	strh	r3, [r2, #0]
 800b19a:	e0a3      	b.n	800b2e4 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> origin/main
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b5d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01b      	beq.n	800b618 <USB_DeactivateEndpoint+0x2d4>
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	441a      	add	r2, r3
 800b602:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b60c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b614:	b29b      	uxth	r3, r3
 800b616:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	881b      	ldrh	r3, [r3, #0]
 800b624:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b626:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01b      	beq.n	800b668 <USB_DeactivateEndpoint+0x324>
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b646:	853b      	strh	r3, [r7, #40]	; 0x28
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	441a      	add	r2, r3
 800b652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b65c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b664:	b29b      	uxth	r3, r3
 800b666:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	b29b      	uxth	r3, r3
 800b676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	441a      	add	r2, r3
 800b68a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b68c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	441a      	add	r2, r3
 800b6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ee:	847b      	strh	r3, [r7, #34]	; 0x22
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	441a      	add	r2, r3
 800b6fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	8013      	strh	r3, [r2, #0]
=======
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b1aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01b      	beq.n	800b1ec <USB_DeactivateEndpoint+0x2d4>
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	441a      	add	r2, r3
 800b1d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b1fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01b      	beq.n	800b23c <USB_DeactivateEndpoint+0x324>
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	b29b      	uxth	r3, r3
 800b212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b21a:	853b      	strh	r3, [r7, #40]	; 0x28
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	441a      	add	r2, r3
 800b226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b22c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b238:	b29b      	uxth	r3, r3
 800b23a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b252:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	441a      	add	r2, r3
 800b25e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b270:	b29b      	uxth	r3, r3
 800b272:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29b      	uxth	r3, r3
 800b282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b28a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	441a      	add	r2, r3
 800b296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	441a      	add	r2, r3
 800b2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< HEAD
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3734      	adds	r7, #52	; 0x34
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USB_EPStartXfer>:
=======
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3734      	adds	r7, #52	; 0x34
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <USB_EPStartXfer>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800b71e:	b580      	push	{r7, lr}
 800b720:	b0c2      	sub	sp, #264	; 0x108
 800b722:	af00      	add	r7, sp, #0
 800b724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b72c:	6018      	str	r0, [r3, #0]
 800b72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b736:	6019      	str	r1, [r3, #0]
=======
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b0c2      	sub	sp, #264	; 0x108
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b300:	6018      	str	r0, [r3, #0]
 800b302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30a:	6019      	str	r1, [r3, #0]
>>>>>>> origin/main
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	785b      	ldrb	r3, [r3, #1]
 800b744:	2b01      	cmp	r3, #1
 800b746:	f040 867b 	bne.w	800c440 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699a      	ldr	r2, [r3, #24]
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	429a      	cmp	r2, r3
 800b764:	d908      	bls.n	800b778 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b776:	e007      	b.n	800b788 <USB_EPStartXfer+0x6a>
=======
 800b30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	785b      	ldrb	r3, [r3, #1]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	f040 867b 	bne.w	800c014 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	699a      	ldr	r2, [r3, #24]
 800b32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	429a      	cmp	r2, r3
 800b338:	d908      	bls.n	800b34c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b34a:	e007      	b.n	800b35c <USB_EPStartXfer+0x6a>
>>>>>>> origin/main
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< HEAD
 800b778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
=======
 800b34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
>>>>>>> origin/main
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800b788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	7b1b      	ldrb	r3, [r3, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d13a      	bne.n	800b80e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6959      	ldr	r1, [r3, #20]
 800b7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	88da      	ldrh	r2, [r3, #6]
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7be:	6800      	ldr	r0, [r0, #0]
 800b7c0:	f001 fc3e 	bl	800d040 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	613b      	str	r3, [r7, #16]
 800b7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	613b      	str	r3, [r7, #16]
 800b7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	00da      	lsls	r2, r3, #3
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	801a      	strh	r2, [r3, #0]
 800b80a:	f000 bde3 	b.w	800c3d4 <USB_EPStartXfer+0xcb6>
=======
 800b35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	7b1b      	ldrb	r3, [r3, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d13a      	bne.n	800b3e2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6959      	ldr	r1, [r3, #20]
 800b378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	88da      	ldrh	r2, [r3, #6]
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b38e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b392:	6800      	ldr	r0, [r0, #0]
 800b394:	f001 fc3e 	bl	800cc14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	613b      	str	r3, [r7, #16]
 800b3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	00da      	lsls	r2, r3, #3
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	801a      	strh	r2, [r3, #0]
 800b3de:	f000 bde3 	b.w	800bfa8 <USB_EPStartXfer+0xcb6>
>>>>>>> origin/main
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800b80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	78db      	ldrb	r3, [r3, #3]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	f040 843a 	bne.w	800c094 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6a1a      	ldr	r2, [r3, #32]
 800b82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	429a      	cmp	r2, r3
 800b83a:	f240 83b7 	bls.w	800bfac <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b864:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	441a      	add	r2, r3
 800b882:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b88a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b88e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b896:	b29b      	uxth	r3, r3
 800b898:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6a1a      	ldr	r2, [r3, #32]
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8aa:	1ad2      	subs	r2, r2, r3
 800b8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 81b3 	beq.w	800bc46 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d16d      	bne.n	800b9d8 <USB_EPStartXfer+0x2ba>
 800b8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28
 800b908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b916:	b29b      	uxth	r3, r3
 800b918:	461a      	mov	r2, r3
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	4413      	add	r3, r2
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	00da      	lsls	r2, r3, #3
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	4413      	add	r3, r2
 800b932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b936:	627b      	str	r3, [r7, #36]	; 0x24
 800b938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93c:	2b3e      	cmp	r3, #62	; 0x3e
 800b93e:	d91c      	bls.n	800b97a <USB_EPStartXfer+0x25c>
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	095b      	lsrs	r3, r3, #5
 800b946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <USB_EPStartXfer+0x242>
 800b956:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b95a:	3b01      	subs	r3, #1
 800b95c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b964:	b29b      	uxth	r3, r3
 800b966:	029b      	lsls	r3, r3, #10
 800b968:	b29b      	uxth	r3, r3
 800b96a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b96e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b972:	b29a      	uxth	r2, r3
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	801a      	strh	r2, [r3, #0]
 800b978:	e053      	b.n	800ba22 <USB_EPStartXfer+0x304>
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d112      	bne.n	800b9a8 <USB_EPStartXfer+0x28a>
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	b29b      	uxth	r3, r3
 800b988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	b29b      	uxth	r3, r3
 800b998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b99c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	801a      	strh	r2, [r3, #0]
 800b9a6:	e03c      	b.n	800ba22 <USB_EPStartXfer+0x304>
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ac:	085b      	lsrs	r3, r3, #1
 800b9ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d004      	beq.n	800b9c8 <USB_EPStartXfer+0x2aa>
 800b9be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b9c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	029b      	lsls	r3, r3, #10
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	e024      	b.n	800ba22 <USB_EPStartXfer+0x304>
 800b9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d11c      	bne.n	800ba22 <USB_EPStartXfer+0x304>
 800b9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	4413      	add	r3, r2
 800b9fe:	633b      	str	r3, [r7, #48]	; 0x30
 800ba00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	00da      	lsls	r2, r3, #3
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	4413      	add	r3, r2
 800ba12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	895b      	ldrh	r3, [r3, #10]
 800ba2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6959      	ldr	r1, [r3, #20]
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba50:	6800      	ldr	r0, [r0, #0]
 800ba52:	f001 faf5 	bl	800d040 <USB_WritePMA>
            ep->xfer_buff += len;
 800ba56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	695a      	ldr	r2, [r3, #20]
 800ba62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba66:	441a      	add	r2, r3
 800ba68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6a1a      	ldr	r2, [r3, #32]
 800ba80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d90f      	bls.n	800bab0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800ba90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6a1a      	ldr	r2, [r3, #32]
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	1ad2      	subs	r2, r2, r3
 800baa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	621a      	str	r2, [r3, #32]
 800baae:	e00e      	b.n	800bace <USB_EPStartXfer+0x3b0>
=======
 800b3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	78db      	ldrb	r3, [r3, #3]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	f040 843a 	bne.w	800bc68 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6a1a      	ldr	r2, [r3, #32]
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	f240 83b7 	bls.w	800bb80 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	b29b      	uxth	r3, r3
 800b430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	441a      	add	r2, r3
 800b456:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b462:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6a1a      	ldr	r2, [r3, #32]
 800b47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47e:	1ad2      	subs	r2, r2, r3
 800b480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 81b3 	beq.w	800b81a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30
 800b4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d16d      	bne.n	800b5ac <USB_EPStartXfer+0x2ba>
 800b4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	4413      	add	r3, r2
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	00da      	lsls	r2, r3, #3
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	4413      	add	r3, r2
 800b506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
 800b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b510:	2b3e      	cmp	r3, #62	; 0x3e
 800b512:	d91c      	bls.n	800b54e <USB_EPStartXfer+0x25c>
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b518:	095b      	lsrs	r3, r3, #5
 800b51a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b522:	f003 031f 	and.w	r3, r3, #31
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <USB_EPStartXfer+0x242>
 800b52a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b52e:	3b01      	subs	r3, #1
 800b530:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b534:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b538:	b29b      	uxth	r3, r3
 800b53a:	029b      	lsls	r3, r3, #10
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b546:	b29a      	uxth	r2, r3
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e053      	b.n	800b5f6 <USB_EPStartXfer+0x304>
 800b54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b552:	2b00      	cmp	r3, #0
 800b554:	d112      	bne.n	800b57c <USB_EPStartXfer+0x28a>
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b560:	b29a      	uxth	r2, r3
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b574:	b29a      	uxth	r2, r3
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	801a      	strh	r2, [r3, #0]
 800b57a:	e03c      	b.n	800b5f6 <USB_EPStartXfer+0x304>
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	085b      	lsrs	r3, r3, #1
 800b582:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <USB_EPStartXfer+0x2aa>
 800b592:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b596:	3301      	adds	r3, #1
 800b598:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b59c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	029b      	lsls	r3, r3, #10
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	e024      	b.n	800b5f6 <USB_EPStartXfer+0x304>
 800b5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	785b      	ldrb	r3, [r3, #1]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d11c      	bne.n	800b5f6 <USB_EPStartXfer+0x304>
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	4413      	add	r3, r2
 800b5d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	00da      	lsls	r2, r3, #3
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	895b      	ldrh	r3, [r3, #10]
 800b602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6959      	ldr	r1, [r3, #20]
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	b29b      	uxth	r3, r3
 800b618:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b61c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b624:	6800      	ldr	r0, [r0, #0]
 800b626:	f001 faf5 	bl	800cc14 <USB_WritePMA>
            ep->xfer_buff += len;
 800b62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	695a      	ldr	r2, [r3, #20]
 800b636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63a:	441a      	add	r2, r3
 800b63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6a1a      	ldr	r2, [r3, #32]
 800b654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	429a      	cmp	r2, r3
 800b662:	d90f      	bls.n	800b684 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6a1a      	ldr	r2, [r3, #32]
 800b670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	621a      	str	r2, [r3, #32]
 800b682:	e00e      	b.n	800b6a2 <USB_EPStartXfer+0x3b0>
>>>>>>> origin/main
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 800bab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	621a      	str	r2, [r3, #32]
=======
 800b684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	621a      	str	r2, [r3, #32]
>>>>>>> origin/main
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800bace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	785b      	ldrb	r3, [r3, #1]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d16d      	bne.n	800bbba <USB_EPStartXfer+0x49c>
 800bade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	461a      	mov	r2, r3
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	4413      	add	r3, r2
 800bb00:	61bb      	str	r3, [r7, #24]
 800bb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	00da      	lsls	r2, r3, #3
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	4413      	add	r3, r2
 800bb14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1e:	2b3e      	cmp	r3, #62	; 0x3e
 800bb20:	d91c      	bls.n	800bb5c <USB_EPStartXfer+0x43e>
 800bb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb26:	095b      	lsrs	r3, r3, #5
 800bb28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb30:	f003 031f 	and.w	r3, r3, #31
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d104      	bne.n	800bb42 <USB_EPStartXfer+0x424>
 800bb38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	029b      	lsls	r3, r3, #10
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	801a      	strh	r2, [r3, #0]
 800bb5a:	e059      	b.n	800bc10 <USB_EPStartXfer+0x4f2>
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d112      	bne.n	800bb8a <USB_EPStartXfer+0x46c>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	801a      	strh	r2, [r3, #0]
 800bb88:	e042      	b.n	800bc10 <USB_EPStartXfer+0x4f2>
 800bb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8e:	085b      	lsrs	r3, r3, #1
 800bb90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <USB_EPStartXfer+0x48c>
 800bba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bba4:	3301      	adds	r3, #1
 800bba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bbaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	029b      	lsls	r3, r3, #10
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	e02a      	b.n	800bc10 <USB_EPStartXfer+0x4f2>
 800bbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	785b      	ldrb	r3, [r3, #1]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d122      	bne.n	800bc10 <USB_EPStartXfer+0x4f2>
 800bbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	623b      	str	r3, [r7, #32]
 800bbd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	4413      	add	r3, r2
 800bbec:	623b      	str	r3, [r7, #32]
 800bbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	00da      	lsls	r2, r3, #3
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	891b      	ldrh	r3, [r3, #8]
 800bc1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6959      	ldr	r1, [r3, #20]
 800bc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc3e:	6800      	ldr	r0, [r0, #0]
 800bc40:	f001 f9fe 	bl	800d040 <USB_WritePMA>
 800bc44:	e3c6      	b.n	800c3d4 <USB_EPStartXfer+0xcb6>
=======
 800b6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	785b      	ldrb	r3, [r3, #1]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d16d      	bne.n	800b78e <USB_EPStartXfer+0x49c>
 800b6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	00da      	lsls	r2, r3, #3
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b6f4:	d91c      	bls.n	800b730 <USB_EPStartXfer+0x43e>
 800b6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	f003 031f 	and.w	r3, r3, #31
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d104      	bne.n	800b716 <USB_EPStartXfer+0x424>
 800b70c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b710:	3b01      	subs	r3, #1
 800b712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	029b      	lsls	r3, r3, #10
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b728:	b29a      	uxth	r2, r3
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	801a      	strh	r2, [r3, #0]
 800b72e:	e059      	b.n	800b7e4 <USB_EPStartXfer+0x4f2>
 800b730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b734:	2b00      	cmp	r3, #0
 800b736:	d112      	bne.n	800b75e <USB_EPStartXfer+0x46c>
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b742:	b29a      	uxth	r2, r3
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	801a      	strh	r2, [r3, #0]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b756:	b29a      	uxth	r2, r3
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	801a      	strh	r2, [r3, #0]
 800b75c:	e042      	b.n	800b7e4 <USB_EPStartXfer+0x4f2>
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	085b      	lsrs	r3, r3, #1
 800b764:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	d004      	beq.n	800b77e <USB_EPStartXfer+0x48c>
 800b774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b778:	3301      	adds	r3, #1
 800b77a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b77e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b782:	b29b      	uxth	r3, r3
 800b784:	029b      	lsls	r3, r3, #10
 800b786:	b29a      	uxth	r2, r3
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	801a      	strh	r2, [r3, #0]
 800b78c:	e02a      	b.n	800b7e4 <USB_EPStartXfer+0x4f2>
 800b78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d122      	bne.n	800b7e4 <USB_EPStartXfer+0x4f2>
 800b79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	623b      	str	r3, [r7, #32]
 800b7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	4413      	add	r3, r2
 800b7c0:	623b      	str	r3, [r7, #32]
 800b7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	00da      	lsls	r2, r3, #3
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	891b      	ldrh	r3, [r3, #8]
 800b7f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6959      	ldr	r1, [r3, #20]
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b804:	b29b      	uxth	r3, r3
 800b806:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b80a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b80e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b812:	6800      	ldr	r0, [r0, #0]
 800b814:	f001 f9fe 	bl	800cc14 <USB_WritePMA>
 800b818:	e3c6      	b.n	800bfa8 <USB_EPStartXfer+0xcb6>
>>>>>>> origin/main
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800bc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d16d      	bne.n	800bd32 <USB_EPStartXfer+0x614>
 800bc56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	461a      	mov	r2, r3
 800bc74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc76:	4413      	add	r3, r2
 800bc78:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	00da      	lsls	r2, r3, #3
 800bc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc90:	647b      	str	r3, [r7, #68]	; 0x44
 800bc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc96:	2b3e      	cmp	r3, #62	; 0x3e
 800bc98:	d91c      	bls.n	800bcd4 <USB_EPStartXfer+0x5b6>
 800bc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9e:	095b      	lsrs	r3, r3, #5
 800bca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca8:	f003 031f 	and.w	r3, r3, #31
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <USB_EPStartXfer+0x59c>
 800bcb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bcba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	029b      	lsls	r3, r3, #10
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd0:	801a      	strh	r2, [r3, #0]
 800bcd2:	e059      	b.n	800bd88 <USB_EPStartXfer+0x66a>
 800bcd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d112      	bne.n	800bd02 <USB_EPStartXfer+0x5e4>
 800bcdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcea:	801a      	strh	r2, [r3, #0]
 800bcec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcfe:	801a      	strh	r2, [r3, #0]
 800bd00:	e042      	b.n	800bd88 <USB_EPStartXfer+0x66a>
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd06:	085b      	lsrs	r3, r3, #1
 800bd08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d004      	beq.n	800bd22 <USB_EPStartXfer+0x604>
 800bd18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	029b      	lsls	r3, r3, #10
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd2e:	801a      	strh	r2, [r3, #0]
 800bd30:	e02a      	b.n	800bd88 <USB_EPStartXfer+0x66a>
 800bd32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	785b      	ldrb	r3, [r3, #1]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d122      	bne.n	800bd88 <USB_EPStartXfer+0x66a>
 800bd42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd62:	4413      	add	r3, r2
 800bd64:	653b      	str	r3, [r7, #80]	; 0x50
 800bd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	00da      	lsls	r2, r3, #3
 800bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd76:	4413      	add	r3, r2
 800bd78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	891b      	ldrh	r3, [r3, #8]
 800bd94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	6959      	ldr	r1, [r3, #20]
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bdae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bdb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	f001 f942 	bl	800d040 <USB_WritePMA>
            ep->xfer_buff += len;
 800bdbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	695a      	ldr	r2, [r3, #20]
 800bdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdcc:	441a      	add	r2, r3
 800bdce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6a1a      	ldr	r2, [r3, #32]
 800bde6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d90f      	bls.n	800be16 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800bdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6a1a      	ldr	r2, [r3, #32]
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be06:	1ad2      	subs	r2, r2, r3
 800be08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	621a      	str	r2, [r3, #32]
 800be14:	e00e      	b.n	800be34 <USB_EPStartXfer+0x716>
=======
 800b81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	785b      	ldrb	r3, [r3, #1]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d16d      	bne.n	800b906 <USB_EPStartXfer+0x614>
 800b82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	64bb      	str	r3, [r7, #72]	; 0x48
 800b836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b844:	b29b      	uxth	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b84a:	4413      	add	r3, r2
 800b84c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	00da      	lsls	r2, r3, #3
 800b85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b85e:	4413      	add	r3, r2
 800b860:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b864:	647b      	str	r3, [r7, #68]	; 0x44
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	2b3e      	cmp	r3, #62	; 0x3e
 800b86c:	d91c      	bls.n	800b8a8 <USB_EPStartXfer+0x5b6>
 800b86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b872:	095b      	lsrs	r3, r3, #5
 800b874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87c:	f003 031f 	and.w	r3, r3, #31
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <USB_EPStartXfer+0x59c>
 800b884:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b888:	3b01      	subs	r3, #1
 800b88a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b88e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b892:	b29b      	uxth	r3, r3
 800b894:	029b      	lsls	r3, r3, #10
 800b896:	b29b      	uxth	r3, r3
 800b898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a4:	801a      	strh	r2, [r3, #0]
 800b8a6:	e059      	b.n	800b95c <USB_EPStartXfer+0x66a>
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d112      	bne.n	800b8d6 <USB_EPStartXfer+0x5e4>
 800b8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8be:	801a      	strh	r2, [r3, #0]
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d2:	801a      	strh	r2, [r3, #0]
 800b8d4:	e042      	b.n	800b95c <USB_EPStartXfer+0x66a>
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	085b      	lsrs	r3, r3, #1
 800b8dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <USB_EPStartXfer+0x604>
 800b8ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	029b      	lsls	r3, r3, #10
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b902:	801a      	strh	r2, [r3, #0]
 800b904:	e02a      	b.n	800b95c <USB_EPStartXfer+0x66a>
 800b906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d122      	bne.n	800b95c <USB_EPStartXfer+0x66a>
 800b916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	653b      	str	r3, [r7, #80]	; 0x50
 800b922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b930:	b29b      	uxth	r3, r3
 800b932:	461a      	mov	r2, r3
 800b934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b936:	4413      	add	r3, r2
 800b938:	653b      	str	r3, [r7, #80]	; 0x50
 800b93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	00da      	lsls	r2, r3, #3
 800b948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b94a:	4413      	add	r3, r2
 800b94c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b950:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b956:	b29a      	uxth	r2, r3
 800b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	891b      	ldrh	r3, [r3, #8]
 800b968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6959      	ldr	r1, [r3, #20]
 800b978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b982:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b986:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b98a:	6800      	ldr	r0, [r0, #0]
 800b98c:	f001 f942 	bl	800cc14 <USB_WritePMA>
            ep->xfer_buff += len;
 800b990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	695a      	ldr	r2, [r3, #20]
 800b99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a0:	441a      	add	r2, r3
 800b9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6a1a      	ldr	r2, [r3, #32]
 800b9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d90f      	bls.n	800b9ea <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6a1a      	ldr	r2, [r3, #32]
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	621a      	str	r2, [r3, #32]
 800b9e8:	e00e      	b.n	800ba08 <USB_EPStartXfer+0x716>
>>>>>>> origin/main
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 800be16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800be26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2200      	movs	r2, #0
 800be32:	621a      	str	r2, [r3, #32]
=======
 800b9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2200      	movs	r2, #0
 800ba06:	621a      	str	r2, [r3, #32]
>>>>>>> origin/main
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800be34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	643b      	str	r3, [r7, #64]	; 0x40
 800be40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d16d      	bne.n	800bf2c <USB_EPStartXfer+0x80e>
 800be50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800be5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	461a      	mov	r2, r3
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	4413      	add	r3, r2
 800be72:	63bb      	str	r3, [r7, #56]	; 0x38
 800be74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	00da      	lsls	r2, r3, #3
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	4413      	add	r3, r2
 800be86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be8a:	637b      	str	r3, [r7, #52]	; 0x34
 800be8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be90:	2b3e      	cmp	r3, #62	; 0x3e
 800be92:	d91c      	bls.n	800bece <USB_EPStartXfer+0x7b0>
 800be94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be98:	095b      	lsrs	r3, r3, #5
 800be9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800be9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea2:	f003 031f 	and.w	r3, r3, #31
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d104      	bne.n	800beb4 <USB_EPStartXfer+0x796>
 800beaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beae:	3b01      	subs	r3, #1
 800beb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800beb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb8:	b29b      	uxth	r3, r3
 800beba:	029b      	lsls	r3, r3, #10
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	801a      	strh	r2, [r3, #0]
 800becc:	e053      	b.n	800bf76 <USB_EPStartXfer+0x858>
 800bece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d112      	bne.n	800befc <USB_EPStartXfer+0x7de>
 800bed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	801a      	strh	r2, [r3, #0]
 800bee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	b29b      	uxth	r3, r3
 800beec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef8:	801a      	strh	r2, [r3, #0]
 800befa:	e03c      	b.n	800bf76 <USB_EPStartXfer+0x858>
 800befc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf00:	085b      	lsrs	r3, r3, #1
 800bf02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d004      	beq.n	800bf1c <USB_EPStartXfer+0x7fe>
 800bf12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf16:	3301      	adds	r3, #1
 800bf18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	029b      	lsls	r3, r3, #10
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	e024      	b.n	800bf76 <USB_EPStartXfer+0x858>
 800bf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	785b      	ldrb	r3, [r3, #1]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d11c      	bne.n	800bf76 <USB_EPStartXfer+0x858>
 800bf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf50:	4413      	add	r3, r2
 800bf52:	643b      	str	r3, [r7, #64]	; 0x40
 800bf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	00da      	lsls	r2, r3, #3
 800bf62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf64:	4413      	add	r3, r2
 800bf66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	895b      	ldrh	r3, [r3, #10]
 800bf82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6959      	ldr	r1, [r3, #20]
 800bf92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bfa0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bfa4:	6800      	ldr	r0, [r0, #0]
 800bfa6:	f001 f84b 	bl	800d040 <USB_WritePMA>
 800bfaa:	e213      	b.n	800c3d4 <USB_EPStartXfer+0xcb6>
=======
 800ba08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	643b      	str	r3, [r7, #64]	; 0x40
 800ba14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	785b      	ldrb	r3, [r3, #1]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d16d      	bne.n	800bb00 <USB_EPStartXfer+0x80e>
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	4413      	add	r3, r2
 800ba46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	00da      	lsls	r2, r3, #3
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	4413      	add	r3, r2
 800ba5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	2b3e      	cmp	r3, #62	; 0x3e
 800ba66:	d91c      	bls.n	800baa2 <USB_EPStartXfer+0x7b0>
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	f003 031f 	and.w	r3, r3, #31
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d104      	bne.n	800ba88 <USB_EPStartXfer+0x796>
 800ba7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba82:	3b01      	subs	r3, #1
 800ba84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	029b      	lsls	r3, r3, #10
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9e:	801a      	strh	r2, [r3, #0]
 800baa0:	e053      	b.n	800bb4a <USB_EPStartXfer+0x858>
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d112      	bne.n	800bad0 <USB_EPStartXfer+0x7de>
 800baaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	801a      	strh	r2, [r3, #0]
 800baba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bac8:	b29a      	uxth	r2, r3
 800baca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bacc:	801a      	strh	r2, [r3, #0]
 800bace:	e03c      	b.n	800bb4a <USB_EPStartXfer+0x858>
 800bad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad4:	085b      	lsrs	r3, r3, #1
 800bad6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d004      	beq.n	800baf0 <USB_EPStartXfer+0x7fe>
 800bae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baea:	3301      	adds	r3, #1
 800baec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	029b      	lsls	r3, r3, #10
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafc:	801a      	strh	r2, [r3, #0]
 800bafe:	e024      	b.n	800bb4a <USB_EPStartXfer+0x858>
 800bb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d11c      	bne.n	800bb4a <USB_EPStartXfer+0x858>
 800bb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb24:	4413      	add	r3, r2
 800bb26:	643b      	str	r3, [r7, #64]	; 0x40
 800bb28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	00da      	lsls	r2, r3, #3
 800bb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb38:	4413      	add	r3, r2
 800bb3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	895b      	ldrh	r3, [r3, #10]
 800bb56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6959      	ldr	r1, [r3, #20]
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb78:	6800      	ldr	r0, [r0, #0]
 800bb7a:	f001 f84b 	bl	800cc14 <USB_WritePMA>
 800bb7e:	e213      	b.n	800bfa8 <USB_EPStartXfer+0xcb6>
>>>>>>> origin/main
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 800bfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bfbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bfde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	441a      	add	r2, r3
 800c000:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c00c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c014:	b29b      	uxth	r3, r3
 800c016:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c032:	b29b      	uxth	r3, r3
 800c034:	461a      	mov	r2, r3
 800c036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c038:	4413      	add	r3, r2
 800c03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	00da      	lsls	r2, r3, #3
 800c04a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04c:	4413      	add	r3, r2
 800c04e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c052:	65bb      	str	r3, [r7, #88]	; 0x58
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c058:	b29a      	uxth	r2, r3
 800c05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c05c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	891b      	ldrh	r3, [r3, #8]
 800c06a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6959      	ldr	r1, [r3, #20]
 800c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c07e:	b29b      	uxth	r3, r3
 800c080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c084:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c088:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c08c:	6800      	ldr	r0, [r0, #0]
 800c08e:	f000 ffd7 	bl	800d040 <USB_WritePMA>
 800c092:	e19f      	b.n	800c3d4 <USB_EPStartXfer+0xcb6>
=======
 800bb80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	441a      	add	r2, r3
 800bbd4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bbd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc0c:	4413      	add	r3, r2
 800bc0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	00da      	lsls	r2, r3, #3
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc20:	4413      	add	r3, r2
 800bc22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc26:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	891b      	ldrh	r3, [r3, #8]
 800bc3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6959      	ldr	r1, [r3, #20]
 800bc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc60:	6800      	ldr	r0, [r0, #0]
 800bc62:	f000 ffd7 	bl	800cc14 <USB_WritePMA>
 800bc66:	e19f      	b.n	800bfa8 <USB_EPStartXfer+0xcb6>
>>>>>>> origin/main
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
<<<<<<< HEAD
 800c094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a4:	1ad2      	subs	r2, r2, r3
 800c0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 80bc 	beq.w	800c252 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	673b      	str	r3, [r7, #112]	; 0x70
 800c0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	785b      	ldrb	r3, [r3, #1]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d16d      	bne.n	800c1d2 <USB_EPStartXfer+0xab4>
 800c0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	66bb      	str	r3, [r7, #104]	; 0x68
 800c102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c110:	b29b      	uxth	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c116:	4413      	add	r3, r2
 800c118:	66bb      	str	r3, [r7, #104]	; 0x68
 800c11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	00da      	lsls	r2, r3, #3
 800c128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c12a:	4413      	add	r3, r2
 800c12c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c130:	667b      	str	r3, [r7, #100]	; 0x64
 800c132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c136:	2b3e      	cmp	r3, #62	; 0x3e
 800c138:	d91c      	bls.n	800c174 <USB_EPStartXfer+0xa56>
 800c13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13e:	095b      	lsrs	r3, r3, #5
 800c140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c148:	f003 031f 	and.w	r3, r3, #31
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d104      	bne.n	800c15a <USB_EPStartXfer+0xa3c>
 800c150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c154:	3b01      	subs	r3, #1
 800c156:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c15a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c15e:	b29b      	uxth	r3, r3
 800c160:	029b      	lsls	r3, r3, #10
 800c162:	b29b      	uxth	r3, r3
 800c164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c170:	801a      	strh	r2, [r3, #0]
 800c172:	e053      	b.n	800c21c <USB_EPStartXfer+0xafe>
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d112      	bne.n	800c1a2 <USB_EPStartXfer+0xa84>
 800c17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	b29b      	uxth	r3, r3
 800c182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c186:	b29a      	uxth	r2, r3
 800c188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c18a:	801a      	strh	r2, [r3, #0]
 800c18c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	b29b      	uxth	r3, r3
 800c192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c19e:	801a      	strh	r2, [r3, #0]
 800c1a0:	e03c      	b.n	800c21c <USB_EPStartXfer+0xafe>
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a6:	085b      	lsrs	r3, r3, #1
 800c1a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <USB_EPStartXfer+0xaa4>
 800c1b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c1c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	029b      	lsls	r3, r3, #10
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ce:	801a      	strh	r2, [r3, #0]
 800c1d0:	e024      	b.n	800c21c <USB_EPStartXfer+0xafe>
 800c1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	785b      	ldrb	r3, [r3, #1]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d11c      	bne.n	800c21c <USB_EPStartXfer+0xafe>
 800c1e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1f6:	4413      	add	r3, r2
 800c1f8:	673b      	str	r3, [r7, #112]	; 0x70
 800c1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	00da      	lsls	r2, r3, #3
 800c208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c20a:	4413      	add	r3, r2
 800c20c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c210:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c216:	b29a      	uxth	r2, r3
 800c218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c21a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6959      	ldr	r1, [r3, #20]
 800c238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c242:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c246:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	f000 fef8 	bl	800d040 <USB_WritePMA>
 800c250:	e0c0      	b.n	800c3d4 <USB_EPStartXfer+0xcb6>
=======
 800bc68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6a1a      	ldr	r2, [r3, #32]
 800bc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc78:	1ad2      	subs	r2, r2, r3
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 80bc 	beq.w	800be26 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	673b      	str	r3, [r7, #112]	; 0x70
 800bcba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d16d      	bne.n	800bda6 <USB_EPStartXfer+0xab4>
 800bcca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcea:	4413      	add	r3, r2
 800bcec:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	00da      	lsls	r2, r3, #3
 800bcfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcfe:	4413      	add	r3, r2
 800bd00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd04:	667b      	str	r3, [r7, #100]	; 0x64
 800bd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0a:	2b3e      	cmp	r3, #62	; 0x3e
 800bd0c:	d91c      	bls.n	800bd48 <USB_EPStartXfer+0xa56>
 800bd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd12:	095b      	lsrs	r3, r3, #5
 800bd14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	f003 031f 	and.w	r3, r3, #31
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d104      	bne.n	800bd2e <USB_EPStartXfer+0xa3c>
 800bd24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	029b      	lsls	r3, r3, #10
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd44:	801a      	strh	r2, [r3, #0]
 800bd46:	e053      	b.n	800bdf0 <USB_EPStartXfer+0xafe>
 800bd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d112      	bne.n	800bd76 <USB_EPStartXfer+0xa84>
 800bd50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd5e:	801a      	strh	r2, [r3, #0]
 800bd60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd72:	801a      	strh	r2, [r3, #0]
 800bd74:	e03c      	b.n	800bdf0 <USB_EPStartXfer+0xafe>
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <USB_EPStartXfer+0xaa4>
 800bd8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd90:	3301      	adds	r3, #1
 800bd92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	029b      	lsls	r3, r3, #10
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bda2:	801a      	strh	r2, [r3, #0]
 800bda4:	e024      	b.n	800bdf0 <USB_EPStartXfer+0xafe>
 800bda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d11c      	bne.n	800bdf0 <USB_EPStartXfer+0xafe>
 800bdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdca:	4413      	add	r3, r2
 800bdcc:	673b      	str	r3, [r7, #112]	; 0x70
 800bdce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	00da      	lsls	r2, r3, #3
 800bddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdde:	4413      	add	r3, r2
 800bde0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bde4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bdf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	895b      	ldrh	r3, [r3, #10]
 800bdfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6959      	ldr	r1, [r3, #20]
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	b29b      	uxth	r3, r3
 800be12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be1e:	6800      	ldr	r0, [r0, #0]
 800be20:	f000 fef8 	bl	800cc14 <USB_WritePMA>
 800be24:	e0c0      	b.n	800bfa8 <USB_EPStartXfer+0xcb6>
>>>>>>> origin/main
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800c252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d16d      	bne.n	800c33e <USB_EPStartXfer+0xc20>
 800c262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	461a      	mov	r2, r3
 800c280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c282:	4413      	add	r3, r2
 800c284:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	00da      	lsls	r2, r3, #3
 800c294:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c296:	4413      	add	r3, r2
 800c298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c29c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a2:	2b3e      	cmp	r3, #62	; 0x3e
 800c2a4:	d91c      	bls.n	800c2e0 <USB_EPStartXfer+0xbc2>
 800c2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b4:	f003 031f 	and.w	r3, r3, #31
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d104      	bne.n	800c2c6 <USB_EPStartXfer+0xba8>
 800c2bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	029b      	lsls	r3, r3, #10
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2dc:	801a      	strh	r2, [r3, #0]
 800c2de:	e05f      	b.n	800c3a0 <USB_EPStartXfer+0xc82>
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d112      	bne.n	800c30e <USB_EPStartXfer+0xbf0>
 800c2e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f6:	801a      	strh	r2, [r3, #0]
 800c2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c306:	b29a      	uxth	r2, r3
 800c308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c30a:	801a      	strh	r2, [r3, #0]
 800c30c:	e048      	b.n	800c3a0 <USB_EPStartXfer+0xc82>
 800c30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c312:	085b      	lsrs	r3, r3, #1
 800c314:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d004      	beq.n	800c32e <USB_EPStartXfer+0xc10>
 800c324:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c328:	3301      	adds	r3, #1
 800c32a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c32e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c332:	b29b      	uxth	r3, r3
 800c334:	029b      	lsls	r3, r3, #10
 800c336:	b29a      	uxth	r2, r3
 800c338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c33a:	801a      	strh	r2, [r3, #0]
 800c33c:	e030      	b.n	800c3a0 <USB_EPStartXfer+0xc82>
 800c33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d128      	bne.n	800c3a0 <USB_EPStartXfer+0xc82>
 800c34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	461a      	mov	r2, r3
 800c36e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c372:	4413      	add	r3, r2
 800c374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	00da      	lsls	r2, r3, #3
 800c386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c38a:	4413      	add	r3, r2
 800c38c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c398:	b29a      	uxth	r2, r3
 800c39a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c39e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	891b      	ldrh	r3, [r3, #8]
 800c3ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6959      	ldr	r1, [r3, #20]
 800c3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c3c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c3ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c3ce:	6800      	ldr	r0, [r0, #0]
 800c3d0:	f000 fe36 	bl	800d040 <USB_WritePMA>
=======
 800be26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	785b      	ldrb	r3, [r3, #1]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d16d      	bne.n	800bf12 <USB_EPStartXfer+0xc20>
 800be36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be50:	b29b      	uxth	r3, r3
 800be52:	461a      	mov	r2, r3
 800be54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be56:	4413      	add	r3, r2
 800be58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	00da      	lsls	r2, r3, #3
 800be68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be6a:	4413      	add	r3, r2
 800be6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be70:	67bb      	str	r3, [r7, #120]	; 0x78
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	2b3e      	cmp	r3, #62	; 0x3e
 800be78:	d91c      	bls.n	800beb4 <USB_EPStartXfer+0xbc2>
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be88:	f003 031f 	and.w	r3, r3, #31
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <USB_EPStartXfer+0xba8>
 800be90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be94:	3b01      	subs	r3, #1
 800be96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	029b      	lsls	r3, r3, #10
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beac:	b29a      	uxth	r2, r3
 800beae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beb0:	801a      	strh	r2, [r3, #0]
 800beb2:	e05f      	b.n	800bf74 <USB_EPStartXfer+0xc82>
 800beb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d112      	bne.n	800bee2 <USB_EPStartXfer+0xbf0>
 800bebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beca:	801a      	strh	r2, [r3, #0]
 800becc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beda:	b29a      	uxth	r2, r3
 800bedc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bede:	801a      	strh	r2, [r3, #0]
 800bee0:	e048      	b.n	800bf74 <USB_EPStartXfer+0xc82>
 800bee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800beec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d004      	beq.n	800bf02 <USB_EPStartXfer+0xc10>
 800bef8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800befc:	3301      	adds	r3, #1
 800befe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	029b      	lsls	r3, r3, #10
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf0e:	801a      	strh	r2, [r3, #0]
 800bf10:	e030      	b.n	800bf74 <USB_EPStartXfer+0xc82>
 800bf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	785b      	ldrb	r3, [r3, #1]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d128      	bne.n	800bf74 <USB_EPStartXfer+0xc82>
 800bf22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	461a      	mov	r2, r3
 800bf42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf46:	4413      	add	r3, r2
 800bf48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	00da      	lsls	r2, r3, #3
 800bf5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf5e:	4413      	add	r3, r2
 800bf60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6959      	ldr	r1, [r3, #20]
 800bf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bfa2:	6800      	ldr	r0, [r0, #0]
 800bfa4:	f000 fe36 	bl	800cc14 <USB_WritePMA>
>>>>>>> origin/main
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 800c3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	881b      	ldrh	r3, [r3, #0]
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3fa:	817b      	strh	r3, [r7, #10]
 800c3fc:	897b      	ldrh	r3, [r7, #10]
 800c3fe:	f083 0310 	eor.w	r3, r3, #16
 800c402:	817b      	strh	r3, [r7, #10]
 800c404:	897b      	ldrh	r3, [r7, #10]
 800c406:	f083 0320 	eor.w	r3, r3, #32
 800c40a:	817b      	strh	r3, [r7, #10]
 800c40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	441a      	add	r2, r3
 800c426:	897b      	ldrh	r3, [r7, #10]
 800c428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c42c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c438:	b29b      	uxth	r3, r3
 800c43a:	8013      	strh	r3, [r2, #0]
 800c43c:	f000 bc9f 	b.w	800cd7e <USB_EPStartXfer+0x1660>
=======
 800bfa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfce:	817b      	strh	r3, [r7, #10]
 800bfd0:	897b      	ldrh	r3, [r7, #10]
 800bfd2:	f083 0310 	eor.w	r3, r3, #16
 800bfd6:	817b      	strh	r3, [r7, #10]
 800bfd8:	897b      	ldrh	r3, [r7, #10]
 800bfda:	f083 0320 	eor.w	r3, r3, #32
 800bfde:	817b      	strh	r3, [r7, #10]
 800bfe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	441a      	add	r2, r3
 800bffa:	897b      	ldrh	r3, [r7, #10]
 800bffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	8013      	strh	r3, [r2, #0]
 800c010:	f000 bc9f 	b.w	800c952 <USB_EPStartXfer+0x1660>
>>>>>>> origin/main
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 800c440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	7b1b      	ldrb	r3, [r3, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 80ae 	bne.w	800c5ae <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d917      	bls.n	800c49e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800c46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	699a      	ldr	r2, [r3, #24]
 800c48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	619a      	str	r2, [r3, #24]
 800c49c:	e00e      	b.n	800c4bc <USB_EPStartXfer+0xd9e>
=======
 800c014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	7b1b      	ldrb	r3, [r3, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f040 80ae 	bne.w	800c182 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d917      	bls.n	800c072 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800c042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	699a      	ldr	r2, [r3, #24]
 800c05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c062:	1ad2      	subs	r2, r2, r3
 800c064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	619a      	str	r2, [r3, #24]
 800c070:	e00e      	b.n	800c090 <USB_EPStartXfer+0xd9e>
>>>>>>> origin/main
      }
      else
      {
        len = ep->xfer_len;
<<<<<<< HEAD
 800c49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	00da      	lsls	r2, r3, #3
 800c4f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c506:	2b3e      	cmp	r3, #62	; 0x3e
 800c508:	d91d      	bls.n	800c546 <USB_EPStartXfer+0xe28>
 800c50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50e:	095b      	lsrs	r3, r3, #5
 800c510:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <USB_EPStartXfer+0xe0c>
 800c520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c524:	3b01      	subs	r3, #1
 800c526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c52a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c52e:	b29b      	uxth	r3, r3
 800c530:	029b      	lsls	r3, r3, #10
 800c532:	b29b      	uxth	r3, r3
 800c534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c542:	801a      	strh	r2, [r3, #0]
 800c544:	e3e1      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
 800c546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d116      	bne.n	800c57c <USB_EPStartXfer+0xe5e>
 800c54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	b29b      	uxth	r3, r3
 800c556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c560:	801a      	strh	r2, [r3, #0]
 800c562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c56e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c572:	b29a      	uxth	r2, r3
 800c574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c578:	801a      	strh	r2, [r3, #0]
 800c57a:	e3c6      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <USB_EPStartXfer+0xe7e>
 800c592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c596:	3301      	adds	r3, #1
 800c598:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c59c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	029b      	lsls	r3, r3, #10
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5aa:	801a      	strh	r2, [r3, #0]
 800c5ac:	e3ad      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
=======
 800c072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2200      	movs	r2, #0
 800c08e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	00da      	lsls	r2, r3, #3
 800c0c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0da:	2b3e      	cmp	r3, #62	; 0x3e
 800c0dc:	d91d      	bls.n	800c11a <USB_EPStartXfer+0xe28>
 800c0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e2:	095b      	lsrs	r3, r3, #5
 800c0e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	f003 031f 	and.w	r3, r3, #31
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <USB_EPStartXfer+0xe0c>
 800c0f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c102:	b29b      	uxth	r3, r3
 800c104:	029b      	lsls	r3, r3, #10
 800c106:	b29b      	uxth	r3, r3
 800c108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c10c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c110:	b29a      	uxth	r2, r3
 800c112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c116:	801a      	strh	r2, [r3, #0]
 800c118:	e3e1      	b.n	800c8de <USB_EPStartXfer+0x15ec>
 800c11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d116      	bne.n	800c150 <USB_EPStartXfer+0xe5e>
 800c122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c12e:	b29a      	uxth	r2, r3
 800c130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c134:	801a      	strh	r2, [r3, #0]
 800c136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c146:	b29a      	uxth	r2, r3
 800c148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c14c:	801a      	strh	r2, [r3, #0]
 800c14e:	e3c6      	b.n	800c8de <USB_EPStartXfer+0x15ec>
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c154:	085b      	lsrs	r3, r3, #1
 800c156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <USB_EPStartXfer+0xe7e>
 800c166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c16a:	3301      	adds	r3, #1
 800c16c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c174:	b29b      	uxth	r3, r3
 800c176:	029b      	lsls	r3, r3, #10
 800c178:	b29a      	uxth	r2, r3
 800c17a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c17e:	801a      	strh	r2, [r3, #0]
 800c180:	e3ad      	b.n	800c8de <USB_EPStartXfer+0x15ec>
>>>>>>> origin/main
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 800c5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	78db      	ldrb	r3, [r3, #3]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	f040 8200 	bne.w	800c9c0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f040 8091 	bne.w	800c6f4 <USB_EPStartXfer+0xfd6>
 800c5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	00da      	lsls	r2, r3, #3
 800c60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c60e:	4413      	add	r3, r2
 800c610:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	2b3e      	cmp	r3, #62	; 0x3e
 800c626:	d925      	bls.n	800c674 <USB_EPStartXfer+0xf56>
 800c628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	095b      	lsrs	r3, r3, #5
 800c636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	f003 031f 	and.w	r3, r3, #31
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d104      	bne.n	800c658 <USB_EPStartXfer+0xf3a>
 800c64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c652:	3b01      	subs	r3, #1
 800c654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	029b      	lsls	r3, r3, #10
 800c660:	b29b      	uxth	r3, r3
 800c662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	e074      	b.n	800c75e <USB_EPStartXfer+0x1040>
 800c674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d116      	bne.n	800c6b2 <USB_EPStartXfer+0xf94>
 800c684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c690:	b29a      	uxth	r2, r3
 800c692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c696:	801a      	strh	r2, [r3, #0]
 800c698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6ae:	801a      	strh	r2, [r3, #0]
 800c6b0:	e055      	b.n	800c75e <USB_EPStartXfer+0x1040>
 800c6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	085b      	lsrs	r3, r3, #1
 800c6c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <USB_EPStartXfer+0xfc4>
 800c6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	029b      	lsls	r3, r3, #10
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6f0:	801a      	strh	r2, [r3, #0]
 800c6f2:	e034      	b.n	800c75e <USB_EPStartXfer+0x1040>
 800c6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	785b      	ldrb	r3, [r3, #1]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d12c      	bne.n	800c75e <USB_EPStartXfer+0x1040>
 800c704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c720:	b29b      	uxth	r3, r3
 800c722:	461a      	mov	r2, r3
 800c724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c728:	4413      	add	r3, r2
 800c72a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	00da      	lsls	r2, r3, #3
 800c73c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c740:	4413      	add	r3, r2
 800c742:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	b29a      	uxth	r2, r3
 800c758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c75c:	801a      	strh	r2, [r3, #0]
 800c75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 8091 	bne.w	800c8a0 <USB_EPStartXfer+0x1182>
 800c77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	461a      	mov	r2, r3
 800c79e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	00da      	lsls	r2, r3, #3
 800c7b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	2b3e      	cmp	r3, #62	; 0x3e
 800c7d2:	d925      	bls.n	800c820 <USB_EPStartXfer+0x1102>
 800c7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	095b      	lsrs	r3, r3, #5
 800c7e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	f003 031f 	and.w	r3, r3, #31
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d104      	bne.n	800c804 <USB_EPStartXfer+0x10e6>
 800c7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7fe:	3b01      	subs	r3, #1
 800c800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c808:	b29b      	uxth	r3, r3
 800c80a:	029b      	lsls	r3, r3, #10
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c816:	b29a      	uxth	r2, r3
 800c818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c81c:	801a      	strh	r2, [r3, #0]
 800c81e:	e06d      	b.n	800c8fc <USB_EPStartXfer+0x11de>
 800c820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d116      	bne.n	800c85e <USB_EPStartXfer+0x1140>
 800c830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	b29b      	uxth	r3, r3
 800c838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c842:	801a      	strh	r2, [r3, #0]
 800c844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c854:	b29a      	uxth	r2, r3
 800c856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c85a:	801a      	strh	r2, [r3, #0]
 800c85c:	e04e      	b.n	800c8fc <USB_EPStartXfer+0x11de>
 800c85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	085b      	lsrs	r3, r3, #1
 800c86c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <USB_EPStartXfer+0x1170>
 800c884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c888:	3301      	adds	r3, #1
 800c88a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c892:	b29b      	uxth	r3, r3
 800c894:	029b      	lsls	r3, r3, #10
 800c896:	b29a      	uxth	r2, r3
 800c898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c89c:	801a      	strh	r2, [r3, #0]
 800c89e:	e02d      	b.n	800c8fc <USB_EPStartXfer+0x11de>
 800c8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d125      	bne.n	800c8fc <USB_EPStartXfer+0x11de>
 800c8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	00da      	lsls	r2, r3, #3
 800c8da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8de:	4413      	add	r3, r2
 800c8e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 81fe 	beq.w	800cd0a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c92e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <USB_EPStartXfer+0x1228>
 800c93a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10d      	bne.n	800c962 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c946:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c94a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f040 81db 	bne.w	800cd0a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c954:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f040 81d4 	bne.w	800cd0a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c988:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	441a      	add	r2, r3
 800c9a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c9aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	8013      	strh	r3, [r2, #0]
 800c9be:	e1a4      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
=======
 800c182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	78db      	ldrb	r3, [r3, #3]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	f040 8200 	bne.w	800c594 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 8091 	bne.w	800c2c8 <USB_EPStartXfer+0xfd6>
 800c1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	00da      	lsls	r2, r3, #3
 800c1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	691b      	ldr	r3, [r3, #16]
 800c1f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c1fa:	d925      	bls.n	800c248 <USB_EPStartXfer+0xf56>
 800c1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	095b      	lsrs	r3, r3, #5
 800c20a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	f003 031f 	and.w	r3, r3, #31
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <USB_EPStartXfer+0xf3a>
 800c222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c226:	3b01      	subs	r3, #1
 800c228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c230:	b29b      	uxth	r3, r3
 800c232:	029b      	lsls	r3, r3, #10
 800c234:	b29b      	uxth	r3, r3
 800c236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c23a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c23e:	b29a      	uxth	r2, r3
 800c240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	e074      	b.n	800c332 <USB_EPStartXfer+0x1040>
 800c248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d116      	bne.n	800c286 <USB_EPStartXfer+0xf94>
 800c258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c264:	b29a      	uxth	r2, r3
 800c266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	b29b      	uxth	r3, r3
 800c274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c282:	801a      	strh	r2, [r3, #0]
 800c284:	e055      	b.n	800c332 <USB_EPStartXfer+0x1040>
 800c286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	085b      	lsrs	r3, r3, #1
 800c294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d004      	beq.n	800c2b6 <USB_EPStartXfer+0xfc4>
 800c2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	029b      	lsls	r3, r3, #10
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2c4:	801a      	strh	r2, [r3, #0]
 800c2c6:	e034      	b.n	800c332 <USB_EPStartXfer+0x1040>
 800c2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d12c      	bne.n	800c332 <USB_EPStartXfer+0x1040>
 800c2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	00da      	lsls	r2, r3, #3
 800c310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c314:	4413      	add	r3, r2
 800c316:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c31a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c330:	801a      	strh	r2, [r3, #0]
 800c332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	785b      	ldrb	r3, [r3, #1]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f040 8091 	bne.w	800c474 <USB_EPStartXfer+0x1182>
 800c352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c36e:	b29b      	uxth	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c376:	4413      	add	r3, r2
 800c378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	00da      	lsls	r2, r3, #3
 800c38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c38e:	4413      	add	r3, r2
 800c390:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	2b3e      	cmp	r3, #62	; 0x3e
 800c3a6:	d925      	bls.n	800c3f4 <USB_EPStartXfer+0x1102>
 800c3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	095b      	lsrs	r3, r3, #5
 800c3b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	f003 031f 	and.w	r3, r3, #31
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d104      	bne.n	800c3d8 <USB_EPStartXfer+0x10e6>
 800c3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	029b      	lsls	r3, r3, #10
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3f0:	801a      	strh	r2, [r3, #0]
 800c3f2:	e06d      	b.n	800c4d0 <USB_EPStartXfer+0x11de>
 800c3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d116      	bne.n	800c432 <USB_EPStartXfer+0x1140>
 800c404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c410:	b29a      	uxth	r2, r3
 800c412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c416:	801a      	strh	r2, [r3, #0]
 800c418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c428:	b29a      	uxth	r2, r3
 800c42a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c42e:	801a      	strh	r2, [r3, #0]
 800c430:	e04e      	b.n	800c4d0 <USB_EPStartXfer+0x11de>
 800c432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	d004      	beq.n	800c462 <USB_EPStartXfer+0x1170>
 800c458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c45c:	3301      	adds	r3, #1
 800c45e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c466:	b29b      	uxth	r3, r3
 800c468:	029b      	lsls	r3, r3, #10
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c470:	801a      	strh	r2, [r3, #0]
 800c472:	e02d      	b.n	800c4d0 <USB_EPStartXfer+0x11de>
 800c474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d125      	bne.n	800c4d0 <USB_EPStartXfer+0x11de>
 800c484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c492:	b29b      	uxth	r3, r3
 800c494:	461a      	mov	r2, r3
 800c496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c49a:	4413      	add	r3, r2
 800c49c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	00da      	lsls	r2, r3, #3
 800c4ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 81fe 	beq.w	800c8de <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c502:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USB_EPStartXfer+0x1228>
 800c50e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10d      	bne.n	800c536 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c51a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c51e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 81db 	bne.w	800c8de <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c528:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c530:	2b00      	cmp	r3, #0
 800c532:	f040 81d4 	bne.w	800c8de <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	441a      	add	r2, r3
 800c57a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c57e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c58a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c58e:	b29b      	uxth	r3, r3
 800c590:	8013      	strh	r3, [r2, #0]
 800c592:	e1a4      	b.n	800c8de <USB_EPStartXfer+0x15ec>
>>>>>>> origin/main
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 800c9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	78db      	ldrb	r3, [r3, #3]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	f040 819a 	bne.w	800cd06 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	699a      	ldr	r2, [r3, #24]
 800c9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d917      	bls.n	800ca1e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	699a      	ldr	r2, [r3, #24]
 800ca0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	619a      	str	r2, [r3, #24]
 800ca1c:	e00e      	b.n	800ca3c <USB_EPStartXfer+0x131e>
=======
 800c594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	78db      	ldrb	r3, [r3, #3]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	f040 819a 	bne.w	800c8da <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d917      	bls.n	800c5f2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	699a      	ldr	r2, [r3, #24]
 800c5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e2:	1ad2      	subs	r2, r2, r3
 800c5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	619a      	str	r2, [r3, #24]
 800c5f0:	e00e      	b.n	800c610 <USB_EPStartXfer+0x131e>
>>>>>>> origin/main
        }
        else
        {
          len = ep->xfer_len;
<<<<<<< HEAD
 800ca1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ca2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ca3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	785b      	ldrb	r3, [r3, #1]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d178      	bne.n	800cb3e <USB_EPStartXfer+0x1420>
 800ca4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ca70:	4413      	add	r3, r2
 800ca72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	00da      	lsls	r2, r3, #3
 800ca84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ca88:	4413      	add	r3, r2
 800ca8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca96:	2b3e      	cmp	r3, #62	; 0x3e
 800ca98:	d91d      	bls.n	800cad6 <USB_EPStartXfer+0x13b8>
 800ca9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca9e:	095b      	lsrs	r3, r3, #5
 800caa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800caa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa8:	f003 031f 	and.w	r3, r3, #31
 800caac:	2b00      	cmp	r3, #0
 800caae:	d104      	bne.n	800caba <USB_EPStartXfer+0x139c>
 800cab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cab4:	3b01      	subs	r3, #1
 800cab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800caba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	029b      	lsls	r3, r3, #10
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cacc:	b29a      	uxth	r2, r3
 800cace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e064      	b.n	800cba0 <USB_EPStartXfer+0x1482>
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d116      	bne.n	800cb0c <USB_EPStartXfer+0x13ee>
 800cade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800caea:	b29a      	uxth	r2, r3
 800caec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800caf0:	801a      	strh	r2, [r3, #0]
 800caf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cafe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb08:	801a      	strh	r2, [r3, #0]
 800cb0a:	e049      	b.n	800cba0 <USB_EPStartXfer+0x1482>
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb10:	085b      	lsrs	r3, r3, #1
 800cb12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d004      	beq.n	800cb2c <USB_EPStartXfer+0x140e>
 800cb22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb26:	3301      	adds	r3, #1
 800cb28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	029b      	lsls	r3, r3, #10
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	e030      	b.n	800cba0 <USB_EPStartXfer+0x1482>
 800cb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	785b      	ldrb	r3, [r3, #1]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d128      	bne.n	800cba0 <USB_EPStartXfer+0x1482>
 800cb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb72:	4413      	add	r3, r2
 800cb74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	00da      	lsls	r2, r3, #3
 800cb86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cb9e:	801a      	strh	r2, [r3, #0]
 800cba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	785b      	ldrb	r3, [r3, #1]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d178      	bne.n	800ccb0 <USB_EPStartXfer+0x1592>
 800cbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cbe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	00da      	lsls	r2, r3, #3
 800cbf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc08:	2b3e      	cmp	r3, #62	; 0x3e
 800cc0a:	d91d      	bls.n	800cc48 <USB_EPStartXfer+0x152a>
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc10:	095b      	lsrs	r3, r3, #5
 800cc12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc1a:	f003 031f 	and.w	r3, r3, #31
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d104      	bne.n	800cc2c <USB_EPStartXfer+0x150e>
 800cc22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc26:	3b01      	subs	r3, #1
 800cc28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	029b      	lsls	r3, r3, #10
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc44:	801a      	strh	r2, [r3, #0]
 800cc46:	e060      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d116      	bne.n	800cc7e <USB_EPStartXfer+0x1560>
 800cc50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc62:	801a      	strh	r2, [r3, #0]
 800cc64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc7a:	801a      	strh	r2, [r3, #0]
 800cc7c:	e045      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
 800cc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc82:	085b      	lsrs	r3, r3, #1
 800cc84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d004      	beq.n	800cc9e <USB_EPStartXfer+0x1580>
 800cc94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc98:	3301      	adds	r3, #1
 800cc9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	029b      	lsls	r3, r3, #10
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ccac:	801a      	strh	r2, [r3, #0]
 800ccae:	e02c      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
 800ccb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d124      	bne.n	800cd0a <USB_EPStartXfer+0x15ec>
 800ccc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ccdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	00da      	lsls	r2, r3, #3
 800ccea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ccee:	4413      	add	r3, r2
 800ccf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ccf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	e001      	b.n	800cd0a <USB_EPStartXfer+0x15ec>
=======
 800c5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2200      	movs	r2, #0
 800c60e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d178      	bne.n	800c712 <USB_EPStartXfer+0x1420>
 800c620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	461a      	mov	r2, r3
 800c640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c644:	4413      	add	r3, r2
 800c646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	00da      	lsls	r2, r3, #3
 800c658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c65c:	4413      	add	r3, r2
 800c65e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c66a:	2b3e      	cmp	r3, #62	; 0x3e
 800c66c:	d91d      	bls.n	800c6aa <USB_EPStartXfer+0x13b8>
 800c66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c672:	095b      	lsrs	r3, r3, #5
 800c674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c67c:	f003 031f 	and.w	r3, r3, #31
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <USB_EPStartXfer+0x139c>
 800c684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c688:	3b01      	subs	r3, #1
 800c68a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c68e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c692:	b29b      	uxth	r3, r3
 800c694:	029b      	lsls	r3, r3, #10
 800c696:	b29b      	uxth	r3, r3
 800c698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c69c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6a6:	801a      	strh	r2, [r3, #0]
 800c6a8:	e064      	b.n	800c774 <USB_EPStartXfer+0x1482>
 800c6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d116      	bne.n	800c6e0 <USB_EPStartXfer+0x13ee>
 800c6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6c4:	801a      	strh	r2, [r3, #0]
 800c6c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6dc:	801a      	strh	r2, [r3, #0]
 800c6de:	e049      	b.n	800c774 <USB_EPStartXfer+0x1482>
 800c6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e4:	085b      	lsrs	r3, r3, #1
 800c6e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <USB_EPStartXfer+0x140e>
 800c6f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c704:	b29b      	uxth	r3, r3
 800c706:	029b      	lsls	r3, r3, #10
 800c708:	b29a      	uxth	r2, r3
 800c70a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c70e:	801a      	strh	r2, [r3, #0]
 800c710:	e030      	b.n	800c774 <USB_EPStartXfer+0x1482>
 800c712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	785b      	ldrb	r3, [r3, #1]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d128      	bne.n	800c774 <USB_EPStartXfer+0x1482>
 800c722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c73e:	b29b      	uxth	r3, r3
 800c740:	461a      	mov	r2, r3
 800c742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c746:	4413      	add	r3, r2
 800c748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	00da      	lsls	r2, r3, #3
 800c75a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c75e:	4413      	add	r3, r2
 800c760:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c772:	801a      	strh	r2, [r3, #0]
 800c774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d178      	bne.n	800c884 <USB_EPStartXfer+0x1592>
 800c792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	00da      	lsls	r2, r3, #3
 800c7ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7dc:	2b3e      	cmp	r3, #62	; 0x3e
 800c7de:	d91d      	bls.n	800c81c <USB_EPStartXfer+0x152a>
 800c7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7e4:	095b      	lsrs	r3, r3, #5
 800c7e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ee:	f003 031f 	and.w	r3, r3, #31
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <USB_EPStartXfer+0x150e>
 800c7f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c804:	b29b      	uxth	r3, r3
 800c806:	029b      	lsls	r3, r3, #10
 800c808:	b29b      	uxth	r3, r3
 800c80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c812:	b29a      	uxth	r2, r3
 800c814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c818:	801a      	strh	r2, [r3, #0]
 800c81a:	e060      	b.n	800c8de <USB_EPStartXfer+0x15ec>
 800c81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c820:	2b00      	cmp	r3, #0
 800c822:	d116      	bne.n	800c852 <USB_EPStartXfer+0x1560>
 800c824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c830:	b29a      	uxth	r2, r3
 800c832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c848:	b29a      	uxth	r2, r3
 800c84a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c84e:	801a      	strh	r2, [r3, #0]
 800c850:	e045      	b.n	800c8de <USB_EPStartXfer+0x15ec>
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c856:	085b      	lsrs	r3, r3, #1
 800c858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	d004      	beq.n	800c872 <USB_EPStartXfer+0x1580>
 800c868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c86c:	3301      	adds	r3, #1
 800c86e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c876:	b29b      	uxth	r3, r3
 800c878:	029b      	lsls	r3, r3, #10
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c880:	801a      	strh	r2, [r3, #0]
 800c882:	e02c      	b.n	800c8de <USB_EPStartXfer+0x15ec>
 800c884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	785b      	ldrb	r3, [r3, #1]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d124      	bne.n	800c8de <USB_EPStartXfer+0x15ec>
 800c894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	00da      	lsls	r2, r3, #3
 800c8be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c8d6:	801a      	strh	r2, [r3, #0]
 800c8d8:	e001      	b.n	800c8de <USB_EPStartXfer+0x15ec>
>>>>>>> origin/main
      }
      else
      {
        return HAL_ERROR;
<<<<<<< HEAD
 800cd06:	2301      	movs	r3, #1
 800cd08:	e03a      	b.n	800cd80 <USB_EPStartXfer+0x1662>
=======
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e03a      	b.n	800c954 <USB_EPStartXfer+0x1662>
>>>>>>> origin/main
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< HEAD
 800cd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	441a      	add	r2, r3
 800cd66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USB_EPSetStall>:
=======
 800c8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c904:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c908:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c90c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c910:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c914:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c91c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	441a      	add	r2, r3
 800c93a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c93e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c94a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c94e:	b29b      	uxth	r3, r3
 800c950:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USB_EPSetStall>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	785b      	ldrb	r3, [r3, #1]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d020      	beq.n	800cdde <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdb2:	81bb      	strh	r3, [r7, #12]
 800cdb4:	89bb      	ldrh	r3, [r7, #12]
 800cdb6:	f083 0310 	eor.w	r3, r3, #16
 800cdba:	81bb      	strh	r3, [r7, #12]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	89bb      	ldrh	r3, [r7, #12]
 800cdc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	8013      	strh	r3, [r2, #0]
 800cddc:	e01f      	b.n	800ce1e <USB_EPSetStall+0x94>
=======
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	785b      	ldrb	r3, [r3, #1]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d020      	beq.n	800c9b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c986:	81bb      	strh	r3, [r7, #12]
 800c988:	89bb      	ldrh	r3, [r7, #12]
 800c98a:	f083 0310 	eor.w	r3, r3, #16
 800c98e:	81bb      	strh	r3, [r7, #12]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	441a      	add	r2, r3
 800c99a:	89bb      	ldrh	r3, [r7, #12]
 800c99c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	8013      	strh	r3, [r2, #0]
 800c9b0:	e01f      	b.n	800c9f2 <USB_EPSetStall+0x94>
>>>>>>> origin/main
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< HEAD
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdf4:	81fb      	strh	r3, [r7, #14]
 800cdf6:	89fb      	ldrh	r3, [r7, #14]
 800cdf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdfc:	81fb      	strh	r3, [r7, #14]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	441a      	add	r2, r3
 800ce08:	89fb      	ldrh	r3, [r7, #14]
 800ce0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USB_EPClearStall>:
=======
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c8:	81fb      	strh	r3, [r7, #14]
 800c9ca:	89fb      	ldrh	r3, [r7, #14]
 800c9cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c9d0:	81fb      	strh	r3, [r7, #14]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	441a      	add	r2, r3
 800c9dc:	89fb      	ldrh	r3, [r7, #14]
 800c9de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USB_EPClearStall>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	7b1b      	ldrb	r3, [r3, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f040 809d 	bne.w	800cf7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d04c      	beq.n	800cee2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	823b      	strh	r3, [r7, #16]
 800ce56:	8a3b      	ldrh	r3, [r7, #16]
 800ce58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d01b      	beq.n	800ce98 <USB_EPClearStall+0x6c>
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce76:	81fb      	strh	r3, [r7, #14]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	441a      	add	r2, r3
 800ce82:	89fb      	ldrh	r3, [r7, #14]
 800ce84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	78db      	ldrb	r3, [r3, #3]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d06c      	beq.n	800cf7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb6:	81bb      	strh	r3, [r7, #12]
 800ceb8:	89bb      	ldrh	r3, [r7, #12]
 800ceba:	f083 0320 	eor.w	r3, r3, #32
 800cebe:	81bb      	strh	r3, [r7, #12]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	441a      	add	r2, r3
 800ceca:	89bb      	ldrh	r3, [r7, #12]
 800cecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ced0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ced4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cedc:	b29b      	uxth	r3, r3
 800cede:	8013      	strh	r3, [r2, #0]
 800cee0:	e04b      	b.n	800cf7a <USB_EPClearStall+0x14e>
=======
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	7b1b      	ldrb	r3, [r3, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f040 809d 	bne.w	800cb4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d04c      	beq.n	800cab6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	4413      	add	r3, r2
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	823b      	strh	r3, [r7, #16]
 800ca2a:	8a3b      	ldrh	r3, [r7, #16]
 800ca2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01b      	beq.n	800ca6c <USB_EPClearStall+0x6c>
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca4a:	81fb      	strh	r3, [r7, #14]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	441a      	add	r2, r3
 800ca56:	89fb      	ldrh	r3, [r7, #14]
 800ca58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	78db      	ldrb	r3, [r3, #3]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d06c      	beq.n	800cb4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca8a:	81bb      	strh	r3, [r7, #12]
 800ca8c:	89bb      	ldrh	r3, [r7, #12]
 800ca8e:	f083 0320 	eor.w	r3, r3, #32
 800ca92:	81bb      	strh	r3, [r7, #12]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	441a      	add	r2, r3
 800ca9e:	89bb      	ldrh	r3, [r7, #12]
 800caa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	8013      	strh	r3, [r2, #0]
 800cab4:	e04b      	b.n	800cb4e <USB_EPClearStall+0x14e>
>>>>>>> origin/main
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	82fb      	strh	r3, [r7, #22]
 800cef0:	8afb      	ldrh	r3, [r7, #22]
 800cef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d01b      	beq.n	800cf32 <USB_EPClearStall+0x106>
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf10:	82bb      	strh	r3, [r7, #20]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	441a      	add	r2, r3
 800cf1c:	8abb      	ldrh	r3, [r7, #20]
 800cf1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf48:	827b      	strh	r3, [r7, #18]
 800cf4a:	8a7b      	ldrh	r3, [r7, #18]
 800cf4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf50:	827b      	strh	r3, [r7, #18]
 800cf52:	8a7b      	ldrh	r3, [r7, #18]
 800cf54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf58:	827b      	strh	r3, [r7, #18]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	441a      	add	r2, r3
 800cf64:	8a7b      	ldrh	r3, [r7, #18]
 800cf66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	8013      	strh	r3, [r2, #0]
=======
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	82fb      	strh	r3, [r7, #22]
 800cac4:	8afb      	ldrh	r3, [r7, #22]
 800cac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d01b      	beq.n	800cb06 <USB_EPClearStall+0x106>
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae4:	82bb      	strh	r3, [r7, #20]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	441a      	add	r2, r3
 800caf0:	8abb      	ldrh	r3, [r7, #20]
 800caf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cafa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1c:	827b      	strh	r3, [r7, #18]
 800cb1e:	8a7b      	ldrh	r3, [r7, #18]
 800cb20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb24:	827b      	strh	r3, [r7, #18]
 800cb26:	8a7b      	ldrh	r3, [r7, #18]
 800cb28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb2c:	827b      	strh	r3, [r7, #18]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	441a      	add	r2, r3
 800cb38:	8a7b      	ldrh	r3, [r7, #18]
 800cb3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	8013      	strh	r3, [r2, #0]
>>>>>>> origin/main
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	371c      	adds	r7, #28
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <USB_SetDevAddress>:
=======
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	371c      	adds	r7, #28
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USB_SetDevAddress>:
>>>>>>> origin/main
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d103      	bne.n	800cfa2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2280      	movs	r2, #128	; 0x80
 800cf9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USB_DevConnect>:
=======
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d103      	bne.n	800cb76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2280      	movs	r2, #128	; 0x80
 800cb72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <USB_DevConnect>:
>>>>>>> origin/main
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <USB_DevDisconnect>:
=======
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <USB_DevDisconnect>:
>>>>>>> origin/main
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <USB_ReadInterrupts>:
=======
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <USB_ReadInterrupts>:
>>>>>>> origin/main
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d016:	b29b      	uxth	r3, r3
 800d018:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d01a:	68fb      	ldr	r3, [r7, #12]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <USB_EP0_OutStart>:
=======
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <USB_EP0_OutStart>:
>>>>>>> origin/main
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
<<<<<<< HEAD
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
=======
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
>>>>>>> origin/main
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USB_WritePMA>:
=======
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USB_WritePMA>:
>>>>>>> origin/main
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800d040:	b480      	push	{r7}
 800d042:	b08b      	sub	sp, #44	; 0x2c
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4611      	mov	r1, r2
 800d04c:	461a      	mov	r2, r3
 800d04e:	460b      	mov	r3, r1
 800d050:	80fb      	strh	r3, [r7, #6]
 800d052:	4613      	mov	r3, r2
 800d054:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d056:	88bb      	ldrh	r3, [r7, #4]
 800d058:	3301      	adds	r3, #1
 800d05a:	085b      	lsrs	r3, r3, #1
 800d05c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	617b      	str	r3, [r7, #20]
=======
 800cc14:	b480      	push	{r7}
 800cc16:	b08b      	sub	sp, #44	; 0x2c
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4611      	mov	r1, r2
 800cc20:	461a      	mov	r2, r3
 800cc22:	460b      	mov	r3, r1
 800cc24:	80fb      	strh	r3, [r7, #6]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cc2a:	88bb      	ldrh	r3, [r7, #4]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d066:	88fa      	ldrh	r2, [r7, #6]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d070:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
 800d076:	e01b      	b.n	800d0b0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	3301      	adds	r3, #1
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	b21a      	sxth	r2, r3
 800d088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	b21b      	sxth	r3, r3
 800d090:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	8a7a      	ldrh	r2, [r7, #18]
 800d096:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	3302      	adds	r3, #2
 800d09c:	623b      	str	r3, [r7, #32]
=======
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cc3a:	88fa      	ldrh	r2, [r7, #6]
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4a:	e01b      	b.n	800cc84 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	3301      	adds	r3, #1
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	b21a      	sxth	r2, r3
 800cc5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	b21b      	sxth	r3, r3
 800cc64:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	8a7a      	ldrh	r2, [r7, #18]
 800cc6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	3302      	adds	r3, #2
 800cc70:	623b      	str	r3, [r7, #32]
>>>>>>> origin/main

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
<<<<<<< HEAD
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1e0      	bne.n	800d078 <USB_WritePMA+0x38>
  }
}
 800d0b6:	bf00      	nop
 800d0b8:	bf00      	nop
 800d0ba:	372c      	adds	r7, #44	; 0x2c
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <USB_ReadPMA>:
=======
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	3301      	adds	r3, #1
 800cc76:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	3b01      	subs	r3, #1
 800cc82:	627b      	str	r3, [r7, #36]	; 0x24
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1e0      	bne.n	800cc4c <USB_WritePMA+0x38>
  }
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	372c      	adds	r7, #44	; 0x2c
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <USB_ReadPMA>:
>>>>>>> origin/main
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800d0c4:	b480      	push	{r7}
 800d0c6:	b08b      	sub	sp, #44	; 0x2c
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	80fb      	strh	r3, [r7, #6]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d0da:	88bb      	ldrh	r3, [r7, #4]
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	617b      	str	r3, [r7, #20]
=======
 800cc98:	b480      	push	{r7}
 800cc9a:	b08b      	sub	sp, #44	; 0x2c
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	4611      	mov	r1, r2
 800cca4:	461a      	mov	r2, r3
 800cca6:	460b      	mov	r3, r1
 800cca8:	80fb      	strh	r3, [r7, #6]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ccae:	88bb      	ldrh	r3, [r7, #4]
 800ccb0:	085b      	lsrs	r3, r3, #1
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	617b      	str	r3, [r7, #20]
>>>>>>> origin/main
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< HEAD
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d0ea:	88fa      	ldrh	r2, [r7, #6]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0fa:	e018      	b.n	800d12e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	b29b      	uxth	r3, r3
 800d102:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	3302      	adds	r3, #2
 800d108:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	3301      	adds	r3, #1
 800d116:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	0a1b      	lsrs	r3, r3, #8
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	3301      	adds	r3, #1
 800d126:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	3b01      	subs	r3, #1
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1e3      	bne.n	800d0fc <USB_ReadPMA+0x38>
=======
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ccbe:	88fa      	ldrh	r2, [r7, #6]
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
 800ccce:	e018      	b.n	800cd02 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	3302      	adds	r3, #2
 800ccdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	3301      	adds	r3, #1
 800ccea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	0a1b      	lsrs	r3, r3, #8
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e3      	bne.n	800ccd0 <USB_ReadPMA+0x38>
>>>>>>> origin/main
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< HEAD
 800d134:	88bb      	ldrh	r3, [r7, #4]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d007      	beq.n	800d150 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	b29b      	uxth	r3, r3
 800d146:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	701a      	strb	r2, [r3, #0]
  }
}
 800d150:	bf00      	nop
 800d152:	372c      	adds	r7, #44	; 0x2c
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USBD_CDC_Init>:
=======
 800cd08:	88bb      	ldrh	r3, [r7, #4]
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	701a      	strb	r2, [r3, #0]
  }
}
 800cd24:	bf00      	nop
 800cd26:	372c      	adds	r7, #44	; 0x2c
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USBD_CDC_Init>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
=======
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
>>>>>>> origin/main
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< HEAD
 800d168:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d16c:	f002 f99c 	bl	800f4a8 <USBD_static_malloc>
 800d170:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d105      	bne.n	800d184 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d180:	2302      	movs	r3, #2
 800d182:	e066      	b.n	800d252 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	7c1b      	ldrb	r3, [r3, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d119      	bne.n	800d1c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d198:	2202      	movs	r2, #2
 800d19a:	2181      	movs	r1, #129	; 0x81
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f001 ff85 	bl	800f0ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 ff7b 	bl	800f0ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2210      	movs	r2, #16
 800d1c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d1c6:	e016      	b.n	800d1f6 <USBD_CDC_Init+0x9a>
=======
 800cd3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cd40:	f002 f99c 	bl	800f07c <USBD_static_malloc>
 800cd44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d105      	bne.n	800cd58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cd54:	2302      	movs	r3, #2
 800cd56:	e066      	b.n	800ce26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7c1b      	ldrb	r3, [r3, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d119      	bne.n	800cd9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cd68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	2181      	movs	r1, #129	; 0x81
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 ff85 	bl	800ec80 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cd7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd80:	2202      	movs	r2, #2
 800cd82:	2101      	movs	r1, #1
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f001 ff7b 	bl	800ec80 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2210      	movs	r2, #16
 800cd96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cd9a:	e016      	b.n	800cdca <USBD_CDC_Init+0x9a>
>>>>>>> origin/main
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
 800d1c8:	2340      	movs	r3, #64	; 0x40
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	2181      	movs	r1, #129	; 0x81
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 ff6c 	bl	800f0ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1da:	2340      	movs	r3, #64	; 0x40
 800d1dc:	2202      	movs	r2, #2
 800d1de:	2101      	movs	r1, #1
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f001 ff63 	bl	800f0ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
=======
 800cd9c:	2340      	movs	r3, #64	; 0x40
 800cd9e:	2202      	movs	r2, #2
 800cda0:	2181      	movs	r1, #129	; 0x81
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 ff6c 	bl	800ec80 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f001 ff63 	bl	800ec80 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2210      	movs	r2, #16
 800cdc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
>>>>>>> origin/main
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< HEAD
 800d1f6:	2308      	movs	r3, #8
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	2182      	movs	r1, #130	; 0x82
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f001 ff55 	bl	800f0ac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7c1b      	ldrb	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d232:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d236:	2101      	movs	r1, #1
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f002 f8b3 	bl	800f3a4 <USBD_LL_PrepareReceive>
 800d23e:	e007      	b.n	800d250 <USBD_CDC_Init+0xf4>
=======
 800cdca:	2308      	movs	r3, #8
 800cdcc:	2203      	movs	r2, #3
 800cdce:	2182      	movs	r1, #130	; 0x82
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f001 ff55 	bl	800ec80 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	7c1b      	ldrb	r3, [r3, #16]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d109      	bne.n	800ce14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f002 f8b3 	bl	800ef78 <USBD_LL_PrepareReceive>
 800ce12:	e007      	b.n	800ce24 <USBD_CDC_Init+0xf4>
>>>>>>> origin/main
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d246:	2340      	movs	r3, #64	; 0x40
 800d248:	2101      	movs	r1, #1
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f002 f8aa 	bl	800f3a4 <USBD_LL_PrepareReceive>
=======
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce1a:	2340      	movs	r3, #64	; 0x40
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f002 f8aa 	bl	800ef78 <USBD_LL_PrepareReceive>
>>>>>>> origin/main
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <USBD_CDC_DeInit>:
=======
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_CDC_DeInit>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	70fb      	strb	r3, [r7, #3]
=======
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	70fb      	strb	r3, [r7, #3]
>>>>>>> origin/main
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
<<<<<<< HEAD
 800d266:	2181      	movs	r1, #129	; 0x81
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 ff5d 	bl	800f128 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d274:	2101      	movs	r1, #1
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 ff56 	bl	800f128 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d284:	2182      	movs	r1, #130	; 0x82
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 ff4e 	bl	800f128 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00e      	beq.n	800d2c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f002 f904 	bl	800f4c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
	...

0800d2d0 <USBD_CDC_Setup>:
=======
 800ce3a:	2181      	movs	r1, #129	; 0x81
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f001 ff5d 	bl	800ecfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ce48:	2101      	movs	r1, #1
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f001 ff56 	bl	800ecfc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ce58:	2182      	movs	r1, #130	; 0x82
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 ff4e 	bl	800ecfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00e      	beq.n	800ce98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f002 f904 	bl	800f098 <USBD_static_free>
    pdev->pClassData = NULL;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <USBD_CDC_Setup>:
>>>>>>> origin/main
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e0af      	b.n	800d458 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d300:	2b00      	cmp	r3, #0
 800d302:	d03f      	beq.n	800d384 <USBD_CDC_Setup+0xb4>
 800d304:	2b20      	cmp	r3, #32
 800d306:	f040 809f 	bne.w	800d448 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	88db      	ldrh	r3, [r3, #6]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d02e      	beq.n	800d370 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b25b      	sxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	da16      	bge.n	800d34a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	683a      	ldr	r2, [r7, #0]
 800d326:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d328:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	88d2      	ldrh	r2, [r2, #6]
 800d32e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	88db      	ldrh	r3, [r3, #6]
 800d334:	2b07      	cmp	r3, #7
 800d336:	bf28      	it	cs
 800d338:	2307      	movcs	r3, #7
 800d33a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	89fa      	ldrh	r2, [r7, #14]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f001 fa9f 	bl	800e886 <USBD_CtlSendData>
=======
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ceba:	2300      	movs	r3, #0
 800cebc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cebe:	2300      	movs	r3, #0
 800cec0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e0af      	b.n	800d02c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d03f      	beq.n	800cf58 <USBD_CDC_Setup+0xb4>
 800ced8:	2b20      	cmp	r3, #32
 800ceda:	f040 809f 	bne.w	800d01c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	88db      	ldrh	r3, [r3, #6]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d02e      	beq.n	800cf44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	b25b      	sxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	da16      	bge.n	800cf1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cefc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	88d2      	ldrh	r2, [r2, #6]
 800cf02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	88db      	ldrh	r3, [r3, #6]
 800cf08:	2b07      	cmp	r3, #7
 800cf0a:	bf28      	it	cs
 800cf0c:	2307      	movcs	r3, #7
 800cf0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	89fa      	ldrh	r2, [r7, #14]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f001 fa9f 	bl	800e45a <USBD_CtlSendData>
>>>>>>> origin/main
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
<<<<<<< HEAD
 800d348:	e085      	b.n	800d456 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	785a      	ldrb	r2, [r3, #1]
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	88db      	ldrh	r3, [r3, #6]
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d360:	6939      	ldr	r1, [r7, #16]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	88db      	ldrh	r3, [r3, #6]
 800d366:	461a      	mov	r2, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 fab8 	bl	800e8de <USBD_CtlPrepareRx>
      break;
 800d36e:	e072      	b.n	800d456 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	7850      	ldrb	r0, [r2, #1]
 800d37c:	2200      	movs	r2, #0
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	4798      	blx	r3
      break;
 800d382:	e068      	b.n	800d456 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	785b      	ldrb	r3, [r3, #1]
 800d388:	2b0b      	cmp	r3, #11
 800d38a:	d852      	bhi.n	800d432 <USBD_CDC_Setup+0x162>
 800d38c:	a201      	add	r2, pc, #4	; (adr r2, 800d394 <USBD_CDC_Setup+0xc4>)
 800d38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d392:	bf00      	nop
 800d394:	0800d3c5 	.word	0x0800d3c5
 800d398:	0800d441 	.word	0x0800d441
 800d39c:	0800d433 	.word	0x0800d433
 800d3a0:	0800d433 	.word	0x0800d433
 800d3a4:	0800d433 	.word	0x0800d433
 800d3a8:	0800d433 	.word	0x0800d433
 800d3ac:	0800d433 	.word	0x0800d433
 800d3b0:	0800d433 	.word	0x0800d433
 800d3b4:	0800d433 	.word	0x0800d433
 800d3b8:	0800d433 	.word	0x0800d433
 800d3bc:	0800d3ef 	.word	0x0800d3ef
 800d3c0:	0800d419 	.word	0x0800d419
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d107      	bne.n	800d3e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3d0:	f107 030a 	add.w	r3, r7, #10
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f001 fa54 	bl	800e886 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3de:	e032      	b.n	800d446 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f001 f9de 	bl	800e7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	75fb      	strb	r3, [r7, #23]
          break;
 800d3ec:	e02b      	b.n	800d446 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d107      	bne.n	800d40a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3fa:	f107 030d 	add.w	r3, r7, #13
 800d3fe:	2201      	movs	r2, #1
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f001 fa3f 	bl	800e886 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d408:	e01d      	b.n	800d446 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f001 f9c9 	bl	800e7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d412:	2303      	movs	r3, #3
 800d414:	75fb      	strb	r3, [r7, #23]
          break;
 800d416:	e016      	b.n	800d446 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b03      	cmp	r3, #3
 800d422:	d00f      	beq.n	800d444 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 f9bc 	bl	800e7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d42c:	2303      	movs	r3, #3
 800d42e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d430:	e008      	b.n	800d444 <USBD_CDC_Setup+0x174>
=======
 800cf1c:	e085      	b.n	800d02a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	785a      	ldrb	r2, [r3, #1]
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	88db      	ldrh	r3, [r3, #6]
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cf34:	6939      	ldr	r1, [r7, #16]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	88db      	ldrh	r3, [r3, #6]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f001 fab8 	bl	800e4b2 <USBD_CtlPrepareRx>
      break;
 800cf42:	e072      	b.n	800d02a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	7850      	ldrb	r0, [r2, #1]
 800cf50:	2200      	movs	r2, #0
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	4798      	blx	r3
      break;
 800cf56:	e068      	b.n	800d02a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	785b      	ldrb	r3, [r3, #1]
 800cf5c:	2b0b      	cmp	r3, #11
 800cf5e:	d852      	bhi.n	800d006 <USBD_CDC_Setup+0x162>
 800cf60:	a201      	add	r2, pc, #4	; (adr r2, 800cf68 <USBD_CDC_Setup+0xc4>)
 800cf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf66:	bf00      	nop
 800cf68:	0800cf99 	.word	0x0800cf99
 800cf6c:	0800d015 	.word	0x0800d015
 800cf70:	0800d007 	.word	0x0800d007
 800cf74:	0800d007 	.word	0x0800d007
 800cf78:	0800d007 	.word	0x0800d007
 800cf7c:	0800d007 	.word	0x0800d007
 800cf80:	0800d007 	.word	0x0800d007
 800cf84:	0800d007 	.word	0x0800d007
 800cf88:	0800d007 	.word	0x0800d007
 800cf8c:	0800d007 	.word	0x0800d007
 800cf90:	0800cfc3 	.word	0x0800cfc3
 800cf94:	0800cfed 	.word	0x0800cfed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d107      	bne.n	800cfb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cfa4:	f107 030a 	add.w	r3, r7, #10
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f001 fa54 	bl	800e45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfb2:	e032      	b.n	800d01a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f001 f9de 	bl	800e378 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	75fb      	strb	r3, [r7, #23]
          break;
 800cfc0:	e02b      	b.n	800d01a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	d107      	bne.n	800cfde <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cfce:	f107 030d 	add.w	r3, r7, #13
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 fa3f 	bl	800e45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfdc:	e01d      	b.n	800d01a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cfde:	6839      	ldr	r1, [r7, #0]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f001 f9c9 	bl	800e378 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	75fb      	strb	r3, [r7, #23]
          break;
 800cfea:	e016      	b.n	800d01a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d00f      	beq.n	800d018 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f001 f9bc 	bl	800e378 <USBD_CtlError>
            ret = USBD_FAIL;
 800d000:	2303      	movs	r3, #3
 800d002:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d004:	e008      	b.n	800d018 <USBD_CDC_Setup+0x174>
>>>>>>> origin/main

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f001 f9b5 	bl	800e7a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d43a:	2303      	movs	r3, #3
 800d43c:	75fb      	strb	r3, [r7, #23]
          break;
 800d43e:	e002      	b.n	800d446 <USBD_CDC_Setup+0x176>
          break;
 800d440:	bf00      	nop
 800d442:	e008      	b.n	800d456 <USBD_CDC_Setup+0x186>
          break;
 800d444:	bf00      	nop
      }
      break;
 800d446:	e006      	b.n	800d456 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f001 f9aa 	bl	800e7a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d450:	2303      	movs	r3, #3
 800d452:	75fb      	strb	r3, [r7, #23]
      break;
 800d454:	bf00      	nop
  }

  return (uint8_t)ret;
 800d456:	7dfb      	ldrb	r3, [r7, #23]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_CDC_DataIn>:
=======
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f9b5 	bl	800e378 <USBD_CtlError>
          ret = USBD_FAIL;
 800d00e:	2303      	movs	r3, #3
 800d010:	75fb      	strb	r3, [r7, #23]
          break;
 800d012:	e002      	b.n	800d01a <USBD_CDC_Setup+0x176>
          break;
 800d014:	bf00      	nop
 800d016:	e008      	b.n	800d02a <USBD_CDC_Setup+0x186>
          break;
 800d018:	bf00      	nop
      }
      break;
 800d01a:	e006      	b.n	800d02a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f001 f9aa 	bl	800e378 <USBD_CtlError>
      ret = USBD_FAIL;
 800d024:	2303      	movs	r3, #3
 800d026:	75fb      	strb	r3, [r7, #23]
      break;
 800d028:	bf00      	nop
  }

  return (uint8_t)ret;
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_CDC_DataIn>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d101      	bne.n	800d482 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d47e:	2303      	movs	r3, #3
 800d480:	e04f      	b.n	800d522 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d488:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d48a:	78fa      	ldrb	r2, [r7, #3]
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	4613      	mov	r3, r2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	4413      	add	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	440b      	add	r3, r1
 800d498:	3318      	adds	r3, #24
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d029      	beq.n	800d4f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d4a0:	78fa      	ldrb	r2, [r7, #3]
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	3318      	adds	r3, #24
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	78f9      	ldrb	r1, [r7, #3]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	440b      	add	r3, r1
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	4403      	add	r3, r0
 800d4c0:	333c      	adds	r3, #60	; 0x3c
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4c8:	fb01 f303 	mul.w	r3, r1, r3
 800d4cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d110      	bne.n	800d4f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d4d2:	78fa      	ldrb	r2, [r7, #3]
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4413      	add	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	440b      	add	r3, r1
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4e6:	78f9      	ldrb	r1, [r7, #3]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 ff21 	bl	800f334 <USBD_LL_Transmit>
 800d4f2:	e015      	b.n	800d520 <USBD_CDC_DataIn+0xc0>
=======
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d046:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d052:	2303      	movs	r3, #3
 800d054:	e04f      	b.n	800d0f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d05c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d05e:	78fa      	ldrb	r2, [r7, #3]
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	440b      	add	r3, r1
 800d06c:	3318      	adds	r3, #24
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d029      	beq.n	800d0c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d074:	78fa      	ldrb	r2, [r7, #3]
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	4613      	mov	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	440b      	add	r3, r1
 800d082:	3318      	adds	r3, #24
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	78f9      	ldrb	r1, [r7, #3]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	460b      	mov	r3, r1
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	440b      	add	r3, r1
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	4403      	add	r3, r0
 800d094:	333c      	adds	r3, #60	; 0x3c
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	fbb2 f1f3 	udiv	r1, r2, r3
 800d09c:	fb01 f303 	mul.w	r3, r1, r3
 800d0a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d110      	bne.n	800d0c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d0a6:	78fa      	ldrb	r2, [r7, #3]
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	440b      	add	r3, r1
 800d0b4:	3318      	adds	r3, #24
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d0ba:	78f9      	ldrb	r1, [r7, #3]
 800d0bc:	2300      	movs	r3, #0
 800d0be:	2200      	movs	r2, #0
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f001 ff21 	bl	800ef08 <USBD_LL_Transmit>
 800d0c6:	e015      	b.n	800d0f4 <USBD_CDC_DataIn+0xc0>
>>>>>>> origin/main
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< HEAD
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d51c:	78fa      	ldrb	r2, [r7, #3]
 800d51e:	4798      	blx	r3
=======
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d0f0:	78fa      	ldrb	r2, [r7, #3]
 800d0f2:	4798      	blx	r3
>>>>>>> origin/main
    }
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBD_CDC_DataOut>:
=======
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <USBD_CDC_DataOut>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	460b      	mov	r3, r1
 800d534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d53c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d548:	2303      	movs	r3, #3
 800d54a:	e015      	b.n	800d578 <USBD_CDC_DataOut+0x4e>
=======
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b084      	sub	sp, #16
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	460b      	mov	r3, r1
 800d108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d101      	bne.n	800d120 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e015      	b.n	800d14c <USBD_CDC_DataOut+0x4e>
>>>>>>> origin/main
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
<<<<<<< HEAD
 800d54c:	78fb      	ldrb	r3, [r7, #3]
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 ff5f 	bl	800f414 <USBD_LL_GetRxDataSize>
 800d556:	4602      	mov	r2, r0
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 800d120:	78fb      	ldrb	r3, [r7, #3]
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 ff5f 	bl	800efe8 <USBD_LL_GetRxDataSize>
 800d12a:	4602      	mov	r2, r0
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> origin/main

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
<<<<<<< HEAD
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d572:	4611      	mov	r1, r2
 800d574:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_CDC_EP0_RxReady>:
=======
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d146:	4611      	mov	r1, r2
 800d148:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_CDC_EP0_RxReady>:
>>>>>>> origin/main
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d58e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d596:	2303      	movs	r3, #3
 800d598:	e01b      	b.n	800d5d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d015      	beq.n	800d5d0 <USBD_CDC_EP0_RxReady+0x50>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5aa:	2bff      	cmp	r3, #255	; 0xff
 800d5ac:	d010      	beq.n	800d5d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d5bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5c4:	b292      	uxth	r2, r2
 800d5c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	22ff      	movs	r2, #255	; 0xff
 800d5cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
	...

0800d5dc <USBD_CDC_GetFSCfgDesc>:
=======
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d16a:	2303      	movs	r3, #3
 800d16c:	e01b      	b.n	800d1a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d015      	beq.n	800d1a4 <USBD_CDC_EP0_RxReady+0x50>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d17e:	2bff      	cmp	r3, #255	; 0xff
 800d180:	d010      	beq.n	800d1a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d190:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d198:	b292      	uxth	r2, r2
 800d19a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	22ff      	movs	r2, #255	; 0xff
 800d1a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <USBD_CDC_GetFSCfgDesc>:
>>>>>>> origin/main
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2243      	movs	r2, #67	; 0x43
 800d5e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d5ea:	4b03      	ldr	r3, [pc, #12]	; (800d5f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	20000094 	.word	0x20000094

0800d5fc <USBD_CDC_GetHSCfgDesc>:
=======
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2243      	movs	r2, #67	; 0x43
 800d1bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d1be:	4b03      	ldr	r3, [pc, #12]	; (800d1cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	20000094 	.word	0x20000094

0800d1d0 <USBD_CDC_GetHSCfgDesc>:
>>>>>>> origin/main
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2243      	movs	r2, #67	; 0x43
 800d608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d60a:	4b03      	ldr	r3, [pc, #12]	; (800d618 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	20000050 	.word	0x20000050

0800d61c <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2243      	movs	r2, #67	; 0x43
 800d1dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d1de:	4b03      	ldr	r3, [pc, #12]	; (800d1ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	20000050 	.word	0x20000050

0800d1f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> origin/main
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2243      	movs	r2, #67	; 0x43
 800d628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d62a:	4b03      	ldr	r3, [pc, #12]	; (800d638 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	200000d8 	.word	0x200000d8

0800d63c <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2243      	movs	r2, #67	; 0x43
 800d1fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d1fe:	4b03      	ldr	r3, [pc, #12]	; (800d20c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	200000d8 	.word	0x200000d8

0800d210 <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> origin/main
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	220a      	movs	r2, #10
 800d648:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d64a:	4b03      	ldr	r3, [pc, #12]	; (800d658 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	2000000c 	.word	0x2000000c

0800d65c <USBD_CDC_RegisterInterface>:
=======
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	220a      	movs	r2, #10
 800d21c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d21e:	4b03      	ldr	r3, [pc, #12]	; (800d22c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	2000000c 	.word	0x2000000c

0800d230 <USBD_CDC_RegisterInterface>:
>>>>>>> origin/main
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e004      	b.n	800d67a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <USBD_CDC_SetTxBuffer>:
=======
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d240:	2303      	movs	r3, #3
 800d242:	e004      	b.n	800d24e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <USBD_CDC_SetTxBuffer>:
>>>>>>> origin/main
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< HEAD
 800d686:	b480      	push	{r7}
 800d688:	b087      	sub	sp, #28
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d698:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e008      	b.n	800d6b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	371c      	adds	r7, #28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <USBD_CDC_SetRxBuffer>:
=======
 800d25a:	b480      	push	{r7}
 800d25c:	b087      	sub	sp, #28
 800d25e:	af00      	add	r7, sp, #0
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d26c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d274:	2303      	movs	r3, #3
 800d276:	e008      	b.n	800d28a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	68ba      	ldr	r2, [r7, #8]
 800d27c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	371c      	adds	r7, #28
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <USBD_CDC_SetRxBuffer>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< HEAD
 800d6c2:	b480      	push	{r7}
 800d6c4:	b085      	sub	sp, #20
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e004      	b.n	800d6e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <USBD_CDC_ReceivePacket>:
=======
 800d296:	b480      	push	{r7}
 800d298:	b085      	sub	sp, #20
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e004      	b.n	800d2bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USBD_CDC_ReceivePacket>:
>>>>>>> origin/main
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d70e:	2303      	movs	r3, #3
 800d710:	e016      	b.n	800d740 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	7c1b      	ldrb	r3, [r3, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d109      	bne.n	800d72e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d720:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d724:	2101      	movs	r1, #1
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f001 fe3c 	bl	800f3a4 <USBD_LL_PrepareReceive>
 800d72c:	e007      	b.n	800d73e <USBD_CDC_ReceivePacket+0x4a>
=======
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e016      	b.n	800d314 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7c1b      	ldrb	r3, [r3, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fe3c 	bl	800ef78 <USBD_LL_PrepareReceive>
 800d300:	e007      	b.n	800d312 <USBD_CDC_ReceivePacket+0x4a>
>>>>>>> origin/main
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	2101      	movs	r1, #1
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 fe33 	bl	800f3a4 <USBD_LL_PrepareReceive>
=======
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d308:	2340      	movs	r3, #64	; 0x40
 800d30a:	2101      	movs	r1, #1
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 fe33 	bl	800ef78 <USBD_LL_PrepareReceive>
>>>>>>> origin/main
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_Init>:
=======
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_Init>:
>>>>>>> origin/main
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
=======
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	71fb      	strb	r3, [r7, #7]
>>>>>>> origin/main
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< HEAD
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <USBD_Init+0x18>
=======
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d101      	bne.n	800d334 <USBD_Init+0x18>
>>>>>>> origin/main
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 800d75c:	2303      	movs	r3, #3
 800d75e:	e01f      	b.n	800d7a0 <USBD_Init+0x58>
=======
 800d330:	2303      	movs	r3, #3
 800d332:	e01f      	b.n	800d374 <USBD_Init+0x58>
>>>>>>> origin/main
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
<<<<<<< HEAD
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
=======
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2200      	movs	r2, #0
 800d348:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
>>>>>>> origin/main
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	79fa      	ldrb	r2, [r7, #7]
 800d792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f001 fbf5 	bl	800ef84 <USBD_LL_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBD_RegisterClass>:
=======
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	79fa      	ldrb	r2, [r7, #7]
 800d366:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f001 fbf5 	bl	800eb58 <USBD_LL_Init>
 800d36e:	4603      	mov	r3, r0
 800d370:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d372:	7dfb      	ldrb	r3, [r7, #23]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_RegisterClass>:
>>>>>>> origin/main
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <USBD_RegisterClass+0x18>
=======
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <USBD_RegisterClass+0x18>
>>>>>>> origin/main
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e016      	b.n	800d7ee <USBD_RegisterClass+0x46>
=======
 800d390:	2303      	movs	r3, #3
 800d392:	e016      	b.n	800d3c2 <USBD_RegisterClass+0x46>
>>>>>>> origin/main
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
<<<<<<< HEAD
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
=======
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
>>>>>>> origin/main
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
<<<<<<< HEAD
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00b      	beq.n	800d7ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	f107 020e 	add.w	r2, r7, #14
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
=======
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b0:	f107 020e 	add.w	r2, r7, #14
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4798      	blx	r3
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
>>>>>>> origin/main
  }
#endif /* USE_USB_FS */

  return USBD_OK;
<<<<<<< HEAD
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <USBD_Start>:
=======
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_Start>:
>>>>>>> origin/main
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f001 fc22 	bl	800f048 <USBD_LL_Start>
 800d804:	4603      	mov	r3, r0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_RunTestMode>:
=======
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 fc22 	bl	800ec1c <USBD_LL_Start>
 800d3d8:	4603      	mov	r3, r0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBD_RunTestMode>:
>>>>>>> origin/main
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
=======
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
>>>>>>> origin/main
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <USBD_SetClassConfig>:
=======
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USBD_SetClassConfig>:
>>>>>>> origin/main
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d830:	2303      	movs	r3, #3
 800d832:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d009      	beq.n	800d852 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	78fa      	ldrb	r2, [r7, #3]
 800d848:	4611      	mov	r1, r2
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	4798      	blx	r3
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d852:	7bfb      	ldrb	r3, [r7, #15]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_ClrClassConfig>:
=======
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d009      	beq.n	800d426 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	78fa      	ldrb	r2, [r7, #3]
 800d41c:	4611      	mov	r1, r2
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	4798      	blx	r3
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d426:	7bfb      	ldrb	r3, [r7, #15]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_ClrClassConfig>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d007      	beq.n	800d882 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	78fa      	ldrb	r2, [r7, #3]
 800d87c:	4611      	mov	r1, r2
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	4798      	blx	r3
  }

  return USBD_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_LL_SetupStage>:
=======
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	4611      	mov	r1, r2
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	4798      	blx	r3
  }

  return USBD_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_LL_SetupStage>:
>>>>>>> origin/main
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 ff46 	bl	800e730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8c0:	f003 031f 	and.w	r3, r3, #31
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d01a      	beq.n	800d8fe <USBD_LL_SetupStage+0x72>
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d822      	bhi.n	800d912 <USBD_LL_SetupStage+0x86>
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <USBD_LL_SetupStage+0x4a>
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d00a      	beq.n	800d8ea <USBD_LL_SetupStage+0x5e>
 800d8d4:	e01d      	b.n	800d912 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f9ee 	bl	800dcc0 <USBD_StdDevReq>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e8:	e020      	b.n	800d92c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fa52 	bl	800dd9c <USBD_StdItfReq>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d8fc:	e016      	b.n	800d92c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fa91 	bl	800de2e <USBD_StdEPReq>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]
      break;
 800d910:	e00c      	b.n	800d92c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d918:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 fc37 	bl	800f194 <USBD_LL_StallEP>
 800d926:	4603      	mov	r3, r0
 800d928:	73fb      	strb	r3, [r7, #15]
      break;
 800d92a:	bf00      	nop
  }

  return ret;
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_LL_DataOutStage>:
=======
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 ff46 	bl	800e304 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d486:	461a      	mov	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d494:	f003 031f 	and.w	r3, r3, #31
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d01a      	beq.n	800d4d2 <USBD_LL_SetupStage+0x72>
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d822      	bhi.n	800d4e6 <USBD_LL_SetupStage+0x86>
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <USBD_LL_SetupStage+0x4a>
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d00a      	beq.n	800d4be <USBD_LL_SetupStage+0x5e>
 800d4a8:	e01d      	b.n	800d4e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f9ee 	bl	800d894 <USBD_StdDevReq>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d4bc:	e020      	b.n	800d500 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fa52 	bl	800d970 <USBD_StdItfReq>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d4d0:	e016      	b.n	800d500 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fa91 	bl	800da02 <USBD_StdEPReq>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4e4:	e00c      	b.n	800d500 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d4ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 fc37 	bl	800ed68 <USBD_LL_StallEP>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d4fe:	bf00      	nop
  }

  return ret;
 800d500:	7bfb      	ldrb	r3, [r7, #15]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_LL_DataOutStage>:
>>>>>>> origin/main
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800d936:	b580      	push	{r7, lr}
 800d938:	b086      	sub	sp, #24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	460b      	mov	r3, r1
 800d940:	607a      	str	r2, [r7, #4]
 800d942:	72fb      	strb	r3, [r7, #11]
=======
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b086      	sub	sp, #24
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	460b      	mov	r3, r1
 800d514:	607a      	str	r2, [r7, #4]
 800d516:	72fb      	strb	r3, [r7, #11]
>>>>>>> origin/main
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d138      	bne.n	800d9bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d950:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d958:	2b03      	cmp	r3, #3
 800d95a:	d14a      	bne.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	429a      	cmp	r2, r3
 800d966:	d913      	bls.n	800d990 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	1ad2      	subs	r2, r2, r3
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	68da      	ldr	r2, [r3, #12]
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	4293      	cmp	r3, r2
 800d980:	bf28      	it	cs
 800d982:	4613      	movcs	r3, r2
 800d984:	461a      	mov	r2, r3
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 ffc5 	bl	800e918 <USBD_CtlContinueRx>
 800d98e:	e030      	b.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
=======
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d138      	bne.n	800d590 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d524:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d52c:	2b03      	cmp	r3, #3
 800d52e:	d14a      	bne.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	689a      	ldr	r2, [r3, #8]
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d913      	bls.n	800d564 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	689a      	ldr	r2, [r3, #8]
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	1ad2      	subs	r2, r2, r3
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	4293      	cmp	r3, r2
 800d554:	bf28      	it	cs
 800d556:	4613      	movcs	r3, r2
 800d558:	461a      	mov	r2, r3
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f000 ffc5 	bl	800e4ec <USBD_CtlContinueRx>
 800d562:	e030      	b.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
>>>>>>> origin/main
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d10b      	bne.n	800d9b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d005      	beq.n	800d9b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	4798      	blx	r3
=======
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d10b      	bne.n	800d588 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	4798      	blx	r3
>>>>>>> origin/main
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 ffc0 	bl	800e93a <USBD_CtlSendStatus>
 800d9ba:	e01a      	b.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
=======
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f000 ffc0 	bl	800e50e <USBD_CtlSendStatus>
 800d58e:	e01a      	b.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
>>>>>>> origin/main
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	d114      	bne.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00e      	beq.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	7afa      	ldrb	r2, [r7, #11]
 800d9de:	4611      	mov	r1, r2
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	4798      	blx	r3
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d9e8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
 800d9f0:	e000      	b.n	800d9f4 <USBD_LL_DataOutStage+0xbe>
=======
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b03      	cmp	r3, #3
 800d59a:	d114      	bne.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00e      	beq.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	7afa      	ldrb	r2, [r7, #11]
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	4798      	blx	r3
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d5bc:	7dfb      	ldrb	r3, [r7, #23]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	e000      	b.n	800d5c8 <USBD_LL_DataOutStage+0xbe>
>>>>>>> origin/main
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USBD_LL_DataInStage>:
=======
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <USBD_LL_DataInStage>:
>>>>>>> origin/main
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	460b      	mov	r3, r1
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	72fb      	strb	r3, [r7, #11]
=======
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	72fb      	strb	r3, [r7, #11]
>>>>>>> origin/main
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 800da0a:	7afb      	ldrb	r3, [r7, #11]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d16b      	bne.n	800dae8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3314      	adds	r3, #20
 800da14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d156      	bne.n	800dace <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	689a      	ldr	r2, [r3, #8]
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d914      	bls.n	800da56 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	1ad2      	subs	r2, r2, r3
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	461a      	mov	r2, r3
 800da40:	6879      	ldr	r1, [r7, #4]
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f000 ff3a 	bl	800e8bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da48:	2300      	movs	r3, #0
 800da4a:	2200      	movs	r2, #0
 800da4c:	2100      	movs	r1, #0
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f001 fca8 	bl	800f3a4 <USBD_LL_PrepareReceive>
 800da54:	e03b      	b.n	800dace <USBD_LL_DataInStage+0xd2>
=======
 800d5de:	7afb      	ldrb	r3, [r7, #11]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d16b      	bne.n	800d6bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3314      	adds	r3, #20
 800d5e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d156      	bne.n	800d6a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	689a      	ldr	r2, [r3, #8]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d914      	bls.n	800d62a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	689a      	ldr	r2, [r3, #8]
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	1ad2      	subs	r2, r2, r3
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	461a      	mov	r2, r3
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 ff3a 	bl	800e490 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d61c:	2300      	movs	r3, #0
 800d61e:	2200      	movs	r2, #0
 800d620:	2100      	movs	r1, #0
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f001 fca8 	bl	800ef78 <USBD_LL_PrepareReceive>
 800d628:	e03b      	b.n	800d6a2 <USBD_LL_DataInStage+0xd2>
>>>>>>> origin/main
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< HEAD
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d11c      	bne.n	800da9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	685a      	ldr	r2, [r3, #4]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d316      	bcc.n	800da9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	685a      	ldr	r2, [r3, #4]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da78:	429a      	cmp	r2, r3
 800da7a:	d20f      	bcs.n	800da9c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da7c:	2200      	movs	r2, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f000 ff1b 	bl	800e8bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da8e:	2300      	movs	r3, #0
 800da90:	2200      	movs	r2, #0
 800da92:	2100      	movs	r1, #0
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f001 fc85 	bl	800f3a4 <USBD_LL_PrepareReceive>
 800da9a:	e018      	b.n	800dace <USBD_LL_DataInStage+0xd2>
=======
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	429a      	cmp	r2, r3
 800d634:	d11c      	bne.n	800d670 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d63e:	429a      	cmp	r2, r3
 800d640:	d316      	bcc.n	800d670 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d20f      	bcs.n	800d670 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d650:	2200      	movs	r2, #0
 800d652:	2100      	movs	r1, #0
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 ff1b 	bl	800e490 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d662:	2300      	movs	r3, #0
 800d664:	2200      	movs	r2, #0
 800d666:	2100      	movs	r1, #0
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f001 fc85 	bl	800ef78 <USBD_LL_PrepareReceive>
 800d66e:	e018      	b.n	800d6a2 <USBD_LL_DataInStage+0xd2>
>>>>>>> origin/main
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d10b      	bne.n	800dac0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dac0:	2180      	movs	r1, #128	; 0x80
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f001 fb66 	bl	800f194 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 ff49 	bl	800e960 <USBD_CtlReceiveStatus>
=======
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d10b      	bne.n	800d694 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d005      	beq.n	800d694 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d694:	2180      	movs	r1, #128	; 0x80
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f001 fb66 	bl	800ed68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f000 ff49 	bl	800e534 <USBD_CtlReceiveStatus>
>>>>>>> origin/main
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d122      	bne.n	800db1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff fe98 	bl	800d80e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dae6:	e01a      	b.n	800db1e <USBD_LL_DataInStage+0x122>
=======
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d122      	bne.n	800d6f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f7ff fe98 	bl	800d3e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d6ba:	e01a      	b.n	800d6f2 <USBD_LL_DataInStage+0x122>
>>>>>>> origin/main
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d114      	bne.n	800db1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dafa:	695b      	ldr	r3, [r3, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00e      	beq.n	800db1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db06:	695b      	ldr	r3, [r3, #20]
 800db08:	7afa      	ldrb	r2, [r7, #11]
 800db0a:	4611      	mov	r1, r2
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	4798      	blx	r3
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800db1a:	7dfb      	ldrb	r3, [r7, #23]
 800db1c:	e000      	b.n	800db20 <USBD_LL_DataInStage+0x124>
=======
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b03      	cmp	r3, #3
 800d6c6:	d114      	bne.n	800d6f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00e      	beq.n	800d6f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	7afa      	ldrb	r2, [r7, #11]
 800d6de:	4611      	mov	r1, r2
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	4798      	blx	r3
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	e000      	b.n	800d6f4 <USBD_LL_DataInStage+0x124>
>>>>>>> origin/main
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_LL_Reset>:
=======
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_LL_Reset>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800db58:	2303      	movs	r3, #3
 800db5a:	e02f      	b.n	800dbbc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00f      	beq.n	800db86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d009      	beq.n	800db86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	6852      	ldr	r2, [r2, #4]
 800db7e:	b2d2      	uxtb	r2, r2
 800db80:	4611      	mov	r1, r2
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	4798      	blx	r3
=======
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d72c:	2303      	movs	r3, #3
 800d72e:	e02f      	b.n	800d790 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00f      	beq.n	800d75a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	6852      	ldr	r2, [r2, #4]
 800d752:	b2d2      	uxtb	r2, r2
 800d754:	4611      	mov	r1, r2
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	4798      	blx	r3
>>>>>>> origin/main
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< HEAD
 800db86:	2340      	movs	r3, #64	; 0x40
 800db88:	2200      	movs	r2, #0
 800db8a:	2100      	movs	r1, #0
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fa8d 	bl	800f0ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2240      	movs	r2, #64	; 0x40
 800db9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dba2:	2340      	movs	r3, #64	; 0x40
 800dba4:	2200      	movs	r2, #0
 800dba6:	2180      	movs	r1, #128	; 0x80
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f001 fa7f 	bl	800f0ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2240      	movs	r2, #64	; 0x40
 800dbb8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_SetSpeed>:
=======
 800d75a:	2340      	movs	r3, #64	; 0x40
 800d75c:	2200      	movs	r2, #0
 800d75e:	2100      	movs	r1, #0
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f001 fa8d 	bl	800ec80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2201      	movs	r2, #1
 800d76a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2240      	movs	r2, #64	; 0x40
 800d772:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d776:	2340      	movs	r3, #64	; 0x40
 800d778:	2200      	movs	r2, #0
 800d77a:	2180      	movs	r1, #128	; 0x80
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 fa7f 	bl	800ec80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2240      	movs	r2, #64	; 0x40
 800d78c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_LL_SetSpeed>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	78fa      	ldrb	r2, [r7, #3]
 800dbd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <USBD_LL_Suspend>:
=======
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <USBD_LL_Suspend>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2204      	movs	r2, #4
 800dbfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_LL_Resume>:
=======
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2204      	movs	r2, #4
 800d7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USBD_LL_Resume>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d106      	bne.n	800dc32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <USBD_LL_SOF>:
=======
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	d106      	bne.n	800d806 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USBD_LL_SOF>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e012      	b.n	800dc7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d10b      	bne.n	800dc7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	4798      	blx	r3
=======
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d826:	2303      	movs	r3, #3
 800d828:	e012      	b.n	800d850 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b03      	cmp	r3, #3
 800d834:	d10b      	bne.n	800d84e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83c:	69db      	ldr	r3, [r3, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d848:	69db      	ldr	r3, [r3, #28]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	4798      	blx	r3
>>>>>>> origin/main
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <SWAPBYTE>:
=======
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <SWAPBYTE>:
>>>>>>> origin/main

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< HEAD
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dca2:	8a3b      	ldrh	r3, [r7, #16]
 800dca4:	021b      	lsls	r3, r3, #8
 800dca6:	b21a      	sxth	r2, r3
 800dca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	b21b      	sxth	r3, r3
 800dcb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dcb2:	89fb      	ldrh	r3, [r7, #14]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	371c      	adds	r7, #28
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <USBD_StdDevReq>:
=======
 800d858:	b480      	push	{r7}
 800d85a:	b087      	sub	sp, #28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	3301      	adds	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d876:	8a3b      	ldrh	r3, [r7, #16]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	b21a      	sxth	r2, r3
 800d87c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d880:	4313      	orrs	r3, r2
 800d882:	b21b      	sxth	r3, r3
 800d884:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d886:	89fb      	ldrh	r3, [r7, #14]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	371c      	adds	r7, #28
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <USBD_StdDevReq>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcd6:	2b40      	cmp	r3, #64	; 0x40
 800dcd8:	d005      	beq.n	800dce6 <USBD_StdDevReq+0x26>
 800dcda:	2b40      	cmp	r3, #64	; 0x40
 800dcdc:	d853      	bhi.n	800dd86 <USBD_StdDevReq+0xc6>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00b      	beq.n	800dcfa <USBD_StdDevReq+0x3a>
 800dce2:	2b20      	cmp	r3, #32
 800dce4:	d14f      	bne.n	800dd86 <USBD_StdDevReq+0xc6>
=======
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8aa:	2b40      	cmp	r3, #64	; 0x40
 800d8ac:	d005      	beq.n	800d8ba <USBD_StdDevReq+0x26>
 800d8ae:	2b40      	cmp	r3, #64	; 0x40
 800d8b0:	d853      	bhi.n	800d95a <USBD_StdDevReq+0xc6>
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00b      	beq.n	800d8ce <USBD_StdDevReq+0x3a>
 800d8b6:	2b20      	cmp	r3, #32
 800d8b8:	d14f      	bne.n	800d95a <USBD_StdDevReq+0xc6>
>>>>>>> origin/main
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	4798      	blx	r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]
      break;
 800dcf8:	e04a      	b.n	800dd90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	785b      	ldrb	r3, [r3, #1]
 800dcfe:	2b09      	cmp	r3, #9
 800dd00:	d83b      	bhi.n	800dd7a <USBD_StdDevReq+0xba>
 800dd02:	a201      	add	r2, pc, #4	; (adr r2, 800dd08 <USBD_StdDevReq+0x48>)
 800dd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd08:	0800dd5d 	.word	0x0800dd5d
 800dd0c:	0800dd71 	.word	0x0800dd71
 800dd10:	0800dd7b 	.word	0x0800dd7b
 800dd14:	0800dd67 	.word	0x0800dd67
 800dd18:	0800dd7b 	.word	0x0800dd7b
 800dd1c:	0800dd3b 	.word	0x0800dd3b
 800dd20:	0800dd31 	.word	0x0800dd31
 800dd24:	0800dd7b 	.word	0x0800dd7b
 800dd28:	0800dd53 	.word	0x0800dd53
 800dd2c:	0800dd45 	.word	0x0800dd45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f9de 	bl	800e0f4 <USBD_GetDescriptor>
          break;
 800dd38:	e024      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fb6d 	bl	800e41c <USBD_SetAddress>
          break;
 800dd42:	e01f      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fbac 	bl	800e4a4 <USBD_SetConfig>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73fb      	strb	r3, [r7, #15]
          break;
 800dd50:	e018      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fc4b 	bl	800e5f0 <USBD_GetConfig>
          break;
 800dd5a:	e013      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fc7c 	bl	800e65c <USBD_GetStatus>
          break;
 800dd64:	e00e      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fcab 	bl	800e6c4 <USBD_SetFeature>
          break;
 800dd6e:	e009      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fcba 	bl	800e6ec <USBD_ClrFeature>
          break;
 800dd78:	e004      	b.n	800dd84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fd11 	bl	800e7a4 <USBD_CtlError>
          break;
 800dd82:	bf00      	nop
      }
      break;
 800dd84:	e004      	b.n	800dd90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 fd0b 	bl	800e7a4 <USBD_CtlError>
      break;
 800dd8e:	bf00      	nop
  }

  return ret;
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop

0800dd9c <USBD_StdItfReq>:
=======
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	4798      	blx	r3
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d8cc:	e04a      	b.n	800d964 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	785b      	ldrb	r3, [r3, #1]
 800d8d2:	2b09      	cmp	r3, #9
 800d8d4:	d83b      	bhi.n	800d94e <USBD_StdDevReq+0xba>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <USBD_StdDevReq+0x48>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d931 	.word	0x0800d931
 800d8e0:	0800d945 	.word	0x0800d945
 800d8e4:	0800d94f 	.word	0x0800d94f
 800d8e8:	0800d93b 	.word	0x0800d93b
 800d8ec:	0800d94f 	.word	0x0800d94f
 800d8f0:	0800d90f 	.word	0x0800d90f
 800d8f4:	0800d905 	.word	0x0800d905
 800d8f8:	0800d94f 	.word	0x0800d94f
 800d8fc:	0800d927 	.word	0x0800d927
 800d900:	0800d919 	.word	0x0800d919
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f9de 	bl	800dcc8 <USBD_GetDescriptor>
          break;
 800d90c:	e024      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fb6d 	bl	800dff0 <USBD_SetAddress>
          break;
 800d916:	e01f      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fbac 	bl	800e078 <USBD_SetConfig>
 800d920:	4603      	mov	r3, r0
 800d922:	73fb      	strb	r3, [r7, #15]
          break;
 800d924:	e018      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fc4b 	bl	800e1c4 <USBD_GetConfig>
          break;
 800d92e:	e013      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 fc7c 	bl	800e230 <USBD_GetStatus>
          break;
 800d938:	e00e      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fcab 	bl	800e298 <USBD_SetFeature>
          break;
 800d942:	e009      	b.n	800d958 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fcba 	bl	800e2c0 <USBD_ClrFeature>
          break;
 800d94c:	e004      	b.n	800d958 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 fd11 	bl	800e378 <USBD_CtlError>
          break;
 800d956:	bf00      	nop
      }
      break;
 800d958:	e004      	b.n	800d964 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fd0b 	bl	800e378 <USBD_CtlError>
      break;
 800d962:	bf00      	nop
  }

  return ret;
 800d964:	7bfb      	ldrb	r3, [r7, #15]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop

0800d970 <USBD_StdItfReq>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddb2:	2b40      	cmp	r3, #64	; 0x40
 800ddb4:	d005      	beq.n	800ddc2 <USBD_StdItfReq+0x26>
 800ddb6:	2b40      	cmp	r3, #64	; 0x40
 800ddb8:	d82f      	bhi.n	800de1a <USBD_StdItfReq+0x7e>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <USBD_StdItfReq+0x26>
 800ddbe:	2b20      	cmp	r3, #32
 800ddc0:	d12b      	bne.n	800de1a <USBD_StdItfReq+0x7e>
=======
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d986:	2b40      	cmp	r3, #64	; 0x40
 800d988:	d005      	beq.n	800d996 <USBD_StdItfReq+0x26>
 800d98a:	2b40      	cmp	r3, #64	; 0x40
 800d98c:	d82f      	bhi.n	800d9ee <USBD_StdItfReq+0x7e>
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <USBD_StdItfReq+0x26>
 800d992:	2b20      	cmp	r3, #32
 800d994:	d12b      	bne.n	800d9ee <USBD_StdItfReq+0x7e>
>>>>>>> origin/main
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d81d      	bhi.n	800de0c <USBD_StdItfReq+0x70>
=======
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d81d      	bhi.n	800d9e0 <USBD_StdItfReq+0x70>
>>>>>>> origin/main
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	889b      	ldrh	r3, [r3, #4]
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d813      	bhi.n	800de02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	4798      	blx	r3
 800dde8:	4603      	mov	r3, r0
 800ddea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	88db      	ldrh	r3, [r3, #6]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d110      	bne.n	800de16 <USBD_StdItfReq+0x7a>
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10d      	bne.n	800de16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fd9d 	bl	800e93a <USBD_CtlSendStatus>
=======
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	889b      	ldrh	r3, [r3, #4]
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d813      	bhi.n	800d9d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	4798      	blx	r3
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	88db      	ldrh	r3, [r3, #6]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d110      	bne.n	800d9ea <USBD_StdItfReq+0x7a>
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10d      	bne.n	800d9ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fd9d 	bl	800e50e <USBD_CtlSendStatus>
>>>>>>> origin/main
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 800de00:	e009      	b.n	800de16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fccd 	bl	800e7a4 <USBD_CtlError>
          break;
 800de0a:	e004      	b.n	800de16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fcc8 	bl	800e7a4 <USBD_CtlError>
          break;
 800de14:	e000      	b.n	800de18 <USBD_StdItfReq+0x7c>
          break;
 800de16:	bf00      	nop
      }
      break;
 800de18:	e004      	b.n	800de24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fcc1 	bl	800e7a4 <USBD_CtlError>
      break;
 800de22:	bf00      	nop
  }

  return ret;
 800de24:	7bfb      	ldrb	r3, [r7, #15]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <USBD_StdEPReq>:
=======
 800d9d4:	e009      	b.n	800d9ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fccd 	bl	800e378 <USBD_CtlError>
          break;
 800d9de:	e004      	b.n	800d9ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fcc8 	bl	800e378 <USBD_CtlError>
          break;
 800d9e8:	e000      	b.n	800d9ec <USBD_StdItfReq+0x7c>
          break;
 800d9ea:	bf00      	nop
      }
      break;
 800d9ec:	e004      	b.n	800d9f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fcc1 	bl	800e378 <USBD_CtlError>
      break;
 800d9f6:	bf00      	nop
  }

  return ret;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_StdEPReq>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
 800de36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	889b      	ldrh	r3, [r3, #4]
 800de40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de4a:	2b40      	cmp	r3, #64	; 0x40
 800de4c:	d007      	beq.n	800de5e <USBD_StdEPReq+0x30>
 800de4e:	2b40      	cmp	r3, #64	; 0x40
 800de50:	f200 8145 	bhi.w	800e0de <USBD_StdEPReq+0x2b0>
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00c      	beq.n	800de72 <USBD_StdEPReq+0x44>
 800de58:	2b20      	cmp	r3, #32
 800de5a:	f040 8140 	bne.w	800e0de <USBD_StdEPReq+0x2b0>
=======
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	889b      	ldrh	r3, [r3, #4]
 800da14:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da1e:	2b40      	cmp	r3, #64	; 0x40
 800da20:	d007      	beq.n	800da32 <USBD_StdEPReq+0x30>
 800da22:	2b40      	cmp	r3, #64	; 0x40
 800da24:	f200 8145 	bhi.w	800dcb2 <USBD_StdEPReq+0x2b0>
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00c      	beq.n	800da46 <USBD_StdEPReq+0x44>
 800da2c:	2b20      	cmp	r3, #32
 800da2e:	f040 8140 	bne.w	800dcb2 <USBD_StdEPReq+0x2b0>
>>>>>>> origin/main
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	4798      	blx	r3
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
      break;
 800de70:	e13a      	b.n	800e0e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	785b      	ldrb	r3, [r3, #1]
 800de76:	2b03      	cmp	r3, #3
 800de78:	d007      	beq.n	800de8a <USBD_StdEPReq+0x5c>
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	f300 8129 	bgt.w	800e0d2 <USBD_StdEPReq+0x2a4>
 800de80:	2b00      	cmp	r3, #0
 800de82:	d07f      	beq.n	800df84 <USBD_StdEPReq+0x156>
 800de84:	2b01      	cmp	r3, #1
 800de86:	d03c      	beq.n	800df02 <USBD_StdEPReq+0xd4>
 800de88:	e123      	b.n	800e0d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b02      	cmp	r3, #2
 800de94:	d002      	beq.n	800de9c <USBD_StdEPReq+0x6e>
 800de96:	2b03      	cmp	r3, #3
 800de98:	d016      	beq.n	800dec8 <USBD_StdEPReq+0x9a>
 800de9a:	e02c      	b.n	800def6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00d      	beq.n	800debe <USBD_StdEPReq+0x90>
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	2b80      	cmp	r3, #128	; 0x80
 800dea6:	d00a      	beq.n	800debe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dea8:	7bbb      	ldrb	r3, [r7, #14]
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f001 f971 	bl	800f194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deb2:	2180      	movs	r1, #128	; 0x80
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f001 f96d 	bl	800f194 <USBD_LL_StallEP>
 800deba:	bf00      	nop
=======
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	4798      	blx	r3
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
      break;
 800da44:	e13a      	b.n	800dcbc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d007      	beq.n	800da5e <USBD_StdEPReq+0x5c>
 800da4e:	2b03      	cmp	r3, #3
 800da50:	f300 8129 	bgt.w	800dca6 <USBD_StdEPReq+0x2a4>
 800da54:	2b00      	cmp	r3, #0
 800da56:	d07f      	beq.n	800db58 <USBD_StdEPReq+0x156>
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d03c      	beq.n	800dad6 <USBD_StdEPReq+0xd4>
 800da5c:	e123      	b.n	800dca6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b02      	cmp	r3, #2
 800da68:	d002      	beq.n	800da70 <USBD_StdEPReq+0x6e>
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d016      	beq.n	800da9c <USBD_StdEPReq+0x9a>
 800da6e:	e02c      	b.n	800daca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00d      	beq.n	800da92 <USBD_StdEPReq+0x90>
 800da76:	7bbb      	ldrb	r3, [r7, #14]
 800da78:	2b80      	cmp	r3, #128	; 0x80
 800da7a:	d00a      	beq.n	800da92 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da7c:	7bbb      	ldrb	r3, [r7, #14]
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f001 f971 	bl	800ed68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da86:	2180      	movs	r1, #128	; 0x80
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f001 f96d 	bl	800ed68 <USBD_LL_StallEP>
 800da8e:	bf00      	nop
>>>>>>> origin/main
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 800debc:	e020      	b.n	800df00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 fc6f 	bl	800e7a4 <USBD_CtlError>
              break;
 800dec6:	e01b      	b.n	800df00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	885b      	ldrh	r3, [r3, #2]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10e      	bne.n	800deee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00b      	beq.n	800deee <USBD_StdEPReq+0xc0>
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b80      	cmp	r3, #128	; 0x80
 800deda:	d008      	beq.n	800deee <USBD_StdEPReq+0xc0>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	88db      	ldrh	r3, [r3, #6]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d104      	bne.n	800deee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f001 f953 	bl	800f194 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fd23 	bl	800e93a <USBD_CtlSendStatus>

              break;
 800def4:	e004      	b.n	800df00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fc53 	bl	800e7a4 <USBD_CtlError>
              break;
 800defe:	bf00      	nop
          }
          break;
 800df00:	e0ec      	b.n	800e0dc <USBD_StdEPReq+0x2ae>
=======
 800da90:	e020      	b.n	800dad4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fc6f 	bl	800e378 <USBD_CtlError>
              break;
 800da9a:	e01b      	b.n	800dad4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	885b      	ldrh	r3, [r3, #2]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10e      	bne.n	800dac2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800daa4:	7bbb      	ldrb	r3, [r7, #14]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00b      	beq.n	800dac2 <USBD_StdEPReq+0xc0>
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	2b80      	cmp	r3, #128	; 0x80
 800daae:	d008      	beq.n	800dac2 <USBD_StdEPReq+0xc0>
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	88db      	ldrh	r3, [r3, #6]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d104      	bne.n	800dac2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f001 f953 	bl	800ed68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fd23 	bl	800e50e <USBD_CtlSendStatus>

              break;
 800dac8:	e004      	b.n	800dad4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 fc53 	bl	800e378 <USBD_CtlError>
              break;
 800dad2:	bf00      	nop
          }
          break;
 800dad4:	e0ec      	b.n	800dcb0 <USBD_StdEPReq+0x2ae>
>>>>>>> origin/main

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d002      	beq.n	800df14 <USBD_StdEPReq+0xe6>
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d016      	beq.n	800df40 <USBD_StdEPReq+0x112>
 800df12:	e030      	b.n	800df76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00d      	beq.n	800df36 <USBD_StdEPReq+0x108>
 800df1a:	7bbb      	ldrb	r3, [r7, #14]
 800df1c:	2b80      	cmp	r3, #128	; 0x80
 800df1e:	d00a      	beq.n	800df36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f001 f935 	bl	800f194 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df2a:	2180      	movs	r1, #128	; 0x80
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f001 f931 	bl	800f194 <USBD_LL_StallEP>
 800df32:	bf00      	nop
=======
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d002      	beq.n	800dae8 <USBD_StdEPReq+0xe6>
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d016      	beq.n	800db14 <USBD_StdEPReq+0x112>
 800dae6:	e030      	b.n	800db4a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00d      	beq.n	800db0a <USBD_StdEPReq+0x108>
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2b80      	cmp	r3, #128	; 0x80
 800daf2:	d00a      	beq.n	800db0a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800daf4:	7bbb      	ldrb	r3, [r7, #14]
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f001 f935 	bl	800ed68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dafe:	2180      	movs	r1, #128	; 0x80
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f001 f931 	bl	800ed68 <USBD_LL_StallEP>
 800db06:	bf00      	nop
>>>>>>> origin/main
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 800df34:	e025      	b.n	800df82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fc33 	bl	800e7a4 <USBD_CtlError>
              break;
 800df3e:	e020      	b.n	800df82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	885b      	ldrh	r3, [r3, #2]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d11b      	bne.n	800df80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f001 f952 	bl	800f200 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fcec 	bl	800e93a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	6839      	ldr	r1, [r7, #0]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	4798      	blx	r3
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800df74:	e004      	b.n	800df80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fc13 	bl	800e7a4 <USBD_CtlError>
              break;
 800df7e:	e000      	b.n	800df82 <USBD_StdEPReq+0x154>
              break;
 800df80:	bf00      	nop
          }
          break;
 800df82:	e0ab      	b.n	800e0dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d002      	beq.n	800df96 <USBD_StdEPReq+0x168>
 800df90:	2b03      	cmp	r3, #3
 800df92:	d032      	beq.n	800dffa <USBD_StdEPReq+0x1cc>
 800df94:	e097      	b.n	800e0c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df96:	7bbb      	ldrb	r3, [r7, #14]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d007      	beq.n	800dfac <USBD_StdEPReq+0x17e>
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
 800df9e:	2b80      	cmp	r3, #128	; 0x80
 800dfa0:	d004      	beq.n	800dfac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fbfd 	bl	800e7a4 <USBD_CtlError>
                break;
 800dfaa:	e091      	b.n	800e0d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	da0b      	bge.n	800dfcc <USBD_StdEPReq+0x19e>
 800dfb4:	7bbb      	ldrb	r3, [r7, #14]
 800dfb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfba:	4613      	mov	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	4413      	add	r3, r2
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	3310      	adds	r3, #16
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	3304      	adds	r3, #4
 800dfca:	e00b      	b.n	800dfe4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
 800dfce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2202      	movs	r2, #2
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 fc47 	bl	800e886 <USBD_CtlSendData>
              break;
 800dff8:	e06a      	b.n	800e0d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	da11      	bge.n	800e026 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e002:	7bbb      	ldrb	r3, [r7, #14]
 800e004:	f003 020f 	and.w	r2, r3, #15
 800e008:	6879      	ldr	r1, [r7, #4]
 800e00a:	4613      	mov	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	440b      	add	r3, r1
 800e014:	3324      	adds	r3, #36	; 0x24
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d117      	bne.n	800e04c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fbc0 	bl	800e7a4 <USBD_CtlError>
                  break;
 800e024:	e054      	b.n	800e0d0 <USBD_StdEPReq+0x2a2>
=======
 800db08:	e025      	b.n	800db56 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fc33 	bl	800e378 <USBD_CtlError>
              break;
 800db12:	e020      	b.n	800db56 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	885b      	ldrh	r3, [r3, #2]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d11b      	bne.n	800db54 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db22:	2b00      	cmp	r3, #0
 800db24:	d004      	beq.n	800db30 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800db26:	7bbb      	ldrb	r3, [r7, #14]
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f001 f952 	bl	800edd4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fcec 	bl	800e50e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	4798      	blx	r3
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800db48:	e004      	b.n	800db54 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fc13 	bl	800e378 <USBD_CtlError>
              break;
 800db52:	e000      	b.n	800db56 <USBD_StdEPReq+0x154>
              break;
 800db54:	bf00      	nop
          }
          break;
 800db56:	e0ab      	b.n	800dcb0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b02      	cmp	r3, #2
 800db62:	d002      	beq.n	800db6a <USBD_StdEPReq+0x168>
 800db64:	2b03      	cmp	r3, #3
 800db66:	d032      	beq.n	800dbce <USBD_StdEPReq+0x1cc>
 800db68:	e097      	b.n	800dc9a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db6a:	7bbb      	ldrb	r3, [r7, #14]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d007      	beq.n	800db80 <USBD_StdEPReq+0x17e>
 800db70:	7bbb      	ldrb	r3, [r7, #14]
 800db72:	2b80      	cmp	r3, #128	; 0x80
 800db74:	d004      	beq.n	800db80 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fbfd 	bl	800e378 <USBD_CtlError>
                break;
 800db7e:	e091      	b.n	800dca4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db84:	2b00      	cmp	r3, #0
 800db86:	da0b      	bge.n	800dba0 <USBD_StdEPReq+0x19e>
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db8e:	4613      	mov	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	3310      	adds	r3, #16
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	4413      	add	r3, r2
 800db9c:	3304      	adds	r3, #4
 800db9e:	e00b      	b.n	800dbb8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dba0:	7bbb      	ldrb	r3, [r7, #14]
 800dba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dba6:	4613      	mov	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2202      	movs	r2, #2
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 fc47 	bl	800e45a <USBD_CtlSendData>
              break;
 800dbcc:	e06a      	b.n	800dca4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da11      	bge.n	800dbfa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbd6:	7bbb      	ldrb	r3, [r7, #14]
 800dbd8:	f003 020f 	and.w	r2, r3, #15
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3324      	adds	r3, #36	; 0x24
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d117      	bne.n	800dc20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fbc0 	bl	800e378 <USBD_CtlError>
                  break;
 800dbf8:	e054      	b.n	800dca4 <USBD_StdEPReq+0x2a2>
>>>>>>> origin/main
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 800e026:	7bbb      	ldrb	r3, [r7, #14]
 800e028:	f003 020f 	and.w	r2, r3, #15
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	4613      	mov	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4413      	add	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	440b      	add	r3, r1
 800e038:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d104      	bne.n	800e04c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fbad 	bl	800e7a4 <USBD_CtlError>
                  break;
 800e04a:	e041      	b.n	800e0d0 <USBD_StdEPReq+0x2a2>
=======
 800dbfa:	7bbb      	ldrb	r3, [r7, #14]
 800dbfc:	f003 020f 	and.w	r2, r3, #15
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	4613      	mov	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4413      	add	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	440b      	add	r3, r1
 800dc0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d104      	bne.n	800dc20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fbad 	bl	800e378 <USBD_CtlError>
                  break;
 800dc1e:	e041      	b.n	800dca4 <USBD_StdEPReq+0x2a2>
>>>>>>> origin/main
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 800e04c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e050:	2b00      	cmp	r3, #0
 800e052:	da0b      	bge.n	800e06c <USBD_StdEPReq+0x23e>
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e05a:	4613      	mov	r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	3310      	adds	r3, #16
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	4413      	add	r3, r2
 800e068:	3304      	adds	r3, #4
 800e06a:	e00b      	b.n	800e084 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e072:	4613      	mov	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	4413      	add	r3, r2
 800e082:	3304      	adds	r3, #4
 800e084:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e086:	7bbb      	ldrb	r3, [r7, #14]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <USBD_StdEPReq+0x264>
 800e08c:	7bbb      	ldrb	r3, [r7, #14]
 800e08e:	2b80      	cmp	r3, #128	; 0x80
 800e090:	d103      	bne.n	800e09a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	e00e      	b.n	800e0b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e09a:	7bbb      	ldrb	r3, [r7, #14]
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 f8e4 	bl	800f26c <USBD_LL_IsStallEP>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d003      	beq.n	800e0b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	e002      	b.n	800e0b8 <USBD_StdEPReq+0x28a>
=======
 800dc20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	da0b      	bge.n	800dc40 <USBD_StdEPReq+0x23e>
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc2e:	4613      	mov	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	3310      	adds	r3, #16
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	e00b      	b.n	800dc58 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc46:	4613      	mov	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	4413      	add	r3, r2
 800dc56:	3304      	adds	r3, #4
 800dc58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc5a:	7bbb      	ldrb	r3, [r7, #14]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <USBD_StdEPReq+0x264>
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
 800dc62:	2b80      	cmp	r3, #128	; 0x80
 800dc64:	d103      	bne.n	800dc6e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	e00e      	b.n	800dc8c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f001 f8e4 	bl	800ee40 <USBD_LL_IsStallEP>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2201      	movs	r2, #1
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e002      	b.n	800dc8c <USBD_StdEPReq+0x28a>
>>>>>>> origin/main
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fbe1 	bl	800e886 <USBD_CtlSendData>
              break;
 800e0c4:	e004      	b.n	800e0d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fb6b 	bl	800e7a4 <USBD_CtlError>
              break;
 800e0ce:	bf00      	nop
          }
          break;
 800e0d0:	e004      	b.n	800e0dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fb65 	bl	800e7a4 <USBD_CtlError>
          break;
 800e0da:	bf00      	nop
      }
      break;
 800e0dc:	e004      	b.n	800e0e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fb5f 	bl	800e7a4 <USBD_CtlError>
      break;
 800e0e6:	bf00      	nop
  }

  return ret;
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <USBD_GetDescriptor>:
=======
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2202      	movs	r2, #2
 800dc90:	4619      	mov	r1, r3
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 fbe1 	bl	800e45a <USBD_CtlSendData>
              break;
 800dc98:	e004      	b.n	800dca4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb6b 	bl	800e378 <USBD_CtlError>
              break;
 800dca2:	bf00      	nop
          }
          break;
 800dca4:	e004      	b.n	800dcb0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fb65 	bl	800e378 <USBD_CtlError>
          break;
 800dcae:	bf00      	nop
      }
      break;
 800dcb0:	e004      	b.n	800dcbc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb5f 	bl	800e378 <USBD_CtlError>
      break;
 800dcba:	bf00      	nop
  }

  return ret;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <USBD_GetDescriptor>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0fe:	2300      	movs	r3, #0
 800e100:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e102:	2300      	movs	r3, #0
 800e104:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e106:	2300      	movs	r3, #0
 800e108:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	885b      	ldrh	r3, [r3, #2]
 800e10e:	0a1b      	lsrs	r3, r3, #8
 800e110:	b29b      	uxth	r3, r3
 800e112:	3b01      	subs	r3, #1
 800e114:	2b0e      	cmp	r3, #14
 800e116:	f200 8152 	bhi.w	800e3be <USBD_GetDescriptor+0x2ca>
 800e11a:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <USBD_GetDescriptor+0x2c>)
 800e11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e120:	0800e191 	.word	0x0800e191
 800e124:	0800e1a9 	.word	0x0800e1a9
 800e128:	0800e1e9 	.word	0x0800e1e9
 800e12c:	0800e3bf 	.word	0x0800e3bf
 800e130:	0800e3bf 	.word	0x0800e3bf
 800e134:	0800e35f 	.word	0x0800e35f
 800e138:	0800e38b 	.word	0x0800e38b
 800e13c:	0800e3bf 	.word	0x0800e3bf
 800e140:	0800e3bf 	.word	0x0800e3bf
 800e144:	0800e3bf 	.word	0x0800e3bf
 800e148:	0800e3bf 	.word	0x0800e3bf
 800e14c:	0800e3bf 	.word	0x0800e3bf
 800e150:	0800e3bf 	.word	0x0800e3bf
 800e154:	0800e3bf 	.word	0x0800e3bf
 800e158:	0800e15d 	.word	0x0800e15d
=======
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	885b      	ldrh	r3, [r3, #2]
 800dce2:	0a1b      	lsrs	r3, r3, #8
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3b01      	subs	r3, #1
 800dce8:	2b0e      	cmp	r3, #14
 800dcea:	f200 8152 	bhi.w	800df92 <USBD_GetDescriptor+0x2ca>
 800dcee:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <USBD_GetDescriptor+0x2c>)
 800dcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf4:	0800dd65 	.word	0x0800dd65
 800dcf8:	0800dd7d 	.word	0x0800dd7d
 800dcfc:	0800ddbd 	.word	0x0800ddbd
 800dd00:	0800df93 	.word	0x0800df93
 800dd04:	0800df93 	.word	0x0800df93
 800dd08:	0800df33 	.word	0x0800df33
 800dd0c:	0800df5f 	.word	0x0800df5f
 800dd10:	0800df93 	.word	0x0800df93
 800dd14:	0800df93 	.word	0x0800df93
 800dd18:	0800df93 	.word	0x0800df93
 800dd1c:	0800df93 	.word	0x0800df93
 800dd20:	0800df93 	.word	0x0800df93
 800dd24:	0800df93 	.word	0x0800df93
 800dd28:	0800df93 	.word	0x0800df93
 800dd2c:	0800dd31 	.word	0x0800dd31
>>>>>>> origin/main
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
<<<<<<< HEAD
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00b      	beq.n	800e180 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e16e:	69db      	ldr	r3, [r3, #28]
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	7c12      	ldrb	r2, [r2, #16]
 800e174:	f107 0108 	add.w	r1, r7, #8
 800e178:	4610      	mov	r0, r2
 800e17a:	4798      	blx	r3
 800e17c:	60f8      	str	r0, [r7, #12]
=======
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd36:	69db      	ldr	r3, [r3, #28]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00b      	beq.n	800dd54 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd42:	69db      	ldr	r3, [r3, #28]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	7c12      	ldrb	r2, [r2, #16]
 800dd48:	f107 0108 	add.w	r1, r7, #8
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800e17e:	e126      	b.n	800e3ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fb0e 	bl	800e7a4 <USBD_CtlError>
        err++;
 800e188:	7afb      	ldrb	r3, [r7, #11]
 800e18a:	3301      	adds	r3, #1
 800e18c:	72fb      	strb	r3, [r7, #11]
      break;
 800e18e:	e11e      	b.n	800e3ce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	7c12      	ldrb	r2, [r2, #16]
 800e19c:	f107 0108 	add.w	r1, r7, #8
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	4798      	blx	r3
 800e1a4:	60f8      	str	r0, [r7, #12]
      break;
 800e1a6:	e112      	b.n	800e3ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	7c1b      	ldrb	r3, [r3, #16]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10d      	bne.n	800e1cc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b8:	f107 0208 	add.w	r2, r7, #8
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4798      	blx	r3
 800e1c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	701a      	strb	r2, [r3, #0]
=======
 800dd52:	e126      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fb0e 	bl	800e378 <USBD_CtlError>
        err++;
 800dd5c:	7afb      	ldrb	r3, [r7, #11]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	72fb      	strb	r3, [r7, #11]
      break;
 800dd62:	e11e      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	7c12      	ldrb	r2, [r2, #16]
 800dd70:	f107 0108 	add.w	r1, r7, #8
 800dd74:	4610      	mov	r0, r2
 800dd76:	4798      	blx	r3
 800dd78:	60f8      	str	r0, [r7, #12]
      break;
 800dd7a:	e112      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7c1b      	ldrb	r3, [r3, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10d      	bne.n	800dda0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8c:	f107 0208 	add.w	r2, r7, #8
 800dd90:	4610      	mov	r0, r2
 800dd92:	4798      	blx	r3
 800dd94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 800e1ca:	e100      	b.n	800e3ce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	f107 0208 	add.w	r2, r7, #8
 800e1d8:	4610      	mov	r0, r2
 800e1da:	4798      	blx	r3
 800e1dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	2202      	movs	r2, #2
 800e1e4:	701a      	strb	r2, [r3, #0]
      break;
 800e1e6:	e0f2      	b.n	800e3ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	885b      	ldrh	r3, [r3, #2]
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b05      	cmp	r3, #5
 800e1f0:	f200 80ac 	bhi.w	800e34c <USBD_GetDescriptor+0x258>
 800e1f4:	a201      	add	r2, pc, #4	; (adr r2, 800e1fc <USBD_GetDescriptor+0x108>)
 800e1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fa:	bf00      	nop
 800e1fc:	0800e215 	.word	0x0800e215
 800e200:	0800e249 	.word	0x0800e249
 800e204:	0800e27d 	.word	0x0800e27d
 800e208:	0800e2b1 	.word	0x0800e2b1
 800e20c:	0800e2e5 	.word	0x0800e2e5
 800e210:	0800e319 	.word	0x0800e319
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	7c12      	ldrb	r2, [r2, #16]
 800e22c:	f107 0108 	add.w	r1, r7, #8
 800e230:	4610      	mov	r0, r2
 800e232:	4798      	blx	r3
 800e234:	60f8      	str	r0, [r7, #12]
=======
 800dd9e:	e100      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	f107 0208 	add.w	r2, r7, #8
 800ddac:	4610      	mov	r0, r2
 800ddae:	4798      	blx	r3
 800ddb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	701a      	strb	r2, [r3, #0]
      break;
 800ddba:	e0f2      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	885b      	ldrh	r3, [r3, #2]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b05      	cmp	r3, #5
 800ddc4:	f200 80ac 	bhi.w	800df20 <USBD_GetDescriptor+0x258>
 800ddc8:	a201      	add	r2, pc, #4	; (adr r2, 800ddd0 <USBD_GetDescriptor+0x108>)
 800ddca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddce:	bf00      	nop
 800ddd0:	0800dde9 	.word	0x0800dde9
 800ddd4:	0800de1d 	.word	0x0800de1d
 800ddd8:	0800de51 	.word	0x0800de51
 800dddc:	0800de85 	.word	0x0800de85
 800dde0:	0800deb9 	.word	0x0800deb9
 800dde4:	0800deed 	.word	0x0800deed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	7c12      	ldrb	r2, [r2, #16]
 800de00:	f107 0108 	add.w	r1, r7, #8
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e236:	e091      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fab2 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e240:	7afb      	ldrb	r3, [r7, #11]
 800e242:	3301      	adds	r3, #1
 800e244:	72fb      	strb	r3, [r7, #11]
          break;
 800e246:	e089      	b.n	800e35c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00b      	beq.n	800e26c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	7c12      	ldrb	r2, [r2, #16]
 800e260:	f107 0108 	add.w	r1, r7, #8
 800e264:	4610      	mov	r0, r2
 800e266:	4798      	blx	r3
 800e268:	60f8      	str	r0, [r7, #12]
=======
 800de0a:	e091      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fab2 	bl	800e378 <USBD_CtlError>
            err++;
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	3301      	adds	r3, #1
 800de18:	72fb      	strb	r3, [r7, #11]
          break;
 800de1a:	e089      	b.n	800df30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00b      	beq.n	800de40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	7c12      	ldrb	r2, [r2, #16]
 800de34:	f107 0108 	add.w	r1, r7, #8
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
 800de3c:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e26a:	e077      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa98 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e274:	7afb      	ldrb	r3, [r7, #11]
 800e276:	3301      	adds	r3, #1
 800e278:	72fb      	strb	r3, [r7, #11]
          break;
 800e27a:	e06f      	b.n	800e35c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	7c12      	ldrb	r2, [r2, #16]
 800e294:	f107 0108 	add.w	r1, r7, #8
 800e298:	4610      	mov	r0, r2
 800e29a:	4798      	blx	r3
 800e29c:	60f8      	str	r0, [r7, #12]
=======
 800de3e:	e077      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa98 	bl	800e378 <USBD_CtlError>
            err++;
 800de48:	7afb      	ldrb	r3, [r7, #11]
 800de4a:	3301      	adds	r3, #1
 800de4c:	72fb      	strb	r3, [r7, #11]
          break;
 800de4e:	e06f      	b.n	800df30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	7c12      	ldrb	r2, [r2, #16]
 800de68:	f107 0108 	add.w	r1, r7, #8
 800de6c:	4610      	mov	r0, r2
 800de6e:	4798      	blx	r3
 800de70:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e29e:	e05d      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 fa7e 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e2a8:	7afb      	ldrb	r3, [r7, #11]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ae:	e055      	b.n	800e35c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00b      	beq.n	800e2d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	7c12      	ldrb	r2, [r2, #16]
 800e2c8:	f107 0108 	add.w	r1, r7, #8
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
 800e2d0:	60f8      	str	r0, [r7, #12]
=======
 800de72:	e05d      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fa7e 	bl	800e378 <USBD_CtlError>
            err++;
 800de7c:	7afb      	ldrb	r3, [r7, #11]
 800de7e:	3301      	adds	r3, #1
 800de80:	72fb      	strb	r3, [r7, #11]
          break;
 800de82:	e055      	b.n	800df30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00b      	beq.n	800dea8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	7c12      	ldrb	r2, [r2, #16]
 800de9c:	f107 0108 	add.w	r1, r7, #8
 800dea0:	4610      	mov	r0, r2
 800dea2:	4798      	blx	r3
 800dea4:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e2d2:	e043      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fa64 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e2dc:	7afb      	ldrb	r3, [r7, #11]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2e2:	e03b      	b.n	800e35c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00b      	beq.n	800e308 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	7c12      	ldrb	r2, [r2, #16]
 800e2fc:	f107 0108 	add.w	r1, r7, #8
 800e300:	4610      	mov	r0, r2
 800e302:	4798      	blx	r3
 800e304:	60f8      	str	r0, [r7, #12]
=======
 800dea6:	e043      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa64 	bl	800e378 <USBD_CtlError>
            err++;
 800deb0:	7afb      	ldrb	r3, [r7, #11]
 800deb2:	3301      	adds	r3, #1
 800deb4:	72fb      	strb	r3, [r7, #11]
          break;
 800deb6:	e03b      	b.n	800df30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00b      	beq.n	800dedc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deca:	695b      	ldr	r3, [r3, #20]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	7c12      	ldrb	r2, [r2, #16]
 800ded0:	f107 0108 	add.w	r1, r7, #8
 800ded4:	4610      	mov	r0, r2
 800ded6:	4798      	blx	r3
 800ded8:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e306:	e029      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa4a 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e310:	7afb      	ldrb	r3, [r7, #11]
 800e312:	3301      	adds	r3, #1
 800e314:	72fb      	strb	r3, [r7, #11]
          break;
 800e316:	e021      	b.n	800e35c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e31e:	699b      	ldr	r3, [r3, #24]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	7c12      	ldrb	r2, [r2, #16]
 800e330:	f107 0108 	add.w	r1, r7, #8
 800e334:	4610      	mov	r0, r2
 800e336:	4798      	blx	r3
 800e338:	60f8      	str	r0, [r7, #12]
=======
 800deda:	e029      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa4a 	bl	800e378 <USBD_CtlError>
            err++;
 800dee4:	7afb      	ldrb	r3, [r7, #11]
 800dee6:	3301      	adds	r3, #1
 800dee8:	72fb      	strb	r3, [r7, #11]
          break;
 800deea:	e021      	b.n	800df30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00b      	beq.n	800df10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	7c12      	ldrb	r2, [r2, #16]
 800df04:	f107 0108 	add.w	r1, r7, #8
 800df08:	4610      	mov	r0, r2
 800df0a:	4798      	blx	r3
 800df0c:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800e33a:	e00f      	b.n	800e35c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fa30 	bl	800e7a4 <USBD_CtlError>
            err++;
 800e344:	7afb      	ldrb	r3, [r7, #11]
 800e346:	3301      	adds	r3, #1
 800e348:	72fb      	strb	r3, [r7, #11]
          break;
 800e34a:	e007      	b.n	800e35c <USBD_GetDescriptor+0x268>
=======
 800df0e:	e00f      	b.n	800df30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa30 	bl	800e378 <USBD_CtlError>
            err++;
 800df18:	7afb      	ldrb	r3, [r7, #11]
 800df1a:	3301      	adds	r3, #1
 800df1c:	72fb      	strb	r3, [r7, #11]
          break;
 800df1e:	e007      	b.n	800df30 <USBD_GetDescriptor+0x268>
>>>>>>> origin/main
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fa28 	bl	800e7a4 <USBD_CtlError>
          err++;
 800e354:	7afb      	ldrb	r3, [r7, #11]
 800e356:	3301      	adds	r3, #1
 800e358:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e35a:	bf00      	nop
      }
      break;
 800e35c:	e037      	b.n	800e3ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7c1b      	ldrb	r3, [r3, #16]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d109      	bne.n	800e37a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36e:	f107 0208 	add.w	r2, r7, #8
 800e372:	4610      	mov	r0, r2
 800e374:	4798      	blx	r3
 800e376:	60f8      	str	r0, [r7, #12]
=======
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fa28 	bl	800e378 <USBD_CtlError>
          err++;
 800df28:	7afb      	ldrb	r3, [r7, #11]
 800df2a:	3301      	adds	r3, #1
 800df2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800df2e:	bf00      	nop
      }
      break;
 800df30:	e037      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7c1b      	ldrb	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	f107 0208 	add.w	r2, r7, #8
 800df46:	4610      	mov	r0, r2
 800df48:	4798      	blx	r3
 800df4a:	60f8      	str	r0, [r7, #12]
>>>>>>> origin/main
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800e378:	e029      	b.n	800e3ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fa11 	bl	800e7a4 <USBD_CtlError>
        err++;
 800e382:	7afb      	ldrb	r3, [r7, #11]
 800e384:	3301      	adds	r3, #1
 800e386:	72fb      	strb	r3, [r7, #11]
      break;
 800e388:	e021      	b.n	800e3ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7c1b      	ldrb	r3, [r3, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10d      	bne.n	800e3ae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39a:	f107 0208 	add.w	r2, r7, #8
 800e39e:	4610      	mov	r0, r2
 800e3a0:	4798      	blx	r3
 800e3a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	2207      	movs	r2, #7
 800e3aa:	701a      	strb	r2, [r3, #0]
=======
 800df4c:	e029      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fa11 	bl	800e378 <USBD_CtlError>
        err++;
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	3301      	adds	r3, #1
 800df5a:	72fb      	strb	r3, [r7, #11]
      break;
 800df5c:	e021      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	7c1b      	ldrb	r3, [r3, #16]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10d      	bne.n	800df82 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df6e:	f107 0208 	add.w	r2, r7, #8
 800df72:	4610      	mov	r0, r2
 800df74:	4798      	blx	r3
 800df76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3301      	adds	r3, #1
 800df7c:	2207      	movs	r2, #7
 800df7e:	701a      	strb	r2, [r3, #0]
>>>>>>> origin/main
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800e3ac:	e00f      	b.n	800e3ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f9f7 	bl	800e7a4 <USBD_CtlError>
        err++;
 800e3b6:	7afb      	ldrb	r3, [r7, #11]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	72fb      	strb	r3, [r7, #11]
      break;
 800e3bc:	e007      	b.n	800e3ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e3be:	6839      	ldr	r1, [r7, #0]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 f9ef 	bl	800e7a4 <USBD_CtlError>
      err++;
 800e3c6:	7afb      	ldrb	r3, [r7, #11]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e3cc:	bf00      	nop
  }

  if (err != 0U)
 800e3ce:	7afb      	ldrb	r3, [r7, #11]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d11e      	bne.n	800e412 <USBD_GetDescriptor+0x31e>
=======
 800df80:	e00f      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f9f7 	bl	800e378 <USBD_CtlError>
        err++;
 800df8a:	7afb      	ldrb	r3, [r7, #11]
 800df8c:	3301      	adds	r3, #1
 800df8e:	72fb      	strb	r3, [r7, #11]
      break;
 800df90:	e007      	b.n	800dfa2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f9ef 	bl	800e378 <USBD_CtlError>
      err++;
 800df9a:	7afb      	ldrb	r3, [r7, #11]
 800df9c:	3301      	adds	r3, #1
 800df9e:	72fb      	strb	r3, [r7, #11]
      break;
 800dfa0:	bf00      	nop
  }

  if (err != 0U)
 800dfa2:	7afb      	ldrb	r3, [r7, #11]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d11e      	bne.n	800dfe6 <USBD_GetDescriptor+0x31e>
>>>>>>> origin/main
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< HEAD
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	88db      	ldrh	r3, [r3, #6]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d016      	beq.n	800e40a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e3dc:	893b      	ldrh	r3, [r7, #8]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00e      	beq.n	800e400 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	88da      	ldrh	r2, [r3, #6]
 800e3e6:	893b      	ldrh	r3, [r7, #8]
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	bf28      	it	cs
 800e3ec:	4613      	movcs	r3, r2
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3f2:	893b      	ldrh	r3, [r7, #8]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	68f9      	ldr	r1, [r7, #12]
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fa44 	bl	800e886 <USBD_CtlSendData>
 800e3fe:	e009      	b.n	800e414 <USBD_GetDescriptor+0x320>
=======
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	88db      	ldrh	r3, [r3, #6]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d016      	beq.n	800dfde <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dfb0:	893b      	ldrh	r3, [r7, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00e      	beq.n	800dfd4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	88da      	ldrh	r2, [r3, #6]
 800dfba:	893b      	ldrh	r3, [r7, #8]
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bf28      	it	cs
 800dfc0:	4613      	movcs	r3, r2
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfc6:	893b      	ldrh	r3, [r7, #8]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	68f9      	ldr	r1, [r7, #12]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 fa44 	bl	800e45a <USBD_CtlSendData>
 800dfd2:	e009      	b.n	800dfe8 <USBD_GetDescriptor+0x320>
>>>>>>> origin/main
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f9ce 	bl	800e7a4 <USBD_CtlError>
 800e408:	e004      	b.n	800e414 <USBD_GetDescriptor+0x320>
=======
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f9ce 	bl	800e378 <USBD_CtlError>
 800dfdc:	e004      	b.n	800dfe8 <USBD_GetDescriptor+0x320>
>>>>>>> origin/main
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fa95 	bl	800e93a <USBD_CtlSendStatus>
 800e410:	e000      	b.n	800e414 <USBD_GetDescriptor+0x320>
    return;
 800e412:	bf00      	nop
  }
}
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop

0800e41c <USBD_SetAddress>:
=======
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fa95 	bl	800e50e <USBD_CtlSendStatus>
 800dfe4:	e000      	b.n	800dfe8 <USBD_GetDescriptor+0x320>
    return;
 800dfe6:	bf00      	nop
  }
}
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop

0800dff0 <USBD_SetAddress>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	889b      	ldrh	r3, [r3, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d131      	bne.n	800e492 <USBD_SetAddress+0x76>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	88db      	ldrh	r3, [r3, #6]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d12d      	bne.n	800e492 <USBD_SetAddress+0x76>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	885b      	ldrh	r3, [r3, #2]
 800e43a:	2b7f      	cmp	r3, #127	; 0x7f
 800e43c:	d829      	bhi.n	800e492 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	b2db      	uxtb	r3, r3
 800e444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e448:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b03      	cmp	r3, #3
 800e454:	d104      	bne.n	800e460 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f9a3 	bl	800e7a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e45e:	e01d      	b.n	800e49c <USBD_SetAddress+0x80>
=======
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	889b      	ldrh	r3, [r3, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d131      	bne.n	800e066 <USBD_SetAddress+0x76>
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	88db      	ldrh	r3, [r3, #6]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d12d      	bne.n	800e066 <USBD_SetAddress+0x76>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	885b      	ldrh	r3, [r3, #2]
 800e00e:	2b7f      	cmp	r3, #127	; 0x7f
 800e010:	d829      	bhi.n	800e066 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	885b      	ldrh	r3, [r3, #2]
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e01c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b03      	cmp	r3, #3
 800e028:	d104      	bne.n	800e034 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f9a3 	bl	800e378 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e032:	e01d      	b.n	800e070 <USBD_SetAddress+0x80>
>>>>>>> origin/main
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	7bfa      	ldrb	r2, [r7, #15]
 800e464:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 ff2b 	bl	800f2c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fa61 	bl	800e93a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d004      	beq.n	800e488 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2202      	movs	r2, #2
 800e482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e486:	e009      	b.n	800e49c <USBD_SetAddress+0x80>
=======
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	7bfa      	ldrb	r2, [r7, #15]
 800e038:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 ff2b 	bl	800ee9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fa61 	bl	800e50e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2202      	movs	r2, #2
 800e056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e05a:	e009      	b.n	800e070 <USBD_SetAddress+0x80>
>>>>>>> origin/main
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e490:	e004      	b.n	800e49c <USBD_SetAddress+0x80>
=======
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e064:	e004      	b.n	800e070 <USBD_SetAddress+0x80>
>>>>>>> origin/main
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f985 	bl	800e7a4 <USBD_CtlError>
  }
}
 800e49a:	bf00      	nop
 800e49c:	bf00      	nop
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <USBD_SetConfig>:
=======
 800e066:	6839      	ldr	r1, [r7, #0]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f985 	bl	800e378 <USBD_CtlError>
  }
}
 800e06e:	bf00      	nop
 800e070:	bf00      	nop
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_SetConfig>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	885b      	ldrh	r3, [r3, #2]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	4b4c      	ldr	r3, [pc, #304]	; (800e5ec <USBD_SetConfig+0x148>)
 800e4ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4bc:	4b4b      	ldr	r3, [pc, #300]	; (800e5ec <USBD_SetConfig+0x148>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d905      	bls.n	800e4d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f96c 	bl	800e7a4 <USBD_CtlError>
    return USBD_FAIL;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	e088      	b.n	800e5e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d002      	beq.n	800e4e2 <USBD_SetConfig+0x3e>
 800e4dc:	2b03      	cmp	r3, #3
 800e4de:	d025      	beq.n	800e52c <USBD_SetConfig+0x88>
 800e4e0:	e071      	b.n	800e5c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4e2:	4b42      	ldr	r3, [pc, #264]	; (800e5ec <USBD_SetConfig+0x148>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d01c      	beq.n	800e524 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e4ea:	4b40      	ldr	r3, [pc, #256]	; (800e5ec <USBD_SetConfig+0x148>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4f4:	4b3d      	ldr	r3, [pc, #244]	; (800e5ec <USBD_SetConfig+0x148>)
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff f992 	bl	800d824 <USBD_SetClassConfig>
 800e500:	4603      	mov	r3, r0
 800e502:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e504:	7bfb      	ldrb	r3, [r7, #15]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d004      	beq.n	800e514 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f949 	bl	800e7a4 <USBD_CtlError>
=======
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	885b      	ldrh	r3, [r3, #2]
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	4b4c      	ldr	r3, [pc, #304]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e08e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e090:	4b4b      	ldr	r3, [pc, #300]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d905      	bls.n	800e0a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f96c 	bl	800e378 <USBD_CtlError>
    return USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	e088      	b.n	800e1b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d002      	beq.n	800e0b6 <USBD_SetConfig+0x3e>
 800e0b0:	2b03      	cmp	r3, #3
 800e0b2:	d025      	beq.n	800e100 <USBD_SetConfig+0x88>
 800e0b4:	e071      	b.n	800e19a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e0b6:	4b42      	ldr	r3, [pc, #264]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d01c      	beq.n	800e0f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e0be:	4b40      	ldr	r3, [pc, #256]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0c8:	4b3d      	ldr	r3, [pc, #244]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff f992 	bl	800d3f8 <USBD_SetClassConfig>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d004      	beq.n	800e0e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f949 	bl	800e378 <USBD_CtlError>
>>>>>>> origin/main
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 800e512:	e065      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fa10 	bl	800e93a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2203      	movs	r2, #3
 800e51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e522:	e05d      	b.n	800e5e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fa08 	bl	800e93a <USBD_CtlSendStatus>
      break;
 800e52a:	e059      	b.n	800e5e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e52c:	4b2f      	ldr	r3, [pc, #188]	; (800e5ec <USBD_SetConfig+0x148>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d112      	bne.n	800e55a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2202      	movs	r2, #2
 800e538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e53c:	4b2b      	ldr	r3, [pc, #172]	; (800e5ec <USBD_SetConfig+0x148>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e546:	4b29      	ldr	r3, [pc, #164]	; (800e5ec <USBD_SetConfig+0x148>)
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff f985 	bl	800d85c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f9f1 	bl	800e93a <USBD_CtlSendStatus>
=======
 800e0e6:	e065      	b.n	800e1b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fa10 	bl	800e50e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2203      	movs	r2, #3
 800e0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0f6:	e05d      	b.n	800e1b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fa08 	bl	800e50e <USBD_CtlSendStatus>
      break;
 800e0fe:	e059      	b.n	800e1b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e100:	4b2f      	ldr	r3, [pc, #188]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d112      	bne.n	800e12e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2202      	movs	r2, #2
 800e10c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e110:	4b2b      	ldr	r3, [pc, #172]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	461a      	mov	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e11a:	4b29      	ldr	r3, [pc, #164]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	4619      	mov	r1, r3
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff f985 	bl	800d430 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f9f1 	bl	800e50e <USBD_CtlSendStatus>
>>>>>>> origin/main
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 800e558:	e042      	b.n	800e5e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e55a:	4b24      	ldr	r3, [pc, #144]	; (800e5ec <USBD_SetConfig+0x148>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	461a      	mov	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	429a      	cmp	r2, r3
 800e566:	d02a      	beq.n	800e5be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff f973 	bl	800d85c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e576:	4b1d      	ldr	r3, [pc, #116]	; (800e5ec <USBD_SetConfig+0x148>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	461a      	mov	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e580:	4b1a      	ldr	r3, [pc, #104]	; (800e5ec <USBD_SetConfig+0x148>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff f94c 	bl	800d824 <USBD_SetClassConfig>
 800e58c:	4603      	mov	r3, r0
 800e58e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00f      	beq.n	800e5b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f903 	bl	800e7a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff f958 	bl	800d85c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e5b4:	e014      	b.n	800e5e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f9bf 	bl	800e93a <USBD_CtlSendStatus>
      break;
 800e5bc:	e010      	b.n	800e5e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f9bb 	bl	800e93a <USBD_CtlSendStatus>
      break;
 800e5c4:	e00c      	b.n	800e5e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 f8eb 	bl	800e7a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ce:	4b07      	ldr	r3, [pc, #28]	; (800e5ec <USBD_SetConfig+0x148>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff f941 	bl	800d85c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e5de:	bf00      	nop
  }

  return ret;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	2000053c 	.word	0x2000053c

0800e5f0 <USBD_GetConfig>:
=======
 800e12c:	e042      	b.n	800e1b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e12e:	4b24      	ldr	r3, [pc, #144]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d02a      	beq.n	800e192 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	b2db      	uxtb	r3, r3
 800e142:	4619      	mov	r1, r3
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7ff f973 	bl	800d430 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e14a:	4b1d      	ldr	r3, [pc, #116]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e154:	4b1a      	ldr	r3, [pc, #104]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff f94c 	bl	800d3f8 <USBD_SetClassConfig>
 800e160:	4603      	mov	r3, r0
 800e162:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00f      	beq.n	800e18a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 f903 	bl	800e378 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	b2db      	uxtb	r3, r3
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7ff f958 	bl	800d430 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2202      	movs	r2, #2
 800e184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e188:	e014      	b.n	800e1b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f9bf 	bl	800e50e <USBD_CtlSendStatus>
      break;
 800e190:	e010      	b.n	800e1b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f9bb 	bl	800e50e <USBD_CtlSendStatus>
      break;
 800e198:	e00c      	b.n	800e1b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f8eb 	bl	800e378 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e1a2:	4b07      	ldr	r3, [pc, #28]	; (800e1c0 <USBD_SetConfig+0x148>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff f941 	bl	800d430 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e1b2:	bf00      	nop
  }

  return ret;
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20000538 	.word	0x20000538

0800e1c4 <USBD_GetConfig>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	88db      	ldrh	r3, [r3, #6]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d004      	beq.n	800e60c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f8cd 	bl	800e7a4 <USBD_CtlError>
=======
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d004      	beq.n	800e1e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f8cd 	bl	800e378 <USBD_CtlError>
>>>>>>> origin/main
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 800e60a:	e023      	b.n	800e654 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b02      	cmp	r3, #2
 800e616:	dc02      	bgt.n	800e61e <USBD_GetConfig+0x2e>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dc03      	bgt.n	800e624 <USBD_GetConfig+0x34>
 800e61c:	e015      	b.n	800e64a <USBD_GetConfig+0x5a>
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d00b      	beq.n	800e63a <USBD_GetConfig+0x4a>
 800e622:	e012      	b.n	800e64a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3308      	adds	r3, #8
 800e62e:	2201      	movs	r2, #1
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f927 	bl	800e886 <USBD_CtlSendData>
        break;
 800e638:	e00c      	b.n	800e654 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3304      	adds	r3, #4
 800e63e:	2201      	movs	r2, #1
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f91f 	bl	800e886 <USBD_CtlSendData>
        break;
 800e648:	e004      	b.n	800e654 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f8a9 	bl	800e7a4 <USBD_CtlError>
        break;
 800e652:	bf00      	nop
}
 800e654:	bf00      	nop
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBD_GetStatus>:
=======
 800e1de:	e023      	b.n	800e228 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	dc02      	bgt.n	800e1f2 <USBD_GetConfig+0x2e>
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dc03      	bgt.n	800e1f8 <USBD_GetConfig+0x34>
 800e1f0:	e015      	b.n	800e21e <USBD_GetConfig+0x5a>
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d00b      	beq.n	800e20e <USBD_GetConfig+0x4a>
 800e1f6:	e012      	b.n	800e21e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	3308      	adds	r3, #8
 800e202:	2201      	movs	r2, #1
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f927 	bl	800e45a <USBD_CtlSendData>
        break;
 800e20c:	e00c      	b.n	800e228 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3304      	adds	r3, #4
 800e212:	2201      	movs	r2, #1
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 f91f 	bl	800e45a <USBD_CtlSendData>
        break;
 800e21c:	e004      	b.n	800e228 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 f8a9 	bl	800e378 <USBD_CtlError>
        break;
 800e226:	bf00      	nop
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_GetStatus>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	3b01      	subs	r3, #1
 800e670:	2b02      	cmp	r3, #2
 800e672:	d81e      	bhi.n	800e6b2 <USBD_GetStatus+0x56>
=======
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e240:	b2db      	uxtb	r3, r3
 800e242:	3b01      	subs	r3, #1
 800e244:	2b02      	cmp	r3, #2
 800e246:	d81e      	bhi.n	800e286 <USBD_GetStatus+0x56>
>>>>>>> origin/main
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	88db      	ldrh	r3, [r3, #6]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d004      	beq.n	800e686 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f890 	bl	800e7a4 <USBD_CtlError>
        break;
 800e684:	e01a      	b.n	800e6bc <USBD_GetStatus+0x60>
=======
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	88db      	ldrh	r3, [r3, #6]
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d004      	beq.n	800e25a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f890 	bl	800e378 <USBD_CtlError>
        break;
 800e258:	e01a      	b.n	800e290 <USBD_GetStatus+0x60>
>>>>>>> origin/main
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	60da      	str	r2, [r3, #12]
=======
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2201      	movs	r2, #1
 800e25e:	60da      	str	r2, [r3, #12]
>>>>>>> origin/main
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< HEAD
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e692:	2b00      	cmp	r3, #0
 800e694:	d005      	beq.n	800e6a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f043 0202 	orr.w	r2, r3, #2
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	330c      	adds	r3, #12
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f8eb 	bl	800e886 <USBD_CtlSendData>
      break;
 800e6b0:	e004      	b.n	800e6bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 f875 	bl	800e7a4 <USBD_CtlError>
      break;
 800e6ba:	bf00      	nop
  }
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_SetFeature>:
=======
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e266:	2b00      	cmp	r3, #0
 800e268:	d005      	beq.n	800e276 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	f043 0202 	orr.w	r2, r3, #2
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	330c      	adds	r3, #12
 800e27a:	2202      	movs	r2, #2
 800e27c:	4619      	mov	r1, r3
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f8eb 	bl	800e45a <USBD_CtlSendData>
      break;
 800e284:	e004      	b.n	800e290 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f875 	bl	800e378 <USBD_CtlError>
      break;
 800e28e:	bf00      	nop
  }
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_SetFeature>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	885b      	ldrh	r3, [r3, #2]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d106      	bne.n	800e6e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f92b 	bl	800e93a <USBD_CtlSendStatus>
  }
}
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <USBD_ClrFeature>:
=======
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	885b      	ldrh	r3, [r3, #2]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d106      	bne.n	800e2b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f92b 	bl	800e50e <USBD_CtlSendStatus>
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_ClrFeature>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	3b01      	subs	r3, #1
 800e700:	2b02      	cmp	r3, #2
 800e702:	d80b      	bhi.n	800e71c <USBD_ClrFeature+0x30>
=======
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d80b      	bhi.n	800e2f0 <USBD_ClrFeature+0x30>
>>>>>>> origin/main
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	885b      	ldrh	r3, [r3, #2]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d10c      	bne.n	800e726 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f910 	bl	800e93a <USBD_CtlSendStatus>
      }
      break;
 800e71a:	e004      	b.n	800e726 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f840 	bl	800e7a4 <USBD_CtlError>
      break;
 800e724:	e000      	b.n	800e728 <USBD_ClrFeature+0x3c>
      break;
 800e726:	bf00      	nop
  }
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_ParseSetupRequest>:
=======
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	885b      	ldrh	r3, [r3, #2]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d10c      	bne.n	800e2fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f910 	bl	800e50e <USBD_CtlSendStatus>
      }
      break;
 800e2ee:	e004      	b.n	800e2fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f840 	bl	800e378 <USBD_CtlError>
      break;
 800e2f8:	e000      	b.n	800e2fc <USBD_ClrFeature+0x3c>
      break;
 800e2fa:	bf00      	nop
  }
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBD_ParseSetupRequest>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	781a      	ldrb	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3301      	adds	r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	781a      	ldrb	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	3301      	adds	r3, #1
 800e758:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f7ff fa92 	bl	800dc84 <SWAPBYTE>
 800e760:	4603      	mov	r3, r0
 800e762:	461a      	mov	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3301      	adds	r3, #1
 800e76c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3301      	adds	r3, #1
 800e772:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7ff fa85 	bl	800dc84 <SWAPBYTE>
 800e77a:	4603      	mov	r3, r0
 800e77c:	461a      	mov	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3301      	adds	r3, #1
 800e786:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3301      	adds	r3, #1
 800e78c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f7ff fa78 	bl	800dc84 <SWAPBYTE>
 800e794:	4603      	mov	r3, r0
 800e796:	461a      	mov	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	80da      	strh	r2, [r3, #6]
}
 800e79c:	bf00      	nop
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBD_CtlError>:
=======
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	781a      	ldrb	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3301      	adds	r3, #1
 800e31e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	781a      	ldrb	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3301      	adds	r3, #1
 800e32c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fa92 	bl	800d858 <SWAPBYTE>
 800e334:	4603      	mov	r3, r0
 800e336:	461a      	mov	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3301      	adds	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff fa85 	bl	800d858 <SWAPBYTE>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	3301      	adds	r3, #1
 800e35a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3301      	adds	r3, #1
 800e360:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff fa78 	bl	800d858 <SWAPBYTE>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	80da      	strh	r2, [r3, #6]
}
 800e370:	bf00      	nop
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <USBD_CtlError>:
>>>>>>> origin/main
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ae:	2180      	movs	r1, #128	; 0x80
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fcef 	bl	800f194 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 fceb 	bl	800f194 <USBD_LL_StallEP>
}
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <USBD_GetString>:
=======
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e382:	2180      	movs	r1, #128	; 0x80
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fcef 	bl	800ed68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e38a:	2100      	movs	r1, #0
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fceb 	bl	800ed68 <USBD_LL_StallEP>
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <USBD_GetString>:
>>>>>>> origin/main
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d036      	beq.n	800e84a <USBD_GetString+0x84>
=======
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b086      	sub	sp, #24
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	60f8      	str	r0, [r7, #12]
 800e3a2:	60b9      	str	r1, [r7, #8]
 800e3a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d036      	beq.n	800e41e <USBD_GetString+0x84>
>>>>>>> origin/main
  {
    return;
  }

  pdesc = desc;
<<<<<<< HEAD
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e7e0:	6938      	ldr	r0, [r7, #16]
 800e7e2:	f000 f836 	bl	800e852 <USBD_GetLen>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	7812      	ldrb	r2, [r2, #0]
 800e7fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800e800:	7dfb      	ldrb	r3, [r7, #23]
 800e802:	3301      	adds	r3, #1
 800e804:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e806:	7dfb      	ldrb	r3, [r7, #23]
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	4413      	add	r3, r2
 800e80c:	2203      	movs	r2, #3
 800e80e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e810:	7dfb      	ldrb	r3, [r7, #23]
 800e812:	3301      	adds	r3, #1
 800e814:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e816:	e013      	b.n	800e840 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e818:	7dfb      	ldrb	r3, [r7, #23]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	4413      	add	r3, r2
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	7812      	ldrb	r2, [r2, #0]
 800e822:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	3301      	adds	r3, #1
 800e828:	613b      	str	r3, [r7, #16]
    idx++;
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	3301      	adds	r3, #1
 800e82e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	4413      	add	r3, r2
 800e836:	2200      	movs	r2, #0
 800e838:	701a      	strb	r2, [r3, #0]
    idx++;
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	3301      	adds	r3, #1
 800e83e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1e7      	bne.n	800e818 <USBD_GetString+0x52>
 800e848:	e000      	b.n	800e84c <USBD_GetString+0x86>
    return;
 800e84a:	bf00      	nop
  }
}
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBD_GetLen>:
=======
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e3b4:	6938      	ldr	r0, [r7, #16]
 800e3b6:	f000 f836 	bl	800e426 <USBD_GetLen>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	3301      	adds	r3, #1
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	7812      	ldrb	r2, [r2, #0]
 800e3d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3d4:	7dfb      	ldrb	r3, [r7, #23]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e3da:	7dfb      	ldrb	r3, [r7, #23]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	4413      	add	r3, r2
 800e3e0:	2203      	movs	r2, #3
 800e3e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e3ea:	e013      	b.n	800e414 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	613b      	str	r3, [r7, #16]
    idx++;
 800e3fe:	7dfb      	ldrb	r3, [r7, #23]
 800e400:	3301      	adds	r3, #1
 800e402:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	4413      	add	r3, r2
 800e40a:	2200      	movs	r2, #0
 800e40c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	3301      	adds	r3, #1
 800e412:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1e7      	bne.n	800e3ec <USBD_GetString+0x52>
 800e41c:	e000      	b.n	800e420 <USBD_GetString+0x86>
    return;
 800e41e:	bf00      	nop
  }
}
 800e420:	3718      	adds	r7, #24
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <USBD_GetLen>:
>>>>>>> origin/main
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800e852:	b480      	push	{r7}
 800e854:	b085      	sub	sp, #20
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e862:	e005      	b.n	800e870 <USBD_GetLen+0x1e>
  {
    len++;
 800e864:	7bfb      	ldrb	r3, [r7, #15]
 800e866:	3301      	adds	r3, #1
 800e868:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	3301      	adds	r3, #1
 800e86e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1f5      	bne.n	800e864 <USBD_GetLen+0x12>
  }

  return len;
 800e878:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <USBD_CtlSendData>:
=======
 800e426:	b480      	push	{r7}
 800e428:	b085      	sub	sp, #20
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e436:	e005      	b.n	800e444 <USBD_GetLen+0x1e>
  {
    len++;
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	3301      	adds	r3, #1
 800e43c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	3301      	adds	r3, #1
 800e442:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1f5      	bne.n	800e438 <USBD_GetLen+0x12>
  }

  return len;
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <USBD_CtlSendData>:
>>>>>>> origin/main
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	60b9      	str	r1, [r7, #8]
 800e890:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2202      	movs	r2, #2
 800e896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	619a      	str	r2, [r3, #24]
=======
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b084      	sub	sp, #16
 800e45e:	af00      	add	r7, sp, #0
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	60b9      	str	r1, [r7, #8]
 800e464:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2202      	movs	r2, #2
 800e46a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	619a      	str	r2, [r3, #24]
>>>>>>> origin/main

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< HEAD
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	61da      	str	r2, [r3, #28]
=======
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	61da      	str	r2, [r3, #28]
>>>>>>> origin/main
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< HEAD
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 fd41 	bl	800f334 <USBD_LL_Transmit>

  return USBD_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBD_CtlContinueSendData>:
=======
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	2100      	movs	r1, #0
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 fd41 	bl	800ef08 <USBD_LL_Transmit>

  return USBD_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_CtlContinueSendData>:
>>>>>>> origin/main
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 fd30 	bl	800f334 <USBD_LL_Transmit>

  return USBD_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBD_CtlPrepareRx>:
=======
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 fd30 	bl	800ef08 <USBD_LL_Transmit>

  return USBD_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_CtlPrepareRx>:
>>>>>>> origin/main
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b084      	sub	sp, #16
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2203      	movs	r2, #3
 800e8ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
=======
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2203      	movs	r2, #3
 800e4c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
>>>>>>> origin/main

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< HEAD
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
=======
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
>>>>>>> origin/main
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< HEAD
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	2100      	movs	r1, #0
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 fd4b 	bl	800f3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_CtlContinueRx>:
=======
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	2100      	movs	r1, #0
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 fd4b 	bl	800ef78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_CtlContinueRx>:
>>>>>>> origin/main
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	2100      	movs	r1, #0
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f000 fd3a 	bl	800f3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_CtlSendStatus>:
=======
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fd3a 	bl	800ef78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USBD_CtlSendStatus>:
>>>>>>> origin/main
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b082      	sub	sp, #8
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2204      	movs	r2, #4
 800e946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e94a:	2300      	movs	r3, #0
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fcef 	bl	800f334 <USBD_LL_Transmit>

  return USBD_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_CtlReceiveStatus>:
=======
 800e50e:	b580      	push	{r7, lr}
 800e510:	b082      	sub	sp, #8
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2204      	movs	r2, #4
 800e51a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e51e:	2300      	movs	r3, #0
 800e520:	2200      	movs	r2, #0
 800e522:	2100      	movs	r1, #0
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fcef 	bl	800ef08 <USBD_LL_Transmit>

  return USBD_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <USBD_CtlReceiveStatus>:
>>>>>>> origin/main
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2205      	movs	r2, #5
 800e96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e970:	2300      	movs	r3, #0
 800e972:	2200      	movs	r2, #0
 800e974:	2100      	movs	r1, #0
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fd14 	bl	800f3a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <MX_USB_DEVICE_Init>:
=======
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2205      	movs	r2, #5
 800e540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e544:	2300      	movs	r3, #0
 800e546:	2200      	movs	r2, #0
 800e548:	2100      	movs	r1, #0
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fd14 	bl	800ef78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
	...

0800e55c <MX_USB_DEVICE_Init>:
>>>>>>> origin/main
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
=======
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
>>>>>>> origin/main
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 800e98c:	2200      	movs	r2, #0
 800e98e:	4912      	ldr	r1, [pc, #72]	; (800e9d8 <MX_USB_DEVICE_Init+0x50>)
 800e990:	4812      	ldr	r0, [pc, #72]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e992:	f7fe fed9 	bl	800d748 <USBD_Init>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e99c:	f7f4 fcb4 	bl	8003308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e9a0:	490f      	ldr	r1, [pc, #60]	; (800e9e0 <MX_USB_DEVICE_Init+0x58>)
 800e9a2:	480e      	ldr	r0, [pc, #56]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9a4:	f7fe ff00 	bl	800d7a8 <USBD_RegisterClass>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e9ae:	f7f4 fcab 	bl	8003308 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e9b2:	490c      	ldr	r1, [pc, #48]	; (800e9e4 <MX_USB_DEVICE_Init+0x5c>)
 800e9b4:	4809      	ldr	r0, [pc, #36]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9b6:	f7fe fe51 	bl	800d65c <USBD_CDC_RegisterInterface>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e9c0:	f7f4 fca2 	bl	8003308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e9c4:	4805      	ldr	r0, [pc, #20]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9c6:	f7fe ff16 	bl	800d7f6 <USBD_Start>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e9d0:	f7f4 fc9a 	bl	8003308 <Error_Handler>
=======
 800e560:	2200      	movs	r2, #0
 800e562:	4912      	ldr	r1, [pc, #72]	; (800e5ac <MX_USB_DEVICE_Init+0x50>)
 800e564:	4812      	ldr	r0, [pc, #72]	; (800e5b0 <MX_USB_DEVICE_Init+0x54>)
 800e566:	f7fe fed9 	bl	800d31c <USBD_Init>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e570:	f7f4 ff36 	bl	80033e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e574:	490f      	ldr	r1, [pc, #60]	; (800e5b4 <MX_USB_DEVICE_Init+0x58>)
 800e576:	480e      	ldr	r0, [pc, #56]	; (800e5b0 <MX_USB_DEVICE_Init+0x54>)
 800e578:	f7fe ff00 	bl	800d37c <USBD_RegisterClass>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e582:	f7f4 ff2d 	bl	80033e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e586:	490c      	ldr	r1, [pc, #48]	; (800e5b8 <MX_USB_DEVICE_Init+0x5c>)
 800e588:	4809      	ldr	r0, [pc, #36]	; (800e5b0 <MX_USB_DEVICE_Init+0x54>)
 800e58a:	f7fe fe51 	bl	800d230 <USBD_CDC_RegisterInterface>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e594:	f7f4 ff24 	bl	80033e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e598:	4805      	ldr	r0, [pc, #20]	; (800e5b0 <MX_USB_DEVICE_Init+0x54>)
 800e59a:	f7fe ff16 	bl	800d3ca <USBD_Start>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e5a4:	f7f4 ff1c 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800e9d4:	bf00      	nop
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000130 	.word	0x20000130
 800e9dc:	20000540 	.word	0x20000540
 800e9e0:	20000018 	.word	0x20000018
 800e9e4:	2000011c 	.word	0x2000011c

0800e9e8 <CDC_Init_FS>:
=======
 800e5a8:	bf00      	nop
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20000130 	.word	0x20000130
 800e5b0:	2000053c 	.word	0x2000053c
 800e5b4:	20000018 	.word	0x20000018
 800e5b8:	2000011c 	.word	0x2000011c

0800e5bc <CDC_Init_FS>:
>>>>>>> origin/main
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4905      	ldr	r1, [pc, #20]	; (800ea04 <CDC_Init_FS+0x1c>)
 800e9f0:	4805      	ldr	r0, [pc, #20]	; (800ea08 <CDC_Init_FS+0x20>)
 800e9f2:	f7fe fe48 	bl	800d686 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e9f6:	4905      	ldr	r1, [pc, #20]	; (800ea0c <CDC_Init_FS+0x24>)
 800e9f8:	4803      	ldr	r0, [pc, #12]	; (800ea08 <CDC_Init_FS+0x20>)
 800e9fa:	f7fe fe62 	bl	800d6c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e9fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	20000bf8 	.word	0x20000bf8
 800ea08:	20000540 	.word	0x20000540
 800ea0c:	20000810 	.word	0x20000810

0800ea10 <CDC_DeInit_FS>:
=======
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	4905      	ldr	r1, [pc, #20]	; (800e5d8 <CDC_Init_FS+0x1c>)
 800e5c4:	4805      	ldr	r0, [pc, #20]	; (800e5dc <CDC_Init_FS+0x20>)
 800e5c6:	f7fe fe48 	bl	800d25a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e5ca:	4905      	ldr	r1, [pc, #20]	; (800e5e0 <CDC_Init_FS+0x24>)
 800e5cc:	4803      	ldr	r0, [pc, #12]	; (800e5dc <CDC_Init_FS+0x20>)
 800e5ce:	f7fe fe62 	bl	800d296 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e5d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20000bf4 	.word	0x20000bf4
 800e5dc:	2000053c 	.word	0x2000053c
 800e5e0:	2000080c 	.word	0x2000080c

0800e5e4 <CDC_DeInit_FS>:
>>>>>>> origin/main
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <CDC_Control_FS>:
=======
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e5e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <CDC_Control_FS>:
>>>>>>> origin/main
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	6039      	str	r1, [r7, #0]
 800ea2a:	71fb      	strb	r3, [r7, #7]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	2b23      	cmp	r3, #35	; 0x23
 800ea34:	d84a      	bhi.n	800eacc <CDC_Control_FS+0xac>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <CDC_Control_FS+0x1c>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800eacd 	.word	0x0800eacd
 800ea40:	0800eacd 	.word	0x0800eacd
 800ea44:	0800eacd 	.word	0x0800eacd
 800ea48:	0800eacd 	.word	0x0800eacd
 800ea4c:	0800eacd 	.word	0x0800eacd
 800ea50:	0800eacd 	.word	0x0800eacd
 800ea54:	0800eacd 	.word	0x0800eacd
 800ea58:	0800eacd 	.word	0x0800eacd
 800ea5c:	0800eacd 	.word	0x0800eacd
 800ea60:	0800eacd 	.word	0x0800eacd
 800ea64:	0800eacd 	.word	0x0800eacd
 800ea68:	0800eacd 	.word	0x0800eacd
 800ea6c:	0800eacd 	.word	0x0800eacd
 800ea70:	0800eacd 	.word	0x0800eacd
 800ea74:	0800eacd 	.word	0x0800eacd
 800ea78:	0800eacd 	.word	0x0800eacd
 800ea7c:	0800eacd 	.word	0x0800eacd
 800ea80:	0800eacd 	.word	0x0800eacd
 800ea84:	0800eacd 	.word	0x0800eacd
 800ea88:	0800eacd 	.word	0x0800eacd
 800ea8c:	0800eacd 	.word	0x0800eacd
 800ea90:	0800eacd 	.word	0x0800eacd
 800ea94:	0800eacd 	.word	0x0800eacd
 800ea98:	0800eacd 	.word	0x0800eacd
 800ea9c:	0800eacd 	.word	0x0800eacd
 800eaa0:	0800eacd 	.word	0x0800eacd
 800eaa4:	0800eacd 	.word	0x0800eacd
 800eaa8:	0800eacd 	.word	0x0800eacd
 800eaac:	0800eacd 	.word	0x0800eacd
 800eab0:	0800eacd 	.word	0x0800eacd
 800eab4:	0800eacd 	.word	0x0800eacd
 800eab8:	0800eacd 	.word	0x0800eacd
 800eabc:	0800eacd 	.word	0x0800eacd
 800eac0:	0800eacd 	.word	0x0800eacd
 800eac4:	0800eacd 	.word	0x0800eacd
 800eac8:	0800eacd 	.word	0x0800eacd
=======
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	6039      	str	r1, [r7, #0]
 800e5fe:	71fb      	strb	r3, [r7, #7]
 800e600:	4613      	mov	r3, r2
 800e602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	2b23      	cmp	r3, #35	; 0x23
 800e608:	d84a      	bhi.n	800e6a0 <CDC_Control_FS+0xac>
 800e60a:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <CDC_Control_FS+0x1c>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e6a1 	.word	0x0800e6a1
 800e614:	0800e6a1 	.word	0x0800e6a1
 800e618:	0800e6a1 	.word	0x0800e6a1
 800e61c:	0800e6a1 	.word	0x0800e6a1
 800e620:	0800e6a1 	.word	0x0800e6a1
 800e624:	0800e6a1 	.word	0x0800e6a1
 800e628:	0800e6a1 	.word	0x0800e6a1
 800e62c:	0800e6a1 	.word	0x0800e6a1
 800e630:	0800e6a1 	.word	0x0800e6a1
 800e634:	0800e6a1 	.word	0x0800e6a1
 800e638:	0800e6a1 	.word	0x0800e6a1
 800e63c:	0800e6a1 	.word	0x0800e6a1
 800e640:	0800e6a1 	.word	0x0800e6a1
 800e644:	0800e6a1 	.word	0x0800e6a1
 800e648:	0800e6a1 	.word	0x0800e6a1
 800e64c:	0800e6a1 	.word	0x0800e6a1
 800e650:	0800e6a1 	.word	0x0800e6a1
 800e654:	0800e6a1 	.word	0x0800e6a1
 800e658:	0800e6a1 	.word	0x0800e6a1
 800e65c:	0800e6a1 	.word	0x0800e6a1
 800e660:	0800e6a1 	.word	0x0800e6a1
 800e664:	0800e6a1 	.word	0x0800e6a1
 800e668:	0800e6a1 	.word	0x0800e6a1
 800e66c:	0800e6a1 	.word	0x0800e6a1
 800e670:	0800e6a1 	.word	0x0800e6a1
 800e674:	0800e6a1 	.word	0x0800e6a1
 800e678:	0800e6a1 	.word	0x0800e6a1
 800e67c:	0800e6a1 	.word	0x0800e6a1
 800e680:	0800e6a1 	.word	0x0800e6a1
 800e684:	0800e6a1 	.word	0x0800e6a1
 800e688:	0800e6a1 	.word	0x0800e6a1
 800e68c:	0800e6a1 	.word	0x0800e6a1
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6a1 	.word	0x0800e6a1
 800e698:	0800e6a1 	.word	0x0800e6a1
 800e69c:	0800e6a1 	.word	0x0800e6a1
>>>>>>> origin/main
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
 800eacc:	bf00      	nop
  }

  return (USBD_OK);
 800eace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <CDC_Receive_FS>:
=======
 800e6a0:	bf00      	nop
  }

  return (USBD_OK);
 800e6a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <CDC_Receive_FS>:
>>>>>>> origin/main
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	4805      	ldr	r0, [pc, #20]	; (800eb00 <CDC_Receive_FS+0x24>)
 800eaea:	f7fe fdea 	bl	800d6c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eaee:	4804      	ldr	r0, [pc, #16]	; (800eb00 <CDC_Receive_FS+0x24>)
 800eaf0:	f7fe fe00 	bl	800d6f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eaf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20000540 	.word	0x20000540

0800eb04 <CDC_TransmitCplt_FS>:
=======
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e6ba:	6879      	ldr	r1, [r7, #4]
 800e6bc:	4805      	ldr	r0, [pc, #20]	; (800e6d4 <CDC_Receive_FS+0x24>)
 800e6be:	f7fe fdea 	bl	800d296 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e6c2:	4804      	ldr	r0, [pc, #16]	; (800e6d4 <CDC_Receive_FS+0x24>)
 800e6c4:	f7fe fe00 	bl	800d2c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e6c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	2000053c 	.word	0x2000053c

0800e6d8 <CDC_TransmitCplt_FS>:
>>>>>>> origin/main
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< HEAD
 800eb04:	b480      	push	{r7}
 800eb06:	b087      	sub	sp, #28
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	75fb      	strb	r3, [r7, #23]
=======
 800e6d8:	b480      	push	{r7}
 800e6da:	b087      	sub	sp, #28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	75fb      	strb	r3, [r7, #23]
>>>>>>> origin/main
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< HEAD
 800eb16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	371c      	adds	r7, #28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr
	...

0800eb28 <USBD_FS_DeviceDescriptor>:
=======
 800e6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	371c      	adds	r7, #28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
	...

0800e6fc <USBD_FS_DeviceDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	6039      	str	r1, [r7, #0]
 800eb32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	2212      	movs	r2, #18
 800eb38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb3a:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	20000150 	.word	0x20000150

0800eb4c <USBD_FS_LangIDStrDescriptor>:
=======
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	6039      	str	r1, [r7, #0]
 800e706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2212      	movs	r2, #18
 800e70c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e70e:	4b03      	ldr	r3, [pc, #12]	; (800e71c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	20000150 	.word	0x20000150

0800e720 <USBD_FS_LangIDStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	6039      	str	r1, [r7, #0]
 800eb56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	2204      	movs	r2, #4
 800eb5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb5e:	4b03      	ldr	r3, [pc, #12]	; (800eb6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	20000170 	.word	0x20000170

0800eb70 <USBD_FS_ProductStrDescriptor>:
=======
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	6039      	str	r1, [r7, #0]
 800e72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2204      	movs	r2, #4
 800e730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e732:	4b03      	ldr	r3, [pc, #12]	; (800e740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	20000170 	.word	0x20000170

0800e744 <USBD_FS_ProductStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	6039      	str	r1, [r7, #0]
 800eb7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb7c:	79fb      	ldrb	r3, [r7, #7]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d105      	bne.n	800eb8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	4907      	ldr	r1, [pc, #28]	; (800eba4 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb86:	4808      	ldr	r0, [pc, #32]	; (800eba8 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb88:	f7ff fe1d 	bl	800e7c6 <USBD_GetString>
 800eb8c:	e004      	b.n	800eb98 <USBD_FS_ProductStrDescriptor+0x28>
=======
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	6039      	str	r1, [r7, #0]
 800e74e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4907      	ldr	r1, [pc, #28]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
 800e75a:	4808      	ldr	r0, [pc, #32]	; (800e77c <USBD_FS_ProductStrDescriptor+0x38>)
 800e75c:	f7ff fe1d 	bl	800e39a <USBD_GetString>
 800e760:	e004      	b.n	800e76c <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> origin/main
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	4904      	ldr	r1, [pc, #16]	; (800eba4 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb92:	4805      	ldr	r0, [pc, #20]	; (800eba8 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb94:	f7ff fe17 	bl	800e7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb98:	4b02      	ldr	r3, [pc, #8]	; (800eba4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20000fe0 	.word	0x20000fe0
 800eba8:	0800f7cc 	.word	0x0800f7cc

0800ebac <USBD_FS_ManufacturerStrDescriptor>:
=======
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	4904      	ldr	r1, [pc, #16]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
 800e766:	4805      	ldr	r0, [pc, #20]	; (800e77c <USBD_FS_ProductStrDescriptor+0x38>)
 800e768:	f7ff fe17 	bl	800e39a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20000fdc 	.word	0x20000fdc
 800e77c:	0800f3a0 	.word	0x0800f3a0

0800e780 <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	6039      	str	r1, [r7, #0]
 800ebb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	4904      	ldr	r1, [pc, #16]	; (800ebcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ebbc:	4804      	ldr	r0, [pc, #16]	; (800ebd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ebbe:	f7ff fe02 	bl	800e7c6 <USBD_GetString>
  return USBD_StrDesc;
 800ebc2:	4b02      	ldr	r3, [pc, #8]	; (800ebcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	20000fe0 	.word	0x20000fe0
 800ebd0:	0800f7e4 	.word	0x0800f7e4

0800ebd4 <USBD_FS_SerialStrDescriptor>:
=======
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	6039      	str	r1, [r7, #0]
 800e78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e78c:	683a      	ldr	r2, [r7, #0]
 800e78e:	4904      	ldr	r1, [pc, #16]	; (800e7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e790:	4804      	ldr	r0, [pc, #16]	; (800e7a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e792:	f7ff fe02 	bl	800e39a <USBD_GetString>
  return USBD_StrDesc;
 800e796:	4b02      	ldr	r3, [pc, #8]	; (800e7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20000fdc 	.word	0x20000fdc
 800e7a4:	0800f3b8 	.word	0x0800f3b8

0800e7a8 <USBD_FS_SerialStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	6039      	str	r1, [r7, #0]
 800ebde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	221a      	movs	r2, #26
 800ebe4:	801a      	strh	r2, [r3, #0]
=======
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	221a      	movs	r2, #26
 800e7b8:	801a      	strh	r2, [r3, #0]
>>>>>>> origin/main

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800ebe6:	f000 f855 	bl	800ec94 <Get_SerialNum>
=======
 800e7ba:	f000 f855 	bl	800e868 <Get_SerialNum>
>>>>>>> origin/main
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800ebea:	4b02      	ldr	r3, [pc, #8]	; (800ebf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20000174 	.word	0x20000174

0800ebf8 <USBD_FS_ConfigStrDescriptor>:
=======
 800e7be:	4b02      	ldr	r3, [pc, #8]	; (800e7c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20000174 	.word	0x20000174

0800e7cc <USBD_FS_ConfigStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	6039      	str	r1, [r7, #0]
 800ec02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d105      	bne.n	800ec16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	4907      	ldr	r1, [pc, #28]	; (800ec2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec0e:	4808      	ldr	r0, [pc, #32]	; (800ec30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec10:	f7ff fdd9 	bl	800e7c6 <USBD_GetString>
 800ec14:	e004      	b.n	800ec20 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	6039      	str	r1, [r7, #0]
 800e7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4907      	ldr	r1, [pc, #28]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7e2:	4808      	ldr	r0, [pc, #32]	; (800e804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7e4:	f7ff fdd9 	bl	800e39a <USBD_GetString>
 800e7e8:	e004      	b.n	800e7f4 <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> origin/main
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	4904      	ldr	r1, [pc, #16]	; (800ec2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec1a:	4805      	ldr	r0, [pc, #20]	; (800ec30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec1c:	f7ff fdd3 	bl	800e7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec20:	4b02      	ldr	r3, [pc, #8]	; (800ec2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20000fe0 	.word	0x20000fe0
 800ec30:	0800f7f8 	.word	0x0800f7f8

0800ec34 <USBD_FS_InterfaceStrDescriptor>:
=======
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	4904      	ldr	r1, [pc, #16]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7ee:	4805      	ldr	r0, [pc, #20]	; (800e804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7f0:	f7ff fdd3 	bl	800e39a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20000fdc 	.word	0x20000fdc
 800e804:	0800f3cc 	.word	0x0800f3cc

0800e808 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	6039      	str	r1, [r7, #0]
 800ec3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d105      	bne.n	800ec52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	4907      	ldr	r1, [pc, #28]	; (800ec68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec4a:	4808      	ldr	r0, [pc, #32]	; (800ec6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec4c:	f7ff fdbb 	bl	800e7c6 <USBD_GetString>
 800ec50:	e004      	b.n	800ec5c <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d105      	bne.n	800e826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	4907      	ldr	r1, [pc, #28]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e81e:	4808      	ldr	r0, [pc, #32]	; (800e840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e820:	f7ff fdbb 	bl	800e39a <USBD_GetString>
 800e824:	e004      	b.n	800e830 <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> origin/main
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	4904      	ldr	r1, [pc, #16]	; (800ec68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec56:	4805      	ldr	r0, [pc, #20]	; (800ec6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec58:	f7ff fdb5 	bl	800e7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec5c:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20000fe0 	.word	0x20000fe0
 800ec6c:	0800f804 	.word	0x0800f804

0800ec70 <USBD_FS_USR_BOSDescriptor>:
=======
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	4904      	ldr	r1, [pc, #16]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e82a:	4805      	ldr	r0, [pc, #20]	; (800e840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e82c:	f7ff fdb5 	bl	800e39a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e830:	4b02      	ldr	r3, [pc, #8]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20000fdc 	.word	0x20000fdc
 800e840:	0800f3d8 	.word	0x0800f3d8

0800e844 <USBD_FS_USR_BOSDescriptor>:
>>>>>>> origin/main
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4603      	mov	r3, r0
 800ec78:	6039      	str	r1, [r7, #0]
 800ec7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	220c      	movs	r2, #12
 800ec80:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ec82:	4b03      	ldr	r3, [pc, #12]	; (800ec90 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	20000164 	.word	0x20000164

0800ec94 <Get_SerialNum>:
=======
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	6039      	str	r1, [r7, #0]
 800e84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	220c      	movs	r2, #12
 800e854:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e856:	4b03      	ldr	r3, [pc, #12]	; (800e864 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e858:	4618      	mov	r0, r3
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	20000164 	.word	0x20000164

0800e868 <Get_SerialNum>:
>>>>>>> origin/main
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec9a:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <Get_SerialNum+0x44>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eca0:	4b0e      	ldr	r3, [pc, #56]	; (800ecdc <Get_SerialNum+0x48>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eca6:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <Get_SerialNum+0x4c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d009      	beq.n	800ecce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecba:	2208      	movs	r2, #8
 800ecbc:	4909      	ldr	r1, [pc, #36]	; (800ece4 <Get_SerialNum+0x50>)
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 f814 	bl	800ecec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ecc4:	2204      	movs	r2, #4
 800ecc6:	4908      	ldr	r1, [pc, #32]	; (800ece8 <Get_SerialNum+0x54>)
 800ecc8:	68b8      	ldr	r0, [r7, #8]
 800ecca:	f000 f80f 	bl	800ecec <IntToUnicode>
  }
}
 800ecce:	bf00      	nop
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	1fff7590 	.word	0x1fff7590
 800ecdc:	1fff7594 	.word	0x1fff7594
 800ece0:	1fff7598 	.word	0x1fff7598
 800ece4:	20000176 	.word	0x20000176
 800ece8:	20000186 	.word	0x20000186

0800ecec <IntToUnicode>:
=======
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e86e:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <Get_SerialNum+0x44>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e874:	4b0e      	ldr	r3, [pc, #56]	; (800e8b0 <Get_SerialNum+0x48>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e87a:	4b0e      	ldr	r3, [pc, #56]	; (800e8b4 <Get_SerialNum+0x4c>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d009      	beq.n	800e8a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e88e:	2208      	movs	r2, #8
 800e890:	4909      	ldr	r1, [pc, #36]	; (800e8b8 <Get_SerialNum+0x50>)
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f814 	bl	800e8c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e898:	2204      	movs	r2, #4
 800e89a:	4908      	ldr	r1, [pc, #32]	; (800e8bc <Get_SerialNum+0x54>)
 800e89c:	68b8      	ldr	r0, [r7, #8]
 800e89e:	f000 f80f 	bl	800e8c0 <IntToUnicode>
  }
}
 800e8a2:	bf00      	nop
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	1fff7590 	.word	0x1fff7590
 800e8b0:	1fff7594 	.word	0x1fff7594
 800e8b4:	1fff7598 	.word	0x1fff7598
 800e8b8:	20000176 	.word	0x20000176
 800e8bc:	20000186 	.word	0x20000186

0800e8c0 <IntToUnicode>:
>>>>>>> origin/main
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800ecec:	b480      	push	{r7}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecfe:	2300      	movs	r3, #0
 800ed00:	75fb      	strb	r3, [r7, #23]
 800ed02:	e027      	b.n	800ed54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	0f1b      	lsrs	r3, r3, #28
 800ed08:	2b09      	cmp	r3, #9
 800ed0a:	d80b      	bhi.n	800ed24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	0f1b      	lsrs	r3, r3, #28
 800ed10:	b2da      	uxtb	r2, r3
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	4619      	mov	r1, r3
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	440b      	add	r3, r1
 800ed1c:	3230      	adds	r2, #48	; 0x30
 800ed1e:	b2d2      	uxtb	r2, r2
 800ed20:	701a      	strb	r2, [r3, #0]
 800ed22:	e00a      	b.n	800ed3a <IntToUnicode+0x4e>
=======
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	75fb      	strb	r3, [r7, #23]
 800e8d6:	e027      	b.n	800e928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	0f1b      	lsrs	r3, r3, #28
 800e8dc:	2b09      	cmp	r3, #9
 800e8de:	d80b      	bhi.n	800e8f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	0f1b      	lsrs	r3, r3, #28
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	7dfb      	ldrb	r3, [r7, #23]
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3230      	adds	r2, #48	; 0x30
 800e8f2:	b2d2      	uxtb	r2, r2
 800e8f4:	701a      	strb	r2, [r3, #0]
 800e8f6:	e00a      	b.n	800e90e <IntToUnicode+0x4e>
>>>>>>> origin/main
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	0f1b      	lsrs	r3, r3, #28
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	4619      	mov	r1, r3
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	440b      	add	r3, r1
 800ed34:	3237      	adds	r2, #55	; 0x37
 800ed36:	b2d2      	uxtb	r2, r2
 800ed38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	011b      	lsls	r3, r3, #4
 800ed3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed40:	7dfb      	ldrb	r3, [r7, #23]
 800ed42:	005b      	lsls	r3, r3, #1
 800ed44:	3301      	adds	r3, #1
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	4413      	add	r3, r2
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	3301      	adds	r3, #1
 800ed52:	75fb      	strb	r3, [r7, #23]
 800ed54:	7dfa      	ldrb	r2, [r7, #23]
 800ed56:	79fb      	ldrb	r3, [r7, #7]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d3d3      	bcc.n	800ed04 <IntToUnicode+0x18>
  }
}
 800ed5c:	bf00      	nop
 800ed5e:	bf00      	nop
 800ed60:	371c      	adds	r7, #28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
	...

0800ed6c <HAL_PCD_MspInit>:
=======
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	0f1b      	lsrs	r3, r3, #28
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	7dfb      	ldrb	r3, [r7, #23]
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	4619      	mov	r1, r3
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	440b      	add	r3, r1
 800e908:	3237      	adds	r2, #55	; 0x37
 800e90a:	b2d2      	uxtb	r2, r2
 800e90c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	011b      	lsls	r3, r3, #4
 800e912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e914:	7dfb      	ldrb	r3, [r7, #23]
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	3301      	adds	r3, #1
 800e91a:	68ba      	ldr	r2, [r7, #8]
 800e91c:	4413      	add	r3, r2
 800e91e:	2200      	movs	r2, #0
 800e920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	3301      	adds	r3, #1
 800e926:	75fb      	strb	r3, [r7, #23]
 800e928:	7dfa      	ldrb	r2, [r7, #23]
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d3d3      	bcc.n	800e8d8 <IntToUnicode+0x18>
  }
}
 800e930:	bf00      	nop
 800e932:	bf00      	nop
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
	...

0800e940 <HAL_PCD_MspInit>:
>>>>>>> origin/main
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b096      	sub	sp, #88	; 0x58
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ed78:	2200      	movs	r2, #0
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	605a      	str	r2, [r3, #4]
 800ed7e:	609a      	str	r2, [r3, #8]
 800ed80:	60da      	str	r2, [r3, #12]
 800ed82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ed84:	f107 0310 	add.w	r3, r7, #16
 800ed88:	2234      	movs	r2, #52	; 0x34
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 fc13 	bl	800f5b8 <memset>
  if(pcdHandle->Instance==USB)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a24      	ldr	r2, [pc, #144]	; (800ee28 <HAL_PCD_MspInit+0xbc>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d141      	bne.n	800ee20 <HAL_PCD_MspInit+0xb4>
=======
 800e940:	b580      	push	{r7, lr}
 800e942:	b096      	sub	sp, #88	; 0x58
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e948:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	605a      	str	r2, [r3, #4]
 800e952:	609a      	str	r2, [r3, #8]
 800e954:	60da      	str	r2, [r3, #12]
 800e956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e958:	f107 0310 	add.w	r3, r7, #16
 800e95c:	2234      	movs	r2, #52	; 0x34
 800e95e:	2100      	movs	r1, #0
 800e960:	4618      	mov	r0, r3
 800e962:	f000 fc13 	bl	800f18c <memset>
  if(pcdHandle->Instance==USB)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a24      	ldr	r2, [pc, #144]	; (800e9fc <HAL_PCD_MspInit+0xbc>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d141      	bne.n	800e9f4 <HAL_PCD_MspInit+0xb4>
>>>>>>> origin/main

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
<<<<<<< HEAD
 800ed9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eda0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800eda2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800eda6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eda8:	f107 0310 	add.w	r3, r7, #16
 800edac:	4618      	mov	r0, r3
 800edae:	f7f9 fe91 	bl	8008ad4 <HAL_RCCEx_PeriphCLKConfig>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d001      	beq.n	800edbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800edb8:	f7f4 faa6 	bl	8003308 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edbc:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800edbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc0:	4a1a      	ldr	r2, [pc, #104]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800edc2:	f043 0301 	orr.w	r3, r3, #1
 800edc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800edc8:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800edca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	68fb      	ldr	r3, [r7, #12]
=======
 800e970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e974:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800e976:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800e97a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e97c:	f107 0310 	add.w	r3, r7, #16
 800e980:	4618      	mov	r0, r3
 800e982:	f7f9 fe91 	bl	80086a8 <HAL_RCCEx_PeriphCLKConfig>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e98c:	f7f4 fd28 	bl	80033e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e990:	4b1b      	ldr	r3, [pc, #108]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e994:	4a1a      	ldr	r2, [pc, #104]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e99c:	4b18      	ldr	r3, [pc, #96]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e99e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	60fb      	str	r3, [r7, #12]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> origin/main
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 800edd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800edd8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edda:	2302      	movs	r3, #2
 800eddc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edde:	2300      	movs	r3, #0
 800ede0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ede2:	2303      	movs	r3, #3
 800ede4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800ede6:	230a      	movs	r3, #10
 800ede8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800edee:	4619      	mov	r1, r3
 800edf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edf4:	f7f7 f864 	bl	8005ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800edf8:	4b0c      	ldr	r3, [pc, #48]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800edfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edfc:	4a0b      	ldr	r2, [pc, #44]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800edfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee02:	6593      	str	r3, [r2, #88]	; 0x58
 800ee04:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <HAL_PCD_MspInit+0xc0>)
 800ee06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee0c:	60bb      	str	r3, [r7, #8]
 800ee0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ee10:	2200      	movs	r2, #0
 800ee12:	2100      	movs	r1, #0
 800ee14:	2043      	movs	r0, #67	; 0x43
 800ee16:	f7f6 fde6 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ee1a:	2043      	movs	r0, #67	; 0x43
 800ee1c:	f7f6 fdff 	bl	8005a1e <HAL_NVIC_EnableIRQ>
=======
 800e9a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e9ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800e9ba:	230a      	movs	r3, #10
 800e9bc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e9c8:	f7f7 f864 	bl	8005a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9d0:	4a0b      	ldr	r2, [pc, #44]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e9d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9d6:	6593      	str	r3, [r2, #88]	; 0x58
 800e9d8:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <HAL_PCD_MspInit+0xc0>)
 800e9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e9e0:	60bb      	str	r3, [r7, #8]
 800e9e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	2043      	movs	r0, #67	; 0x43
 800e9ea:	f7f6 fde6 	bl	80055ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e9ee:	2043      	movs	r0, #67	; 0x43
 800e9f0:	f7f6 fdff 	bl	80055f2 <HAL_NVIC_EnableIRQ>
>>>>>>> origin/main
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< HEAD
 800ee20:	bf00      	nop
 800ee22:	3758      	adds	r7, #88	; 0x58
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	40006800 	.word	0x40006800
 800ee2c:	40021000 	.word	0x40021000

0800ee30 <HAL_PCD_SetupStageCallback>:
=======
 800e9f4:	bf00      	nop
 800e9f6:	3758      	adds	r7, #88	; 0x58
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	40006800 	.word	0x40006800
 800ea00:	40021000 	.word	0x40021000

0800ea04 <HAL_PCD_SetupStageCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7fe fd20 	bl	800d88c <USBD_LL_SetupStage>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <HAL_PCD_DataOutStageCallback>:
=======
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	f7fe fd20 	bl	800d460 <USBD_LL_SetupStage>
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_PCD_DataOutStageCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	6879      	ldr	r1, [r7, #4]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	440b      	add	r3, r1
 800ee74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	78fb      	ldrb	r3, [r7, #3]
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	f7fe fd5a 	bl	800d936 <USBD_LL_DataOutStage>
}
 800ee82:	bf00      	nop
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <HAL_PCD_DataInStageCallback>:
=======
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ea3a:	78fa      	ldrb	r2, [r7, #3]
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	4413      	add	r3, r2
 800ea44:	00db      	lsls	r3, r3, #3
 800ea46:	440b      	add	r3, r1
 800ea48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	4619      	mov	r1, r3
 800ea52:	f7fe fd5a 	bl	800d50a <USBD_LL_DataOutStage>
}
 800ea56:	bf00      	nop
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <HAL_PCD_DataInStageCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	460b      	mov	r3, r1
 800ee94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ee9c:	78fa      	ldrb	r2, [r7, #3]
 800ee9e:	6879      	ldr	r1, [r7, #4]
 800eea0:	4613      	mov	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	440b      	add	r3, r1
 800eeaa:	3340      	adds	r3, #64	; 0x40
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	f7fe fda3 	bl	800d9fc <USBD_LL_DataInStage>
}
 800eeb6:	bf00      	nop
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <HAL_PCD_SOFCallback>:
=======
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	460b      	mov	r3, r1
 800ea68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800ea70:	78fa      	ldrb	r2, [r7, #3]
 800ea72:	6879      	ldr	r1, [r7, #4]
 800ea74:	4613      	mov	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	440b      	add	r3, r1
 800ea7e:	3340      	adds	r3, #64	; 0x40
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	78fb      	ldrb	r3, [r7, #3]
 800ea84:	4619      	mov	r1, r3
 800ea86:	f7fe fda3 	bl	800d5d0 <USBD_LL_DataInStage>
}
 800ea8a:	bf00      	nop
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <HAL_PCD_SOFCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe feb7 	bl	800dc40 <USBD_LL_SOF>
}
 800eed2:	bf00      	nop
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <HAL_PCD_ResetCallback>:
=======
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b082      	sub	sp, #8
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7fe feb7 	bl	800d814 <USBD_LL_SOF>
}
 800eaa6:	bf00      	nop
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <HAL_PCD_ResetCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b084      	sub	sp, #16
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eee2:	2301      	movs	r3, #1
 800eee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	689b      	ldr	r3, [r3, #8]
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d001      	beq.n	800eef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eeee:	f7f4 fa0b 	bl	8003308 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eef8:	7bfa      	ldrb	r2, [r7, #15]
 800eefa:	4611      	mov	r1, r2
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fe61 	bl	800dbc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fe fe0d 	bl	800db28 <USBD_LL_Reset>
}
 800ef0e:	bf00      	nop
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
	...

0800ef18 <HAL_PCD_SuspendCallback>:
=======
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b084      	sub	sp, #16
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eab6:	2301      	movs	r3, #1
 800eab8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d001      	beq.n	800eac6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eac2:	f7f4 fc8d 	bl	80033e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eacc:	7bfa      	ldrb	r2, [r7, #15]
 800eace:	4611      	mov	r1, r2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fe fe61 	bl	800d798 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe fe0d 	bl	800d6fc <USBD_LL_Reset>
}
 800eae2:	bf00      	nop
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
	...

0800eaec <HAL_PCD_SuspendCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fe fe5c 	bl	800dbe4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d005      	beq.n	800ef40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <HAL_PCD_SuspendCallback+0x30>)
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	4a03      	ldr	r2, [pc, #12]	; (800ef48 <HAL_PCD_SuspendCallback+0x30>)
 800ef3a:	f043 0306 	orr.w	r3, r3, #6
 800ef3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef40:	bf00      	nop
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	e000ed00 	.word	0xe000ed00

0800ef4c <HAL_PCD_ResumeCallback>:
=======
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe fe5c 	bl	800d7b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d005      	beq.n	800eb14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb08:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <HAL_PCD_SuspendCallback+0x30>)
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	4a03      	ldr	r2, [pc, #12]	; (800eb1c <HAL_PCD_SuspendCallback+0x30>)
 800eb0e:	f043 0306 	orr.w	r3, r3, #6
 800eb12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	e000ed00 	.word	0xe000ed00

0800eb20 <HAL_PCD_ResumeCallback>:
>>>>>>> origin/main
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	699b      	ldr	r3, [r3, #24]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d007      	beq.n	800ef6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef5c:	4b08      	ldr	r3, [pc, #32]	; (800ef80 <HAL_PCD_ResumeCallback+0x34>)
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	4a07      	ldr	r2, [pc, #28]	; (800ef80 <HAL_PCD_ResumeCallback+0x34>)
 800ef62:	f023 0306 	bic.w	r3, r3, #6
 800ef66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ef68:	f000 fab6 	bl	800f4d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fe fe4c 	bl	800dc10 <USBD_LL_Resume>
}
 800ef78:	bf00      	nop
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	e000ed00 	.word	0xe000ed00

0800ef84 <USBD_LL_Init>:
=======
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	699b      	ldr	r3, [r3, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d007      	beq.n	800eb40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb30:	4b08      	ldr	r3, [pc, #32]	; (800eb54 <HAL_PCD_ResumeCallback+0x34>)
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	4a07      	ldr	r2, [pc, #28]	; (800eb54 <HAL_PCD_ResumeCallback+0x34>)
 800eb36:	f023 0306 	bic.w	r3, r3, #6
 800eb3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eb3c:	f000 fab6 	bl	800f0ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe fe4c 	bl	800d7e4 <USBD_LL_Resume>
}
 800eb4c:	bf00      	nop
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	e000ed00 	.word	0xe000ed00

0800eb58 <USBD_LL_Init>:
>>>>>>> origin/main
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ef8c:	f7f8 ff44 	bl	8007e18 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ef90:	4a2b      	ldr	r2, [pc, #172]	; (800f040 <USBD_LL_Init+0xbc>)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a29      	ldr	r2, [pc, #164]	; (800f040 <USBD_LL_Init+0xbc>)
 800ef9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800efa0:	4b27      	ldr	r3, [pc, #156]	; (800f040 <USBD_LL_Init+0xbc>)
 800efa2:	4a28      	ldr	r2, [pc, #160]	; (800f044 <USBD_LL_Init+0xc0>)
 800efa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800efa6:	4b26      	ldr	r3, [pc, #152]	; (800f040 <USBD_LL_Init+0xbc>)
 800efa8:	2208      	movs	r2, #8
 800efaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800efac:	4b24      	ldr	r3, [pc, #144]	; (800f040 <USBD_LL_Init+0xbc>)
 800efae:	2202      	movs	r2, #2
 800efb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efb2:	4b23      	ldr	r3, [pc, #140]	; (800f040 <USBD_LL_Init+0xbc>)
 800efb4:	2202      	movs	r2, #2
 800efb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800efb8:	4b21      	ldr	r3, [pc, #132]	; (800f040 <USBD_LL_Init+0xbc>)
 800efba:	2200      	movs	r2, #0
 800efbc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800efbe:	4b20      	ldr	r3, [pc, #128]	; (800f040 <USBD_LL_Init+0xbc>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800efc4:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <USBD_LL_Init+0xbc>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800efca:	4b1d      	ldr	r3, [pc, #116]	; (800f040 <USBD_LL_Init+0xbc>)
 800efcc:	2200      	movs	r2, #0
 800efce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800efd0:	481b      	ldr	r0, [pc, #108]	; (800f040 <USBD_LL_Init+0xbc>)
 800efd2:	f7f7 f931 	bl	8006238 <HAL_PCD_Init>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800efdc:	f7f4 f994 	bl	8003308 <Error_Handler>
=======
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800eb60:	f7f8 ff44 	bl	80079ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800eb64:	4a2b      	ldr	r2, [pc, #172]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a29      	ldr	r2, [pc, #164]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eb74:	4b27      	ldr	r3, [pc, #156]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb76:	4a28      	ldr	r2, [pc, #160]	; (800ec18 <USBD_LL_Init+0xc0>)
 800eb78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eb7a:	4b26      	ldr	r3, [pc, #152]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb7c:	2208      	movs	r2, #8
 800eb7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb80:	4b24      	ldr	r3, [pc, #144]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb82:	2202      	movs	r2, #2
 800eb84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb86:	4b23      	ldr	r3, [pc, #140]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb88:	2202      	movs	r2, #2
 800eb8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eb8c:	4b21      	ldr	r3, [pc, #132]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb92:	4b20      	ldr	r3, [pc, #128]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eb98:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb9e:	4b1d      	ldr	r3, [pc, #116]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eba4:	481b      	ldr	r0, [pc, #108]	; (800ec14 <USBD_LL_Init+0xbc>)
 800eba6:	f7f7 f931 	bl	8005e0c <HAL_PCD_Init>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ebb0:	f7f4 fc16 	bl	80033e0 <Error_Handler>
>>>>>>> origin/main
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< HEAD
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800efe6:	2318      	movs	r3, #24
 800efe8:	2200      	movs	r2, #0
 800efea:	2100      	movs	r1, #0
 800efec:	f7f8 fe41 	bl	8007c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eff6:	2358      	movs	r3, #88	; 0x58
 800eff8:	2200      	movs	r2, #0
 800effa:	2180      	movs	r1, #128	; 0x80
 800effc:	f7f8 fe39 	bl	8007c72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f006:	23c0      	movs	r3, #192	; 0xc0
 800f008:	2200      	movs	r2, #0
 800f00a:	2181      	movs	r1, #129	; 0x81
 800f00c:	f7f8 fe31 	bl	8007c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f016:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f01a:	2200      	movs	r2, #0
 800f01c:	2101      	movs	r1, #1
 800f01e:	f7f8 fe28 	bl	8007c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f02c:	2200      	movs	r2, #0
 800f02e:	2182      	movs	r1, #130	; 0x82
 800f030:	f7f8 fe1f 	bl	8007c72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	200011e0 	.word	0x200011e0
 800f044:	40006800 	.word	0x40006800

0800f048 <USBD_LL_Start>:
=======
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebba:	2318      	movs	r3, #24
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	f7f8 fe41 	bl	8007846 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebca:	2358      	movs	r3, #88	; 0x58
 800ebcc:	2200      	movs	r2, #0
 800ebce:	2180      	movs	r1, #128	; 0x80
 800ebd0:	f7f8 fe39 	bl	8007846 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebda:	23c0      	movs	r3, #192	; 0xc0
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2181      	movs	r1, #129	; 0x81
 800ebe0:	f7f8 fe31 	bl	8007846 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ebee:	2200      	movs	r2, #0
 800ebf0:	2101      	movs	r1, #1
 800ebf2:	f7f8 fe28 	bl	8007846 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec00:	2200      	movs	r2, #0
 800ec02:	2182      	movs	r1, #130	; 0x82
 800ec04:	f7f8 fe1f 	bl	8007846 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	200011dc 	.word	0x200011dc
 800ec18:	40006800 	.word	0x40006800

0800ec1c <USBD_LL_Start>:
>>>>>>> origin/main
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f7 fa01 	bl	8006466 <HAL_PCD_Start>
 800f064:	4603      	mov	r3, r0
 800f066:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d816      	bhi.n	800f09c <USBD_LL_Start+0x54>
 800f06e:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <USBD_LL_Start+0x2c>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f085 	.word	0x0800f085
 800f078:	0800f08b 	.word	0x0800f08b
 800f07c:	0800f091 	.word	0x0800f091
 800f080:	0800f097 	.word	0x0800f097
    case HAL_OK :
      usb_status = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	73fb      	strb	r3, [r7, #15]
    break;
 800f088:	e00b      	b.n	800f0a2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f08a:	2303      	movs	r3, #3
 800f08c:	73fb      	strb	r3, [r7, #15]
    break;
 800f08e:	e008      	b.n	800f0a2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f090:	2301      	movs	r3, #1
 800f092:	73fb      	strb	r3, [r7, #15]
    break;
 800f094:	e005      	b.n	800f0a2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f096:	2303      	movs	r3, #3
 800f098:	73fb      	strb	r3, [r7, #15]
    break;
 800f09a:	e002      	b.n	800f0a2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f09c:	2303      	movs	r3, #3
 800f09e:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a0:	bf00      	nop
  }
  return usb_status;
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <USBD_LL_OpenEP>:
=======
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7f7 fa01 	bl	800603a <HAL_PCD_Start>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d816      	bhi.n	800ec70 <USBD_LL_Start+0x54>
 800ec42:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <USBD_LL_Start+0x2c>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec59 	.word	0x0800ec59
 800ec4c:	0800ec5f 	.word	0x0800ec5f
 800ec50:	0800ec65 	.word	0x0800ec65
 800ec54:	0800ec6b 	.word	0x0800ec6b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5c:	e00b      	b.n	800ec76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	73fb      	strb	r3, [r7, #15]
    break;
 800ec62:	e008      	b.n	800ec76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec64:	2301      	movs	r3, #1
 800ec66:	73fb      	strb	r3, [r7, #15]
    break;
 800ec68:	e005      	b.n	800ec76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec6e:	e002      	b.n	800ec76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ec70:	2303      	movs	r3, #3
 800ec72:	73fb      	strb	r3, [r7, #15]
    break;
 800ec74:	bf00      	nop
  }
  return usb_status;
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <USBD_LL_OpenEP>:
>>>>>>> origin/main
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	4608      	mov	r0, r1
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	70fb      	strb	r3, [r7, #3]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	70bb      	strb	r3, [r7, #2]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0d4:	78bb      	ldrb	r3, [r7, #2]
 800f0d6:	883a      	ldrh	r2, [r7, #0]
 800f0d8:	78f9      	ldrb	r1, [r7, #3]
 800f0da:	f7f7 fb32 	bl	8006742 <HAL_PCD_EP_Open>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f0e2:	7bbb      	ldrb	r3, [r7, #14]
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d817      	bhi.n	800f118 <USBD_LL_OpenEP+0x6c>
 800f0e8:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <USBD_LL_OpenEP+0x44>)
 800f0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ee:	bf00      	nop
 800f0f0:	0800f101 	.word	0x0800f101
 800f0f4:	0800f107 	.word	0x0800f107
 800f0f8:	0800f10d 	.word	0x0800f10d
 800f0fc:	0800f113 	.word	0x0800f113
    case HAL_OK :
      usb_status = USBD_OK;
 800f100:	2300      	movs	r3, #0
 800f102:	73fb      	strb	r3, [r7, #15]
    break;
 800f104:	e00b      	b.n	800f11e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f106:	2303      	movs	r3, #3
 800f108:	73fb      	strb	r3, [r7, #15]
    break;
 800f10a:	e008      	b.n	800f11e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f10c:	2301      	movs	r3, #1
 800f10e:	73fb      	strb	r3, [r7, #15]
    break;
 800f110:	e005      	b.n	800f11e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f112:	2303      	movs	r3, #3
 800f114:	73fb      	strb	r3, [r7, #15]
    break;
 800f116:	e002      	b.n	800f11e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f118:	2303      	movs	r3, #3
 800f11a:	73fb      	strb	r3, [r7, #15]
    break;
 800f11c:	bf00      	nop
  }
  return usb_status;
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBD_LL_CloseEP>:
=======
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	4608      	mov	r0, r1
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	4603      	mov	r3, r0
 800ec90:	70fb      	strb	r3, [r7, #3]
 800ec92:	460b      	mov	r3, r1
 800ec94:	70bb      	strb	r3, [r7, #2]
 800ec96:	4613      	mov	r3, r2
 800ec98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eca8:	78bb      	ldrb	r3, [r7, #2]
 800ecaa:	883a      	ldrh	r2, [r7, #0]
 800ecac:	78f9      	ldrb	r1, [r7, #3]
 800ecae:	f7f7 fb32 	bl	8006316 <HAL_PCD_EP_Open>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ecb6:	7bbb      	ldrb	r3, [r7, #14]
 800ecb8:	2b03      	cmp	r3, #3
 800ecba:	d817      	bhi.n	800ecec <USBD_LL_OpenEP+0x6c>
 800ecbc:	a201      	add	r2, pc, #4	; (adr r2, 800ecc4 <USBD_LL_OpenEP+0x44>)
 800ecbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc2:	bf00      	nop
 800ecc4:	0800ecd5 	.word	0x0800ecd5
 800ecc8:	0800ecdb 	.word	0x0800ecdb
 800eccc:	0800ece1 	.word	0x0800ece1
 800ecd0:	0800ece7 	.word	0x0800ece7
    case HAL_OK :
      usb_status = USBD_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecd8:	e00b      	b.n	800ecf2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecde:	e008      	b.n	800ecf2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ece0:	2301      	movs	r3, #1
 800ece2:	73fb      	strb	r3, [r7, #15]
    break;
 800ece4:	e005      	b.n	800ecf2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ece6:	2303      	movs	r3, #3
 800ece8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecea:	e002      	b.n	800ecf2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ecec:	2303      	movs	r3, #3
 800ecee:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf0:	bf00      	nop
  }
  return usb_status;
 800ecf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <USBD_LL_CloseEP>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	4611      	mov	r1, r2
 800f146:	4618      	mov	r0, r3
 800f148:	f7f7 fb63 	bl	8006812 <HAL_PCD_EP_Close>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f150:	7bbb      	ldrb	r3, [r7, #14]
 800f152:	2b03      	cmp	r3, #3
 800f154:	d816      	bhi.n	800f184 <USBD_LL_CloseEP+0x5c>
 800f156:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <USBD_LL_CloseEP+0x34>)
 800f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15c:	0800f16d 	.word	0x0800f16d
 800f160:	0800f173 	.word	0x0800f173
 800f164:	0800f179 	.word	0x0800f179
 800f168:	0800f17f 	.word	0x0800f17f
    case HAL_OK :
      usb_status = USBD_OK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	73fb      	strb	r3, [r7, #15]
    break;
 800f170:	e00b      	b.n	800f18a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f172:	2303      	movs	r3, #3
 800f174:	73fb      	strb	r3, [r7, #15]
    break;
 800f176:	e008      	b.n	800f18a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f178:	2301      	movs	r3, #1
 800f17a:	73fb      	strb	r3, [r7, #15]
    break;
 800f17c:	e005      	b.n	800f18a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f17e:	2303      	movs	r3, #3
 800f180:	73fb      	strb	r3, [r7, #15]
    break;
 800f182:	e002      	b.n	800f18a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f184:	2303      	movs	r3, #3
 800f186:	73fb      	strb	r3, [r7, #15]
    break;
 800f188:	bf00      	nop
  }
  return usb_status;
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_LL_StallEP>:
=======
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed16:	78fa      	ldrb	r2, [r7, #3]
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f7 fb63 	bl	80063e6 <HAL_PCD_EP_Close>
 800ed20:	4603      	mov	r3, r0
 800ed22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d816      	bhi.n	800ed58 <USBD_LL_CloseEP+0x5c>
 800ed2a:	a201      	add	r2, pc, #4	; (adr r2, 800ed30 <USBD_LL_CloseEP+0x34>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800ed41 	.word	0x0800ed41
 800ed34:	0800ed47 	.word	0x0800ed47
 800ed38:	0800ed4d 	.word	0x0800ed4d
 800ed3c:	0800ed53 	.word	0x0800ed53
    case HAL_OK :
      usb_status = USBD_OK;
 800ed40:	2300      	movs	r3, #0
 800ed42:	73fb      	strb	r3, [r7, #15]
    break;
 800ed44:	e00b      	b.n	800ed5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed46:	2303      	movs	r3, #3
 800ed48:	73fb      	strb	r3, [r7, #15]
    break;
 800ed4a:	e008      	b.n	800ed5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed50:	e005      	b.n	800ed5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed52:	2303      	movs	r3, #3
 800ed54:	73fb      	strb	r3, [r7, #15]
    break;
 800ed56:	e002      	b.n	800ed5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed5c:	bf00      	nop
  }
  return usb_status;
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_LL_StallEP>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1ae:	78fa      	ldrb	r2, [r7, #3]
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7f7 fc11 	bl	80069da <HAL_PCD_EP_SetStall>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	d816      	bhi.n	800f1f0 <USBD_LL_StallEP+0x5c>
 800f1c2:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <USBD_LL_StallEP+0x34>)
 800f1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c8:	0800f1d9 	.word	0x0800f1d9
 800f1cc:	0800f1df 	.word	0x0800f1df
 800f1d0:	0800f1e5 	.word	0x0800f1e5
 800f1d4:	0800f1eb 	.word	0x0800f1eb
    case HAL_OK :
      usb_status = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
    break;
 800f1dc:	e00b      	b.n	800f1f6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e2:	e008      	b.n	800f1f6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e8:	e005      	b.n	800f1f6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ee:	e002      	b.n	800f1f6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f1f0:	2303      	movs	r3, #3
 800f1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f4:	bf00      	nop
  }
  return usb_status;
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <USBD_LL_ClearStallEP>:
=======
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed82:	78fa      	ldrb	r2, [r7, #3]
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7f7 fc11 	bl	80065ae <HAL_PCD_EP_SetStall>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed90:	7bbb      	ldrb	r3, [r7, #14]
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d816      	bhi.n	800edc4 <USBD_LL_StallEP+0x5c>
 800ed96:	a201      	add	r2, pc, #4	; (adr r2, 800ed9c <USBD_LL_StallEP+0x34>)
 800ed98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9c:	0800edad 	.word	0x0800edad
 800eda0:	0800edb3 	.word	0x0800edb3
 800eda4:	0800edb9 	.word	0x0800edb9
 800eda8:	0800edbf 	.word	0x0800edbf
    case HAL_OK :
      usb_status = USBD_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73fb      	strb	r3, [r7, #15]
    break;
 800edb0:	e00b      	b.n	800edca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edb2:	2303      	movs	r3, #3
 800edb4:	73fb      	strb	r3, [r7, #15]
    break;
 800edb6:	e008      	b.n	800edca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edb8:	2301      	movs	r3, #1
 800edba:	73fb      	strb	r3, [r7, #15]
    break;
 800edbc:	e005      	b.n	800edca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edbe:	2303      	movs	r3, #3
 800edc0:	73fb      	strb	r3, [r7, #15]
    break;
 800edc2:	e002      	b.n	800edca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	73fb      	strb	r3, [r7, #15]
    break;
 800edc8:	bf00      	nop
  }
  return usb_status;
 800edca:	7bfb      	ldrb	r3, [r7, #15]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBD_LL_ClearStallEP>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f21a:	78fa      	ldrb	r2, [r7, #3]
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f7f7 fc3d 	bl	8006a9e <HAL_PCD_EP_ClrStall>
 800f224:	4603      	mov	r3, r0
 800f226:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d816      	bhi.n	800f25c <USBD_LL_ClearStallEP+0x5c>
 800f22e:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <USBD_LL_ClearStallEP+0x34>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f245 	.word	0x0800f245
 800f238:	0800f24b 	.word	0x0800f24b
 800f23c:	0800f251 	.word	0x0800f251
 800f240:	0800f257 	.word	0x0800f257
    case HAL_OK :
      usb_status = USBD_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]
    break;
 800f248:	e00b      	b.n	800f262 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f24a:	2303      	movs	r3, #3
 800f24c:	73fb      	strb	r3, [r7, #15]
    break;
 800f24e:	e008      	b.n	800f262 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f250:	2301      	movs	r3, #1
 800f252:	73fb      	strb	r3, [r7, #15]
    break;
 800f254:	e005      	b.n	800f262 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f256:	2303      	movs	r3, #3
 800f258:	73fb      	strb	r3, [r7, #15]
    break;
 800f25a:	e002      	b.n	800f262 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f25c:	2303      	movs	r3, #3
 800f25e:	73fb      	strb	r3, [r7, #15]
    break;
 800f260:	bf00      	nop
  }
  return usb_status;
 800f262:	7bfb      	ldrb	r3, [r7, #15]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <USBD_LL_IsStallEP>:
=======
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edee:	78fa      	ldrb	r2, [r7, #3]
 800edf0:	4611      	mov	r1, r2
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7f7 fc3d 	bl	8006672 <HAL_PCD_EP_ClrStall>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d816      	bhi.n	800ee30 <USBD_LL_ClearStallEP+0x5c>
 800ee02:	a201      	add	r2, pc, #4	; (adr r2, 800ee08 <USBD_LL_ClearStallEP+0x34>)
 800ee04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee08:	0800ee19 	.word	0x0800ee19
 800ee0c:	0800ee1f 	.word	0x0800ee1f
 800ee10:	0800ee25 	.word	0x0800ee25
 800ee14:	0800ee2b 	.word	0x0800ee2b
    case HAL_OK :
      usb_status = USBD_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee1c:	e00b      	b.n	800ee36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	73fb      	strb	r3, [r7, #15]
    break;
 800ee22:	e008      	b.n	800ee36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee24:	2301      	movs	r3, #1
 800ee26:	73fb      	strb	r3, [r7, #15]
    break;
 800ee28:	e005      	b.n	800ee36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee2e:	e002      	b.n	800ee36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ee30:	2303      	movs	r3, #3
 800ee32:	73fb      	strb	r3, [r7, #15]
    break;
 800ee34:	bf00      	nop
  }
  return usb_status;
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_LL_IsStallEP>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f27e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f284:	2b00      	cmp	r3, #0
 800f286:	da0c      	bge.n	800f2a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f288:	78fb      	ldrb	r3, [r7, #3]
 800f28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f28e:	68f9      	ldr	r1, [r7, #12]
 800f290:	1c5a      	adds	r2, r3, #1
 800f292:	4613      	mov	r3, r2
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	4413      	add	r3, r2
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	440b      	add	r3, r1
 800f29c:	3306      	adds	r3, #6
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	e00b      	b.n	800f2ba <USBD_LL_IsStallEP+0x4e>
=======
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	da0c      	bge.n	800ee76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee62:	68f9      	ldr	r1, [r7, #12]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	00db      	lsls	r3, r3, #3
 800ee6e:	440b      	add	r3, r1
 800ee70:	3306      	adds	r3, #6
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	e00b      	b.n	800ee8e <USBD_LL_IsStallEP+0x4e>
>>>>>>> origin/main
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 800f2a2:	78fb      	ldrb	r3, [r7, #3]
 800f2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2a8:	68f9      	ldr	r1, [r7, #12]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	00db      	lsls	r3, r3, #3
 800f2b2:	440b      	add	r3, r1
 800f2b4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800f2b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
	...

0800f2c8 <USBD_LL_SetUSBAddress>:
=======
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee7c:	68f9      	ldr	r1, [r7, #12]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	440b      	add	r3, r1
 800ee88:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800ee8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3714      	adds	r7, #20
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
	...

0800ee9c <USBD_LL_SetUSBAddress>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2e2:	78fa      	ldrb	r2, [r7, #3]
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f7 fa06 	bl	80066f8 <HAL_PCD_SetAddress>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b03      	cmp	r3, #3
 800f2f4:	d816      	bhi.n	800f324 <USBD_LL_SetUSBAddress+0x5c>
 800f2f6:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <USBD_LL_SetUSBAddress+0x34>)
 800f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fc:	0800f30d 	.word	0x0800f30d
 800f300:	0800f313 	.word	0x0800f313
 800f304:	0800f319 	.word	0x0800f319
 800f308:	0800f31f 	.word	0x0800f31f
    case HAL_OK :
      usb_status = USBD_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73fb      	strb	r3, [r7, #15]
    break;
 800f310:	e00b      	b.n	800f32a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f312:	2303      	movs	r3, #3
 800f314:	73fb      	strb	r3, [r7, #15]
    break;
 800f316:	e008      	b.n	800f32a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f318:	2301      	movs	r3, #1
 800f31a:	73fb      	strb	r3, [r7, #15]
    break;
 800f31c:	e005      	b.n	800f32a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f31e:	2303      	movs	r3, #3
 800f320:	73fb      	strb	r3, [r7, #15]
    break;
 800f322:	e002      	b.n	800f32a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f324:	2303      	movs	r3, #3
 800f326:	73fb      	strb	r3, [r7, #15]
    break;
 800f328:	bf00      	nop
  }
  return usb_status;
 800f32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBD_LL_Transmit>:
=======
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeb6:	78fa      	ldrb	r2, [r7, #3]
 800eeb8:	4611      	mov	r1, r2
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7f7 fa06 	bl	80062cc <HAL_PCD_SetAddress>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d816      	bhi.n	800eef8 <USBD_LL_SetUSBAddress+0x5c>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <USBD_LL_SetUSBAddress+0x34>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800eee1 	.word	0x0800eee1
 800eed4:	0800eee7 	.word	0x0800eee7
 800eed8:	0800eeed 	.word	0x0800eeed
 800eedc:	0800eef3 	.word	0x0800eef3
    case HAL_OK :
      usb_status = USBD_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73fb      	strb	r3, [r7, #15]
    break;
 800eee4:	e00b      	b.n	800eefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eee6:	2303      	movs	r3, #3
 800eee8:	73fb      	strb	r3, [r7, #15]
    break;
 800eeea:	e008      	b.n	800eefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eeec:	2301      	movs	r3, #1
 800eeee:	73fb      	strb	r3, [r7, #15]
    break;
 800eef0:	e005      	b.n	800eefe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eef2:	2303      	movs	r3, #3
 800eef4:	73fb      	strb	r3, [r7, #15]
    break;
 800eef6:	e002      	b.n	800eefe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800eef8:	2303      	movs	r3, #3
 800eefa:	73fb      	strb	r3, [r7, #15]
    break;
 800eefc:	bf00      	nop
  }
  return usb_status;
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <USBD_LL_Transmit>:
>>>>>>> origin/main
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	607a      	str	r2, [r7, #4]
 800f33e:	603b      	str	r3, [r7, #0]
 800f340:	460b      	mov	r3, r1
 800f342:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f348:	2300      	movs	r3, #0
 800f34a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f352:	7af9      	ldrb	r1, [r7, #11]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	f7f7 fafb 	bl	8006952 <HAL_PCD_EP_Transmit>
 800f35c:	4603      	mov	r3, r0
 800f35e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f360:	7dbb      	ldrb	r3, [r7, #22]
 800f362:	2b03      	cmp	r3, #3
 800f364:	d816      	bhi.n	800f394 <USBD_LL_Transmit+0x60>
 800f366:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <USBD_LL_Transmit+0x38>)
 800f368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36c:	0800f37d 	.word	0x0800f37d
 800f370:	0800f383 	.word	0x0800f383
 800f374:	0800f389 	.word	0x0800f389
 800f378:	0800f38f 	.word	0x0800f38f
    case HAL_OK :
      usb_status = USBD_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	75fb      	strb	r3, [r7, #23]
    break;
 800f380:	e00b      	b.n	800f39a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f382:	2303      	movs	r3, #3
 800f384:	75fb      	strb	r3, [r7, #23]
    break;
 800f386:	e008      	b.n	800f39a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f388:	2301      	movs	r3, #1
 800f38a:	75fb      	strb	r3, [r7, #23]
    break;
 800f38c:	e005      	b.n	800f39a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f38e:	2303      	movs	r3, #3
 800f390:	75fb      	strb	r3, [r7, #23]
    break;
 800f392:	e002      	b.n	800f39a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800f394:	2303      	movs	r3, #3
 800f396:	75fb      	strb	r3, [r7, #23]
    break;
 800f398:	bf00      	nop
  }
  return usb_status;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <USBD_LL_PrepareReceive>:
=======
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	607a      	str	r2, [r7, #4]
 800ef12:	603b      	str	r3, [r7, #0]
 800ef14:	460b      	mov	r3, r1
 800ef16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef26:	7af9      	ldrb	r1, [r7, #11]
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	f7f7 fafb 	bl	8006526 <HAL_PCD_EP_Transmit>
 800ef30:	4603      	mov	r3, r0
 800ef32:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ef34:	7dbb      	ldrb	r3, [r7, #22]
 800ef36:	2b03      	cmp	r3, #3
 800ef38:	d816      	bhi.n	800ef68 <USBD_LL_Transmit+0x60>
 800ef3a:	a201      	add	r2, pc, #4	; (adr r2, 800ef40 <USBD_LL_Transmit+0x38>)
 800ef3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef57 	.word	0x0800ef57
 800ef48:	0800ef5d 	.word	0x0800ef5d
 800ef4c:	0800ef63 	.word	0x0800ef63
    case HAL_OK :
      usb_status = USBD_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	75fb      	strb	r3, [r7, #23]
    break;
 800ef54:	e00b      	b.n	800ef6e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef56:	2303      	movs	r3, #3
 800ef58:	75fb      	strb	r3, [r7, #23]
    break;
 800ef5a:	e008      	b.n	800ef6e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	75fb      	strb	r3, [r7, #23]
    break;
 800ef60:	e005      	b.n	800ef6e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef62:	2303      	movs	r3, #3
 800ef64:	75fb      	strb	r3, [r7, #23]
    break;
 800ef66:	e002      	b.n	800ef6e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	75fb      	strb	r3, [r7, #23]
    break;
 800ef6c:	bf00      	nop
  }
  return usb_status;
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBD_LL_PrepareReceive>:
>>>>>>> origin/main
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	607a      	str	r2, [r7, #4]
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f3c2:	7af9      	ldrb	r1, [r7, #11]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	f7f7 fa6d 	bl	80068a6 <HAL_PCD_EP_Receive>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800f3d0:	7dbb      	ldrb	r3, [r7, #22]
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d816      	bhi.n	800f404 <USBD_LL_PrepareReceive+0x60>
 800f3d6:	a201      	add	r2, pc, #4	; (adr r2, 800f3dc <USBD_LL_PrepareReceive+0x38>)
 800f3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3dc:	0800f3ed 	.word	0x0800f3ed
 800f3e0:	0800f3f3 	.word	0x0800f3f3
 800f3e4:	0800f3f9 	.word	0x0800f3f9
 800f3e8:	0800f3ff 	.word	0x0800f3ff
    case HAL_OK :
      usb_status = USBD_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	75fb      	strb	r3, [r7, #23]
    break;
 800f3f0:	e00b      	b.n	800f40a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	75fb      	strb	r3, [r7, #23]
    break;
 800f3f6:	e008      	b.n	800f40a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	75fb      	strb	r3, [r7, #23]
    break;
 800f3fc:	e005      	b.n	800f40a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3fe:	2303      	movs	r3, #3
 800f400:	75fb      	strb	r3, [r7, #23]
    break;
 800f402:	e002      	b.n	800f40a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800f404:	2303      	movs	r3, #3
 800f406:	75fb      	strb	r3, [r7, #23]
    break;
 800f408:	bf00      	nop
  }
  return usb_status;
 800f40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_LL_GetRxDataSize>:
=======
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	607a      	str	r2, [r7, #4]
 800ef82:	603b      	str	r3, [r7, #0]
 800ef84:	460b      	mov	r3, r1
 800ef86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef96:	7af9      	ldrb	r1, [r7, #11]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	f7f7 fa6d 	bl	800647a <HAL_PCD_EP_Receive>
 800efa0:	4603      	mov	r3, r0
 800efa2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800efa4:	7dbb      	ldrb	r3, [r7, #22]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d816      	bhi.n	800efd8 <USBD_LL_PrepareReceive+0x60>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <USBD_LL_PrepareReceive+0x38>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efc1 	.word	0x0800efc1
 800efb4:	0800efc7 	.word	0x0800efc7
 800efb8:	0800efcd 	.word	0x0800efcd
 800efbc:	0800efd3 	.word	0x0800efd3
    case HAL_OK :
      usb_status = USBD_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	75fb      	strb	r3, [r7, #23]
    break;
 800efc4:	e00b      	b.n	800efde <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efc6:	2303      	movs	r3, #3
 800efc8:	75fb      	strb	r3, [r7, #23]
    break;
 800efca:	e008      	b.n	800efde <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efcc:	2301      	movs	r3, #1
 800efce:	75fb      	strb	r3, [r7, #23]
    break;
 800efd0:	e005      	b.n	800efde <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efd2:	2303      	movs	r3, #3
 800efd4:	75fb      	strb	r3, [r7, #23]
    break;
 800efd6:	e002      	b.n	800efde <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800efd8:	2303      	movs	r3, #3
 800efda:	75fb      	strb	r3, [r7, #23]
    break;
 800efdc:	bf00      	nop
  }
  return usb_status;
 800efde:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3718      	adds	r7, #24
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <USBD_LL_GetRxDataSize>:
>>>>>>> origin/main
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	460b      	mov	r3, r1
 800f41e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f426:	78fa      	ldrb	r2, [r7, #3]
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7f7 fa79 	bl	8006922 <HAL_PCD_EP_GetRxCount>
 800f430:	4603      	mov	r3, r0
}
 800f432:	4618      	mov	r0, r3
 800f434:	3708      	adds	r7, #8
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
	...

0800f43c <HAL_PCDEx_LPM_Callback>:
=======
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800effa:	78fa      	ldrb	r2, [r7, #3]
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f7f7 fa79 	bl	80064f6 <HAL_PCD_EP_GetRxCount>
 800f004:	4603      	mov	r3, r0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
	...

0800f010 <HAL_PCDEx_LPM_Callback>:
>>>>>>> origin/main
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	460b      	mov	r3, r1
 800f446:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f448:	78fb      	ldrb	r3, [r7, #3]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d002      	beq.n	800f454 <HAL_PCDEx_LPM_Callback+0x18>
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d013      	beq.n	800f47a <HAL_PCDEx_LPM_Callback+0x3e>
=======
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	460b      	mov	r3, r1
 800f01a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f01c:	78fb      	ldrb	r3, [r7, #3]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <HAL_PCDEx_LPM_Callback+0x18>
 800f022:	2b01      	cmp	r3, #1
 800f024:	d013      	beq.n	800f04e <HAL_PCDEx_LPM_Callback+0x3e>
>>>>>>> origin/main
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
<<<<<<< HEAD
 800f452:	e023      	b.n	800f49c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	699b      	ldr	r3, [r3, #24]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d007      	beq.n	800f46c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f45c:	f000 f83c 	bl	800f4d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f460:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	4a0f      	ldr	r2, [pc, #60]	; (800f4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f466:	f023 0306 	bic.w	r3, r3, #6
 800f46a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f472:	4618      	mov	r0, r3
 800f474:	f7fe fbcc 	bl	800dc10 <USBD_LL_Resume>
    break;
 800f478:	e010      	b.n	800f49c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe fbaf 	bl	800dbe4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f48e:	4b05      	ldr	r3, [pc, #20]	; (800f4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	4a04      	ldr	r2, [pc, #16]	; (800f4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f494:	f043 0306 	orr.w	r3, r3, #6
 800f498:	6113      	str	r3, [r2, #16]
    break;
 800f49a:	bf00      	nop
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	e000ed00 	.word	0xe000ed00

0800f4a8 <USBD_static_malloc>:
=======
 800f026:	e023      	b.n	800f070 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	699b      	ldr	r3, [r3, #24]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d007      	beq.n	800f040 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f030:	f000 f83c 	bl	800f0ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f034:	4b10      	ldr	r3, [pc, #64]	; (800f078 <HAL_PCDEx_LPM_Callback+0x68>)
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	4a0f      	ldr	r2, [pc, #60]	; (800f078 <HAL_PCDEx_LPM_Callback+0x68>)
 800f03a:	f023 0306 	bic.w	r3, r3, #6
 800f03e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f046:	4618      	mov	r0, r3
 800f048:	f7fe fbcc 	bl	800d7e4 <USBD_LL_Resume>
    break;
 800f04c:	e010      	b.n	800f070 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe fbaf 	bl	800d7b8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d005      	beq.n	800f06e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f062:	4b05      	ldr	r3, [pc, #20]	; (800f078 <HAL_PCDEx_LPM_Callback+0x68>)
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	4a04      	ldr	r2, [pc, #16]	; (800f078 <HAL_PCDEx_LPM_Callback+0x68>)
 800f068:	f043 0306 	orr.w	r3, r3, #6
 800f06c:	6113      	str	r3, [r2, #16]
    break;
 800f06e:	bf00      	nop
}
 800f070:	bf00      	nop
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	e000ed00 	.word	0xe000ed00

0800f07c <USBD_static_malloc>:
>>>>>>> origin/main
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f4b0:	4b03      	ldr	r3, [pc, #12]	; (800f4c0 <USBD_static_malloc+0x18>)
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	200014dc 	.word	0x200014dc

0800f4c4 <USBD_static_free>:
=======
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f084:	4b03      	ldr	r3, [pc, #12]	; (800f094 <USBD_static_malloc+0x18>)
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	200014d8 	.word	0x200014d8

0800f098 <USBD_static_free>:
>>>>>>> origin/main
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]

}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <SystemClockConfig_Resume>:
=======
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]

}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <SystemClockConfig_Resume>:
>>>>>>> origin/main
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
<<<<<<< HEAD
 800f4d8:	b480      	push	{r7}
 800f4da:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800f4dc:	bf00      	nop
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <_Znwj>:
 800f4e6:	2801      	cmp	r0, #1
 800f4e8:	bf38      	it	cc
 800f4ea:	2001      	movcc	r0, #1
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 f859 	bl	800f5a8 <malloc>
 800f4f6:	b930      	cbnz	r0, 800f506 <_Znwj+0x20>
 800f4f8:	f000 f81c 	bl	800f534 <_ZSt15get_new_handlerv>
 800f4fc:	b908      	cbnz	r0, 800f502 <_Znwj+0x1c>
 800f4fe:	f000 f821 	bl	800f544 <abort>
 800f502:	4780      	blx	r0
 800f504:	e7f4      	b.n	800f4f0 <_Znwj+0xa>
 800f506:	bd10      	pop	{r4, pc}

0800f508 <__cxa_pure_virtual>:
 800f508:	b508      	push	{r3, lr}
 800f50a:	f000 f80d 	bl	800f528 <_ZSt9terminatev>

0800f50e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f50e:	b508      	push	{r3, lr}
 800f510:	4780      	blx	r0
 800f512:	f000 f817 	bl	800f544 <abort>
	...

0800f518 <_ZSt13get_terminatev>:
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <_ZSt13get_terminatev+0xc>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	f3bf 8f5b 	dmb	ish
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	20000190 	.word	0x20000190

0800f528 <_ZSt9terminatev>:
 800f528:	b508      	push	{r3, lr}
 800f52a:	f7ff fff5 	bl	800f518 <_ZSt13get_terminatev>
 800f52e:	f7ff ffee 	bl	800f50e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f534 <_ZSt15get_new_handlerv>:
 800f534:	4b02      	ldr	r3, [pc, #8]	; (800f540 <_ZSt15get_new_handlerv+0xc>)
 800f536:	6818      	ldr	r0, [r3, #0]
 800f538:	f3bf 8f5b 	dmb	ish
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	200016fc 	.word	0x200016fc

0800f544 <abort>:
 800f544:	b508      	push	{r3, lr}
 800f546:	2006      	movs	r0, #6
 800f548:	f000 f90a 	bl	800f760 <raise>
 800f54c:	2001      	movs	r0, #1
 800f54e:	f7f4 f81b 	bl	8003588 <_exit>
	...

0800f554 <__errno>:
 800f554:	4b01      	ldr	r3, [pc, #4]	; (800f55c <__errno+0x8>)
 800f556:	6818      	ldr	r0, [r3, #0]
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	20000194 	.word	0x20000194

0800f560 <__libc_init_array>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	4d0d      	ldr	r5, [pc, #52]	; (800f598 <__libc_init_array+0x38>)
 800f564:	4c0d      	ldr	r4, [pc, #52]	; (800f59c <__libc_init_array+0x3c>)
 800f566:	1b64      	subs	r4, r4, r5
 800f568:	10a4      	asrs	r4, r4, #2
 800f56a:	2600      	movs	r6, #0
 800f56c:	42a6      	cmp	r6, r4
 800f56e:	d109      	bne.n	800f584 <__libc_init_array+0x24>
 800f570:	4d0b      	ldr	r5, [pc, #44]	; (800f5a0 <__libc_init_array+0x40>)
 800f572:	4c0c      	ldr	r4, [pc, #48]	; (800f5a4 <__libc_init_array+0x44>)
 800f574:	f000 f91e 	bl	800f7b4 <_init>
 800f578:	1b64      	subs	r4, r4, r5
 800f57a:	10a4      	asrs	r4, r4, #2
 800f57c:	2600      	movs	r6, #0
 800f57e:	42a6      	cmp	r6, r4
 800f580:	d105      	bne.n	800f58e <__libc_init_array+0x2e>
 800f582:	bd70      	pop	{r4, r5, r6, pc}
 800f584:	f855 3b04 	ldr.w	r3, [r5], #4
 800f588:	4798      	blx	r3
 800f58a:	3601      	adds	r6, #1
 800f58c:	e7ee      	b.n	800f56c <__libc_init_array+0xc>
 800f58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f592:	4798      	blx	r3
 800f594:	3601      	adds	r6, #1
 800f596:	e7f2      	b.n	800f57e <__libc_init_array+0x1e>
 800f598:	0800f898 	.word	0x0800f898
 800f59c:	0800f898 	.word	0x0800f898
 800f5a0:	0800f898 	.word	0x0800f898
 800f5a4:	0800f8a0 	.word	0x0800f8a0

0800f5a8 <malloc>:
 800f5a8:	4b02      	ldr	r3, [pc, #8]	; (800f5b4 <malloc+0xc>)
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	6818      	ldr	r0, [r3, #0]
 800f5ae:	f000 b82b 	b.w	800f608 <_malloc_r>
 800f5b2:	bf00      	nop
 800f5b4:	20000194 	.word	0x20000194

0800f5b8 <memset>:
 800f5b8:	4402      	add	r2, r0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d100      	bne.n	800f5c2 <memset+0xa>
 800f5c0:	4770      	bx	lr
 800f5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f5c6:	e7f9      	b.n	800f5bc <memset+0x4>

0800f5c8 <sbrk_aligned>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	4e0e      	ldr	r6, [pc, #56]	; (800f604 <sbrk_aligned+0x3c>)
 800f5cc:	460c      	mov	r4, r1
 800f5ce:	6831      	ldr	r1, [r6, #0]
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	b911      	cbnz	r1, 800f5da <sbrk_aligned+0x12>
 800f5d4:	f000 f88c 	bl	800f6f0 <_sbrk_r>
 800f5d8:	6030      	str	r0, [r6, #0]
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f000 f887 	bl	800f6f0 <_sbrk_r>
 800f5e2:	1c43      	adds	r3, r0, #1
 800f5e4:	d00a      	beq.n	800f5fc <sbrk_aligned+0x34>
 800f5e6:	1cc4      	adds	r4, r0, #3
 800f5e8:	f024 0403 	bic.w	r4, r4, #3
 800f5ec:	42a0      	cmp	r0, r4
 800f5ee:	d007      	beq.n	800f600 <sbrk_aligned+0x38>
 800f5f0:	1a21      	subs	r1, r4, r0
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f000 f87c 	bl	800f6f0 <_sbrk_r>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d101      	bne.n	800f600 <sbrk_aligned+0x38>
 800f5fc:	f04f 34ff 	mov.w	r4, #4294967295
 800f600:	4620      	mov	r0, r4
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	20001704 	.word	0x20001704

0800f608 <_malloc_r>:
 800f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60c:	1ccd      	adds	r5, r1, #3
 800f60e:	f025 0503 	bic.w	r5, r5, #3
 800f612:	3508      	adds	r5, #8
 800f614:	2d0c      	cmp	r5, #12
 800f616:	bf38      	it	cc
 800f618:	250c      	movcc	r5, #12
 800f61a:	2d00      	cmp	r5, #0
 800f61c:	4607      	mov	r7, r0
 800f61e:	db01      	blt.n	800f624 <_malloc_r+0x1c>
 800f620:	42a9      	cmp	r1, r5
 800f622:	d905      	bls.n	800f630 <_malloc_r+0x28>
 800f624:	230c      	movs	r3, #12
 800f626:	603b      	str	r3, [r7, #0]
 800f628:	2600      	movs	r6, #0
 800f62a:	4630      	mov	r0, r6
 800f62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f630:	4e2e      	ldr	r6, [pc, #184]	; (800f6ec <_malloc_r+0xe4>)
 800f632:	f000 f8b1 	bl	800f798 <__malloc_lock>
 800f636:	6833      	ldr	r3, [r6, #0]
 800f638:	461c      	mov	r4, r3
 800f63a:	bb34      	cbnz	r4, 800f68a <_malloc_r+0x82>
 800f63c:	4629      	mov	r1, r5
 800f63e:	4638      	mov	r0, r7
 800f640:	f7ff ffc2 	bl	800f5c8 <sbrk_aligned>
 800f644:	1c43      	adds	r3, r0, #1
 800f646:	4604      	mov	r4, r0
 800f648:	d14d      	bne.n	800f6e6 <_malloc_r+0xde>
 800f64a:	6834      	ldr	r4, [r6, #0]
 800f64c:	4626      	mov	r6, r4
 800f64e:	2e00      	cmp	r6, #0
 800f650:	d140      	bne.n	800f6d4 <_malloc_r+0xcc>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	4631      	mov	r1, r6
 800f656:	4638      	mov	r0, r7
 800f658:	eb04 0803 	add.w	r8, r4, r3
 800f65c:	f000 f848 	bl	800f6f0 <_sbrk_r>
 800f660:	4580      	cmp	r8, r0
 800f662:	d13a      	bne.n	800f6da <_malloc_r+0xd2>
 800f664:	6821      	ldr	r1, [r4, #0]
 800f666:	3503      	adds	r5, #3
 800f668:	1a6d      	subs	r5, r5, r1
 800f66a:	f025 0503 	bic.w	r5, r5, #3
 800f66e:	3508      	adds	r5, #8
 800f670:	2d0c      	cmp	r5, #12
 800f672:	bf38      	it	cc
 800f674:	250c      	movcc	r5, #12
 800f676:	4629      	mov	r1, r5
 800f678:	4638      	mov	r0, r7
 800f67a:	f7ff ffa5 	bl	800f5c8 <sbrk_aligned>
 800f67e:	3001      	adds	r0, #1
 800f680:	d02b      	beq.n	800f6da <_malloc_r+0xd2>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	442b      	add	r3, r5
 800f686:	6023      	str	r3, [r4, #0]
 800f688:	e00e      	b.n	800f6a8 <_malloc_r+0xa0>
 800f68a:	6822      	ldr	r2, [r4, #0]
 800f68c:	1b52      	subs	r2, r2, r5
 800f68e:	d41e      	bmi.n	800f6ce <_malloc_r+0xc6>
 800f690:	2a0b      	cmp	r2, #11
 800f692:	d916      	bls.n	800f6c2 <_malloc_r+0xba>
 800f694:	1961      	adds	r1, r4, r5
 800f696:	42a3      	cmp	r3, r4
 800f698:	6025      	str	r5, [r4, #0]
 800f69a:	bf18      	it	ne
 800f69c:	6059      	strne	r1, [r3, #4]
 800f69e:	6863      	ldr	r3, [r4, #4]
 800f6a0:	bf08      	it	eq
 800f6a2:	6031      	streq	r1, [r6, #0]
 800f6a4:	5162      	str	r2, [r4, r5]
 800f6a6:	604b      	str	r3, [r1, #4]
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	f104 060b 	add.w	r6, r4, #11
 800f6ae:	f000 f879 	bl	800f7a4 <__malloc_unlock>
 800f6b2:	f026 0607 	bic.w	r6, r6, #7
 800f6b6:	1d23      	adds	r3, r4, #4
 800f6b8:	1af2      	subs	r2, r6, r3
 800f6ba:	d0b6      	beq.n	800f62a <_malloc_r+0x22>
 800f6bc:	1b9b      	subs	r3, r3, r6
 800f6be:	50a3      	str	r3, [r4, r2]
 800f6c0:	e7b3      	b.n	800f62a <_malloc_r+0x22>
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	bf0c      	ite	eq
 800f6c8:	6032      	streq	r2, [r6, #0]
 800f6ca:	605a      	strne	r2, [r3, #4]
 800f6cc:	e7ec      	b.n	800f6a8 <_malloc_r+0xa0>
 800f6ce:	4623      	mov	r3, r4
 800f6d0:	6864      	ldr	r4, [r4, #4]
 800f6d2:	e7b2      	b.n	800f63a <_malloc_r+0x32>
 800f6d4:	4634      	mov	r4, r6
 800f6d6:	6876      	ldr	r6, [r6, #4]
 800f6d8:	e7b9      	b.n	800f64e <_malloc_r+0x46>
 800f6da:	230c      	movs	r3, #12
 800f6dc:	603b      	str	r3, [r7, #0]
 800f6de:	4638      	mov	r0, r7
 800f6e0:	f000 f860 	bl	800f7a4 <__malloc_unlock>
 800f6e4:	e7a1      	b.n	800f62a <_malloc_r+0x22>
 800f6e6:	6025      	str	r5, [r4, #0]
 800f6e8:	e7de      	b.n	800f6a8 <_malloc_r+0xa0>
 800f6ea:	bf00      	nop
 800f6ec:	20001700 	.word	0x20001700

0800f6f0 <_sbrk_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d06      	ldr	r5, [pc, #24]	; (800f70c <_sbrk_r+0x1c>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	602b      	str	r3, [r5, #0]
 800f6fc:	f7f3 ff4e 	bl	800359c <_sbrk>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_sbrk_r+0x1a>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_sbrk_r+0x1a>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	20001708 	.word	0x20001708

0800f710 <_raise_r>:
 800f710:	291f      	cmp	r1, #31
 800f712:	b538      	push	{r3, r4, r5, lr}
 800f714:	4604      	mov	r4, r0
 800f716:	460d      	mov	r5, r1
 800f718:	d904      	bls.n	800f724 <_raise_r+0x14>
 800f71a:	2316      	movs	r3, #22
 800f71c:	6003      	str	r3, [r0, #0]
 800f71e:	f04f 30ff 	mov.w	r0, #4294967295
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f726:	b112      	cbz	r2, 800f72e <_raise_r+0x1e>
 800f728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f72c:	b94b      	cbnz	r3, 800f742 <_raise_r+0x32>
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 f830 	bl	800f794 <_getpid_r>
 800f734:	462a      	mov	r2, r5
 800f736:	4601      	mov	r1, r0
 800f738:	4620      	mov	r0, r4
 800f73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f73e:	f000 b817 	b.w	800f770 <_kill_r>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d00a      	beq.n	800f75c <_raise_r+0x4c>
 800f746:	1c59      	adds	r1, r3, #1
 800f748:	d103      	bne.n	800f752 <_raise_r+0x42>
 800f74a:	2316      	movs	r3, #22
 800f74c:	6003      	str	r3, [r0, #0]
 800f74e:	2001      	movs	r0, #1
 800f750:	e7e7      	b.n	800f722 <_raise_r+0x12>
 800f752:	2400      	movs	r4, #0
 800f754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f758:	4628      	mov	r0, r5
 800f75a:	4798      	blx	r3
 800f75c:	2000      	movs	r0, #0
 800f75e:	e7e0      	b.n	800f722 <_raise_r+0x12>

0800f760 <raise>:
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <raise+0xc>)
 800f762:	4601      	mov	r1, r0
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff bfd3 	b.w	800f710 <_raise_r>
 800f76a:	bf00      	nop
 800f76c:	20000194 	.word	0x20000194

0800f770 <_kill_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4d07      	ldr	r5, [pc, #28]	; (800f790 <_kill_r+0x20>)
 800f774:	2300      	movs	r3, #0
 800f776:	4604      	mov	r4, r0
 800f778:	4608      	mov	r0, r1
 800f77a:	4611      	mov	r1, r2
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	f7f3 fef3 	bl	8003568 <_kill>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	d102      	bne.n	800f78c <_kill_r+0x1c>
 800f786:	682b      	ldr	r3, [r5, #0]
 800f788:	b103      	cbz	r3, 800f78c <_kill_r+0x1c>
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	bd38      	pop	{r3, r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	20001708 	.word	0x20001708

0800f794 <_getpid_r>:
 800f794:	f7f3 bee0 	b.w	8003558 <_getpid>

0800f798 <__malloc_lock>:
 800f798:	4801      	ldr	r0, [pc, #4]	; (800f7a0 <__malloc_lock+0x8>)
 800f79a:	f000 b809 	b.w	800f7b0 <__retarget_lock_acquire_recursive>
 800f79e:	bf00      	nop
 800f7a0:	2000170c 	.word	0x2000170c

0800f7a4 <__malloc_unlock>:
 800f7a4:	4801      	ldr	r0, [pc, #4]	; (800f7ac <__malloc_unlock+0x8>)
 800f7a6:	f000 b804 	b.w	800f7b2 <__retarget_lock_release_recursive>
 800f7aa:	bf00      	nop
 800f7ac:	2000170c 	.word	0x2000170c

0800f7b0 <__retarget_lock_acquire_recursive>:
 800f7b0:	4770      	bx	lr

0800f7b2 <__retarget_lock_release_recursive>:
 800f7b2:	4770      	bx	lr

0800f7b4 <_init>:
 800f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b6:	bf00      	nop
 800f7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ba:	bc08      	pop	{r3}
 800f7bc:	469e      	mov	lr, r3
 800f7be:	4770      	bx	lr

0800f7c0 <_fini>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	bf00      	nop
 800f7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c6:	bc08      	pop	{r3}
 800f7c8:	469e      	mov	lr, r3
 800f7ca:	4770      	bx	lr
=======
 800f0ac:	b480      	push	{r7}
 800f0ae:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800f0b0:	bf00      	nop
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr

0800f0ba <_Znwj>:
 800f0ba:	2801      	cmp	r0, #1
 800f0bc:	bf38      	it	cc
 800f0be:	2001      	movcc	r0, #1
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f000 f859 	bl	800f17c <malloc>
 800f0ca:	b930      	cbnz	r0, 800f0da <_Znwj+0x20>
 800f0cc:	f000 f81c 	bl	800f108 <_ZSt15get_new_handlerv>
 800f0d0:	b908      	cbnz	r0, 800f0d6 <_Znwj+0x1c>
 800f0d2:	f000 f821 	bl	800f118 <abort>
 800f0d6:	4780      	blx	r0
 800f0d8:	e7f4      	b.n	800f0c4 <_Znwj+0xa>
 800f0da:	bd10      	pop	{r4, pc}

0800f0dc <__cxa_pure_virtual>:
 800f0dc:	b508      	push	{r3, lr}
 800f0de:	f000 f80d 	bl	800f0fc <_ZSt9terminatev>

0800f0e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f0e2:	b508      	push	{r3, lr}
 800f0e4:	4780      	blx	r0
 800f0e6:	f000 f817 	bl	800f118 <abort>
	...

0800f0ec <_ZSt13get_terminatev>:
 800f0ec:	4b02      	ldr	r3, [pc, #8]	; (800f0f8 <_ZSt13get_terminatev+0xc>)
 800f0ee:	6818      	ldr	r0, [r3, #0]
 800f0f0:	f3bf 8f5b 	dmb	ish
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	20000190 	.word	0x20000190

0800f0fc <_ZSt9terminatev>:
 800f0fc:	b508      	push	{r3, lr}
 800f0fe:	f7ff fff5 	bl	800f0ec <_ZSt13get_terminatev>
 800f102:	f7ff ffee 	bl	800f0e2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f108 <_ZSt15get_new_handlerv>:
 800f108:	4b02      	ldr	r3, [pc, #8]	; (800f114 <_ZSt15get_new_handlerv+0xc>)
 800f10a:	6818      	ldr	r0, [r3, #0]
 800f10c:	f3bf 8f5b 	dmb	ish
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	200016f8 	.word	0x200016f8

0800f118 <abort>:
 800f118:	b508      	push	{r3, lr}
 800f11a:	2006      	movs	r0, #6
 800f11c:	f000 f90a 	bl	800f334 <raise>
 800f120:	2001      	movs	r0, #1
 800f122:	f7f4 fa93 	bl	800364c <_exit>
	...

0800f128 <__errno>:
 800f128:	4b01      	ldr	r3, [pc, #4]	; (800f130 <__errno+0x8>)
 800f12a:	6818      	ldr	r0, [r3, #0]
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	20000194 	.word	0x20000194

0800f134 <__libc_init_array>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	4d0d      	ldr	r5, [pc, #52]	; (800f16c <__libc_init_array+0x38>)
 800f138:	4c0d      	ldr	r4, [pc, #52]	; (800f170 <__libc_init_array+0x3c>)
 800f13a:	1b64      	subs	r4, r4, r5
 800f13c:	10a4      	asrs	r4, r4, #2
 800f13e:	2600      	movs	r6, #0
 800f140:	42a6      	cmp	r6, r4
 800f142:	d109      	bne.n	800f158 <__libc_init_array+0x24>
 800f144:	4d0b      	ldr	r5, [pc, #44]	; (800f174 <__libc_init_array+0x40>)
 800f146:	4c0c      	ldr	r4, [pc, #48]	; (800f178 <__libc_init_array+0x44>)
 800f148:	f000 f91e 	bl	800f388 <_init>
 800f14c:	1b64      	subs	r4, r4, r5
 800f14e:	10a4      	asrs	r4, r4, #2
 800f150:	2600      	movs	r6, #0
 800f152:	42a6      	cmp	r6, r4
 800f154:	d105      	bne.n	800f162 <__libc_init_array+0x2e>
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	f855 3b04 	ldr.w	r3, [r5], #4
 800f15c:	4798      	blx	r3
 800f15e:	3601      	adds	r6, #1
 800f160:	e7ee      	b.n	800f140 <__libc_init_array+0xc>
 800f162:	f855 3b04 	ldr.w	r3, [r5], #4
 800f166:	4798      	blx	r3
 800f168:	3601      	adds	r6, #1
 800f16a:	e7f2      	b.n	800f152 <__libc_init_array+0x1e>
 800f16c:	0800f46c 	.word	0x0800f46c
 800f170:	0800f46c 	.word	0x0800f46c
 800f174:	0800f46c 	.word	0x0800f46c
 800f178:	0800f474 	.word	0x0800f474

0800f17c <malloc>:
 800f17c:	4b02      	ldr	r3, [pc, #8]	; (800f188 <malloc+0xc>)
 800f17e:	4601      	mov	r1, r0
 800f180:	6818      	ldr	r0, [r3, #0]
 800f182:	f000 b82b 	b.w	800f1dc <_malloc_r>
 800f186:	bf00      	nop
 800f188:	20000194 	.word	0x20000194

0800f18c <memset>:
 800f18c:	4402      	add	r2, r0
 800f18e:	4603      	mov	r3, r0
 800f190:	4293      	cmp	r3, r2
 800f192:	d100      	bne.n	800f196 <memset+0xa>
 800f194:	4770      	bx	lr
 800f196:	f803 1b01 	strb.w	r1, [r3], #1
 800f19a:	e7f9      	b.n	800f190 <memset+0x4>

0800f19c <sbrk_aligned>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	4e0e      	ldr	r6, [pc, #56]	; (800f1d8 <sbrk_aligned+0x3c>)
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	6831      	ldr	r1, [r6, #0]
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	b911      	cbnz	r1, 800f1ae <sbrk_aligned+0x12>
 800f1a8:	f000 f88c 	bl	800f2c4 <_sbrk_r>
 800f1ac:	6030      	str	r0, [r6, #0]
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f000 f887 	bl	800f2c4 <_sbrk_r>
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d00a      	beq.n	800f1d0 <sbrk_aligned+0x34>
 800f1ba:	1cc4      	adds	r4, r0, #3
 800f1bc:	f024 0403 	bic.w	r4, r4, #3
 800f1c0:	42a0      	cmp	r0, r4
 800f1c2:	d007      	beq.n	800f1d4 <sbrk_aligned+0x38>
 800f1c4:	1a21      	subs	r1, r4, r0
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 f87c 	bl	800f2c4 <_sbrk_r>
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d101      	bne.n	800f1d4 <sbrk_aligned+0x38>
 800f1d0:	f04f 34ff 	mov.w	r4, #4294967295
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	bd70      	pop	{r4, r5, r6, pc}
 800f1d8:	20001700 	.word	0x20001700

0800f1dc <_malloc_r>:
 800f1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e0:	1ccd      	adds	r5, r1, #3
 800f1e2:	f025 0503 	bic.w	r5, r5, #3
 800f1e6:	3508      	adds	r5, #8
 800f1e8:	2d0c      	cmp	r5, #12
 800f1ea:	bf38      	it	cc
 800f1ec:	250c      	movcc	r5, #12
 800f1ee:	2d00      	cmp	r5, #0
 800f1f0:	4607      	mov	r7, r0
 800f1f2:	db01      	blt.n	800f1f8 <_malloc_r+0x1c>
 800f1f4:	42a9      	cmp	r1, r5
 800f1f6:	d905      	bls.n	800f204 <_malloc_r+0x28>
 800f1f8:	230c      	movs	r3, #12
 800f1fa:	603b      	str	r3, [r7, #0]
 800f1fc:	2600      	movs	r6, #0
 800f1fe:	4630      	mov	r0, r6
 800f200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f204:	4e2e      	ldr	r6, [pc, #184]	; (800f2c0 <_malloc_r+0xe4>)
 800f206:	f000 f8b1 	bl	800f36c <__malloc_lock>
 800f20a:	6833      	ldr	r3, [r6, #0]
 800f20c:	461c      	mov	r4, r3
 800f20e:	bb34      	cbnz	r4, 800f25e <_malloc_r+0x82>
 800f210:	4629      	mov	r1, r5
 800f212:	4638      	mov	r0, r7
 800f214:	f7ff ffc2 	bl	800f19c <sbrk_aligned>
 800f218:	1c43      	adds	r3, r0, #1
 800f21a:	4604      	mov	r4, r0
 800f21c:	d14d      	bne.n	800f2ba <_malloc_r+0xde>
 800f21e:	6834      	ldr	r4, [r6, #0]
 800f220:	4626      	mov	r6, r4
 800f222:	2e00      	cmp	r6, #0
 800f224:	d140      	bne.n	800f2a8 <_malloc_r+0xcc>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	4631      	mov	r1, r6
 800f22a:	4638      	mov	r0, r7
 800f22c:	eb04 0803 	add.w	r8, r4, r3
 800f230:	f000 f848 	bl	800f2c4 <_sbrk_r>
 800f234:	4580      	cmp	r8, r0
 800f236:	d13a      	bne.n	800f2ae <_malloc_r+0xd2>
 800f238:	6821      	ldr	r1, [r4, #0]
 800f23a:	3503      	adds	r5, #3
 800f23c:	1a6d      	subs	r5, r5, r1
 800f23e:	f025 0503 	bic.w	r5, r5, #3
 800f242:	3508      	adds	r5, #8
 800f244:	2d0c      	cmp	r5, #12
 800f246:	bf38      	it	cc
 800f248:	250c      	movcc	r5, #12
 800f24a:	4629      	mov	r1, r5
 800f24c:	4638      	mov	r0, r7
 800f24e:	f7ff ffa5 	bl	800f19c <sbrk_aligned>
 800f252:	3001      	adds	r0, #1
 800f254:	d02b      	beq.n	800f2ae <_malloc_r+0xd2>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	442b      	add	r3, r5
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	e00e      	b.n	800f27c <_malloc_r+0xa0>
 800f25e:	6822      	ldr	r2, [r4, #0]
 800f260:	1b52      	subs	r2, r2, r5
 800f262:	d41e      	bmi.n	800f2a2 <_malloc_r+0xc6>
 800f264:	2a0b      	cmp	r2, #11
 800f266:	d916      	bls.n	800f296 <_malloc_r+0xba>
 800f268:	1961      	adds	r1, r4, r5
 800f26a:	42a3      	cmp	r3, r4
 800f26c:	6025      	str	r5, [r4, #0]
 800f26e:	bf18      	it	ne
 800f270:	6059      	strne	r1, [r3, #4]
 800f272:	6863      	ldr	r3, [r4, #4]
 800f274:	bf08      	it	eq
 800f276:	6031      	streq	r1, [r6, #0]
 800f278:	5162      	str	r2, [r4, r5]
 800f27a:	604b      	str	r3, [r1, #4]
 800f27c:	4638      	mov	r0, r7
 800f27e:	f104 060b 	add.w	r6, r4, #11
 800f282:	f000 f879 	bl	800f378 <__malloc_unlock>
 800f286:	f026 0607 	bic.w	r6, r6, #7
 800f28a:	1d23      	adds	r3, r4, #4
 800f28c:	1af2      	subs	r2, r6, r3
 800f28e:	d0b6      	beq.n	800f1fe <_malloc_r+0x22>
 800f290:	1b9b      	subs	r3, r3, r6
 800f292:	50a3      	str	r3, [r4, r2]
 800f294:	e7b3      	b.n	800f1fe <_malloc_r+0x22>
 800f296:	6862      	ldr	r2, [r4, #4]
 800f298:	42a3      	cmp	r3, r4
 800f29a:	bf0c      	ite	eq
 800f29c:	6032      	streq	r2, [r6, #0]
 800f29e:	605a      	strne	r2, [r3, #4]
 800f2a0:	e7ec      	b.n	800f27c <_malloc_r+0xa0>
 800f2a2:	4623      	mov	r3, r4
 800f2a4:	6864      	ldr	r4, [r4, #4]
 800f2a6:	e7b2      	b.n	800f20e <_malloc_r+0x32>
 800f2a8:	4634      	mov	r4, r6
 800f2aa:	6876      	ldr	r6, [r6, #4]
 800f2ac:	e7b9      	b.n	800f222 <_malloc_r+0x46>
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	603b      	str	r3, [r7, #0]
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	f000 f860 	bl	800f378 <__malloc_unlock>
 800f2b8:	e7a1      	b.n	800f1fe <_malloc_r+0x22>
 800f2ba:	6025      	str	r5, [r4, #0]
 800f2bc:	e7de      	b.n	800f27c <_malloc_r+0xa0>
 800f2be:	bf00      	nop
 800f2c0:	200016fc 	.word	0x200016fc

0800f2c4 <_sbrk_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d06      	ldr	r5, [pc, #24]	; (800f2e0 <_sbrk_r+0x1c>)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	4608      	mov	r0, r1
 800f2ce:	602b      	str	r3, [r5, #0]
 800f2d0:	f7f4 f9c6 	bl	8003660 <_sbrk>
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	d102      	bne.n	800f2de <_sbrk_r+0x1a>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	b103      	cbz	r3, 800f2de <_sbrk_r+0x1a>
 800f2dc:	6023      	str	r3, [r4, #0]
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	20001704 	.word	0x20001704

0800f2e4 <_raise_r>:
 800f2e4:	291f      	cmp	r1, #31
 800f2e6:	b538      	push	{r3, r4, r5, lr}
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	d904      	bls.n	800f2f8 <_raise_r+0x14>
 800f2ee:	2316      	movs	r3, #22
 800f2f0:	6003      	str	r3, [r0, #0]
 800f2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2fa:	b112      	cbz	r2, 800f302 <_raise_r+0x1e>
 800f2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f300:	b94b      	cbnz	r3, 800f316 <_raise_r+0x32>
 800f302:	4620      	mov	r0, r4
 800f304:	f000 f830 	bl	800f368 <_getpid_r>
 800f308:	462a      	mov	r2, r5
 800f30a:	4601      	mov	r1, r0
 800f30c:	4620      	mov	r0, r4
 800f30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f312:	f000 b817 	b.w	800f344 <_kill_r>
 800f316:	2b01      	cmp	r3, #1
 800f318:	d00a      	beq.n	800f330 <_raise_r+0x4c>
 800f31a:	1c59      	adds	r1, r3, #1
 800f31c:	d103      	bne.n	800f326 <_raise_r+0x42>
 800f31e:	2316      	movs	r3, #22
 800f320:	6003      	str	r3, [r0, #0]
 800f322:	2001      	movs	r0, #1
 800f324:	e7e7      	b.n	800f2f6 <_raise_r+0x12>
 800f326:	2400      	movs	r4, #0
 800f328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f32c:	4628      	mov	r0, r5
 800f32e:	4798      	blx	r3
 800f330:	2000      	movs	r0, #0
 800f332:	e7e0      	b.n	800f2f6 <_raise_r+0x12>

0800f334 <raise>:
 800f334:	4b02      	ldr	r3, [pc, #8]	; (800f340 <raise+0xc>)
 800f336:	4601      	mov	r1, r0
 800f338:	6818      	ldr	r0, [r3, #0]
 800f33a:	f7ff bfd3 	b.w	800f2e4 <_raise_r>
 800f33e:	bf00      	nop
 800f340:	20000194 	.word	0x20000194

0800f344 <_kill_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4d07      	ldr	r5, [pc, #28]	; (800f364 <_kill_r+0x20>)
 800f348:	2300      	movs	r3, #0
 800f34a:	4604      	mov	r4, r0
 800f34c:	4608      	mov	r0, r1
 800f34e:	4611      	mov	r1, r2
 800f350:	602b      	str	r3, [r5, #0]
 800f352:	f7f4 f96b 	bl	800362c <_kill>
 800f356:	1c43      	adds	r3, r0, #1
 800f358:	d102      	bne.n	800f360 <_kill_r+0x1c>
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	b103      	cbz	r3, 800f360 <_kill_r+0x1c>
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	bd38      	pop	{r3, r4, r5, pc}
 800f362:	bf00      	nop
 800f364:	20001704 	.word	0x20001704

0800f368 <_getpid_r>:
 800f368:	f7f4 b958 	b.w	800361c <_getpid>

0800f36c <__malloc_lock>:
 800f36c:	4801      	ldr	r0, [pc, #4]	; (800f374 <__malloc_lock+0x8>)
 800f36e:	f000 b809 	b.w	800f384 <__retarget_lock_acquire_recursive>
 800f372:	bf00      	nop
 800f374:	20001708 	.word	0x20001708

0800f378 <__malloc_unlock>:
 800f378:	4801      	ldr	r0, [pc, #4]	; (800f380 <__malloc_unlock+0x8>)
 800f37a:	f000 b804 	b.w	800f386 <__retarget_lock_release_recursive>
 800f37e:	bf00      	nop
 800f380:	20001708 	.word	0x20001708

0800f384 <__retarget_lock_acquire_recursive>:
 800f384:	4770      	bx	lr

0800f386 <__retarget_lock_release_recursive>:
 800f386:	4770      	bx	lr

0800f388 <_init>:
 800f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38a:	bf00      	nop
 800f38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f38e:	bc08      	pop	{r3}
 800f390:	469e      	mov	lr, r3
 800f392:	4770      	bx	lr

0800f394 <_fini>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	bf00      	nop
 800f398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39a:	bc08      	pop	{r3}
 800f39c:	469e      	mov	lr, r3
 800f39e:	4770      	bx	lr
>>>>>>> origin/main
