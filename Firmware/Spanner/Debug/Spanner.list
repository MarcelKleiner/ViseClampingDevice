
Spanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e070  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800e1fc  0800e1fc  0001e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2c0  0800e2c0  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2c0  0800e2c0  0001e2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2c8  0800e2c8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e2c8  0800e2c8  0001e2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2d0  0800e2d0  0001e2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200001fc  0800e4d0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  0800e4d0  00021688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296e2  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f50  00000000  00000000  0004990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002040  00000000  00000000  0004f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d68  00000000  00000000  000518a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002549e  00000000  00000000  00053608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a3c  00000000  00000000  00078aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6794  00000000  00000000  0009f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a88  00000000  00000000  00165cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800e1e4 	.word	0x0800e1e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	0800e1e4 	.word	0x0800e1e4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

#include "stddef.h"

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800e24c 	.word	0x0800e24c

080004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa00 	bl	8000914 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3328      	adds	r3, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	61da      	str	r2, [r3, #28]
		}
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800e25c 	.word	0x0800e25c

0800054c <_ZN11TaskHandlerC1Ev>:
#define SRC_STATUS_TASKHANDLER_H_

#include "stdint.h"


class TaskHandler{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	705a      	strb	r2, [r3, #1]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	70da      	strb	r2, [r3, #3]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	711a      	strb	r2, [r3, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	715a      	strb	r2, [r3, #5]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	719a      	strb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2201      	movs	r2, #1
 8000582:	71da      	strb	r2, [r3, #7]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	721a      	strb	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	725a      	strb	r2, [r3, #9]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	729a      	strb	r2, [r3, #10]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	72da      	strb	r2, [r3, #11]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2220      	movs	r2, #32
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	805a      	strh	r2, [r3, #2]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	809a      	strh	r2, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	80da      	strh	r2, [r3, #6]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	811a      	strh	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005d6:	815a      	strh	r2, [r3, #10]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2214      	movs	r2, #20
 80005dc:	819a      	strh	r2, [r3, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	81da      	strh	r2, [r3, #14]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 80005ea:	821a      	strh	r2, [r3, #16]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80005f2:	825a      	strh	r2, [r3, #18]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2232      	movs	r2, #50	; 0x32
 80005f8:	829a      	strh	r2, [r3, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	82da      	strh	r2, [r3, #22]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000606:	831a      	strh	r2, [r3, #24]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_ZN11DriveStatusC1Ev>:
#ifndef SRC_STATUS_DRIVESTATUS_H_
#define SRC_STATUS_DRIVESTATUS_H_

#include "stdint.h"

class DriveStatus
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	739a      	strb	r2, [r3, #14]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <_ZN7AppMainC1Ev>:

extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

AppMain::AppMain()
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af02      	add	r7, sp, #8
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	819a      	strh	r2, [r3, #12]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff7e 	bl	800054c <_ZN11TaskHandlerC1Ev>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	739a      	strb	r2, [r3, #14]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3310      	adds	r3, #16
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f97e 	bl	800195c <_ZN10RFM95_LoRaC1Ev>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3330      	adds	r3, #48	; 0x30
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	831a      	strh	r2, [r3, #24]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3330      	adds	r3, #48	; 0x30
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff96 	bl	80005aa <_ZN13DriveSettingsC1Ev>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	334a      	adds	r3, #74	; 0x4a
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	334a      	adds	r3, #74	; 0x4a
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffc0 	bl	8000616 <_ZN11DriveStatusC1Ev>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	335a      	adds	r3, #90	; 0x5a
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fec9 	bl	8002432 <_ZN12DriveCommandC1Ev>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	334a      	adds	r3, #74	; 0x4a
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f001 f860 	bl	8001772 <_ZN7EncoderC1EP11DriveStatus>
 80006b2:	2030      	movs	r0, #48	; 0x30
 80006b4:	f00d fc2f 	bl	800df16 <_Znwj>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461c      	mov	r4, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3310      	adds	r3, #16
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	4620      	mov	r0, r4
 80006d8:	f7ff ff0a 	bl	80004f0 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	679c      	str	r4, [r3, #120]	; 0x78
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3364      	adds	r3, #100	; 0x64
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	4623      	mov	r3, r4
 8000700:	f000 fe34 	bl	800136c <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800070a:	2300      	movs	r3, #0
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	4904      	ldr	r1, [pc, #16]	; (8000720 <_ZN7AppMainC1Ev+0xec>)
 8000710:	f001 f8f8 	bl	8001904 <_ZN3LEDC1EP12GPIO_TypeDeftb>
{

}
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	bf00      	nop
 8000720:	48000400 	.word	0x48000400

08000724 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_SPI_MspInit(&hspi1);
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <_ZN7AppMain7StartupEv+0xa4>)
 800072e:	f002 fc1d 	bl	8002f6c <HAL_SPI_MspInit>

	HAL_TIM_PWM_MspInit(&htim2);
 8000732:	4826      	ldr	r0, [pc, #152]	; (80007cc <_ZN7AppMain7StartupEv+0xa8>)
 8000734:	f002 fe9e 	bl	8003474 <HAL_TIM_PWM_MspInit>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000738:	2104      	movs	r1, #4
 800073a:	4824      	ldr	r0, [pc, #144]	; (80007cc <_ZN7AppMain7StartupEv+0xa8>)
 800073c:	f007 fef4 	bl	8008528 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4822      	ldr	r0, [pc, #136]	; (80007cc <_ZN7AppMain7StartupEv+0xa8>)
 8000744:	f007 fef0 	bl	8008528 <HAL_TIM_PWM_Start>



	//TIM2->CCR1 = 6400;

	TIM2->CCR1 = 6400;
 8000748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(7000);
 8000752:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000756:	f002 ffdf 	bl	8003718 <HAL_Delay>
	TIM2->CCR1 = 3200;
 800075a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000762:	635a      	str	r2, [r3, #52]	; 0x34



	HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f002 ffd7 	bl	8003718 <HAL_Delay>

	if (!rfm95.InitRFM())
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3310      	adds	r3, #16
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fcf8 	bl	8002164 <_ZN10RFM95_LoRa7InitRFMEv>
 8000774:	4603      	mov	r3, r0
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00a      	beq.n	8000796 <_ZN7AppMain7StartupEv+0x72>
	{
		error.setError(Error::COM_ERROR);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	330e      	adds	r3, #14
 8000784:	2105      	movs	r1, #5
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f888 	bl	800189c <_ZN5Error8setErrorENS_11EERROR_CODEE>
		taskHandler.setDriveTaskEnable(false);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f964 	bl	8002a5e <_ZN11TaskHandler18setDriveTaskEnableEb>
	}
	rfm95.receive(0);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3310      	adds	r3, #16
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fb1f 	bl	8001de0 <_ZN10RFM95_LoRa7receiveEi>
	encoder.init();
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3364      	adds	r3, #100	; 0x64
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fffc 	bl	80017a4 <_ZN7Encoder4initEv>

	HAL_TIM_Base_MspInit(&htim16);
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <_ZN7AppMain7StartupEv+0xac>)
 80007ae:	f002 fe7f 	bl	80034b0 <HAL_TIM_Base_MspInit>

	HAL_TIM_Base_Start_IT(&htim16);
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <_ZN7AppMain7StartupEv+0xac>)
 80007b4:	f007 fe0c 	bl	80083d0 <HAL_TIM_Base_Start_IT>


	Main();
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f80b 	bl	80007d4 <_ZN7AppMain4MainEv>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000318 	.word	0x20000318
 80007cc:	200003cc 	.word	0x200003cc
 80007d0:	20000464 	.word	0x20000464

080007d4 <_ZN7AppMain4MainEv>:
	taskHandler.setErrorTaskEnable(true);
	taskHandler.setIoUpdateTaskEnable(true);
}

void AppMain::Main()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	taskHandler.setDriveTaskEnable(false);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f93c 	bl	8002a5e <_ZN11TaskHandler18setDriveTaskEnableEb>
	bool init = true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
	while (1)
	{

		if(init && startupCounter <= 0){
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d012      	beq.n	8000816 <_ZN7AppMain4MainEv+0x42>
 80007f0:	4b47      	ldr	r3, [pc, #284]	; (8000910 <_ZN7AppMain4MainEv+0x13c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dc0e      	bgt.n	8000816 <_ZN7AppMain4MainEv+0x42>
			startupCounter = 1;
 80007f8:	4b45      	ldr	r3, [pc, #276]	; (8000910 <_ZN7AppMain4MainEv+0x13c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
			TIM2->CCR1 = 3400;
 80007fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000802:	f640 5248 	movw	r2, #3400	; 0xd48
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
			taskHandler.setDriveTaskEnable(true);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f926 	bl	8002a5e <_ZN11TaskHandler18setDriveTaskEnableEb>
			init = false;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
		}


		if (driveStatus.isReset())
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	334a      	adds	r3, #74	; 0x4a
 800081a:	4618      	mov	r0, r3
 800081c:	f001 ff50 	bl	80026c0 <_ZN11DriveStatus7isResetEv>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00a      	beq.n	800083c <_ZN7AppMain4MainEv+0x68>
		{
			drive.Reset();
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	337c      	adds	r3, #124	; 0x7c
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fdbe 	bl	80013ac <_ZN5Drive5ResetEv>
			driveStatus.setReset(false);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	334a      	adds	r3, #74	; 0x4a
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f001 ff4e 	bl	80026d8 <_ZN11DriveStatus8setResetEb>
		}

		if (taskHandler.isADCUpdateTask())
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f8cc 	bl	80029dc <_ZN11TaskHandler15isADCUpdateTaskEv>
		{
			//read from ADC DMA register
		}

		if (taskHandler.isComTask())
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4618      	mov	r0, r3
 8000848:	f002 f864 	bl	8002914 <_ZN11TaskHandler9isComTaskEv>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d009      	beq.n	8000866 <_ZN7AppMain4MainEv+0x92>
		{
			rfm95COM->Receive();
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	4798      	blx	r3
		}

		if (taskHandler.isDriveTask())
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f86c 	bl	8002946 <_ZN11TaskHandler11isDriveTaskEv>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d009      	beq.n	8000888 <_ZN7AppMain4MainEv+0xb4>
		{
			encoder.update();
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3364      	adds	r3, #100	; 0x64
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ffcb 	bl	8001814 <_ZN7Encoder6updateEv>
			drive.updateDrive();
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	337c      	adds	r3, #124	; 0x7c
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fd9f 	bl	80013c6 <_ZN5Drive11updateDriveEv>
		}

		if (taskHandler.isErrorTask())
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f874 	bl	8002978 <_ZN11TaskHandler11isErrorTaskEv>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d029      	beq.n	80008ea <_ZN7AppMain4MainEv+0x116>
		{
			if (driveStatus.getError() != Error::NO_ERROR)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	334a      	adds	r3, #74	; 0x4a
 800089a:	4618      	mov	r0, r3
 800089c:	f001 ff79 	bl	8002792 <_ZN11DriveStatus8getErrorEv>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00e      	beq.n	80008ce <_ZN7AppMain4MainEv+0xfa>
			{
				drive.Stop();
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	337c      	adds	r3, #124	; 0x7c
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fe12 	bl	80014de <_ZN5Drive4StopEv>
				taskHandler.setAdcUpdateTaskEnable(false);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f8be 	bl	8002a40 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>
				taskHandler.setDriveTaskEnable(false);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 f8c8 	bl	8002a5e <_ZN11TaskHandler18setDriveTaskEnableEb>
			}

			error.error2LED();
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	330e      	adds	r3, #14
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fff2 	bl	80018bc <_ZN5Error9error2LEDEv>

			if(startupCounter > 0){
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <_ZN7AppMain4MainEv+0x13c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dd04      	ble.n	80008ea <_ZN7AppMain4MainEv+0x116>
				startupCounter--;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <_ZN7AppMain4MainEv+0x13c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <_ZN7AppMain4MainEv+0x13c>)
 80008e8:	6013      	str	r3, [r2, #0]
			}
		}

		if (taskHandler.isIoUpdateTask())
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 f85c 	bl	80029aa <_ZN11TaskHandler14isIoUpdateTaskEv>
		{

		}

		if (taskHandler.isLEDTask())
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f88a 	bl	8002a0e <_ZN11TaskHandler9isLEDTaskEv>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f43f af74 	beq.w	80007ea <_ZN7AppMain4MainEv+0x16>
		{
			this->led.Toggle();
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3390      	adds	r3, #144	; 0x90
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f817 	bl	800193a <_ZN3LED6ToggleEv>
		if(init && startupCounter <= 0){
 800090c:	e76d      	b.n	80007ea <_ZN7AppMain4MainEv+0x16>
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000

08000914 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:

#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	609a      	str	r2, [r3, #8]
}
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	221f      	movs	r2, #31
 8000954:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fc6a 	bl	8002234 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2212      	movs	r2, #18
 800096c:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	78fa      	ldrb	r2, [r7, #3]
 8000972:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	3b10      	subs	r3, #16
 8000978:	2b10      	cmp	r3, #16
 800097a:	f200 80d3 	bhi.w	8000b24 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 800097e:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	080009c9 	.word	0x080009c9
 8000988:	080009e7 	.word	0x080009e7
 800098c:	08000a05 	.word	0x08000a05
 8000990:	08000a23 	.word	0x08000a23
 8000994:	08000a41 	.word	0x08000a41
 8000998:	08000a5f 	.word	0x08000a5f
 800099c:	08000a7b 	.word	0x08000a7b
 80009a0:	08000a99 	.word	0x08000a99
 80009a4:	08000ab7 	.word	0x08000ab7
 80009a8:	08000ad5 	.word	0x08000ad5
 80009ac:	08000af3 	.word	0x08000af3
 80009b0:	08000b25 	.word	0x08000b25
 80009b4:	08000b25 	.word	0x08000b25
 80009b8:	08000b25 	.word	0x08000b25
 80009bc:	08000b25 	.word	0x08000b25
 80009c0:	08000b25 	.word	0x08000b25
 80009c4:	08000b11 	.word	0x08000b11
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fcdc 	bl	8002390 <_ZNK13DriveSettings14getTeachTroqueEv>
 80009d8:	4603      	mov	r3, r0
 80009da:	2204      	movs	r2, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4620      	mov	r0, r4
 80009e0:	f002 f84c 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 80009e4:	e0a2      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fcb2 	bl	800235a <_ZNK13DriveSettings13getTeachSpeedEv>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2204      	movs	r2, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4620      	mov	r0, r4
 80009fe:	f002 f83d 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a02:	e093      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fbf5 	bl	80021fe <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2204      	movs	r2, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f002 f82e 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a20:	e084      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fbcb 	bl	80021c8 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2204      	movs	r2, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f002 f81f 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a3e:	e075      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fc6a 	bl	8002324 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4620      	mov	r0, r4
 8000a58:	f002 f810 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a5c:	e066      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fbef 	bl	800224c <_ZNK13DriveSettings12getInPosDiffEv>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 f801 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fbfc 	bl	8002282 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f001 fff3 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a96:	e049      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fcaa 	bl	80023fc <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f001 ffe4 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ab4:	e03a      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fc80 	bl	80023c6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2204      	movs	r2, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4620      	mov	r0, r4
 8000ace:	f001 ffd5 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000ad2:	e02b      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fbea 	bl	80022b8 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4620      	mov	r0, r4
 8000aec:	f001 ffc6 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000af0:	e01c      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fbf6 	bl	80022ee <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2204      	movs	r2, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f001 ffb7 	bl	8002a7c <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b0e:	e00d      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fb8d 	bl	8002234 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	741a      	strb	r2, [r3, #16]
			break;
 8000b22:	e003      	b.n	8000b2c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	221d      	movs	r2, #29
 8000b28:	735a      	strb	r2, [r3, #13]
			break;
 8000b2a:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	330c      	adds	r3, #12
 8000b30:	2206      	movs	r2, #6
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 fac9 	bl	80010cc <_ZN7BaseCOM4CRC8EPhh>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	330c      	adds	r3, #12
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	bf00      	nop

08000b50 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	221f      	movs	r2, #31
 8000b60:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fb64 	bl	8002234 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2213      	movs	r2, #19
 8000b78:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	78fa      	ldrb	r2, [r7, #3]
 8000b7e:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d86e      	bhi.n	8000c66 <_ZN7BaseCOM9GetStatusEh+0x116>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000bb5 	.word	0x08000bb5
 8000b94:	08000bc9 	.word	0x08000bc9
 8000b98:	08000bdd 	.word	0x08000bdd
 8000b9c:	08000bf1 	.word	0x08000bf1
 8000ba0:	08000c05 	.word	0x08000c05
 8000ba4:	08000c19 	.word	0x08000c19
 8000ba8:	08000c2d 	.word	0x08000c2d
 8000bac:	08000c41 	.word	0x08000c41
 8000bb0:	08000c55 	.word	0x08000c55
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fcf5 	bl	80025a8 <_ZN11DriveStatus7isCloseEv>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	741a      	strb	r2, [r3, #16]
			break;
 8000bc6:	e052      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fd0e 	bl	80025ee <_ZN11DriveStatus6isOpenEv>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	741a      	strb	r2, [r3, #16]
			break;
 8000bda:	e048      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fdb3 	bl	800274c <_ZN11DriveStatus7isTeachEv>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	741a      	strb	r2, [r3, #16]
			break;
 8000bee:	e03e      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fd63 	bl	80026c0 <_ZN11DriveStatus7isResetEv>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	741a      	strb	r2, [r3, #16]
			break;
 8000c02:	e034      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fd36 	bl	800267a <_ZN11DriveStatus8isEnableEv>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	741a      	strb	r2, [r3, #16]
			break;
 8000c16:	e02a      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fd09 	bl	8002634 <_ZN11DriveStatus9isDisableEv>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	741a      	strb	r2, [r3, #16]
			break;
 8000c2a:	e020      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fd68 	bl	8002706 <_ZN11DriveStatus6isStopEv>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	741a      	strb	r2, [r3, #16]
			break;
 8000c3e:	e016      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fda4 	bl	8002792 <_ZN11DriveStatus8getErrorEv>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	741a      	strb	r2, [r3, #16]
			break;
 8000c52:	e00c      	b.n	8000c6e <_ZN7BaseCOM9GetStatusEh+0x11e>
		case STATUS_ADDR:
			data2send[4] = driveStatus->getStatus();
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fda6 	bl	80027aa <_ZNK11DriveStatus9getStatusEv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	741a      	strb	r2, [r3, #16]
		default:
			data2send[0] = 0x1D;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	221d      	movs	r2, #29
 8000c6a:	731a      	strb	r2, [r3, #12]
			break;
 8000c6c:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	330c      	adds	r3, #12
 8000c72:	2206      	movs	r2, #6
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 fa28 	bl	80010cc <_ZN7BaseCOM4CRC8EPhh>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	330c      	adds	r3, #12
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_ZN7BaseCOM11SetSettingsEPh>:
}



void BaseCOM::SetSettings(uint8_t *data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3303      	adds	r3, #3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3b10      	subs	r3, #16
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	f200 80f6 	bhi.w	8000e98 <_ZN7BaseCOM11SetSettingsEPh+0x208>
 8000cac:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000ce1 	.word	0x08000ce1
 8000cb8:	08000d09 	.word	0x08000d09
 8000cbc:	08000d31 	.word	0x08000d31
 8000cc0:	08000d59 	.word	0x08000d59
 8000cc4:	08000e21 	.word	0x08000e21
 8000cc8:	08000d81 	.word	0x08000d81
 8000ccc:	08000da9 	.word	0x08000da9
 8000cd0:	08000e49 	.word	0x08000e49
 8000cd4:	08000e71 	.word	0x08000e71
 8000cd8:	08000dd1 	.word	0x08000dd1
 8000cdc:	08000df9 	.word	0x08000df9
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	01db      	lsls	r3, r3, #7
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3304      	adds	r3, #4
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	89fa      	ldrh	r2, [r7, #14]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fb51 	bl	80023a8 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000d06:	e0c8      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	01db      	lsls	r3, r3, #7
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	3304      	adds	r3, #4
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fb22 	bl	8002372 <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000d2e:	e0b4      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	3305      	adds	r3, #5
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fa60 	bl	8002216 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000d56:	e0a0      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	01db      	lsls	r3, r3, #7
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	3304      	adds	r3, #4
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	89fa      	ldrh	r2, [r7, #14]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fa31 	bl	80021e0 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000d7e:	e08c      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3305      	adds	r3, #5
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	89fa      	ldrh	r2, [r7, #14]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fa5f 	bl	8002264 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8000da6:	e078      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3305      	adds	r3, #5
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	01db      	lsls	r3, r3, #7
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3304      	adds	r3, #4
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fa66 	bl	800229a <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 8000dce:	e064      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3305      	adds	r3, #5
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	89fa      	ldrh	r2, [r7, #14]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fa6d 	bl	80022d0 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8000df6:	e050      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3305      	adds	r3, #5
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	01db      	lsls	r3, r3, #7
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3304      	adds	r3, #4
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	89fa      	ldrh	r2, [r7, #14]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fa74 	bl	8002306 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 8000e1e:	e03c      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3305      	adds	r3, #5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fa7b 	bl	800233c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 8000e46:	e028      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3305      	adds	r3, #5
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3304      	adds	r3, #4
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	89fa      	ldrh	r2, [r7, #14]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fad3 	bl	8002414 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 8000e6e:	e014      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3305      	adds	r3, #5
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	89fa      	ldrh	r2, [r7, #14]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 faa4 	bl	80023de <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 8000e96:	e000      	b.n	8000e9a <_ZN7BaseCOM11SetSettingsEPh+0x20a>
		default:
			break;
 8000e98:	bf00      	nop
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop

08000ea4 <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d879      	bhi.n	8000fae <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000efb 	.word	0x08000efb
 8000ec8:	08000f19 	.word	0x08000f19
 8000ecc:	08000f37 	.word	0x08000f37
 8000ed0:	08000f55 	.word	0x08000f55
 8000ed4:	08000f73 	.word	0x08000f73
 8000ed8:	08000f91 	.word	0x08000f91
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	f001 fb64 	bl	80025c0 <_ZN11DriveStatus8setCloseEb>
			break;
 8000ef8:	e05a      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3304      	adds	r3, #4
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f001 fb78 	bl	8002606 <_ZN11DriveStatus7setOpenEb>
			break;
 8000f16:	e04b      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4610      	mov	r0, r2
 8000f30:	f001 fc18 	bl	8002764 <_ZN11DriveStatus8setTeachEb>
			break;
 8000f34:	e03c      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	bf0c      	ite	eq
 8000f44:	2301      	moveq	r3, #1
 8000f46:	2300      	movne	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f001 fbc3 	bl	80026d8 <_ZN11DriveStatus8setResetEb>
			break;
 8000f52:	e02d      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	bf0c      	ite	eq
 8000f62:	2301      	moveq	r3, #1
 8000f64:	2300      	movne	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f001 fb91 	bl	8002692 <_ZN11DriveStatus9setEnableEb>
			break;
 8000f70:	e01e      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	4610      	mov	r0, r2
 8000f8a:	f001 fb5f 	bl	800264c <_ZN11DriveStatus10setDisableEb>
			break;
 8000f8e:	e00f      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3304      	adds	r3, #4
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f001 fbb9 	bl	800271e <_ZN11DriveStatus7setStopEb>
			break;
 8000fac:	e000      	b.n	8000fb0 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8000fae:	bf00      	nop
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d879      	bhi.n	80010c2 <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	08000ff1 	.word	0x08000ff1
 8000fd8:	0800100f 	.word	0x0800100f
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	0800104b 	.word	0x0800104b
 8000fe4:	08001069 	.word	0x08001069
 8000fe8:	08001087 	.word	0x08001087
 8000fec:	080010a5 	.word	0x080010a5
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f001 fa48 	bl	800249c <_ZN12DriveCommand8setCloseEb>
			break;
 800100c:	e05a      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3304      	adds	r3, #4
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f001 fa54 	bl	80024d2 <_ZN12DriveCommand7setOpenEb>
			break;
 800102a:	e04b      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3304      	adds	r3, #4
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4619      	mov	r1, r3
 8001042:	4610      	mov	r0, r2
 8001044:	f001 fa9c 	bl	8002580 <_ZN12DriveCommand8setTeachEb>
			break;
 8001048:	e03c      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	bf0c      	ite	eq
 8001058:	2301      	moveq	r3, #1
 800105a:	2300      	movne	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f001 fa63 	bl	800252c <_ZN12DriveCommand8setResetEb>
			break;
 8001066:	e02d      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3304      	adds	r3, #4
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f001 fa45 	bl	800250e <_ZN12DriveCommand9setEnableEb>
			break;
 8001084:	e01e      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3304      	adds	r3, #4
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	4610      	mov	r0, r2
 800109e:	f001 fa27 	bl	80024f0 <_ZN12DriveCommand10setDisableEb>
			break;
 80010a2:	e00f      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f001 fa51 	bl	8002562 <_ZN12DriveCommand7setStopEb>
			break;
 80010c0:	e000      	b.n	80010c4 <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 80010c2:	bf00      	nop
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d222      	bcs.n	8001130 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4413      	add	r3, r2
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	7ffb      	ldrb	r3, [r7, #31]
 80010f4:	4053      	eors	r3, r2
 80010f6:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	d812      	bhi.n	8001128 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001102:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da07      	bge.n	800111a <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	b25b      	sxtb	r3, r3
 8001110:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001114:	b25b      	sxtb	r3, r3
 8001116:	77fb      	strb	r3, [r7, #31]
 8001118:	e002      	b.n	8001120 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 800111a:	7ffb      	ldrb	r3, [r7, #31]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e7e9      	b.n	80010fc <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	3301      	adds	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e7d8      	b.n	80010e2 <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001130:	7ffb      	ldrb	r3, [r7, #31]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	4613      	mov	r3, r2
 800114a:	71fb      	strb	r3, [r7, #7]
	if(data == NULL){
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <_ZN8RFM95Com9TransmittEPhh+0x18>
		return false;
 8001152:	2300      	movs	r3, #0
 8001154:	e015      	b.n	8001182 <_ZN8RFM95Com9TransmittEPhh+0x44>
	}

	rfm95->beginPacket();
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fce4 	bl	8001b2a <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(data, 7);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6998      	ldr	r0, [r3, #24]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3304      	adds	r3, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2207      	movs	r2, #7
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	4798      	blx	r3
	rfm95->endPacket();
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fcf6 	bl	8001b6c <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	71fb      	strb	r3, [r7, #7]

	uint8_t* txDataTemp;

	uint8_t rxData[7];

	uint8_t packetSize = rfm95->parsePacket();
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fd05 	bl	8001bb0 <_ZN10RFM95_LoRa11parsePacketEi>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (packetSize != 0)
 80011ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80d5 	beq.w	8001360 <_ZN8RFM95Com7ReceiveEPhh+0x1d4>
	{
		uint8_t counter = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4610      	mov	r0, r2
 80011cc:	4798      	blx	r3
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d01c      	beq.n	8001218 <_ZN8RFM95Com7ReceiveEPhh+0x8c>
		{
			rxData[counter] = rfm95->read();
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	330c      	adds	r3, #12
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4798      	blx	r3
 80011f0:	4602      	mov	r2, r0
 80011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	3328      	adds	r3, #40	; 0x28
 80011fa:	443b      	add	r3, r7
 80011fc:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (counter > MAX_PACKET_2_RECEIVE)
 8001200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001204:	2b07      	cmp	r3, #7
 8001206:	d901      	bls.n	800120c <_ZN8RFM95Com7ReceiveEPhh+0x80>
			{
				return false;
 8001208:	2300      	movs	r3, #0
 800120a:	e0aa      	b.n	8001362 <_ZN8RFM95Com7ReceiveEPhh+0x1d6>
			}
			counter++;
 800120c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001210:	3301      	adds	r3, #1
 8001212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (rfm95->available())
 8001216:	e7d1      	b.n	80011bc <_ZN8RFM95Com7ReceiveEPhh+0x30>
		}

		//check CRC
		if (CRC8(rxData, 6) != rxData[6])
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3304      	adds	r3, #4
 800121c:	f107 0118 	add.w	r1, r7, #24
 8001220:	2206      	movs	r2, #6
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff52 	bl	80010cc <_ZN7BaseCOM4CRC8EPhh>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	7fbb      	ldrb	r3, [r7, #30]
 800122e:	429a      	cmp	r2, r3
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZN8RFM95Com7ReceiveEPhh+0xb4>
		{
			//error crc error //ToDO
			return false;
 800123c:	2300      	movs	r3, #0
 800123e:	e090      	b.n	8001362 <_ZN8RFM95Com7ReceiveEPhh+0x1d6>
		}

		uint8_t txData[] =
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f8c3 2003 	str.w	r2, [r3, #3]
 800124c:	231f      	movs	r3, #31
 800124e:	743b      	strb	r3, [r7, #16]
 8001250:	2301      	movs	r3, #1
 8001252:	753b      	strb	r3, [r7, #20]
 8001254:	2301      	movs	r3, #1
 8001256:	757b      	strb	r3, [r7, #21]
		{
				0x1F,
				driveSettings->getDeviceAddress(),
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 ffe9 	bl	8002234 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001262:	4603      	mov	r3, r0
				rxData[2],
				rxData[3],
				0x01,
				0x01,
				0x00
		};
 8001264:	747b      	strb	r3, [r7, #17]
				rxData[2],
 8001266:	7ebb      	ldrb	r3, [r7, #26]
		};
 8001268:	74bb      	strb	r3, [r7, #18]
				rxData[3],
 800126a:	7efb      	ldrb	r3, [r7, #27]
		};
 800126c:	74fb      	strb	r3, [r7, #19]
		txData[6] = CRC8(txData, 6);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3304      	adds	r3, #4
 8001272:	f107 0110 	add.w	r1, r7, #16
 8001276:	2206      	movs	r2, #6
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff27 	bl	80010cc <_ZN7BaseCOM4CRC8EPhh>
 800127e:	4603      	mov	r3, r0
 8001280:	75bb      	strb	r3, [r7, #22]

		switch (rxData[2])
 8001282:	7ebb      	ldrb	r3, [r7, #26]
 8001284:	3b01      	subs	r3, #1
 8001286:	2b12      	cmp	r3, #18
 8001288:	d85e      	bhi.n	8001348 <_ZN8RFM95Com7ReceiveEPhh+0x1bc>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <_ZN8RFM95Com7ReceiveEPhh+0x104>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012dd 	.word	0x080012dd
 8001294:	080012f5 	.word	0x080012f5
 8001298:	0800130d 	.word	0x0800130d
 800129c:	08001349 	.word	0x08001349
 80012a0:	08001349 	.word	0x08001349
 80012a4:	08001349 	.word	0x08001349
 80012a8:	08001349 	.word	0x08001349
 80012ac:	08001349 	.word	0x08001349
 80012b0:	08001349 	.word	0x08001349
 80012b4:	08001349 	.word	0x08001349
 80012b8:	08001349 	.word	0x08001349
 80012bc:	08001349 	.word	0x08001349
 80012c0:	08001349 	.word	0x08001349
 80012c4:	08001349 	.word	0x08001349
 80012c8:	08001349 	.word	0x08001349
 80012cc:	08001349 	.word	0x08001349
 80012d0:	08001325 	.word	0x08001325
 80012d4:	08001349 	.word	0x08001349
 80012d8:	08001337 	.word	0x08001337
		{
			case SEND_SETTINGS:
				this->SetSettings(rxData);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3304      	adds	r3, #4
 80012e0:	f107 0218 	add.w	r2, r7, #24
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fcd2 	bl	8000c90 <_ZN7BaseCOM11SetSettingsEPh>
				txDataTemp = txData;
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80012f2:	e02e      	b.n	8001352 <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case SEND_COMMAND:
				this->SetCommand(rxData);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3304      	adds	r3, #4
 80012f8:	f107 0218 	add.w	r2, r7, #24
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe5a 	bl	8000fb8 <_ZN7BaseCOM10SetCommandEPh>
				txDataTemp = txData;
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800130a:	e022      	b.n	8001352 <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case SEND_STATUS:
				this->SetStatus(rxData);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3304      	adds	r3, #4
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fdc4 	bl	8000ea4 <_ZN7BaseCOM9SetStatusEPh>
				txDataTemp = txData;
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001322:	e016      	b.n	8001352 <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case GET_SETTINGS:
				txDataTemp = this->GetSettings(rxData[3]);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3304      	adds	r3, #4
 8001328:	7efa      	ldrb	r2, [r7, #27]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb09 	bl	8000944 <_ZN7BaseCOM11GetSettingsEh>
 8001332:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 8001334:	e00d      	b.n	8001352 <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			case GET_STATUS:
				txDataTemp = this->GetStatus(rxData[3]);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3304      	adds	r3, #4
 800133a:	7efa      	ldrb	r2, [r7, #27]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fc06 	bl	8000b50 <_ZN7BaseCOM9GetStatusEh>
 8001344:	6278      	str	r0, [r7, #36]	; 0x24
				break;
 8001346:	e004      	b.n	8001352 <_ZN8RFM95Com7ReceiveEPhh+0x1c6>
			default:
				//not sported command
				txData[4] = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	753b      	strb	r3, [r7, #20]
				txData[5] = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	757b      	strb	r3, [r7, #21]
				break;
 8001350:	bf00      	nop
		}


		Transmitt(txDataTemp , 7);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2207      	movs	r2, #7
 800135a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	4798      	blx	r3
	}
	return true;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop

0800136c <_ZN5DriveC1EP13DriveSettingsP11DriveStatusP12DriveCommandP7Encoder>:
 */

#include "Drive.h"
#include "../IO/IO.h"

Drive::Drive(DriveSettings *driveSettings, DriveStatus *driveStatus,
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand, Encoder *encoder)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	745a      	strb	r2, [r3, #17]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	74da      	strb	r2, [r3, #19]
{
	this->driveSettings = driveSettings;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	609a      	str	r2, [r3, #8]
	this->encoder = encoder;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	60da      	str	r2, [r3, #12]
}
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZN5Drive5ResetEv>:

void Drive::Reset()
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	isDriveStoped = false;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	74da      	strb	r2, [r3, #19]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_ZN5Drive11updateDriveEv>:

void Drive::updateDrive()
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	switch (driveMode)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7c1b      	ldrb	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <_ZN5Drive11updateDriveEv+0x1c>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d106      	bne.n	80013e8 <_ZN5Drive11updateDriveEv+0x22>
	{
		case Drive::OP_MODE:
			OpMode();
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f809 	bl	80013f2 <_ZN5Drive6OpModeEv>
			break;
 80013e0:	e003      	b.n	80013ea <_ZN5Drive11updateDriveEv+0x24>
		case Drive::TEACH_MODE:
			TeachMode();
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f88a 	bl	80014fc <_ZN5Drive9TeachModeEv>
		default:
			break;
 80013e8:	bf00      	nop
	}
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN5Drive6OpModeEv>:

void Drive::OpMode()
{
 80013f2:	b590      	push	{r4, r7, lr}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]

	if (isDriveStoped)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7cdb      	ldrb	r3, [r3, #19]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <_ZN5Drive6OpModeEv+0x18>
	{
		Stop();
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f86b 	bl	80014de <_ZN5Drive4StopEv>
		return;
 8001408:	e066      	b.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
	}

	int32_t encoderValue = encoder->GetValue();
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f9f3 	bl	80017fa <_ZN7Encoder8GetValueEv>
 8001414:	6178      	str	r0, [r7, #20]
	uint16_t posOut = driveSettings->getOpeningDistance();
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 ff31 	bl	8002282 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001420:	4603      	mov	r3, r0
 8001422:	827b      	strh	r3, [r7, #18]
	uint16_t posDiff = driveSettings->getInPosDiff();
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 ff0f 	bl	800224c <_ZNK13DriveSettings12getInPosDiffEv>
 800142e:	4603      	mov	r3, r0
 8001430:	823b      	strh	r3, [r7, #16]

	if (driveCommand->isStop())
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f887 	bl	800254a <_ZN12DriveCommand6isStopEv>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <_ZN5Drive6OpModeEv+0x58>
	{
		isDriveStoped = true;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	74da      	strb	r2, [r3, #19]
 8001448:	e046      	b.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
	}
	else if (driveCommand->isClose())
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f001 f818 	bl	8002484 <_ZN12DriveCommand7isCloseEv>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d039      	beq.n	80014ce <_ZN5Drive6OpModeEv+0xdc>
	{
		int32_t posAsMM = encoderValue * GEAR_RATIO;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	60fb      	str	r3, [r7, #12]
		if (posAsMM < posDiff || posAsMM > -posDiff)
 800145e:	8a3b      	ldrh	r3, [r7, #16]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	db38      	blt.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
 8001466:	8a3b      	ldrh	r3, [r7, #16]
 8001468:	425b      	negs	r3, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	dc33      	bgt.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
		{
			//in position
		}
		else if (posAsMM > posDiff)
 8001470:	8a3b      	ldrh	r3, [r7, #16]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	dd12      	ble.n	800149e <_ZN5Drive6OpModeEv+0xac>
		{
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 febe 	bl	80021fe <_ZNK13DriveSettings17getClampingTorqueEv>
 8001482:	4603      	mov	r3, r0
 8001484:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::IN, driveSettings->getClampingTorque(),
 800148a:	4618      	mov	r0, r3
 800148c:	f000 feb7 	bl	80021fe <_ZNK13DriveSettings17getClampingTorqueEv>
 8001490:	4603      	mov	r3, r0
 8001492:	4622      	mov	r2, r4
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f93a 	bl	8001710 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 800149c:	e01c      	b.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
		}
		else if (posAsMM < -posDiff)
 800149e:	8a3b      	ldrh	r3, [r7, #16]
 80014a0:	425b      	negs	r3, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	da17      	bge.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
		{
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fea6 	bl	80021fe <_ZNK13DriveSettings17getClampingTorqueEv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461c      	mov	r4, r3
					driveSettings->getClampingTorque());
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
			MoveDrive(DIRECTION::OUT, driveSettings->getClampingTorque(),
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fe9f 	bl	80021fe <_ZNK13DriveSettings17getClampingTorqueEv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4622      	mov	r2, r4
 80014c4:	2101      	movs	r1, #1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f922 	bl	8001710 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
 80014cc:	e004      	b.n	80014d8 <_ZN5Drive6OpModeEv+0xe6>
		}

	}
	else if (driveCommand->isOpen())
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fff1 	bl	80024ba <_ZN12DriveCommand6isOpenEv>
	{

	}

}
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <_ZN5Drive4StopEv>:

void Drive::Stop()
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = 3200; //3200-6400
 80014e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ea:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZN5Drive9TeachModeEv>:

void Drive::TeachMode()
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0;
	static bool InOut = 0;
	currentState = nextState;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7c9a      	ldrb	r2, [r3, #18]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	745a      	strb	r2, [r3, #17]

	switch (currentState)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7c5b      	ldrb	r3, [r3, #17]
 8001510:	2b07      	cmp	r3, #7
 8001512:	f200 80ec 	bhi.w	80016ee <_ZN5Drive9TeachModeEv+0x1f2>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <_ZN5Drive9TeachModeEv+0x20>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800153d 	.word	0x0800153d
 8001520:	0800155f 	.word	0x0800155f
 8001524:	080016b1 	.word	0x080016b1
 8001528:	0800168b 	.word	0x0800168b
 800152c:	080016d7 	.word	0x080016d7
 8001530:	08001581 	.word	0x08001581
 8001534:	08001605 	.word	0x08001605
 8001538:	0800166b 	.word	0x0800166b
	{
		case TEACH_MODE_ENTER:
			if (IS_EXT_SWITCH == GPIO_PIN_RESET)
 800153c:	2120      	movs	r1, #32
 800153e:	4871      	ldr	r0, [pc, #452]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 8001540:	f003 fb48 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf0c      	ite	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	2300      	movne	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80ce 	beq.w	80016f2 <_ZN5Drive9TeachModeEv+0x1f6>
			{
				nextState = TEACH_RDY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	749a      	strb	r2, [r3, #18]
			}
			break;
 800155c:	e0c9      	b.n	80016f2 <_ZN5Drive9TeachModeEv+0x1f6>
		case TEACH_RDY:
			if (IS_EXT_SWITCH)
 800155e:	2120      	movs	r1, #32
 8001560:	4868      	ldr	r0, [pc, #416]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 8001562:	f003 fb37 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf14      	ite	ne
 800156c:	2301      	movne	r3, #1
 800156e:	2300      	moveq	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80bf 	beq.w	80016f6 <_ZN5Drive9TeachModeEv+0x1fa>
			{
				nextState = CHECK_CLK;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2205      	movs	r2, #5
 800157c:	749a      	strb	r2, [r3, #18]
			}
			break;
 800157e:	e0ba      	b.n	80016f6 <_ZN5Drive9TeachModeEv+0x1fa>
		case CHECK_CLK:
			if (counter > 2 && IS_EXT_SWITCH)
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d908      	bls.n	800159a <_ZN5Drive9TeachModeEv+0x9e>
 8001588:	2120      	movs	r1, #32
 800158a:	485e      	ldr	r0, [pc, #376]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 800158c:	f003 fb22 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <_ZN5Drive9TeachModeEv+0x9e>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <_ZN5Drive9TeachModeEv+0xa0>
 800159a:	2300      	movs	r3, #0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d011      	beq.n	80015c4 <_ZN5Drive9TeachModeEv+0xc8>
			{
				if (InOut)
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <_ZN5Drive9TeachModeEv+0x210>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <_ZN5Drive9TeachModeEv+0xb4>
				{
					nextState = DRIVE_IN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	749a      	strb	r2, [r3, #18]
 80015ae:	e002      	b.n	80015b6 <_ZN5Drive9TeachModeEv+0xba>
				}
				else
				{
					nextState = DRIVE_OUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	749a      	strb	r2, [r3, #18]
				}
				InOut = !InOut;
 80015b6:	4b55      	ldr	r3, [pc, #340]	; (800170c <_ZN5Drive9TeachModeEv+0x210>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <_ZN5Drive9TeachModeEv+0x210>)
 80015c2:	701a      	strb	r2, [r3, #0]
			}

			if (!IS_EXT_SWITCH)
 80015c4:	2120      	movs	r1, #32
 80015c6:	484f      	ldr	r0, [pc, #316]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 80015c8:	f003 fb04 	bl	8004bd4 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <_ZN5Drive9TeachModeEv+0xe6>
			{
				nextState = CLK_1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2206      	movs	r2, #6
 80015e0:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7c9a      	ldrb	r2, [r3, #18]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7c5b      	ldrb	r3, [r3, #17]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d003      	beq.n	80015f6 <_ZN5Drive9TeachModeEv+0xfa>
			{
				counter = 0;
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 80015f4:	e082      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b42      	ldr	r3, [pc, #264]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 8001600:	701a      	strb	r2, [r3, #0]
			break;
 8001602:	e07b      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
		case CLK_1:
			if (counter > 2 && !IS_EXT_SWITCH)
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d908      	bls.n	800161e <_ZN5Drive9TeachModeEv+0x122>
 800160c:	2120      	movs	r1, #32
 800160e:	483d      	ldr	r0, [pc, #244]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 8001610:	f003 fae0 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <_ZN5Drive9TeachModeEv+0x122>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <_ZN5Drive9TeachModeEv+0x124>
 800161e:	2300      	movs	r3, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <_ZN5Drive9TeachModeEv+0x12e>
			{
				nextState = TEACH_RDY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	749a      	strb	r2, [r3, #18]
			}

			if (IS_EXT_SWITCH)
 800162a:	2120      	movs	r1, #32
 800162c:	4835      	ldr	r0, [pc, #212]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 800162e:	f003 fad1 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <_ZN5Drive9TeachModeEv+0x14c>
			{
				nextState = CLK_2;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2207      	movs	r2, #7
 8001646:	749a      	strb	r2, [r3, #18]
			}

			if (nextState != currentState)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7c9a      	ldrb	r2, [r3, #18]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7c5b      	ldrb	r3, [r3, #17]
 8001650:	429a      	cmp	r2, r3
 8001652:	d003      	beq.n	800165c <_ZN5Drive9TeachModeEv+0x160>
			{
				counter = 0;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
			else
			{
				counter++;
			}

			break;
 800165a:	e04f      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
				counter++;
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <_ZN5Drive9TeachModeEv+0x20c>)
 8001666:	701a      	strb	r2, [r3, #0]
			break;
 8001668:	e048      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
		case CLK_2:
			if (IS_EXT_SWITCH)
 800166a:	2120      	movs	r1, #32
 800166c:	4825      	ldr	r0, [pc, #148]	; (8001704 <_ZN5Drive9TeachModeEv+0x208>)
 800166e:	f003 fab1 	bl	8004bd4 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d03b      	beq.n	80016fa <_ZN5Drive9TeachModeEv+0x1fe>
			{
				nextState = TEACH_END;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	749a      	strb	r2, [r3, #18]
			}

			break;
 8001688:	e037      	b.n	80016fa <_ZN5Drive9TeachModeEv+0x1fe>
		case DRIVE_IN:
			//move drive in
			MoveDrive(IN, driveSettings->getTeachTroque(),
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fe7e 	bl	8002390 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001694:	4603      	mov	r3, r0
 8001696:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
			MoveDrive(IN, driveSettings->getTeachTroque(),
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fe5c 	bl	800235a <_ZNK13DriveSettings13getTeachSpeedEv>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4622      	mov	r2, r4
 80016a6:	2100      	movs	r1, #0
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f831 	bl	8001710 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 80016ae:	e025      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
		case DRIVE_OUT:
			//move drive out
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fe6b 	bl	8002390 <_ZNK13DriveSettings14getTeachTroqueEv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461c      	mov	r4, r3
					driveSettings->getTeachSpeed());
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
			MoveDrive(OUT, driveSettings->getTeachTroque(),
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fe49 	bl	800235a <_ZNK13DriveSettings13getTeachSpeedEv>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4622      	mov	r2, r4
 80016cc:	2101      	movs	r1, #1
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f81e 	bl	8001710 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>
			break;
 80016d4:	e012      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
		case TEACH_END:
			//reset TTL counter
			encoder->ResetEncoder();
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f880 	bl	80017e0 <_ZN7Encoder12ResetEncoderEv>
			driveCommand->setTeach(false);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 ff4a 	bl	8002580 <_ZN12DriveCommand8setTeachEb>
			break;
 80016ec:	e006      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
		default:
			break;
 80016ee:	bf00      	nop
 80016f0:	e004      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016f2:	bf00      	nop
 80016f4:	e002      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <_ZN5Drive9TeachModeEv+0x200>
			break;
 80016fa:	bf00      	nop
	}

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	48000400 	.word	0x48000400
 8001708:	20000218 	.word	0x20000218
 800170c:	20000219 	.word	0x20000219

08001710 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt>:
{
	this->driveMode = driveMode;
}

void Drive::MoveDrive(DIRECTION direction, uint16_t torque, uint16_t speed)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	72fb      	strb	r3, [r7, #11]
 8001722:	460b      	mov	r3, r1
 8001724:	813b      	strh	r3, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	80fb      	strh	r3, [r7, #6]

	switch (direction)
 800172a:	7afb      	ldrb	r3, [r7, #11]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x26>
 8001730:	2b01      	cmp	r3, #1
 8001732:	d00b      	beq.n	800174c <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x3c>
 8001734:	e015      	b.n	8001762 <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x52>
	{
		case DIRECTION::IN:
			TIM2->CCR2 = 3200;	//direction
 8001736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800173e:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000;	//speed
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001744:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800174a:	e00e      	b.n	800176a <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		case DIRECTION::OUT:
			TIM2->CCR2 = 6400;	//direction
 800174c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001750:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001754:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 4000; //speed
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

			break;
 8001760:	e003      	b.n	800176a <_ZN5Drive9MoveDriveENS_9DIRECTIONEtt+0x5a>
		default:
			Stop();
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff febb 	bl	80014de <_ZN5Drive4StopEv>
			break;
 8001768:	bf00      	nop
	}

}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZN7EncoderC1EP11DriveStatus>:
 *      Author: marce
 */

#include "Encoder.h"

Encoder::Encoder(DriveStatus *driveStatus)
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
{
	this->driveStatus = driveStatus;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	601a      	str	r2, [r3, #0]
}
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN7Encoder4initEv>:

bool Encoder::init()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_MspInit(&htim1);
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <_ZN7Encoder4initEv+0x38>)
 80017ae:	f001 fe15 	bl	80033dc <HAL_TIM_Encoder_MspInit>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2 | TIM_CHANNEL_1);
 80017b2:	2104      	movs	r1, #4
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <_ZN7Encoder4initEv+0x38>)
 80017b6:	f007 f83b 	bl	8008830 <HAL_TIM_Encoder_Start>

	cValue = 0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
	lValue = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
	deltaValue = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
	encoderValue = 0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
	return true;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000380 	.word	0x20000380

080017e0 <_ZN7Encoder12ResetEncoderEv>:

void Encoder::ResetEncoder()
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_ZN7Encoder8GetValueEv>:

int32_t Encoder::GetValue()
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return this->encoderValue;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_ZN7Encoder6updateEv>:

bool Encoder::update()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	cValue = TIM1->CNT;				//Read out value from timer register
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <_ZN7Encoder6updateEv+0x84>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	605a      	str	r2, [r3, #4]
	deltaValue = cValue - lValue;//Calculate the difference to the previous value
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60da      	str	r2, [r3, #12]

	//forward overflow
	if (deltaValue < -32768)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800183c:	da06      	bge.n	800184c <_ZN7Encoder6updateEv+0x38>
	{				//Check whether a timer overflow has occurred forwards
		deltaValue = (deltaValue + 65535);	//Overflow correction
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001846:	33ff      	adds	r3, #255	; 0xff
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	60d3      	str	r3, [r2, #12]
	}

	//backwards overflow
	if (deltaValue > 32768)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001854:	dd06      	ble.n	8001864 <_ZN7Encoder6updateEv+0x50>
	{				//Check whether a timer overflow has occurred backwards
		deltaValue = (deltaValue - 65535);	//overflow correction
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800185e:	3bff      	subs	r3, #255	; 0xff
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	60d3      	str	r3, [r2, #12]
	}

	encoderValue += deltaValue;	//Increase the encoder value by the difference
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	441a      	add	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
	lValue = cValue;						//previous value = current value
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]

	driveStatus->setPosition(encoderValue * GEAR_RATIO);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 ffb7 	bl	80027fa <_ZN11DriveStatus11setPositionEt>

	return true;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012c00 	.word	0x40012c00

0800189c <_ZN5Error8setErrorENS_11EERROR_CODEE>:
#include "Error.h"
#include "main.h"
#include "gpio.h"


void Error::setError(EERROR_CODE error) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
	this->errorCode = error;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_ZN5Error9error2LEDEv>:
void Error::resetError() {
	this->errorCode = EERROR_CODE::NO_ERROR;
}


void Error::error2LED() {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	//function should be call every 100ms
	static uint8_t errorCounter = 0;
	static bool risingEdge = 0;

	if(errorCode != NO_ERROR ){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <_ZN5Error9error2LEDEv+0x32>

		if(risingEdge){
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <_ZN5Error9error2LEDEv+0x40>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00c      	beq.n	80018ee <_ZN5Error9error2LEDEv+0x32>
			}else{
				//reset LED Error
			}

			//increment error counter by 1
			errorCounter++;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <_ZN5Error9error2LEDEv+0x44>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_ZN5Error9error2LEDEv+0x44>)
 80018de:	701a      	strb	r2, [r3, #0]


			if(errorCounter > 7){
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_ZN5Error9error2LEDEv+0x44>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d902      	bls.n	80018ee <_ZN5Error9error2LEDEv+0x32>
				errorCounter = 0;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <_ZN5Error9error2LEDEv+0x44>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
			}

		}
	}
	risingEdge != risingEdge;
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000021b 	.word	0x2000021b
 8001900:	2000021a 	.word	0x2000021a

08001904 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	460b      	mov	r3, r1
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	797a      	ldrb	r2, [r7, #5]
 800192a:	719a      	strb	r2, [r3, #6]
}
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_ZN3LED6ToggleEv>:
}

/*
 * LED Toggle method
 */
void LED::Toggle() {
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f003 f971 	bl	8004c34 <HAL_GPIO_TogglePin>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
{

}
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	0800e26c 	.word	0x0800e26c

08001994 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2110      	movs	r1, #16
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f003 f92e 	bl	8004c04 <HAL_GPIO_WritePin>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2110      	movs	r1, #16
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f003 f920 	bl	8004c04 <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2108      	movs	r1, #8
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f003 f912 	bl	8004c04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 fe99 	bl	8003718 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2108      	movs	r1, #8
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f003 f909 	bl	8004c04 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80019f2:	2005      	movs	r0, #5
 80019f4:	f001 fe90 	bl	8003718 <HAL_Delay>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
 8001a1a:	78bb      	ldrb	r3, [r7, #2]
 8001a1c:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffb8 	bl	8001994 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001a24:	f107 010c 	add.w	r1, r7, #12
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	480b      	ldr	r0, [pc, #44]	; (8001a5c <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001a2e:	f005 ff92 	bl	8007956 <HAL_SPI_Transmit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffb4 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e003      	b.n	8001a54 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffaf 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000318 	.word	0x20000318

08001a60 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff8d 	bl	8001994 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001a7a:	f107 020c 	add.w	r2, r7, #12
 8001a7e:	f107 0108 	add.w	r1, r7, #8
 8001a82:	2364      	movs	r3, #100	; 0x64
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2302      	movs	r3, #2
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001a8a:	f006 f8d2 	bl	8007c32 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff8e 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001a94:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000318 	.word	0x20000318

08001aa4 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff8c 	bl	80019cc <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001ab4:	2142      	movs	r1, #66	; 0x42
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffd2 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d001      	beq.n	8001aca <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e02b      	b.n	8001b22 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f9b4 	bl	8001e38 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f9fa 	bl	8001ecc <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	210e      	movs	r1, #14
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff8f 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff8a 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001aec:	210c      	movs	r1, #12
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb6 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f043 0303 	orr.w	r3, r3, #3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	210c      	movs	r1, #12
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff7d 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001b06:	2204      	movs	r2, #4
 8001b08:	2126      	movs	r1, #38	; 0x26
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff78 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2114      	movs	r1, #20
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f99c 	bl	8001e52 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f97f 	bl	8001e1e <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f972 	bl	8001e1e <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 faf6 	bl	8002132 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8001b46:	e002      	b.n	8001b4e <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fada 	bl	8002102 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	210d      	movs	r1, #13
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff54 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2122      	movs	r1, #34	; 0x22
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff4f 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001b74:	2283      	movs	r2, #131	; 0x83
 8001b76:	2101      	movs	r1, #1
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff41 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8001b7e:	2112      	movs	r1, #18
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff6d 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d000      	beq.n	8001b9c <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8001b9a:	e7f0      	b.n	8001b7e <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	2112      	movs	r1, #18
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff2d 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001bbe:	2112      	movs	r1, #18
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff4d 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dd0a      	ble.n	8001be6 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 faae 	bl	8002132 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2122      	movs	r1, #34	; 0x22
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff0e 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001be4:	e002      	b.n	8001bec <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa8b 	bl	8002102 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2112      	movs	r1, #18
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff03 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d026      	beq.n	8001c52 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c1c:	2122      	movs	r1, #34	; 0x22
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff1e 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e005      	b.n	8001c36 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001c2a:	2113      	movs	r1, #19
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff17 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c32:	4603      	mov	r3, r0
 8001c34:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001c36:	2110      	movs	r1, #16
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff11 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	210d      	movs	r1, #13
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fedb 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8e7 	bl	8001e1e <_ZN10RFM95_LoRa4idleEv>
 8001c50:	e015      	b.n	8001c7e <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001c52:	2101      	movs	r1, #1
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff03 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b86      	cmp	r3, #134	; 0x86
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	210d      	movs	r1, #13
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fec6 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001c74:	2286      	movs	r2, #134	; 0x86
 8001c76:	2101      	movs	r1, #1
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fec1 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1cf9      	adds	r1, r7, #3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001cba:	2122      	movs	r1, #34	; 0x22
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff fecf 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2bff      	cmp	r3, #255	; 0xff
 8001cce:	d903      	bls.n	8001cd8 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001cd6:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d20c      	bcs.n	8001cfe <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fe85 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e7ee      	b.n	8001cdc <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2122      	movs	r1, #34	; 0x22
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff fe76 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001d26:	2113      	movs	r1, #19
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe99 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	1ad3      	subs	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf0c      	ite	eq
 8001d5a:	2301      	moveq	r3, #1
 8001d5c:	2300      	movne	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	e009      	b.n	8001d7e <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fe72 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3308      	adds	r3, #8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e013      	b.n	8001dd8 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001db0:	210d      	movs	r1, #13
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fe54 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fe4e 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	210d      	movs	r1, #13
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fe15 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN10RFM95_LoRa7receiveEi>:


void RFM95_LoRa::receive(int size){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  if (size > 0) {
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	dd0a      	ble.n	8001e06 <_ZN10RFM95_LoRa7receiveEi+0x26>
    implicitHeaderMode();
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f99e 	bl	8002132 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2122      	movs	r1, #34	; 0x22
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fdfe 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001e04:	e002      	b.n	8001e0c <_ZN10RFM95_LoRa7receiveEi+0x2c>
  } else {
    explicitHeaderMode();
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f97b 	bl	8002102 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001e0c:	2285      	movs	r2, #133	; 0x85
 8001e0e:	2101      	movs	r1, #1
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fdf5 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_ZN10RFM95_LoRa4idleEv>:

void RFM95_LoRa::idle(){
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001e26:	2281      	movs	r2, #129	; 0x81
 8001e28:	2101      	movs	r1, #1
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fde8 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN10RFM95_LoRa5sleepEv>:
void RFM95_LoRa::rxMode(){
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}


void RFM95_LoRa::sleep(){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	2101      	movs	r1, #1
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fddb 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d116      	bne.n	8001e92 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da02      	bge.n	8001e70 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	e004      	b.n	8001e7a <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b0e      	cmp	r3, #14
 8001e74:	dd01      	ble.n	8001e7a <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001e76:	230e      	movs	r3, #14
 8001e78:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	2109      	movs	r1, #9
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff fdb8 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001e90:	e018      	b.n	8001ec4 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	dc02      	bgt.n	8001e9e <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	e004      	b.n	8001ea8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	dd01      	ble.n	8001ea8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001ea4:	2311      	movs	r3, #17
 8001ea6:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3b02      	subs	r3, #2
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2109      	movs	r1, #9
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff fd9e 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	17c8      	asrs	r0, r1, #31
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	1355      	asrs	r5, r2, #13
 8001ee6:	04d4      	lsls	r4, r2, #19
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe f96b 	bl	80001cc <__aeabi_uldivmod>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	0c02      	lsrs	r2, r0, #16
 8001f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f10:	0c0b      	lsrs	r3, r1, #16
 8001f12:	b2d3      	uxtb	r3, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	2106      	movs	r1, #6
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd71 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	0a02      	lsrs	r2, r0, #8
 8001f2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f30:	0a0b      	lsrs	r3, r1, #8
 8001f32:	b2d3      	uxtb	r3, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	2107      	movs	r1, #7
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fd61 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001f3e:	7a3b      	ldrb	r3, [r7, #8]
 8001f40:	461a      	mov	r2, r3
 8001f42:	2108      	movs	r1, #8
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fd5b 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	01e84800 	.word	0x01e84800

08001f58 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	dc02      	bgt.n	8001f6e <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001f68:	2306      	movs	r3, #6
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	e004      	b.n	8001f78 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	dd01      	ble.n	8001f78 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001f74:	230c      	movs	r3, #12
 8001f76:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d10a      	bne.n	8001f94 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001f7e:	22c5      	movs	r2, #197	; 0xc5
 8001f80:	2131      	movs	r1, #49	; 0x31
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fd3c 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001f88:	220c      	movs	r2, #12
 8001f8a:	2137      	movs	r1, #55	; 0x37
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fd37 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001f92:	e009      	b.n	8001fa8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001f94:	22c3      	movs	r2, #195	; 0xc3
 8001f96:	2131      	movs	r1, #49	; 0x31
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fd31 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001f9e:	220a      	movs	r2, #10
 8001fa0:	2137      	movs	r1, #55	; 0x37
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fd2c 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001fa8:	211e      	movs	r1, #30
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fd58 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b25a      	sxtb	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	211e      	movs	r1, #30
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fd18 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	dc02      	bgt.n	8001ff2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e03f      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	dc02      	bgt.n	8002002 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e037      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002008:	4293      	cmp	r3, r2
 800200a:	dc02      	bgt.n	8002012 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 800200c:	2302      	movs	r3, #2
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e02f      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f245 1240 	movw	r2, #20800	; 0x5140
 8002018:	4293      	cmp	r3, r2
 800201a:	dc02      	bgt.n	8002022 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 800201c:	2303      	movs	r3, #3
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e027      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002028:	4293      	cmp	r3, r2
 800202a:	dc02      	bgt.n	8002032 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 800202c:	2304      	movs	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e01f      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002038:	4293      	cmp	r3, r2
 800203a:	dc02      	bgt.n	8002042 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 800203c:	2305      	movs	r3, #5
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e017      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002048:	4293      	cmp	r3, r2
 800204a:	dc02      	bgt.n	8002052 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 800204c:	2306      	movs	r3, #6
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e00f      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	dc02      	bgt.n	8002060 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800205a:	2307      	movs	r3, #7
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e008      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	dc02      	bgt.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002068:	2308      	movs	r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e001      	b.n	8002072 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800206e:	2309      	movs	r3, #9
 8002070:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8002072:	211d      	movs	r1, #29
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fcf3 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 800207a:	4603      	mov	r3, r0
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	b25a      	sxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	b25b      	sxtb	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	b25b      	sxtb	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	211d      	movs	r1, #29
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fcb3 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0001e848 	.word	0x0001e848
 80020a8:	0003d090 	.word	0x0003d090

080020ac <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	dc02      	bgt.n	80020c2 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80020bc:	2305      	movs	r3, #5
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	e004      	b.n	80020cc <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	dd01      	ble.n	80020cc <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 80020c8:	2308      	movs	r3, #8
 80020ca:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3b04      	subs	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80020d2:	211d      	movs	r1, #29
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fcc3 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 80020da:	4603      	mov	r3, r0
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	f023 030e 	bic.w	r3, r3, #14
 80020e2:	b25a      	sxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	211d      	movs	r1, #29
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fc83 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002110:	211d      	movs	r1, #29
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fca4 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002118:	4603      	mov	r3, r0
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	211d      	movs	r1, #29
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fc6b 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002140:	211d      	movs	r1, #29
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fc8c 	bl	8001a60 <_ZN10RFM95_LoRa12readRegisterEh>
 8002148:	4603      	mov	r3, r0
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	211d      	movs	r1, #29
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fc53 	bl	8001a00 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

	setFrequency(868000000);
 800216c:	4914      	ldr	r1, [pc, #80]	; (80021c0 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff feac 	bl	8001ecc <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002174:	2201      	movs	r2, #1
 8002176:	2111      	movs	r1, #17
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fe6a 	bl	8001e52 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800217e:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff28 	bl	8001fd8 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002188:	210c      	movs	r1, #12
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fee4 	bl	8001f58 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002190:	2105      	movs	r1, #5
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff8a 	bl	80020ac <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fc82 	bl	8001aa4 <_ZN10RFM95_LoRa5beginEl>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	33bca100 	.word	0x33bca100
 80021c4:	339e1c80 	.word	0x339e1c80

080021c8 <_ZNK13DriveSettings16getClampingSpeedEv>:
 *  Created on: 22.10.2022
 *      Author: marce
 */
#include "DriveSettings.h"

uint16_t DriveSettings::getClampingSpeed() const {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	891b      	ldrh	r3, [r3, #8]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed) {
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	811a      	strh	r2, [r3, #8]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZNK13DriveSettings17getClampingTorqueEv>:



uint16_t DriveSettings::getClampingTorque() const {
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	889b      	ldrh	r3, [r3, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque) {
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	809a      	strh	r2, [r3, #4]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_ZNK13DriveSettings16getDeviceAddressEv>:



uint8_t DriveSettings::getDeviceAddress() const {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	781b      	ldrb	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_ZNK13DriveSettings12getInPosDiffEv>:
	this->deviceAddress = deviceAddress;
}



uint16_t DriveSettings::getInPosDiff() const {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	899b      	ldrh	r3, [r3, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff ) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	819a      	strh	r2, [r3, #12]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_ZNK13DriveSettings18getOpeningDistanceEv>:



uint16_t DriveSettings::getOpeningDistance() const {
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return openingDistance;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	89db      	ldrh	r3, [r3, #14]
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance ) {
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	81da      	strh	r2, [r3, #14]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_ZNK13DriveSettings21getOverCurrentWarningEv>:
void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold) {
	this->overCurrentTimeThreshold = overCurrentTimeThreshold;
}

uint16_t DriveSettings::getOverCurrentWarning() const {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8a9b      	ldrh	r3, [r3, #20]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning) {
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	829a      	strh	r2, [r3, #20]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_ZNK13DriveSettings19getOverCurrentErrorEv>:

uint16_t DriveSettings::getOverCurrentError() const{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return this->overCurrentError;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8adb      	ldrh	r3, [r3, #22]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_ZN13DriveSettings19setOverCurrentErrorEt>:
void DriveSettings::setOverCurrentError(uint16_t overCurrentError){
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	82da      	strh	r2, [r3, #22]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:


uint16_t DriveSettings::getSelfShutdownDelay() const {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	895b      	ldrh	r3, [r3, #10]
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	815a      	strh	r2, [r3, #10]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_ZNK13DriveSettings13getTeachSpeedEv>:

uint16_t DriveSettings::getTeachSpeed() const {
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	88db      	ldrh	r3, [r3, #6]
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed ) {
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	887a      	ldrh	r2, [r7, #2]
 8002382:	80da      	strh	r2, [r3, #6]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_ZNK13DriveSettings14getTeachTroqueEv>:

uint16_t DriveSettings::getTeachTroque() const {
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	885b      	ldrh	r3, [r3, #2]
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	805a      	strh	r2, [r3, #2]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

uint16_t DriveSettings::getUnderVoltageError() const {
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8a5b      	ldrh	r3, [r3, #18]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError) {
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	825a      	strh	r2, [r3, #18]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

uint16_t DriveSettings::getUnderVoltageWarning() const {
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8a1b      	ldrh	r3, [r3, #16]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(
		uint16_t underVoltageWarning) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	821a      	strh	r2, [r3, #16]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	705a      	strb	r2, [r3, #1]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	709a      	strb	r2, [r3, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	70da      	strb	r2, [r3, #3]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	711a      	strb	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	715a      	strb	r2, [r3, #5]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	719a      	strb	r2, [r3, #6]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	71da      	strb	r2, [r3, #7]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	721a      	strb	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	725a      	strb	r2, [r3, #9]
{
}
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	return close;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	701a      	strb	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	return open;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	785b      	ldrb	r3, [r3, #1]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	705a      	strb	r2, [r3, #1]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_ZN12DriveCommand10setDisableEb>:
{
	return disable;
}

void DriveCommand::setDisable(bool disable)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	719a      	strb	r2, [r3, #6]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_ZN12DriveCommand9setEnableEb>:
{
	return enable;
}

void DriveCommand::setEnable(bool enable)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	711a      	strb	r2, [r3, #4]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_ZN12DriveCommand8setResetEb>:
{
	return reset;
}

void DriveCommand::setReset(bool reset)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	70da      	strb	r2, [r3, #3]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
	return stop;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	795b      	ldrb	r3, [r3, #5]
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	715a      	strb	r2, [r3, #5]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZN12DriveCommand8setTeachEb>:
{
	return teach;
}

void DriveCommand::setTeach(bool teach)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	789b      	ldrb	r3, [r3, #2]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	429a      	cmp	r2, r3
 8002594:	d002      	beq.n	800259c <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	709a      	strb	r2, [r3, #2]
	}

}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	return close;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	785b      	ldrb	r3, [r3, #1]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d005      	beq.n	80025e2 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	739a      	strb	r2, [r3, #14]
	}
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	return open;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	789b      	ldrb	r3, [r3, #2]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	789b      	ldrb	r3, [r3, #2]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	429a      	cmp	r2, r3
 800261a:	d005      	beq.n	8002628 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	739a      	strb	r2, [r3, #14]
	}
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	return disable;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	79db      	ldrb	r3, [r3, #7]
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	79db      	ldrb	r3, [r3, #7]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	429a      	cmp	r2, r3
 8002660:	d005      	beq.n	800266e <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	739a      	strb	r2, [r3, #14]
	}
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
	return enable;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	795b      	ldrb	r3, [r3, #5]
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d005      	beq.n	80026b4 <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	739a      	strb	r2, [r3, #14]
	}
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	return reset;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	791b      	ldrb	r3, [r3, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d005      	beq.n	80026fa <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	739a      	strb	r2, [r3, #14]
	}
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
	return stop;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	799b      	ldrb	r3, [r3, #6]
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	429a      	cmp	r2, r3
 8002732:	d005      	beq.n	8002740 <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	739a      	strb	r2, [r3, #14]
	}
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	return teach;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	78db      	ldrb	r3, [r3, #3]
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	429a      	cmp	r2, r3
 8002778:	d005      	beq.n	8002786 <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	739a      	strb	r2, [r3, #14]
	}
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
	return this->error;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	781b      	ldrb	r3, [r3, #0]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <_ZNK11DriveStatus9getStatusEv>:
		statusChanged = true;
	}
}

uint8_t DriveStatus::getStatus() const
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	uint8_t result = (uint8_t)enable << 7 | (uint8_t)open << 6
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	795b      	ldrb	r3, [r3, #5]
 80027b6:	01db      	lsls	r3, r3, #7
 80027b8:	b25a      	sxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	789b      	ldrb	r3, [r3, #2]
 80027be:	019b      	lsls	r3, r3, #6
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b25a      	sxtb	r2, r3
			| (uint8_t)close << 5 | (uint8_t)teach << 4 | (uint8_t)stop << 3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25a      	sxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	78db      	ldrb	r3, [r3, #3]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	799b      	ldrb	r3, [r3, #6]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b25b      	sxtb	r3, r3
	uint8_t result = (uint8_t)enable << 7 | (uint8_t)open << 6
 80027ea:	73fb      	strb	r3, [r7, #15]

		return result;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN11DriveStatus11setPositionEt>:
{
	return position;
}

void DriveStatus::setPosition(uint16_t position)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	807b      	strh	r3, [r7, #2]
	this->position = position;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	815a      	strh	r2, [r3, #10]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"


//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	899b      	ldrh	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	711a      	strb	r2, [r3, #4]
	}


	//15ms
	if(counter % 15 == 0){
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	899a      	ldrh	r2, [r3, #12]
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <_ZN11TaskHandler11UpdateTasksEv+0xf0>)
 8002838:	fba3 1302 	umull	r1, r3, r3, r2
 800283c:	08d9      	lsrs	r1, r3, #3
 800283e:	460b      	mov	r3, r1
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a5b      	subs	r3, r3, r1
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <_ZN11TaskHandler11UpdateTasksEv+0x40>
		ioUpdateTask = true;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	70da      	strb	r2, [r3, #3]
		driveTask = true;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	709a      	strb	r2, [r3, #2]
	}


	//50ms
	if(counter % 50 == 0){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	899b      	ldrh	r3, [r3, #12]
 800285c:	4a2b      	ldr	r2, [pc, #172]	; (800290c <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800285e:	fba2 1203 	umull	r1, r2, r2, r3
 8002862:	0912      	lsrs	r2, r2, #4
 8002864:	2132      	movs	r1, #50	; 0x32
 8002866:	fb01 f202 	mul.w	r2, r1, r2
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <_ZN11TaskHandler11UpdateTasksEv+0x60>
		comTask = true;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
	}

	//100ms
	if(counter % 100 == 0){
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	899b      	ldrh	r3, [r3, #12]
 800287c:	4a23      	ldr	r2, [pc, #140]	; (800290c <_ZN11TaskHandler11UpdateTasksEv+0xf4>)
 800287e:	fba2 1203 	umull	r1, r2, r2, r3
 8002882:	0952      	lsrs	r2, r2, #5
 8002884:	2164      	movs	r1, #100	; 0x64
 8002886:	fb01 f202 	mul.w	r2, r1, r2
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <_ZN11TaskHandler11UpdateTasksEv+0x80>
		errorTask = true;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
	}


	if(counter % 250 == 0){
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	899b      	ldrh	r3, [r3, #12]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 800289e:	fba2 1203 	umull	r1, r2, r2, r3
 80028a2:	0912      	lsrs	r2, r2, #4
 80028a4:	21fa      	movs	r1, #250	; 0xfa
 80028a6:	fb01 f202 	mul.w	r2, r1, r2
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <_ZN11TaskHandler11UpdateTasksEv+0xa0>
		comTask = true;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	705a      	strb	r2, [r3, #1]
	}

	if(counter % 500 == 0){
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	899b      	ldrh	r3, [r3, #12]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_ZN11TaskHandler11UpdateTasksEv+0xf8>)
 80028be:	fba2 1203 	umull	r1, r2, r2, r3
 80028c2:	0952      	lsrs	r2, r2, #5
 80028c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028c8:	fb01 f202 	mul.w	r2, r1, r2
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <_ZN11TaskHandler11UpdateTasksEv+0xc2>
		ledTask = true;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	899b      	ldrh	r3, [r3, #12]
 80028de:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d903      	bls.n	80028ee <_ZN11TaskHandler11UpdateTasksEv+0xd6>
		counter = 1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 80028ec:	e005      	b.n	80028fa <_ZN11TaskHandler11UpdateTasksEv+0xe2>
		counter++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	899b      	ldrh	r3, [r3, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	819a      	strh	r2, [r3, #12]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	88888889 	.word	0x88888889
 800290c:	51eb851f 	.word	0x51eb851f
 8002910:	10624dd3 	.word	0x10624dd3

08002914 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	79db      	ldrb	r3, [r3, #7]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_ZN11TaskHandler11isDriveTaskEv>:

bool TaskHandler::isDriveTask()  {
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	bool driveTaskTemp = (driveTask & driveTaskEnable);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	461a      	mov	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7a1b      	ldrb	r3, [r3, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
	driveTask = false;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	709a      	strb	r2, [r3, #2]
	return driveTaskTemp;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_ZN11TaskHandler11isErrorTaskEv>:

bool TaskHandler::isErrorTask()  {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	799b      	ldrb	r3, [r3, #6]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7a5b      	ldrb	r3, [r3, #9]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	70da      	strb	r2, [r3, #3]
	return ioUpdateTaskTemp;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_ZN11TaskHandler15isADCUpdateTaskEv>:


bool TaskHandler::isADCUpdateTask() {
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	bool adcUpdateTaskTemp = (adcUpdateTask & adcUpdateTaskEnable);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	791b      	ldrb	r3, [r3, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7a9b      	ldrb	r3, [r3, #10]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
	adcUpdateTask = false;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	711a      	strb	r2, [r3, #4]
	return adcUpdateTaskTemp;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZN11TaskHandler9isLEDTaskEv>:

bool TaskHandler::isLEDTask(){
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	bool ledTaskTemp = (ledTask & ledTaskEnable);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	795b      	ldrb	r3, [r3, #5]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7adb      	ldrb	r3, [r3, #11]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
	ledTask = false;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	715a      	strb	r2, [r3, #5]
	return ledTaskTemp;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_ZN11TaskHandler22setAdcUpdateTaskEnableEb>:




void TaskHandler::setAdcUpdateTaskEnable(bool adcUpdateTaskEnable ) {
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
	this->adcUpdateTaskEnable = adcUpdateTaskEnable;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	729a      	strb	r2, [r3, #10]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_ZN11TaskHandler18setDriveTaskEnableEb>:
void TaskHandler::setComTaskEnable(bool comTaskEnable ) {
	this->comTaskEnable = comTaskEnable;
}


void TaskHandler::setDriveTaskEnable(bool driveTaskEnable ) {
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	70fb      	strb	r3, [r7, #3]
	this->driveTaskEnable = driveTaskEnable;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	721a      	strb	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	787b      	ldrb	r3, [r7, #1]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b2ca      	uxtb	r2, r1
 8002aa8:	701a      	strb	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <MX_ADC1_Init+0xe8>)
 8002ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002afa:	2204      	movs	r2, #4
 8002afc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b1a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b3e:	4817      	ldr	r0, [pc, #92]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b40:	f000 ffae 	bl	8003aa0 <HAL_ADC_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002b4a:	f000 f9ad 	bl	8002ea8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b5a:	f001 fd13 	bl	8004584 <HAL_ADCEx_MultiModeConfigChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002b64:	f000 f9a0 	bl	8002ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_ADC1_Init+0xec>)
 8002b6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b6c:	2306      	movs	r3, #6
 8002b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b74:	237f      	movs	r3, #127	; 0x7f
 8002b76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_ADC1_Init+0xe4>)
 8002b86:	f001 f8db 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002b90:	f000 f98a 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000021c 	.word	0x2000021c
 8002ba0:	50040000 	.word	0x50040000
 8002ba4:	19200040 	.word	0x19200040

08002ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_ADC_MspInit+0x74>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d124      	bne.n	8002c14 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_ADC_MspInit+0x78>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VOLTAGE_MEASUREMENT_Pin|CURRENT_MEASUREMENT_Pin;
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bfe:	230b      	movs	r3, #11
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c10:	f001 fe6e 	bl	80048f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	50040000 	.word	0x50040000
 8002c20:	40021000 	.word	0x40021000

08002c24 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c46:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c76:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	4a3a      	ldr	r2, [pc, #232]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <MX_GPIO_Init+0x14c>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin, GPIO_PIN_RESET);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2119      	movs	r1, #25
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f001 ffaf 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_EXT_Pin|LED_Pin, GPIO_PIN_RESET);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2190      	movs	r1, #144	; 0x90
 8002caa:	4832      	ldr	r0, [pc, #200]	; (8002d74 <MX_GPIO_Init+0x150>)
 8002cac:	f001 ffaa 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RFM_DI0_Pin|RFM_DI3_Pin;
 8002cb0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	482c      	ldr	r0, [pc, #176]	; (8002d78 <MX_GPIO_Init+0x154>)
 8002cc6:	f001 fe13 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POWER_SWITCH_Pin|RFM_RST_Pin|RFM_NSS_Pin;
 8002cca:	2319      	movs	r3, #25
 8002ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce4:	f001 fe04 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RFM_DI2_Pin|VUSB_Pin|SW_EXT_Pin;
 8002ce8:	2323      	movs	r3, #35	; 0x23
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	481e      	ldr	r0, [pc, #120]	; (8002d74 <MX_GPIO_Init+0x150>)
 8002cfc:	f001 fdf8 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d06:	2303      	movs	r3, #3
 8002d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f001 fdea 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin|LED_Pin;
 8002d1c:	2390      	movs	r3, #144	; 0x90
 8002d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4810      	ldr	r0, [pc, #64]	; (8002d74 <MX_GPIO_Init+0x150>)
 8002d34:	f001 fddc 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d38:	2340      	movs	r3, #64	; 0x40
 8002d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480a      	ldr	r0, [pc, #40]	; (8002d74 <MX_GPIO_Init+0x150>)
 8002d4c:	f001 fdd0 	bl	80048f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d50:	2308      	movs	r3, #8
 8002d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d54:	2303      	movs	r3, #3
 8002d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4806      	ldr	r0, [pc, #24]	; (8002d7c <MX_GPIO_Init+0x158>)
 8002d64:	f001 fdc4 	bl	80048f0 <HAL_GPIO_Init>

}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	48001c00 	.word	0x48001c00

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d84:	f000 fc53 	bl	800362e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d88:	f000 f816 	bl	8002db8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8c:	f7ff ff4a 	bl	8002c24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002d90:	f7ff fe92 	bl	8002ab8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002d94:	f000 f8ac 	bl	8002ef0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002d98:	f000 fa04 	bl	80031a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d9c:	f000 fa5c 	bl	8003258 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002da0:	f00a fb0a 	bl	800d3b8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8002da4:	f000 fabe 	bl	8003324 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002da8:	f000 faf2 	bl	8003390 <MX_TIM16_Init>


 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8002dac:	4801      	ldr	r0, [pc, #4]	; (8002db4 <main+0x34>)
 8002dae:	f7fd fcb9 	bl	8000724 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <main+0x32>
 8002db4:	20000280 	.word	0x20000280

08002db8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b096      	sub	sp, #88	; 0x58
 8002dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	2244      	movs	r2, #68	; 0x44
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00b f90e 	bl	800dfe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dde:	f003 fcdd 	bl	800679c <HAL_PWREx_ControlVoltageScaling>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002df2:	f000 f859 	bl	8002ea8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8002df6:	2312      	movs	r3, #18
 8002df8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e00:	2340      	movs	r3, #64	; 0x40
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e04:	2301      	movs	r3, #1
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002e0c:	23b0      	movs	r3, #176	; 0xb0
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e10:	2302      	movs	r3, #2
 8002e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e14:	2302      	movs	r3, #2
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e24:	2302      	movs	r3, #2
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fd1b 	bl	8006868 <HAL_RCC_OscConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8002e42:	f000 f831 	bl	8002ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e46:	230f      	movs	r3, #15
 8002e48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 f964 	bl	800712c <HAL_RCC_ClockConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8002e74:	f000 f818 	bl	8002ea8 <Error_Handler>
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3758      	adds	r7, #88	; 0x58
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d102      	bne.n	8002e98 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskHandler.UpdateTasks();
 8002e92:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e94:	f7ff fcc0 	bl	8002818 <_ZN11TaskHandler11UpdateTasksEv>
	}

}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	20000280 	.word	0x20000280

08002ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <Error_Handler+0x8>
	...

08002eb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d102      	bne.n	8002ed4 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8002ece:	4803      	ldr	r0, [pc, #12]	; (8002edc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002ed0:	f7fd fbb0 	bl	8000634 <_ZN7AppMainC1Ev>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000280 	.word	0x20000280

08002ee0 <_GLOBAL__sub_I_appMain>:
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7ff ffe3 	bl	8002eb4 <_Z41__static_initialization_and_destruction_0ii>
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <MX_SPI1_Init+0x78>)
 8002ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f26:	2220      	movs	r2, #32
 8002f28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f3e:	2207      	movs	r2, #7
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_SPI1_Init+0x74>)
 8002f50:	f004 fc5e 	bl	8007810 <HAL_SPI_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f5a:	f7ff ffa5 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000318 	.word	0x20000318
 8002f68:	40013000 	.word	0x40013000

08002f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_SPI_MspInit+0x7c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d128      	bne.n	8002fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f98:	6613      	str	r3, [r2, #96]	; 0x60
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fbe:	23e0      	movs	r3, #224	; 0xe0
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fce:	2305      	movs	r3, #5
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f001 fc88 	bl	80048f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40013000 	.word	0x40013000
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_MspInit+0x44>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <HAL_MspInit+0x44>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6613      	str	r3, [r2, #96]	; 0x60
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_MspInit+0x44>)
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_MspInit+0x44>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_MspInit+0x44>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x44>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800303c:	e7fe      	b.n	800303c <NMI_Handler+0x4>

0800303e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <MemManage_Handler+0x4>

0800304a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <UsageFault_Handler+0x4>

08003056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 fb28 	bl	80036d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003092:	f005 fc5b 	bl	800894c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003098:	f005 fc58 	bl	800894c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000380 	.word	0x20000380
 80030a4:	20000464 	.word	0x20000464

080030a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <TIM6_IRQHandler+0x10>)
 80030ae:	f005 fc4d 	bl	800894c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000418 	.word	0x20000418

080030bc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <USB_IRQHandler+0x10>)
 80030c2:	f001 ff0a 	bl	8004eda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20001158 	.word	0x20001158

080030d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
	return 1;
 80030d4:	2301      	movs	r3, #1
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <_kill>:

int _kill(int pid, int sig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ea:	f00a ff4b 	bl	800df84 <__errno>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2216      	movs	r2, #22
 80030f2:	601a      	str	r2, [r3, #0]
	return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_exit>:

void _exit (int status)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003108:	f04f 31ff 	mov.w	r1, #4294967295
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ffe7 	bl	80030e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003112:	e7fe      	b.n	8003112 <_exit+0x12>

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f00a ff1e 	bl	800df84 <__errno>
 8003148:	4603      	mov	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000a000 	.word	0x2000a000
 8003174:	00000400 	.word	0x00000400
 8003178:	2000037c 	.word	0x2000037c
 800317c:	20001688 	.word	0x20001688

08003180 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00a ff18 	bl	800dfe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b8:	463b      	mov	r3, r7
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <MX_TIM1_Init+0xac>)
 80031c4:	4a23      	ldr	r2, [pc, #140]	; (8003254 <MX_TIM1_Init+0xb0>)
 80031c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <MX_TIM1_Init+0xac>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <MX_TIM1_Init+0xac>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <MX_TIM1_Init+0xac>)
 80031d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <MX_TIM1_Init+0xac>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <MX_TIM1_Init+0xac>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <MX_TIM1_Init+0xac>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <MX_TIM1_Init+0xac>)
 800321a:	f005 fa63 	bl	80086e4 <HAL_TIM_Encoder_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003224:	f7ff fe40 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003234:	463b      	mov	r3, r7
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_TIM1_Init+0xac>)
 800323a:	f006 f8eb 	bl	8009414 <HAL_TIMEx_MasterConfigSynchronization>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003244:	f7ff fe30 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	3730      	adds	r7, #48	; 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000380 	.word	0x20000380
 8003254:	40012c00 	.word	0x40012c00

08003258 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326a:	463b      	mov	r3, r7
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <MX_TIM2_Init+0xc8>)
 800327e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <MX_TIM2_Init+0xc8>)
 8003286:	2214      	movs	r2, #20
 8003288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <MX_TIM2_Init+0xc8>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MX_TIM2_Init+0xc8>)
 8003292:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <MX_TIM2_Init+0xc8>)
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <MX_TIM2_Init+0xc8>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032a4:	481e      	ldr	r0, [pc, #120]	; (8003320 <MX_TIM2_Init+0xc8>)
 80032a6:	f005 f8e7 	bl	8008478 <HAL_TIM_PWM_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80032b0:	f7ff fdfa 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	4619      	mov	r1, r3
 80032c2:	4817      	ldr	r0, [pc, #92]	; (8003320 <MX_TIM2_Init+0xc8>)
 80032c4:	f006 f8a6 	bl	8009414 <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80032ce:	f7ff fdeb 	bl	8002ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d2:	2360      	movs	r3, #96	; 0x60
 80032d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3200;
 80032d6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80032da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80032dc:	2302      	movs	r3, #2
 80032de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	2200      	movs	r2, #0
 80032e8:	4619      	mov	r1, r3
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_TIM2_Init+0xc8>)
 80032ec:	f005 fc4e 	bl	8008b8c <HAL_TIM_PWM_ConfigChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80032f6:	f7ff fdd7 	bl	8002ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032fa:	463b      	mov	r3, r7
 80032fc:	2204      	movs	r2, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4807      	ldr	r0, [pc, #28]	; (8003320 <MX_TIM2_Init+0xc8>)
 8003302:	f005 fc43 	bl	8008b8c <HAL_TIM_PWM_ConfigChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800330c:	f7ff fdcc 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003310:	4803      	ldr	r0, [pc, #12]	; (8003320 <MX_TIM2_Init+0xc8>)
 8003312:	f000 f90f 	bl	8003534 <HAL_TIM_MspPostInit>

}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200003cc 	.word	0x200003cc

08003324 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <MX_TIM6_Init+0x64>)
 8003336:	4a15      	ldr	r2, [pc, #84]	; (800338c <MX_TIM6_Init+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <MX_TIM6_Init+0x64>)
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_TIM6_Init+0x64>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23999;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <MX_TIM6_Init+0x64>)
 8003348:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800334c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_TIM6_Init+0x64>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <MX_TIM6_Init+0x64>)
 8003356:	f004 ffe3 	bl	8008320 <HAL_TIM_Base_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003360:	f7ff fda2 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003364:	2320      	movs	r3, #32
 8003366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_TIM6_Init+0x64>)
 8003372:	f006 f84f 	bl	8009414 <HAL_TIMEx_MasterConfigSynchronization>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800337c:	f7ff fd94 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000418 	.word	0x20000418
 800338c:	40001000 	.word	0x40001000

08003390 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <MX_TIM16_Init+0x44>)
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <MX_TIM16_Init+0x48>)
 8003398:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_TIM16_Init+0x44>)
 800339c:	2202      	movs	r2, #2
 800339e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 35999;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033a8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80033ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <MX_TIM16_Init+0x44>)
 80033c2:	f004 ffad 	bl	8008320 <HAL_TIM_Base_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80033cc:	f7ff fd6c 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000464 	.word	0x20000464
 80033d8:	40014400 	.word	0x40014400

080033dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_TIM_Encoder_MspInit+0x90>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d131      	bne.n	8003462 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 8003404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003408:	6613      	str	r3, [r2, #96]	; 0x60
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_TIM_Encoder_MspInit+0x94>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800342e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800344e:	f001 fa4f 	bl	80048f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2019      	movs	r0, #25
 8003458:	f001 fa13 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800345c:	2019      	movs	r0, #25
 800345e:	f001 fa2c 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	; 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d10b      	bne.n	800349e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_TIM_PWM_MspInit+0x38>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_TIM_PWM_MspInit+0x38>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_TIM_PWM_MspInit+0x38>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_TIM_Base_MspInit+0x78>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d114      	bne.n	80034ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 80034c8:	f043 0310 	orr.w	r3, r3, #16
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2036      	movs	r0, #54	; 0x36
 80034e0:	f001 f9cf 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80034e4:	2036      	movs	r0, #54	; 0x36
 80034e6:	f001 f9e8 	bl	80048ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80034ea:	e018      	b.n	800351e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_TIM_Base_MspInit+0x80>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d113      	bne.n	800351e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	6613      	str	r3, [r2, #96]	; 0x60
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_TIM_Base_MspInit+0x7c>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2019      	movs	r0, #25
 8003514:	f001 f9b5 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003518:	2019      	movs	r0, #25
 800351a:	f001 f9ce 	bl	80048ba <HAL_NVIC_EnableIRQ>
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40001000 	.word	0x40001000
 800352c:	40021000 	.word	0x40021000
 8003530:	40014400 	.word	0x40014400

08003534 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d139      	bne.n	80035ca <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_TIM_MspPostInit+0xa0>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003594:	2300      	movs	r3, #0
 8003596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	4619      	mov	r1, r3
 80035a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a6:	f001 f9a3 	bl	80048f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_2_Pin;
 80035aa:	2308      	movs	r3, #8
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ba:	2301      	movs	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4804      	ldr	r0, [pc, #16]	; (80035d8 <HAL_TIM_MspPostInit+0xa4>)
 80035c6:	f001 f993 	bl	80048f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	; 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	48000400 	.word	0x48000400

080035dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035e0:	f7ff fdce 	bl	8003180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <LoopForever+0x6>)
  ldr r1, =_edata
 80035e6:	490d      	ldr	r1, [pc, #52]	; (800361c <LoopForever+0xa>)
  ldr r2, =_sidata
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <LoopForever+0xe>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ec:	e002      	b.n	80035f4 <LoopCopyDataInit>

080035ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f2:	3304      	adds	r3, #4

080035f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f8:	d3f9      	bcc.n	80035ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035fc:	4c0a      	ldr	r4, [pc, #40]	; (8003628 <LoopForever+0x16>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003600:	e001      	b.n	8003606 <LoopFillZerobss>

08003602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003604:	3204      	adds	r2, #4

08003606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003608:	d3fb      	bcc.n	8003602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800360a:	f00a fcc1 	bl	800df90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800360e:	f7ff fbb7 	bl	8002d80 <main>

08003612 <LoopForever>:

LoopForever:
    b LoopForever
 8003612:	e7fe      	b.n	8003612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003614:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800361c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003620:	0800e2d4 	.word	0x0800e2d4
  ldr r2, =_sbss
 8003624:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003628:	20001688 	.word	0x20001688

0800362c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800362c:	e7fe      	b.n	800362c <ADC1_2_IRQHandler>

0800362e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003638:	2003      	movs	r0, #3
 800363a:	f001 f917 	bl	800486c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800363e:	200f      	movs	r0, #15
 8003640:	f000 f80e 	bl	8003660 <HAL_InitTick>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	71fb      	strb	r3, [r7, #7]
 800364e:	e001      	b.n	8003654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003650:	f7ff fcce 	bl	8002ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003654:	79fb      	ldrb	r3, [r7, #7]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_InitTick+0x6c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_InitTick+0x70>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_InitTick+0x6c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f923 	bl	80048d6 <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d809      	bhi.n	80036b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369c:	2200      	movs	r2, #0
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f001 f8ed 	bl	8004882 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_InitTick+0x74>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e004      	b.n	80036c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e001      	b.n	80036c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	20000004 	.word	0x20000004
 80036d4:	20000008 	.word	0x20000008

080036d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_IncTick+0x20>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_IncTick+0x24>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <HAL_IncTick+0x24>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	200004b0 	.word	0x200004b0

08003700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return uwTick;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_GetTick+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	200004b0 	.word	0x200004b0

08003718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003720:	f7ff ffee 	bl	8003700 <HAL_GetTick>
 8003724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d005      	beq.n	800373e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_Delay+0x44>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373e:	bf00      	nop
 8003740:	f7ff ffde 	bl	8003700 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d8f7      	bhi.n	8003740 <HAL_Delay+0x28>
  {
  }
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <LL_ADC_SetOffset+0x44>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	03fff000 	.word	0x03fff000

08003810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3360      	adds	r3, #96	; 0x60
 800381e:	461a      	mov	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3360      	adds	r3, #96	; 0x60
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	431a      	orrs	r2, r3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	615a      	str	r2, [r3, #20]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3330      	adds	r3, #48	; 0x30
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	4413      	add	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	211f      	movs	r1, #31
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	0e9b      	lsrs	r3, r3, #26
 80038d0:	f003 011f 	and.w	r1, r3, #31
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	431a      	orrs	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3314      	adds	r3, #20
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0e5b      	lsrs	r3, r3, #25
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0d1b      	lsrs	r3, r3, #20
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2107      	movs	r1, #7
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	401a      	ands	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	0d1b      	lsrs	r3, r3, #20
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0318 	and.w	r3, r3, #24
 800396a:	4908      	ldr	r1, [pc, #32]	; (800398c <LL_ADC_SetChannelSingleDiff+0x44>)
 800396c:	40d9      	lsrs	r1, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	400b      	ands	r3, r1
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	0007ffff 	.word	0x0007ffff

08003990 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80039a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6093      	str	r3, [r2, #8]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c8:	d101      	bne.n	80039ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a18:	d101      	bne.n	8003a1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_IsEnabled+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_IsEnabled+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d101      	bne.n	8003a90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e131      	b.n	8003d1e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff f86d 	bl	8002ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff67 	bl	80039b4 <LL_ADC_IsDeepPowerDownEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff4d 	bl	8003990 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff82 	bl	8003a04 <LL_ADC_IsInternalRegulatorEnabled>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff66 	bl	80039dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b10:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <HAL_ADC_Init+0x288>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	4a85      	ldr	r2, [pc, #532]	; (8003d2c <HAL_ADC_Init+0x28c>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b24:	e002      	b.n	8003b2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f9      	bne.n	8003b26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff64 	bl	8003a04 <LL_ADC_IsInternalRegulatorEnabled>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff ff75 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003b68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80ca 	bne.w	8003d0c <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80c6 	bne.w	8003d0c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b88:	f043 0202 	orr.w	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff49 	bl	8003a2c <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d110      	bne.n	8003bc2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ba0:	4863      	ldr	r0, [pc, #396]	; (8003d30 <HAL_ADC_Init+0x290>)
 8003ba2:	f7ff ff43 	bl	8003a2c <LL_ADC_IsEnabled>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4862      	ldr	r0, [pc, #392]	; (8003d34 <HAL_ADC_Init+0x294>)
 8003baa:	f7ff ff3f 	bl	8003a2c <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4323      	orrs	r3, r4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	485e      	ldr	r0, [pc, #376]	; (8003d38 <HAL_ADC_Init+0x298>)
 8003bbe:	f7ff fdcf 	bl	8003760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	7e5b      	ldrb	r3, [r3, #25]
 8003bc6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bcc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003bd2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003bd8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	045b      	lsls	r3, r3, #17
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <HAL_ADC_Init+0x29c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff0d 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003c38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ff1a 	bl	8003a78 <LL_ADC_INJ_IsConversionOngoing>
 8003c44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13d      	bne.n	8003cc8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d13a      	bne.n	8003cc8 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c5e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d118      	bne.n	8003cb8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
 8003cb6:	e007      	b.n	8003cc8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10c      	bne.n	8003cea <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f023 010f 	bic.w	r1, r3, #15
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	1e5a      	subs	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce8:	e007      	b.n	8003cfa <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 020f 	bic.w	r2, r2, #15
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
 8003d0a:	e007      	b.n	8003d1c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	; 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000004 	.word	0x20000004
 8003d2c:	053e2d63 	.word	0x053e2d63
 8003d30:	50040000 	.word	0x50040000
 8003d34:	50040100 	.word	0x50040100
 8003d38:	50040300 	.word	0x50040300
 8003d3c:	fff0c007 	.word	0xfff0c007

08003d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0b6      	sub	sp, #216	; 0xd8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x22>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e3d5      	b.n	800450e <HAL_ADC_ConfigChannel+0x7ce>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe6f 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 83ba 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	3b02      	subs	r3, #2
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d81b      	bhi.n	8003dc6 <HAL_ADC_ConfigChannel+0x86>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_ADC_ConfigChannel+0x54>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003dad 	.word	0x08003dad
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dbd 	.word	0x08003dbd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	220c      	movs	r2, #12
 8003da8:	605a      	str	r2, [r3, #4]
          break;
 8003daa:	e011      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2212      	movs	r2, #18
 8003db0:	605a      	str	r2, [r3, #4]
          break;
 8003db2:	e00d      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2218      	movs	r2, #24
 8003db8:	605a      	str	r2, [r3, #4]
          break;
 8003dba:	e009      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc2:	605a      	str	r2, [r3, #4]
          break;
 8003dc4:	e004      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2206      	movs	r2, #6
 8003dca:	605a      	str	r2, [r3, #4]
          break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003dce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f7ff fd5b 	bl	8003898 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fe33 	bl	8003a52 <LL_ADC_REG_IsConversionOngoing>
 8003dec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fe3f 	bl	8003a78 <LL_ADC_INJ_IsConversionOngoing>
 8003dfa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 81c1 	bne.w	800418a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 81bc 	bne.w	800418a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e1a:	d10f      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7ff fd62 	bl	80038f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fd1c 	bl	8003872 <LL_ADC_SetSamplingTimeCommonConfig>
 8003e3a:	e00e      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f7ff fd51 	bl	80038f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fd0c 	bl	8003872 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d00a      	beq.n	8003e92 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6919      	ldr	r1, [r3, #16]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e8c:	f7ff fc9c 	bl	80037c8 <LL_ADC_SetOffset>
 8003e90:	e17b      	b.n	800418a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fcb9 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x17e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fcae 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	0e9b      	lsrs	r3, r3, #26
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	e01e      	b.n	8003efc <HAL_ADC_ConfigChannel+0x1bc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fca3 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e004      	b.n	8003efa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1d4>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0e9b      	lsrs	r3, r3, #26
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	e018      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x206>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	e004      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d106      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fc72 	bl	800383c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fc56 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x244>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fc4b 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	f003 021f 	and.w	r2, r3, #31
 8003f82:	e01e      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x282>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fc40 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e004      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x29a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	0e9b      	lsrs	r3, r3, #26
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	e018      	b.n	800400c <HAL_ADC_ConfigChannel+0x2cc>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003ffe:	2320      	movs	r3, #32
 8004000:	e004      	b.n	800400c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800400c:	429a      	cmp	r2, r3
 800400e:	d106      	bne.n	800401e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fc0f 	bl	800383c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2102      	movs	r1, #2
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fbf3 	bl	8003810 <LL_ADC_GetOffsetChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_ADC_ConfigChannel+0x30a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fbe8 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8004040:	4603      	mov	r3, r0
 8004042:	0e9b      	lsrs	r3, r3, #26
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	e01e      	b.n	8004088 <HAL_ADC_ConfigChannel+0x348>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fbdd 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800406c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004078:	2320      	movs	r3, #32
 800407a:	e004      	b.n	8004086 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800407c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x360>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	e016      	b.n	80040ce <HAL_ADC_ConfigChannel+0x38e>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e004      	b.n	80040ce <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80040c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d106      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fbae 	bl	800383c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2103      	movs	r1, #3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fb92 	bl	8003810 <LL_ADC_GetOffsetChannel>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_ADC_ConfigChannel+0x3cc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2103      	movs	r1, #3
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fb87 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8004102:	4603      	mov	r3, r0
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	f003 021f 	and.w	r2, r3, #31
 800410a:	e017      	b.n	800413c <HAL_ADC_ConfigChannel+0x3fc>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2103      	movs	r1, #3
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fb7c 	bl	8003810 <LL_ADC_GetOffsetChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004126:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e003      	b.n	800413a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x414>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	e011      	b.n	8004178 <HAL_ADC_ConfigChannel+0x438>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004164:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800416c:	2320      	movs	r3, #32
 800416e:	e003      	b.n	8004178 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004178:	429a      	cmp	r2, r3
 800417a:	d106      	bne.n	800418a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	2103      	movs	r1, #3
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fb59 	bl	800383c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fc4c 	bl	8003a2c <LL_ADC_IsEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 8140 	bne.w	800441c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f7ff fbcd 	bl	8003948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4a8f      	ldr	r2, [pc, #572]	; (80043f0 <HAL_ADC_ConfigChannel+0x6b0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	f040 8131 	bne.w	800441c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x4a2>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0e9b      	lsrs	r3, r3, #26
 80041d0:	3301      	adds	r3, #1
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	bf94      	ite	ls
 80041da:	2301      	movls	r3, #1
 80041dc:	2300      	movhi	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e019      	b.n	8004216 <HAL_ADC_ConfigChannel+0x4d6>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80041f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80041f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80041fa:	2320      	movs	r3, #32
 80041fc:	e003      	b.n	8004206 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80041fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2b09      	cmp	r3, #9
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004216:	2b00      	cmp	r3, #0
 8004218:	d079      	beq.n	800430e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x4f6>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0e9b      	lsrs	r3, r3, #26
 800422c:	3301      	adds	r3, #1
 800422e:	069b      	lsls	r3, r3, #26
 8004230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004234:	e015      	b.n	8004262 <HAL_ADC_ConfigChannel+0x522>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004246:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e003      	b.n	800425a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	3301      	adds	r3, #1
 800425c:	069b      	lsls	r3, r3, #26
 800425e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x542>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	3301      	adds	r3, #1
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2101      	movs	r1, #1
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	e017      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x572>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e003      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	ea42 0103 	orr.w	r1, r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x598>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	3301      	adds	r3, #1
 80042ca:	f003 021f 	and.w	r2, r3, #31
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	051b      	lsls	r3, r3, #20
 80042d6:	e018      	b.n	800430a <HAL_ADC_ConfigChannel+0x5ca>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80042ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e003      	b.n	80042fc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80042f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	f003 021f 	and.w	r2, r3, #31
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800430a:	430b      	orrs	r3, r1
 800430c:	e081      	b.n	8004412 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_ADC_ConfigChannel+0x5ea>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e9b      	lsrs	r3, r3, #26
 8004320:	3301      	adds	r3, #1
 8004322:	069b      	lsls	r3, r3, #26
 8004324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004328:	e015      	b.n	8004356 <HAL_ADC_ConfigChannel+0x616>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004342:	2320      	movs	r3, #32
 8004344:	e003      	b.n	800434e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3301      	adds	r3, #1
 8004350:	069b      	lsls	r3, r3, #26
 8004352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x636>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	3301      	adds	r3, #1
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	e017      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x666>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	61fb      	str	r3, [r7, #28]
  return result;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e003      	b.n	800439a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	ea42 0103 	orr.w	r1, r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x692>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	3301      	adds	r3, #1
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	3b1e      	subs	r3, #30
 80043ca:	051b      	lsls	r3, r3, #20
 80043cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d0:	e01e      	b.n	8004410 <HAL_ADC_ConfigChannel+0x6d0>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	613b      	str	r3, [r7, #16]
  return result;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e006      	b.n	80043fc <HAL_ADC_ConfigChannel+0x6bc>
 80043ee:	bf00      	nop
 80043f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1e      	subs	r3, #30
 800440a:	051b      	lsls	r3, r3, #20
 800440c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004410:	430b      	orrs	r3, r1
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	4619      	mov	r1, r3
 8004418:	f7ff fa6a 	bl	80038f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <HAL_ADC_ConfigChannel+0x7d8>)
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d06c      	beq.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004428:	483c      	ldr	r0, [pc, #240]	; (800451c <HAL_ADC_ConfigChannel+0x7dc>)
 800442a:	f7ff f9bf 	bl	80037ac <LL_ADC_GetCommonPathInternalCh>
 800442e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <HAL_ADC_ConfigChannel+0x7e0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d127      	bne.n	800448c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800443c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d121      	bne.n	800448c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a35      	ldr	r2, [pc, #212]	; (8004524 <HAL_ADC_ConfigChannel+0x7e4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d157      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800445a:	4619      	mov	r1, r3
 800445c:	482f      	ldr	r0, [pc, #188]	; (800451c <HAL_ADC_ConfigChannel+0x7dc>)
 800445e:	f7ff f992 	bl	8003786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_ADC_ConfigChannel+0x7e8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	4a30      	ldr	r2, [pc, #192]	; (800452c <HAL_ADC_ConfigChannel+0x7ec>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800447c:	e002      	b.n	8004484 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b01      	subs	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f9      	bne.n	800447e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800448a:	e03a      	b.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <HAL_ADC_ConfigChannel+0x7f0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d113      	bne.n	80044be <HAL_ADC_ConfigChannel+0x77e>
 8004496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_ADC_ConfigChannel+0x7e4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d12a      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b4:	4619      	mov	r1, r3
 80044b6:	4819      	ldr	r0, [pc, #100]	; (800451c <HAL_ADC_ConfigChannel+0x7dc>)
 80044b8:	f7ff f965 	bl	8003786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044bc:	e021      	b.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_ADC_ConfigChannel+0x7f4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d11c      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_ADC_ConfigChannel+0x7e4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044e6:	4619      	mov	r1, r3
 80044e8:	480c      	ldr	r0, [pc, #48]	; (800451c <HAL_ADC_ConfigChannel+0x7dc>)
 80044ea:	f7ff f94c 	bl	8003786 <LL_ADC_SetCommonPathInternalCh>
 80044ee:	e008      	b.n	8004502 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800450a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800450e:	4618      	mov	r0, r3
 8004510:	37d8      	adds	r7, #216	; 0xd8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	80080000 	.word	0x80080000
 800451c:	50040300 	.word	0x50040300
 8004520:	c7520000 	.word	0xc7520000
 8004524:	50040000 	.word	0x50040000
 8004528:	20000004 	.word	0x20000004
 800452c:	053e2d63 	.word	0x053e2d63
 8004530:	cb840000 	.word	0xcb840000
 8004534:	80000001 	.word	0x80000001

08004538 <LL_ADC_IsEnabled>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <LL_ADC_IsEnabled+0x18>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <LL_ADC_IsEnabled+0x1a>
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_ADC_REG_IsConversionOngoing>:
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d101      	bne.n	8004576 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b09f      	sub	sp, #124	; 0x7c
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e089      	b.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045aa:	2300      	movs	r3, #0
 80045ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80045ae:	2300      	movs	r3, #0
 80045b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a42      	ldr	r2, [pc, #264]	; (80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d102      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e001      	b.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e068      	b.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ffb9 	bl	800455e <LL_ADC_REG_IsConversionOngoing>
 80045ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ffb3 	bl	800455e <LL_ADC_REG_IsConversionOngoing>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d14a      	bne.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004600:	2b00      	cmp	r3, #0
 8004602:	d147      	bne.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004604:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004606:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d027      	beq.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004622:	035b      	lsls	r3, r3, #13
 8004624:	430b      	orrs	r3, r1
 8004626:	431a      	orrs	r2, r3
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800462c:	4824      	ldr	r0, [pc, #144]	; (80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800462e:	f7ff ff83 	bl	8004538 <LL_ADC_IsEnabled>
 8004632:	4604      	mov	r4, r0
 8004634:	4823      	ldr	r0, [pc, #140]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004636:	f7ff ff7f 	bl	8004538 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	4323      	orrs	r3, r4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d132      	bne.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800464a:	f023 030f 	bic.w	r3, r3, #15
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	6811      	ldr	r1, [r2, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	6892      	ldr	r2, [r2, #8]
 8004656:	430a      	orrs	r2, r1
 8004658:	431a      	orrs	r2, r3
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800465e:	e023      	b.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800466c:	4814      	ldr	r0, [pc, #80]	; (80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800466e:	f7ff ff63 	bl	8004538 <LL_ADC_IsEnabled>
 8004672:	4604      	mov	r4, r0
 8004674:	4813      	ldr	r0, [pc, #76]	; (80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004676:	f7ff ff5f 	bl	8004538 <LL_ADC_IsEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	4323      	orrs	r3, r4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d112      	bne.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800468a:	f023 030f 	bic.w	r3, r3, #15
 800468e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004690:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004692:	e009      	b.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80046a6:	e000      	b.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	377c      	adds	r7, #124	; 0x7c
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}
 80046be:	bf00      	nop
 80046c0:	50040000 	.word	0x50040000
 80046c4:	50040100 	.word	0x50040100
 80046c8:	50040300 	.word	0x50040300

080046cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <__NVIC_SetPriorityGrouping+0x44>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046e8:	4013      	ands	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046fe:	4a04      	ldr	r2, [pc, #16]	; (8004710 <__NVIC_SetPriorityGrouping+0x44>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	60d3      	str	r3, [r2, #12]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <__NVIC_GetPriorityGrouping+0x18>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0307 	and.w	r3, r3, #7
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db0b      	blt.n	800475a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4907      	ldr	r1, [pc, #28]	; (8004768 <__NVIC_EnableIRQ+0x38>)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2001      	movs	r0, #1
 8004752:	fa00 f202 	lsl.w	r2, r0, r2
 8004756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	e000e100 	.word	0xe000e100

0800476c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	db0a      	blt.n	8004796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	490c      	ldr	r1, [pc, #48]	; (80047b8 <__NVIC_SetPriority+0x4c>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	440b      	add	r3, r1
 8004790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004794:	e00a      	b.n	80047ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4908      	ldr	r1, [pc, #32]	; (80047bc <__NVIC_SetPriority+0x50>)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	3b04      	subs	r3, #4
 80047a4:	0112      	lsls	r2, r2, #4
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	440b      	add	r3, r1
 80047aa:	761a      	strb	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000e100 	.word	0xe000e100
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f1c3 0307 	rsb	r3, r3, #7
 80047da:	2b04      	cmp	r3, #4
 80047dc:	bf28      	it	cs
 80047de:	2304      	movcs	r3, #4
 80047e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d902      	bls.n	80047f0 <NVIC_EncodePriority+0x30>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3b03      	subs	r3, #3
 80047ee:	e000      	b.n	80047f2 <NVIC_EncodePriority+0x32>
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	401a      	ands	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004808:	f04f 31ff 	mov.w	r1, #4294967295
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43d9      	mvns	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004818:	4313      	orrs	r3, r2
         );
}
 800481a:	4618      	mov	r0, r3
 800481c:	3724      	adds	r7, #36	; 0x24
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004838:	d301      	bcc.n	800483e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800483a:	2301      	movs	r3, #1
 800483c:	e00f      	b.n	800485e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800483e:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <SysTick_Config+0x40>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004846:	210f      	movs	r1, #15
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	f7ff ff8e 	bl	800476c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <SysTick_Config+0x40>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <SysTick_Config+0x40>)
 8004858:	2207      	movs	r2, #7
 800485a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000e010 	.word	0xe000e010

0800486c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff29 	bl	80046cc <__NVIC_SetPriorityGrouping>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004894:	f7ff ff3e 	bl	8004714 <__NVIC_GetPriorityGrouping>
 8004898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff ff8e 	bl	80047c0 <NVIC_EncodePriority>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff5d 	bl	800476c <__NVIC_SetPriority>
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff31 	bl	8004730 <__NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffa2 	bl	8004828 <SysTick_Config>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fe:	e14e      	b.n	8004b9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8140 	beq.w	8004b98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d005      	beq.n	8004930 <HAL_GPIO_Init+0x40>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d130      	bne.n	8004992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004966:	2201      	movs	r2, #1
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0201 	and.w	r2, r3, #1
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d017      	beq.n	80049ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d123      	bne.n	8004a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	08da      	lsrs	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3208      	adds	r2, #8
 80049e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	6939      	ldr	r1, [r7, #16]
 8004a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 809a 	beq.w	8004b98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a64:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <HAL_GPIO_Init+0x2cc>)
 8004a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a68:	4a54      	ldr	r2, [pc, #336]	; (8004bbc <HAL_GPIO_Init+0x2cc>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8004a70:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <HAL_GPIO_Init+0x2cc>)
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a7c:	4a50      	ldr	r2, [pc, #320]	; (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	3302      	adds	r3, #2
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004aa6:	d013      	beq.n	8004ad0 <HAL_GPIO_Init+0x1e0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a46      	ldr	r2, [pc, #280]	; (8004bc4 <HAL_GPIO_Init+0x2d4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00d      	beq.n	8004acc <HAL_GPIO_Init+0x1dc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a45      	ldr	r2, [pc, #276]	; (8004bc8 <HAL_GPIO_Init+0x2d8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <HAL_GPIO_Init+0x1d8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a44      	ldr	r2, [pc, #272]	; (8004bcc <HAL_GPIO_Init+0x2dc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_GPIO_Init+0x1d4>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <HAL_GPIO_Init+0x1e2>
 8004ac4:	2307      	movs	r3, #7
 8004ac6:	e004      	b.n	8004ad2 <HAL_GPIO_Init+0x1e2>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e002      	b.n	8004ad2 <HAL_GPIO_Init+0x1e2>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_GPIO_Init+0x1e2>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	f002 0203 	and.w	r2, r2, #3
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	4093      	lsls	r3, r2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ae2:	4937      	ldr	r1, [pc, #220]	; (8004bc0 <HAL_GPIO_Init+0x2d0>)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004af0:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4013      	ands	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b14:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b3e:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b44:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43db      	mvns	r3, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b92:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <HAL_GPIO_Init+0x2e0>)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f aea9 	bne.w	8004900 <HAL_GPIO_Init+0x10>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	48000400 	.word	0x48000400
 8004bc8:	48000800 	.word	0x48000800
 8004bcc:	48000c00 	.word	0x48000c00
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	887b      	ldrh	r3, [r7, #2]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e001      	b.n	8004bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
 8004c10:	4613      	mov	r3, r2
 8004c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c14:	787b      	ldrb	r3, [r7, #1]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c20:	e002      	b.n	8004c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	041a      	lsls	r2, r3, #16
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43d9      	mvns	r1, r3
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	400b      	ands	r3, r1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6a:	b08b      	sub	sp, #44	; 0x2c
 8004c6c:	af06      	add	r7, sp, #24
 8004c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e109      	b.n	8004e8e <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f008 fd84 	bl	800d79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 fc63 	bl	800956c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	687e      	ldr	r6, [r7, #4]
 8004cae:	466d      	mov	r5, sp
 8004cb0:	f106 0410 	add.w	r4, r6, #16
 8004cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cc0:	1d33      	adds	r3, r6, #4
 8004cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f004 fc29 	bl	800951c <USB_CoreInit>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0d8      	b.n	8004e8e <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f004 fc5d 	bl	80095a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e04d      	b.n	8004d8a <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3305      	adds	r3, #5
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	440b      	add	r3, r1
 8004d14:	3304      	adds	r3, #4
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	b298      	uxth	r0, r3
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	440b      	add	r3, r1
 8004d2c:	333a      	adds	r3, #58	; 0x3a
 8004d2e:	4602      	mov	r2, r0
 8004d30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	440b      	add	r3, r1
 8004d42:	3307      	adds	r3, #7
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	333c      	adds	r3, #60	; 0x3c
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	3340      	adds	r3, #64	; 0x40
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3344      	adds	r3, #68	; 0x44
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	3301      	adds	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3ac      	bcc.n	8004cee <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e044      	b.n	8004e24 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	440b      	add	r3, r1
 8004da8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	440b      	add	r3, r1
 8004e00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	440b      	add	r3, r1
 8004e16:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	3301      	adds	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d3b5      	bcc.n	8004d9a <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	687e      	ldr	r6, [r7, #4]
 8004e36:	466d      	mov	r5, sp
 8004e38:	f106 0410 	add.w	r4, r6, #16
 8004e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e48:	1d33      	adds	r3, r6, #4
 8004e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e4c:	6838      	ldr	r0, [r7, #0]
 8004e4e:	f004 fbb5 	bl	80095bc <USB_DevInit>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e014      	b.n	8004e8e <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d102      	bne.n	8004e82 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fc55 	bl	800672c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f006 fdc1 	bl	800ba0e <USB_DevDisconnect>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_Start+0x16>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e012      	b.n	8004ed2 <HAL_PCD_Start+0x3c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f004 fb40 	bl	800953e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f006 fd8c 	bl	800b9e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f006 fda6 	bl	800ba38 <USB_ReadInterrupts>
 8004eec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb3e 	bl	800557a <PCD_EP_ISR_Handler>

    return;
 8004efe:	e110      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d013      	beq.n	8004f32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f008 fcf1 	bl	800d90a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8fc 	bl	8005128 <HAL_PCD_SetAddress>

    return;
 8004f30:	e0f7      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004f54:	e0e5      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00c      	beq.n	8004f7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f72:	b292      	uxth	r2, r2
 8004f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004f78:	e0d3      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d034      	beq.n	8004fee <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	b292      	uxth	r2, r2
 8004f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0208 	bic.w	r2, r2, #8
 8004fae:	b292      	uxth	r2, r2
 8004fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f008 ff4f 	bl	800de6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f008 fcd4 	bl	800d97c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fe6:	b292      	uxth	r2, r2
 8004fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004fec:	e099      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d027      	beq.n	8005048 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	b292      	uxth	r2, r2
 800500c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005022:	b292      	uxth	r2, r2
 8005024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0204 	orr.w	r2, r2, #4
 800503a:	b292      	uxth	r2, r2
 800503c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f008 fc81 	bl	800d948 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005046:	e06c      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b00      	cmp	r3, #0
 8005050:	d040      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005064:	b292      	uxth	r2, r2
 8005066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d12b      	bne.n	80050cc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0204 	orr.w	r2, r2, #4
 8005086:	b292      	uxth	r2, r2
 8005088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	b292      	uxth	r2, r2
 80050a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050c2:	2101      	movs	r1, #1
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f008 fed1 	bl	800de6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050ca:	e02a      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f008 fc3b 	bl	800d948 <HAL_PCD_SuspendCallback>
    return;
 80050d2:	e026      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00f      	beq.n	80050fe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050f0:	b292      	uxth	r2, r2
 80050f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f008 fbf9 	bl	800d8ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050fc:	e011      	b.n	8005122 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00c      	beq.n	8005122 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800511a:	b292      	uxth	r2, r2
 800511c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005120:	bf00      	nop
  }
}
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_PCD_SetAddress+0x1a>
 800513e:	2302      	movs	r3, #2
 8005140:	e013      	b.n	800516a <HAL_PCD_SetAddress+0x42>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f006 fc2c 	bl	800b9b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	461a      	mov	r2, r3
 8005180:	4603      	mov	r3, r0
 8005182:	70fb      	strb	r3, [r7, #3]
 8005184:	460b      	mov	r3, r1
 8005186:	803b      	strh	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005194:	2b00      	cmp	r3, #0
 8005196:	da0f      	bge.n	80051b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	705a      	strb	r2, [r3, #1]
 80051b6:	e00f      	b.n	80051d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 0207 	and.w	r2, r3, #7
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	3304      	adds	r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051e4:	883a      	ldrh	r2, [r7, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	78ba      	ldrb	r2, [r7, #2]
 80051ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005202:	78bb      	ldrb	r3, [r7, #2]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d102      	bne.n	800520e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_PCD_EP_Open+0xaa>
 8005218:	2302      	movs	r3, #2
 800521a:	e00e      	b.n	800523a <HAL_PCD_EP_Open+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	f004 f9e8 	bl	8009600 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005238:	7afb      	ldrb	r3, [r7, #11]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800524e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005252:	2b00      	cmp	r3, #0
 8005254:	da0f      	bge.n	8005276 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	705a      	strb	r2, [r3, #1]
 8005274:	e00f      	b.n	8005296 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0207 	and.w	r2, r3, #7
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	3304      	adds	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_PCD_EP_Close+0x6e>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e00e      	b.n	80052ce <HAL_PCD_EP_Close+0x8c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	4618      	mov	r0, r3
 80052c0:	f004 fd58 	bl	8009d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	460b      	mov	r3, r1
 80052e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	f003 0207 	and.w	r2, r3, #7
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	b2da      	uxtb	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	4618      	mov	r0, r3
 8005336:	f004 ff0a 	bl	800a14e <USB_EPStartXfer>
 800533a:	e005      	b.n	8005348 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	4618      	mov	r0, r3
 8005344:	f004 ff03 	bl	800a14e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	f003 0207 	and.w	r2, r3, #7
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005374:	681b      	ldr	r3, [r3, #0]
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	460b      	mov	r3, r1
 8005390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	3304      	adds	r3, #4
 80053a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2200      	movs	r2, #0
 80053c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2201      	movs	r2, #1
 80053ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f004 feae 	bl	800a14e <USB_EPStartXfer>
 80053f2:	e005      	b.n	8005400 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f004 fea7 	bl	800a14e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	f003 0207 	and.w	r2, r3, #7
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d901      	bls.n	8005428 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e04e      	b.n	80054c6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da0f      	bge.n	8005450 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	3304      	adds	r3, #4
 8005446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	705a      	strb	r2, [r3, #1]
 800544e:	e00d      	b.n	800546c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	3304      	adds	r3, #4
 8005464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_PCD_EP_SetStall+0x82>
 8005488:	2302      	movs	r3, #2
 800548a:	e01c      	b.n	80054c6 <HAL_PCD_EP_SetStall+0xbc>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	f006 f98d 	bl	800b7ba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f006 face 	bl	800ba58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d901      	bls.n	80054ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e042      	b.n	8005572 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da0f      	bge.n	8005514 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	3304      	adds	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	705a      	strb	r2, [r3, #1]
 8005512:	e00f      	b.n	8005534 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 0207 	and.w	r2, r3, #7
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	3304      	adds	r3, #4
 800552c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_PCD_EP_ClrStall+0x86>
 8005550:	2302      	movs	r3, #2
 8005552:	e00e      	b.n	8005572 <HAL_PCD_EP_ClrStall+0xa4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	f006 f97a 	bl	800b85c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b096      	sub	sp, #88	; 0x58
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005582:	e3a9      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800558c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005590:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800559e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8169 	bne.w	800587a <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d150      	bne.n	8005656 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	81fb      	strh	r3, [r7, #14]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	332c      	adds	r3, #44	; 0x2c
 80055dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	4413      	add	r3, r2
 80055f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	441a      	add	r2, r3
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005614:	2100      	movs	r1, #0
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f008 f94f 	bl	800d8ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8357 	beq.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 8352 	bne.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005640:	b2da      	uxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	b292      	uxth	r2, r2
 8005648:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005654:	e340      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800565c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005668:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005670:	2b00      	cmp	r3, #0
 8005672:	d032      	beq.n	80056da <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800567c:	b29b      	uxth	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4413      	add	r3, r2
 800568e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f006 fa20 	bl	800baf4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056c0:	4013      	ands	r3, r2
 80056c2:	823b      	strh	r3, [r7, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	8a3a      	ldrh	r2, [r7, #16]
 80056ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ce:	b292      	uxth	r2, r2
 80056d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f008 f8c4 	bl	800d860 <HAL_PCD_SetupStageCallback>
 80056d8:	e2fe      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056da:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f280 82fa 	bge.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056f0:	4013      	ands	r3, r2
 80056f2:	83fb      	strh	r3, [r7, #30]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	8bfa      	ldrh	r2, [r7, #30]
 80056fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056fe:	b292      	uxth	r2, r2
 8005700:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	4413      	add	r3, r2
 800571c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <PCD_EP_ISR_Handler+0x1ec>
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d015      	beq.n	8005766 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	6959      	ldr	r1, [r3, #20]
 8005742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005744:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800574a:	b29b      	uxth	r3, r3
 800574c:	f006 f9d2 	bl	800baf4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	441a      	add	r2, r3
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800575e:	2100      	movs	r1, #0
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f008 f88f 	bl	800d884 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005770:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	f040 82ad 	bne.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
 800577e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005782:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800578a:	f000 82a5 	beq.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	4413      	add	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b3e      	cmp	r3, #62	; 0x3e
 80057b4:	d918      	bls.n	80057e8 <PCD_EP_ISR_Handler+0x26e>
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <PCD_EP_ISR_Handler+0x256>
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	3b01      	subs	r3, #1
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
 80057d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	029b      	lsls	r3, r3, #10
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e029      	b.n	800583c <PCD_EP_ISR_Handler+0x2c2>
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d112      	bne.n	8005816 <PCD_EP_ISR_Handler+0x29c>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580e:	b29a      	uxth	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e012      	b.n	800583c <PCD_EP_ISR_Handler+0x2c2>
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <PCD_EP_ISR_Handler+0x2b6>
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	3301      	adds	r3, #1
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
 8005830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005832:	b29b      	uxth	r3, r3
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	b29a      	uxth	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	827b      	strh	r3, [r7, #18]
 800584e:	8a7b      	ldrh	r3, [r7, #18]
 8005850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005854:	827b      	strh	r3, [r7, #18]
 8005856:	8a7b      	ldrh	r3, [r7, #18]
 8005858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800585c:	827b      	strh	r3, [r7, #18]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	8a7b      	ldrh	r3, [r7, #18]
 8005864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]
 8005878:	e22e      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800588e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005892:	2b00      	cmp	r3, #0
 8005894:	f280 80f7 	bge.w	8005a86 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80058c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058ce:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	3304      	adds	r3, #4
 80058e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	7b1b      	ldrb	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d123      	bne.n	8005936 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	4413      	add	r3, r2
 8005908:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005912:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005916:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 808e 	beq.w	8005a3c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005926:	6959      	ldr	r1, [r3, #20]
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	88da      	ldrh	r2, [r3, #6]
 800592c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005930:	f006 f8e0 	bl	800baf4 <USB_ReadPMA>
 8005934:	e082      	b.n	8005a3c <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	78db      	ldrb	r3, [r3, #3]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d10a      	bne.n	8005954 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800593e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005942:	461a      	mov	r2, r3
 8005944:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9d4 	bl	8005cf4 <HAL_PCD_EP_DB_Receive>
 800594c:	4603      	mov	r3, r0
 800594e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005952:	e073      	b.n	8005a3c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d022      	beq.n	80059f8 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	4413      	add	r3, r2
 80059cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80059da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02c      	beq.n	8005a3c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	6959      	ldr	r1, [r3, #20]
 80059ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ec:	891a      	ldrh	r2, [r3, #8]
 80059ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059f2:	f006 f87f 	bl	800baf4 <USB_ReadPMA>
 80059f6:	e021      	b.n	8005a3c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005a20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2e:	6959      	ldr	r1, [r3, #20]
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	895a      	ldrh	r2, [r3, #10]
 8005a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a38:	f006 f85c 	bl	800baf4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a44:	441a      	add	r2, r3
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a52:	441a      	add	r2, r3
 8005a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <PCD_EP_ISR_Handler+0x4f2>
 8005a60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d206      	bcs.n	8005a7a <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f007 ff06 	bl	800d884 <HAL_PCD_DataOutStageCallback>
 8005a78:	e005      	b.n	8005a86 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a80:	4618      	mov	r0, r3
 8005a82:	f004 fb64 	bl	800a14e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8122 	beq.w	8005cd8 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a94:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	78db      	ldrb	r3, [r3, #3]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f040 80a2 	bne.w	8005c34 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	2200      	movs	r2, #0
 8005af4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	7b1b      	ldrb	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8093 	beq.w	8005c26 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d046      	beq.n	8005b9a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d126      	bne.n	8005b62 <PCD_EP_ISR_Handler+0x5e8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	4413      	add	r3, r2
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	00da      	lsls	r2, r3, #3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e061      	b.n	8005c26 <PCD_EP_ISR_Handler+0x6ac>
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d15d      	bne.n	8005c26 <PCD_EP_ISR_Handler+0x6ac>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	4413      	add	r3, r2
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	00da      	lsls	r2, r3, #3
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2200      	movs	r2, #0
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e045      	b.n	8005c26 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d126      	bne.n	8005bf6 <PCD_EP_ISR_Handler+0x67c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	4413      	add	r3, r2
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	00da      	lsls	r2, r3, #3
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	4413      	add	r3, r2
 8005bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e017      	b.n	8005c26 <PCD_EP_ISR_Handler+0x6ac>
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d113      	bne.n	8005c26 <PCD_EP_ISR_Handler+0x6ac>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	4413      	add	r3, r2
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00da      	lsls	r2, r3, #3
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	4413      	add	r3, r2
 8005c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	2200      	movs	r2, #0
 8005c24:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f007 fe44 	bl	800d8ba <HAL_PCD_DataInStageCallback>
 8005c32:	e051      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c34:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d144      	bne.n	8005cca <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4413      	add	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d907      	bls.n	8005c84 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	619a      	str	r2, [r3, #24]
 8005c82:	e002      	b.n	8005c8a <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f007 fe0e 	bl	800d8ba <HAL_PCD_DataInStageCallback>
 8005c9e:	e01b      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ca8:	441a      	add	r2, r3
 8005caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cb6:	441a      	add	r2, r3
 8005cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f004 fa43 	bl	800a14e <USB_EPStartXfer>
 8005cc8:	e006      	b.n	8005cd8 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005cca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f917 	bl	8005f06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f6ff ac4d 	blt.w	8005584 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3758      	adds	r7, #88	; 0x58
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07c      	beq.n	8005e06 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4413      	add	r3, r2
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	8b7b      	ldrh	r3, [r7, #26]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d306      	bcc.n	8005d4a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	8b7b      	ldrh	r3, [r7, #26]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	619a      	str	r2, [r3, #24]
 8005d48:	e002      	b.n	8005d50 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d123      	bne.n	8005da0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	833b      	strh	r3, [r7, #24]
 8005d74:	8b3b      	ldrh	r3, [r7, #24]
 8005d76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d7a:	833b      	strh	r3, [r7, #24]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	441a      	add	r2, r3
 8005d8a:	8b3b      	ldrh	r3, [r7, #24]
 8005d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01f      	beq.n	8005dea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	82fb      	strh	r3, [r7, #22]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8afb      	ldrh	r3, [r7, #22]
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005dea:	8b7b      	ldrh	r3, [r7, #26]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8085 	beq.w	8005efc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6959      	ldr	r1, [r3, #20]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	891a      	ldrh	r2, [r3, #8]
 8005dfe:	8b7b      	ldrh	r3, [r7, #26]
 8005e00:	f005 fe78 	bl	800baf4 <USB_ReadPMA>
 8005e04:	e07a      	b.n	8005efc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	8b7b      	ldrh	r3, [r7, #26]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d306      	bcc.n	8005e44 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	8b7b      	ldrh	r3, [r7, #26]
 8005e3c:	1ad2      	subs	r2, r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	619a      	str	r2, [r3, #24]
 8005e42:	e002      	b.n	8005e4a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d123      	bne.n	8005e9a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	83fb      	strh	r3, [r7, #30]
 8005e6e:	8bfb      	ldrh	r3, [r7, #30]
 8005e70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e74:	83fb      	strh	r3, [r7, #30]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11f      	bne.n	8005ee4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	83bb      	strh	r3, [r7, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	8bbb      	ldrh	r3, [r7, #28]
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ee4:	8b7b      	ldrh	r3, [r7, #26]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6959      	ldr	r1, [r3, #20]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	895a      	ldrh	r2, [r3, #10]
 8005ef6:	8b7b      	ldrh	r3, [r7, #26]
 8005ef8:	f005 fdfc 	bl	800baf4 <USB_ReadPMA>
    }
  }

  return count;
 8005efc:	8b7b      	ldrh	r3, [r7, #26]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b0a2      	sub	sp, #136	; 0x88
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 81c5 	beq.w	80062aa <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d907      	bls.n	8005f64 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	619a      	str	r2, [r3, #24]
 8005f62:	e002      	b.n	8005f6a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2200      	movs	r2, #0
 8005f68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 80b9 	bne.w	80060e6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d126      	bne.n	8005fca <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	4413      	add	r3, r2
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00da      	lsls	r2, r3, #3
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e01a      	b.n	8006000 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d116      	bne.n	8006000 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	4413      	add	r3, r2
 8005fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d126      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0x156>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	00da      	lsls	r2, r3, #3
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	4413      	add	r3, r2
 8006030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006040:	b29a      	uxth	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006054:	b29a      	uxth	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e017      	b.n	800608c <HAL_PCD_EP_DB_Transmit+0x186>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d113      	bne.n	800608c <HAL_PCD_EP_DB_Transmit+0x186>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	4413      	add	r3, r2
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	00da      	lsls	r2, r3, #3
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	4413      	add	r3, r2
 8006080:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f007 fc11 	bl	800d8ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 82d2 	beq.w	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	827b      	strh	r3, [r7, #18]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	8a7b      	ldrh	r3, [r7, #18]
 80060d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	8013      	strh	r3, [r2, #0]
 80060e4:	e2b0      	b.n	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d021      	beq.n	8006134 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006130:	b29b      	uxth	r3, r3
 8006132:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800613a:	2b01      	cmp	r3, #1
 800613c:	f040 8284 	bne.w	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006148:	441a      	add	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006156:	441a      	add	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	429a      	cmp	r2, r3
 8006166:	d309      	bcc.n	800617c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	621a      	str	r2, [r3, #32]
 800617a:	e015      	b.n	80061a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006188:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006192:	e009      	b.n	80061a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d155      	bne.n	800625c <HAL_PCD_EP_DB_Transmit+0x356>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	4413      	add	r3, r2
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00da      	lsls	r2, r3, #3
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061da:	2b3e      	cmp	r3, #62	; 0x3e
 80061dc:	d916      	bls.n	800620c <HAL_PCD_EP_DB_Transmit+0x306>
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80061ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f0:	3b01      	subs	r3, #1
 80061f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e043      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x38e>
 800620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620e:	2b00      	cmp	r3, #0
 8006210:	d112      	bne.n	8006238 <HAL_PCD_EP_DB_Transmit+0x332>
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800621c:	b29a      	uxth	r2, r3
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006230:	b29a      	uxth	r2, r3
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e02d      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	64bb      	str	r3, [r7, #72]	; 0x48
 800623e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_PCD_EP_DB_Transmit+0x348>
 8006248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624a:	3301      	adds	r3, #1
 800624c:	64bb      	str	r3, [r7, #72]	; 0x48
 800624e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006250:	b29b      	uxth	r3, r3
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e01b      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x38e>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d117      	bne.n	8006294 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	643b      	str	r3, [r7, #64]	; 0x40
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006278:	4413      	add	r3, r2
 800627a:	643b      	str	r3, [r7, #64]	; 0x40
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	00da      	lsls	r2, r3, #3
 8006282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006284:	4413      	add	r3, r2
 8006286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800628c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628e:	b29a      	uxth	r2, r3
 8006290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006292:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6959      	ldr	r1, [r3, #20]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	891a      	ldrh	r2, [r3, #8]
 80062a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f005 fbe4 	bl	800ba70 <USB_WritePMA>
 80062a8:	e1ce      	b.n	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4413      	add	r3, r2
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062da:	429a      	cmp	r2, r3
 80062dc:	d307      	bcc.n	80062ee <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062e6:	1ad2      	subs	r2, r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	619a      	str	r2, [r3, #24]
 80062ec:	e002      	b.n	80062f4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2200      	movs	r2, #0
 80062f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 80c4 	bne.w	8006486 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d126      	bne.n	8006354 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631a:	4413      	add	r3, r2
 800631c:	66bb      	str	r3, [r7, #104]	; 0x68
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	00da      	lsls	r2, r3, #3
 8006324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006326:	4413      	add	r3, r2
 8006328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800632c:	667b      	str	r3, [r7, #100]	; 0x64
 800632e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006338:	b29a      	uxth	r2, r3
 800633a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e01a      	b.n	800638a <HAL_PCD_EP_DB_Transmit+0x484>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d116      	bne.n	800638a <HAL_PCD_EP_DB_Transmit+0x484>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	673b      	str	r3, [r7, #112]	; 0x70
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006370:	4413      	add	r3, r2
 8006372:	673b      	str	r3, [r7, #112]	; 0x70
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00da      	lsls	r2, r3, #3
 800637a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637c:	4413      	add	r3, r2
 800637e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	2200      	movs	r2, #0
 8006388:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d12f      	bne.n	80063f8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b0:	4413      	add	r3, r2
 80063b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	00da      	lsls	r2, r3, #3
 80063bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	e017      	b.n	8006428 <HAL_PCD_EP_DB_Transmit+0x522>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d113      	bne.n	8006428 <HAL_PCD_EP_DB_Transmit+0x522>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	4413      	add	r3, r2
 8006410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00da      	lsls	r2, r3, #3
 8006418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641a:	4413      	add	r3, r2
 800641c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006420:	67bb      	str	r3, [r7, #120]	; 0x78
 8006422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006424:	2200      	movs	r2, #0
 8006426:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	4619      	mov	r1, r3
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f007 fa43 	bl	800d8ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 8104 	bne.w	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]
 8006484:	e0e0      	b.n	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d121      	bne.n	80064d4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f040 80b4 	bne.w	8006648 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064e8:	441a      	add	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064f6:	441a      	add	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d309      	bcc.n	800651c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	621a      	str	r2, [r3, #32]
 800651a:	e015      	b.n	8006548 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006528:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006532:	e009      	b.n	8006548 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	663b      	str	r3, [r7, #96]	; 0x60
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d155      	bne.n	8006602 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	65bb      	str	r3, [r7, #88]	; 0x58
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800656a:	4413      	add	r3, r2
 800656c:	65bb      	str	r3, [r7, #88]	; 0x58
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	00da      	lsls	r2, r3, #3
 8006574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006576:	4413      	add	r3, r2
 8006578:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800657c:	657b      	str	r3, [r7, #84]	; 0x54
 800657e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006580:	2b3e      	cmp	r3, #62	; 0x3e
 8006582:	d916      	bls.n	80065b2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	677b      	str	r3, [r7, #116]	; 0x74
 800658a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <HAL_PCD_EP_DB_Transmit+0x694>
 8006594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006596:	3b01      	subs	r3, #1
 8006598:	677b      	str	r3, [r7, #116]	; 0x74
 800659a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800659c:	b29b      	uxth	r3, r3
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e040      	b.n	8006634 <HAL_PCD_EP_DB_Transmit+0x72e>
 80065b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d112      	bne.n	80065de <HAL_PCD_EP_DB_Transmit+0x6d8>
 80065b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e02a      	b.n	8006634 <HAL_PCD_EP_DB_Transmit+0x72e>
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	677b      	str	r3, [r7, #116]	; 0x74
 80065e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80065ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f0:	3301      	adds	r3, #1
 80065f2:	677b      	str	r3, [r7, #116]	; 0x74
 80065f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e018      	b.n	8006634 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d114      	bne.n	8006634 <HAL_PCD_EP_DB_Transmit+0x72e>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006618:	4413      	add	r3, r2
 800661a:	663b      	str	r3, [r7, #96]	; 0x60
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	00da      	lsls	r2, r3, #3
 8006622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006624:	4413      	add	r3, r2
 8006626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800662a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800662c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662e:	b29a      	uxth	r2, r3
 8006630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006632:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	6959      	ldr	r1, [r3, #20]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	895a      	ldrh	r2, [r3, #10]
 8006640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	f005 fa14 	bl	800ba70 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006662:	823b      	strh	r3, [r7, #16]
 8006664:	8a3b      	ldrh	r3, [r7, #16]
 8006666:	f083 0310 	eor.w	r3, r3, #16
 800666a:	823b      	strh	r3, [r7, #16]
 800666c:	8a3b      	ldrh	r3, [r7, #16]
 800666e:	f083 0320 	eor.w	r3, r3, #32
 8006672:	823b      	strh	r3, [r7, #16]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	8a3b      	ldrh	r3, [r7, #16]
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3788      	adds	r7, #136	; 0x88
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	817b      	strh	r3, [r7, #10]
 80066b0:	4613      	mov	r3, r2
 80066b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066b4:	897b      	ldrh	r3, [r7, #10]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066c0:	897b      	ldrh	r3, [r7, #10]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	3304      	adds	r3, #4
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e00a      	b.n	80066f0 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066da:	897a      	ldrh	r2, [r7, #10]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	3304      	adds	r3, #4
 80066ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066f0:	893b      	ldrh	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	80da      	strh	r2, [r3, #6]
 8006704:	e00b      	b.n	800671e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2201      	movs	r2, #1
 800670a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	b29a      	uxth	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	b29a      	uxth	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006750:	b29b      	uxth	r3, r3
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006764:	b29b      	uxth	r3, r3
 8006766:	f043 0302 	orr.w	r3, r3, #2
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_PWREx_GetVoltageRange+0x18>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40007000 	.word	0x40007000

0800679c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067aa:	d130      	bne.n	800680e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ac:	4b23      	ldr	r3, [pc, #140]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b8:	d038      	beq.n	800682c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ba:	4b20      	ldr	r3, [pc, #128]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067c2:	4a1e      	ldr	r2, [pc, #120]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2232      	movs	r2, #50	; 0x32
 80067d0:	fb02 f303 	mul.w	r3, r2, r3
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0c9b      	lsrs	r3, r3, #18
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e0:	e002      	b.n	80067e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e8:	4b14      	ldr	r3, [pc, #80]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d102      	bne.n	80067fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f2      	bne.n	80067e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	d110      	bne.n	800682c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e00f      	b.n	800682e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681a:	d007      	beq.n	800682c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006824:	4a05      	ldr	r2, [pc, #20]	; (800683c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40007000 	.word	0x40007000
 8006840:	20000004 	.word	0x20000004
 8006844:	431bde83 	.word	0x431bde83

08006848 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_PWREx_EnableVddUSB+0x1c>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006856:	6053      	str	r3, [r2, #4]
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40007000 	.word	0x40007000

08006868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f000 bc4f 	b.w	800711a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800687c:	4b97      	ldr	r3, [pc, #604]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 030c 	and.w	r3, r3, #12
 8006884:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006886:	4b95      	ldr	r3, [pc, #596]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80e6 	beq.w	8006a6a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <HAL_RCC_OscConfig+0x4c>
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b0c      	cmp	r3, #12
 80068a8:	f040 808d 	bne.w	80069c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	f040 8089 	bne.w	80069c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068b4:	4b89      	ldr	r3, [pc, #548]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d006      	beq.n	80068ce <HAL_RCC_OscConfig+0x66>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f000 bc26 	b.w	800711a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d2:	4b82      	ldr	r3, [pc, #520]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_RCC_OscConfig+0x80>
 80068de:	4b7f      	ldr	r3, [pc, #508]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068e6:	e005      	b.n	80068f4 <HAL_RCC_OscConfig+0x8c>
 80068e8:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80068ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d224      	bcs.n	8006942 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fda1 	bl	8007444 <RCC_SetFlashLatencyFromMSIRange>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f000 bc06 	b.w	800711a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800690e:	4b73      	ldr	r3, [pc, #460]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a72      	ldr	r2, [pc, #456]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006914:	f043 0308 	orr.w	r3, r3, #8
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b70      	ldr	r3, [pc, #448]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	496d      	ldr	r1, [pc, #436]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800692c:	4b6b      	ldr	r3, [pc, #428]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	4968      	ldr	r1, [pc, #416]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 800693c:	4313      	orrs	r3, r2
 800693e:	604b      	str	r3, [r1, #4]
 8006940:	e025      	b.n	800698e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006942:	4b66      	ldr	r3, [pc, #408]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006948:	f043 0308 	orr.w	r3, r3, #8
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	4b63      	ldr	r3, [pc, #396]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	4960      	ldr	r1, [pc, #384]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006960:	4b5e      	ldr	r3, [pc, #376]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	495b      	ldr	r1, [pc, #364]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006970:	4313      	orrs	r3, r2
 8006972:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fd60 	bl	8007444 <RCC_SetFlashLatencyFromMSIRange>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e3c5      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800698e:	f000 fccd 	bl	800732c <HAL_RCC_GetSysClockFreq>
 8006992:	4602      	mov	r2, r0
 8006994:	4b51      	ldr	r3, [pc, #324]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	4950      	ldr	r1, [pc, #320]	; (8006ae0 <HAL_RCC_OscConfig+0x278>)
 80069a0:	5ccb      	ldrb	r3, [r1, r3]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	fa22 f303 	lsr.w	r3, r2, r3
 80069aa:	4a4e      	ldr	r2, [pc, #312]	; (8006ae4 <HAL_RCC_OscConfig+0x27c>)
 80069ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069ae:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <HAL_RCC_OscConfig+0x280>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fc fe54 	bl	8003660 <HAL_InitTick>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d052      	beq.n	8006a68 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	e3a9      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d032      	beq.n	8006a34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069ce:	4b43      	ldr	r3, [pc, #268]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a42      	ldr	r2, [pc, #264]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069da:	f7fc fe91 	bl	8003700 <HAL_GetTick>
 80069de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e2:	f7fc fe8d 	bl	8003700 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e392      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a35      	ldr	r2, [pc, #212]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a06:	f043 0308 	orr.w	r3, r3, #8
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4b33      	ldr	r3, [pc, #204]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	4930      	ldr	r1, [pc, #192]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a1e:	4b2f      	ldr	r3, [pc, #188]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	492b      	ldr	r1, [pc, #172]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	604b      	str	r3, [r1, #4]
 8006a32:	e01a      	b.n	8006a6a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a34:	4b29      	ldr	r3, [pc, #164]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a28      	ldr	r2, [pc, #160]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a40:	f7fc fe5e 	bl	8003700 <HAL_GetTick>
 8006a44:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a48:	f7fc fe5a 	bl	8003700 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e35f      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a5a:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x1e0>
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d073      	beq.n	8006b5e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d005      	beq.n	8006a88 <HAL_RCC_OscConfig+0x220>
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	2b0c      	cmp	r3, #12
 8006a80:	d10e      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d10b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	4b14      	ldr	r3, [pc, #80]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d063      	beq.n	8006b5c <HAL_RCC_OscConfig+0x2f4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d15f      	bne.n	8006b5c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e33c      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d106      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x250>
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e025      	b.n	8006b04 <HAL_RCC_OscConfig+0x29c>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac0:	d114      	bne.n	8006aec <HAL_RCC_OscConfig+0x284>
 8006ac2:	4b06      	ldr	r3, [pc, #24]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a05      	ldr	r2, [pc, #20]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a02      	ldr	r2, [pc, #8]	; (8006adc <HAL_RCC_OscConfig+0x274>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e013      	b.n	8006b04 <HAL_RCC_OscConfig+0x29c>
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	0800e280 	.word	0x0800e280
 8006ae4:	20000004 	.word	0x20000004
 8006ae8:	20000008 	.word	0x20000008
 8006aec:	4b8f      	ldr	r3, [pc, #572]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a8e      	ldr	r2, [pc, #568]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4b8c      	ldr	r3, [pc, #560]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a8b      	ldr	r2, [pc, #556]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fc fdf8 	bl	8003700 <HAL_GetTick>
 8006b10:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b14:	f7fc fdf4 	bl	8003700 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	; 0x64
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e2f9      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b26:	4b81      	ldr	r3, [pc, #516]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x2ac>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc fde4 	bl	8003700 <HAL_GetTick>
 8006b38:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fc fde0 	bl	8003700 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e2e5      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b4e:	4b77      	ldr	r3, [pc, #476]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x2d4>
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d060      	beq.n	8006c2c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCC_OscConfig+0x314>
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d119      	bne.n	8006baa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d116      	bne.n	8006baa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b7c:	4b6b      	ldr	r3, [pc, #428]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_OscConfig+0x32c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e2c2      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b94:	4b65      	ldr	r3, [pc, #404]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	4962      	ldr	r1, [pc, #392]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ba8:	e040      	b.n	8006c2c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d023      	beq.n	8006bfa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb2:	4b5e      	ldr	r3, [pc, #376]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a5d      	ldr	r2, [pc, #372]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbe:	f7fc fd9f 	bl	8003700 <HAL_GetTick>
 8006bc2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc6:	f7fc fd9b 	bl	8003700 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e2a0      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bd8:	4b54      	ldr	r3, [pc, #336]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be4:	4b51      	ldr	r3, [pc, #324]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	494e      	ldr	r1, [pc, #312]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	604b      	str	r3, [r1, #4]
 8006bf8:	e018      	b.n	8006c2c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfa:	4b4c      	ldr	r3, [pc, #304]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4b      	ldr	r2, [pc, #300]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc fd7b 	bl	8003700 <HAL_GetTick>
 8006c0a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fc fd77 	bl	8003700 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e27c      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c20:	4b42      	ldr	r3, [pc, #264]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f0      	bne.n	8006c0e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8082 	beq.w	8006d3e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05f      	beq.n	8006d02 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006c42:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c48:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d037      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d006      	beq.n	8006c70 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e254      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c7a:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c80:	4a2a      	ldr	r2, [pc, #168]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c8a:	f7fc fd39 	bl	8003700 <HAL_GetTick>
 8006c8e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c92:	f7fc fd35 	bl	8003700 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b11      	cmp	r3, #17
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e23a      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ca4:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1ef      	bne.n	8006c92 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006cb2:	4b1e      	ldr	r3, [pc, #120]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb8:	f023 0210 	bic.w	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	491a      	ldr	r1, [pc, #104]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc8:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd8:	f7fc fd12 	bl	8003700 <HAL_GetTick>
 8006cdc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce0:	f7fc fd0e 	bl	8003700 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b11      	cmp	r3, #17
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e213      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ef      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x478>
 8006d00:	e01d      	b.n	8006d3e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d08:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <HAL_RCC_OscConfig+0x4c4>)
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d12:	f7fc fcf5 	bl	8003700 <HAL_GetTick>
 8006d16:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d1a:	f7fc fcf1 	bl	8003700 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b11      	cmp	r3, #17
 8006d26:	d903      	bls.n	8006d30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e1f6      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
 8006d2c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d30:	4ba9      	ldr	r3, [pc, #676]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1ed      	bne.n	8006d1a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80bd 	beq.w	8006ec6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d52:	4ba1      	ldr	r3, [pc, #644]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10e      	bne.n	8006d7c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d5e:	4b9e      	ldr	r3, [pc, #632]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	4a9d      	ldr	r2, [pc, #628]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6a:	4b9b      	ldr	r3, [pc, #620]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d7c:	4b97      	ldr	r3, [pc, #604]	; (8006fdc <HAL_RCC_OscConfig+0x774>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d118      	bne.n	8006dba <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d88:	4b94      	ldr	r3, [pc, #592]	; (8006fdc <HAL_RCC_OscConfig+0x774>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a93      	ldr	r2, [pc, #588]	; (8006fdc <HAL_RCC_OscConfig+0x774>)
 8006d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d94:	f7fc fcb4 	bl	8003700 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9c:	f7fc fcb0 	bl	8003700 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e1b5      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dae:	4b8b      	ldr	r3, [pc, #556]	; (8006fdc <HAL_RCC_OscConfig+0x774>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d02c      	beq.n	8006e20 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006dc6:	4b84      	ldr	r3, [pc, #528]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dcc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd8:	497f      	ldr	r1, [pc, #508]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006dec:	4b7a      	ldr	r3, [pc, #488]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	4a79      	ldr	r2, [pc, #484]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006df4:	f043 0304 	orr.w	r3, r3, #4
 8006df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dfc:	4b76      	ldr	r3, [pc, #472]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	4a75      	ldr	r2, [pc, #468]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e0c:	e018      	b.n	8006e40 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e0e:	4b72      	ldr	r3, [pc, #456]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	4a70      	ldr	r2, [pc, #448]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e1e:	e00f      	b.n	8006e40 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e20:	4b6d      	ldr	r3, [pc, #436]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	4a6c      	ldr	r2, [pc, #432]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006e30:	4b69      	ldr	r3, [pc, #420]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	4a68      	ldr	r2, [pc, #416]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d016      	beq.n	8006e76 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e48:	f7fc fc5a 	bl	8003700 <HAL_GetTick>
 8006e4c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fc fc56 	bl	8003700 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e159      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e66:	4b5c      	ldr	r3, [pc, #368]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0ed      	beq.n	8006e50 <HAL_RCC_OscConfig+0x5e8>
 8006e74:	e01d      	b.n	8006eb2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e76:	f7fc fc43 	bl	8003700 <HAL_GetTick>
 8006e7a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7e:	f7fc fc3f 	bl	8003700 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e142      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e94:	4b50      	ldr	r3, [pc, #320]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ed      	bne.n	8006e7e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006ea2:	4b4d      	ldr	r3, [pc, #308]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea8:	4a4b      	ldr	r2, [pc, #300]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d105      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eba:	4b47      	ldr	r3, [pc, #284]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebe:	4a46      	ldr	r2, [pc, #280]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d03c      	beq.n	8006f4c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01c      	beq.n	8006f14 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eda:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ee0:	4a3d      	ldr	r2, [pc, #244]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006ee2:	f043 0301 	orr.w	r3, r3, #1
 8006ee6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fc fc09 	bl	8003700 <HAL_GetTick>
 8006eee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ef2:	f7fc fc05 	bl	8003700 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e10a      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f04:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0ef      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x68a>
 8006f12:	e01b      	b.n	8006f4c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f14:	4b30      	ldr	r3, [pc, #192]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f1a:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fc fbec 	bl	8003700 <HAL_GetTick>
 8006f28:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f2c:	f7fc fbe8 	bl	8003700 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e0ed      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ef      	bne.n	8006f2c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80e1 	beq.w	8007118 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	f040 80b5 	bne.w	80070ca <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f003 0203 	and.w	r2, r3, #3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d124      	bne.n	8006fbe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d11b      	bne.n	8006fbe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d113      	bne.n	8006fbe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d05f      	beq.n	800707e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	2b0c      	cmp	r3, #12
 8006fc2:	d05a      	beq.n	800707a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a03      	ldr	r2, [pc, #12]	; (8006fd8 <HAL_RCC_OscConfig+0x770>)
 8006fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006fd0:	f7fc fb96 	bl	8003700 <HAL_GetTick>
 8006fd4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd6:	e00c      	b.n	8006ff2 <HAL_RCC_OscConfig+0x78a>
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe0:	f7fc fb8e 	bl	8003700 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e093      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ff2:	4b4c      	ldr	r3, [pc, #304]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1f0      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ffe:	4b49      	ldr	r3, [pc, #292]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	4b49      	ldr	r3, [pc, #292]	; (8007128 <HAL_RCC_OscConfig+0x8c0>)
 8007004:	4013      	ands	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800700e:	3a01      	subs	r2, #1
 8007010:	0112      	lsls	r2, r2, #4
 8007012:	4311      	orrs	r1, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007018:	0212      	lsls	r2, r2, #8
 800701a:	4311      	orrs	r1, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007020:	0852      	lsrs	r2, r2, #1
 8007022:	3a01      	subs	r2, #1
 8007024:	0552      	lsls	r2, r2, #21
 8007026:	4311      	orrs	r1, r2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800702c:	0852      	lsrs	r2, r2, #1
 800702e:	3a01      	subs	r2, #1
 8007030:	0652      	lsls	r2, r2, #25
 8007032:	430a      	orrs	r2, r1
 8007034:	493b      	ldr	r1, [pc, #236]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800703a:	4b3a      	ldr	r3, [pc, #232]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a39      	ldr	r2, [pc, #228]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007044:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4a36      	ldr	r2, [pc, #216]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 800704c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007050:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007052:	f7fc fb55 	bl	8003700 <HAL_GetTick>
 8007056:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800705a:	f7fc fb51 	bl	8003700 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e056      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800706c:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007078:	e04e      	b.n	8007118 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e04d      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d146      	bne.n	8007118 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800708a:	4b26      	ldr	r3, [pc, #152]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a25      	ldr	r2, [pc, #148]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007094:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007096:	4b23      	ldr	r3, [pc, #140]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4a22      	ldr	r2, [pc, #136]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 800709c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070a2:	f7fc fb2d 	bl	8003700 <HAL_GetTick>
 80070a6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070aa:	f7fc fb29 	bl	8003700 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e02e      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x842>
 80070c8:	e026      	b.n	8007118 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	d021      	beq.n	8007114 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a13      	ldr	r2, [pc, #76]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 80070d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fc fb10 	bl	8003700 <HAL_GetTick>
 80070e0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fc fb0c 	bl	8003700 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e011      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	4a07      	ldr	r2, [pc, #28]	; (8007124 <HAL_RCC_OscConfig+0x8bc>)
 8007108:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800710c:	f023 0303 	bic.w	r3, r3, #3
 8007110:	60d3      	str	r3, [r2, #12]
 8007112:	e001      	b.n	8007118 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3728      	adds	r7, #40	; 0x28
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000
 8007128:	f99f808c 	.word	0xf99f808c

0800712c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0e7      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007140:	4b75      	ldr	r3, [pc, #468]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d910      	bls.n	8007170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714e:	4b72      	ldr	r3, [pc, #456]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f023 0207 	bic.w	r2, r3, #7
 8007156:	4970      	ldr	r1, [pc, #448]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b6e      	ldr	r3, [pc, #440]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0cf      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d010      	beq.n	800719e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	4b66      	ldr	r3, [pc, #408]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007188:	429a      	cmp	r2, r3
 800718a:	d908      	bls.n	800719e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800718c:	4b63      	ldr	r3, [pc, #396]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4960      	ldr	r1, [pc, #384]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d04c      	beq.n	8007244 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071b2:	4b5a      	ldr	r3, [pc, #360]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d121      	bne.n	8007202 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0a6      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ca:	4b54      	ldr	r3, [pc, #336]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d115      	bne.n	8007202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e09a      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d107      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071e2:	4b4e      	ldr	r3, [pc, #312]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e08e      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f2:	4b4a      	ldr	r3, [pc, #296]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e086      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007202:	4b46      	ldr	r3, [pc, #280]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f023 0203 	bic.w	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4943      	ldr	r1, [pc, #268]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007210:	4313      	orrs	r3, r2
 8007212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007214:	f7fc fa74 	bl	8003700 <HAL_GetTick>
 8007218:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	e00a      	b.n	8007232 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800721c:	f7fc fa70 	bl	8003700 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e06e      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007232:	4b3a      	ldr	r3, [pc, #232]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 020c 	and.w	r2, r3, #12
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	429a      	cmp	r2, r3
 8007242:	d1eb      	bne.n	800721c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d010      	beq.n	8007272 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	4b31      	ldr	r3, [pc, #196]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725c:	429a      	cmp	r2, r3
 800725e:	d208      	bcs.n	8007272 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007260:	4b2e      	ldr	r3, [pc, #184]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	492b      	ldr	r1, [pc, #172]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 800726e:	4313      	orrs	r3, r2
 8007270:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007272:	4b29      	ldr	r3, [pc, #164]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d210      	bcs.n	80072a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f023 0207 	bic.w	r2, r3, #7
 8007288:	4923      	ldr	r1, [pc, #140]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	4313      	orrs	r3, r2
 800728e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007290:	4b21      	ldr	r3, [pc, #132]	; (8007318 <HAL_RCC_ClockConfig+0x1ec>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d001      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e036      	b.n	8007310 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072ae:	4b1b      	ldr	r3, [pc, #108]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	4918      	ldr	r1, [pc, #96]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072cc:	4b13      	ldr	r3, [pc, #76]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4910      	ldr	r1, [pc, #64]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072e0:	f000 f824 	bl	800732c <HAL_RCC_GetSysClockFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <HAL_RCC_ClockConfig+0x1f0>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	490b      	ldr	r1, [pc, #44]	; (8007320 <HAL_RCC_ClockConfig+0x1f4>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
 80072fc:	4a09      	ldr	r2, [pc, #36]	; (8007324 <HAL_RCC_ClockConfig+0x1f8>)
 80072fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <HAL_RCC_ClockConfig+0x1fc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f7fc f9ab 	bl	8003660 <HAL_InitTick>
 800730a:	4603      	mov	r3, r0
 800730c:	72fb      	strb	r3, [r7, #11]

  return status;
 800730e:	7afb      	ldrb	r3, [r7, #11]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40022000 	.word	0x40022000
 800731c:	40021000 	.word	0x40021000
 8007320:	0800e280 	.word	0x0800e280
 8007324:	20000004 	.word	0x20000004
 8007328:	20000008 	.word	0x20000008

0800732c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800732c:	b480      	push	{r7}
 800732e:	b089      	sub	sp, #36	; 0x24
 8007330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	2300      	movs	r3, #0
 8007338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800733a:	4b3e      	ldr	r3, [pc, #248]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 030c 	and.w	r3, r3, #12
 8007342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007344:	4b3b      	ldr	r3, [pc, #236]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x34>
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d121      	bne.n	800739e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d11e      	bne.n	800739e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007360:	4b34      	ldr	r3, [pc, #208]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800736c:	4b31      	ldr	r3, [pc, #196]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 800736e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	e005      	b.n	8007388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007388:	4a2b      	ldr	r2, [pc, #172]	; (8007438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d102      	bne.n	80073aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <HAL_RCC_GetSysClockFreq+0x110>)
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	e004      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d101      	bne.n	80073b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073b0:	4b23      	ldr	r3, [pc, #140]	; (8007440 <HAL_RCC_GetSysClockFreq+0x114>)
 80073b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b0c      	cmp	r3, #12
 80073b8:	d134      	bne.n	8007424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073ba:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d003      	beq.n	80073d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d003      	beq.n	80073d8 <HAL_RCC_GetSysClockFreq+0xac>
 80073d0:	e005      	b.n	80073de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80073d2:	4b1a      	ldr	r3, [pc, #104]	; (800743c <HAL_RCC_GetSysClockFreq+0x110>)
 80073d4:	617b      	str	r3, [r7, #20]
      break;
 80073d6:	e005      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <HAL_RCC_GetSysClockFreq+0x114>)
 80073da:	617b      	str	r3, [r7, #20]
      break;
 80073dc:	e002      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	617b      	str	r3, [r7, #20]
      break;
 80073e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073e4:	4b13      	ldr	r3, [pc, #76]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	3301      	adds	r3, #1
 80073f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	fb03 f202 	mul.w	r2, r3, r2
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_RCC_GetSysClockFreq+0x108>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	0e5b      	lsrs	r3, r3, #25
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	3301      	adds	r3, #1
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007424:	69bb      	ldr	r3, [r7, #24]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3724      	adds	r7, #36	; 0x24
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40021000 	.word	0x40021000
 8007438:	0800e290 	.word	0x0800e290
 800743c:	00f42400 	.word	0x00f42400
 8007440:	007a1200 	.word	0x007a1200

08007444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007450:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800745c:	f7ff f990 	bl	8006780 <HAL_PWREx_GetVoltageRange>
 8007460:	6178      	str	r0, [r7, #20]
 8007462:	e014      	b.n	800748e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007464:	4b25      	ldr	r3, [pc, #148]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	4a24      	ldr	r2, [pc, #144]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800746a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746e:	6593      	str	r3, [r2, #88]	; 0x58
 8007470:	4b22      	ldr	r3, [pc, #136]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800747c:	f7ff f980 	bl	8006780 <HAL_PWREx_GetVoltageRange>
 8007480:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007482:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800748c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007494:	d10b      	bne.n	80074ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d919      	bls.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2ba0      	cmp	r3, #160	; 0xa0
 80074a0:	d902      	bls.n	80074a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074a2:	2302      	movs	r3, #2
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	e013      	b.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074a8:	2301      	movs	r3, #1
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	e010      	b.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d902      	bls.n	80074ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80074b4:	2303      	movs	r3, #3
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	e00a      	b.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d102      	bne.n	80074c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074c0:	2302      	movs	r3, #2
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	e004      	b.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b70      	cmp	r3, #112	; 0x70
 80074ca:	d101      	bne.n	80074d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074cc:	2301      	movs	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f023 0207 	bic.w	r2, r3, #7
 80074d8:	4909      	ldr	r1, [pc, #36]	; (8007500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d001      	beq.n	80074f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40021000 	.word	0x40021000
 8007500:	40022000 	.word	0x40022000

08007504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800750c:	2300      	movs	r3, #0
 800750e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007510:	2300      	movs	r3, #0
 8007512:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 809e 	beq.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007522:	2300      	movs	r3, #0
 8007524:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007526:	4b46      	ldr	r3, [pc, #280]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753c:	4b40      	ldr	r3, [pc, #256]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	4a3f      	ldr	r2, [pc, #252]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007546:	6593      	str	r3, [r2, #88]	; 0x58
 8007548:	4b3d      	ldr	r3, [pc, #244]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007554:	2301      	movs	r3, #1
 8007556:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007558:	4b3a      	ldr	r3, [pc, #232]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a39      	ldr	r2, [pc, #228]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800755e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007564:	f7fc f8cc 	bl	8003700 <HAL_GetTick>
 8007568:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800756a:	e009      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800756c:	f7fc f8c8 	bl	8003700 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d902      	bls.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	74fb      	strb	r3, [r7, #19]
        break;
 800757e:	e005      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007580:	4b30      	ldr	r3, [pc, #192]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0ef      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800758c:	7cfb      	ldrb	r3, [r7, #19]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d15a      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007592:	4b2b      	ldr	r3, [pc, #172]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01e      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d019      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075ba:	4b21      	ldr	r3, [pc, #132]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c0:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075da:	4a19      	ldr	r2, [pc, #100]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d016      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fc f888 	bl	8003700 <HAL_GetTick>
 80075f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075f2:	e00b      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f4:	f7fc f884 	bl	8003700 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d902      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	74fb      	strb	r3, [r7, #19]
            break;
 800760a:	e006      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ec      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800761a:	7cfb      	ldrb	r3, [r7, #19]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	4904      	ldr	r1, [pc, #16]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007636:	e009      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	74bb      	strb	r3, [r7, #18]
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800763e:	bf00      	nop
 8007640:	40021000 	.word	0x40021000
 8007644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800764c:	7c7b      	ldrb	r3, [r7, #17]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4b6e      	ldr	r3, [pc, #440]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	4a6d      	ldr	r2, [pc, #436]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800766a:	4b68      	ldr	r3, [pc, #416]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f023 0203 	bic.w	r2, r3, #3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4964      	ldr	r1, [pc, #400]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800768c:	4b5f      	ldr	r3, [pc, #380]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	f023 020c 	bic.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	495c      	ldr	r1, [pc, #368]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ae:	4b57      	ldr	r3, [pc, #348]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4953      	ldr	r1, [pc, #332]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076d0:	4b4e      	ldr	r3, [pc, #312]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	494b      	ldr	r1, [pc, #300]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076f2:	4b46      	ldr	r3, [pc, #280]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	4942      	ldr	r1, [pc, #264]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007714:	4b3d      	ldr	r3, [pc, #244]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	493a      	ldr	r1, [pc, #232]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007736:	4b35      	ldr	r3, [pc, #212]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4931      	ldr	r1, [pc, #196]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007758:	4b2c      	ldr	r3, [pc, #176]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	4929      	ldr	r1, [pc, #164]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	4920      	ldr	r1, [pc, #128]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d015      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800779c:	4b1b      	ldr	r3, [pc, #108]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	4918      	ldr	r1, [pc, #96]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ba:	d105      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077bc:	4b13      	ldr	r3, [pc, #76]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a12      	ldr	r2, [pc, #72]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d015      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077d4:	4b0d      	ldr	r3, [pc, #52]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	490a      	ldr	r1, [pc, #40]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f2:	d105      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4a04      	ldr	r2, [pc, #16]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80077fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007800:	7cbb      	ldrb	r3, [r7, #18]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40021000 	.word	0x40021000

08007810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e095      	b.n	800794e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d108      	bne.n	800783c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007832:	d009      	beq.n	8007848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	61da      	str	r2, [r3, #28]
 800783a:	e005      	b.n	8007848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fb fb82 	bl	8002f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007888:	d902      	bls.n	8007890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e002      	b.n	8007896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800789e:	d007      	beq.n	80078b0 <HAL_SPI_Init+0xa0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	431a      	orrs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	ea42 0103 	orr.w	r1, r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	0c1b      	lsrs	r3, r3, #16
 800790c:	f003 0204 	and.w	r2, r3, #4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800792c:	ea42 0103 	orr.w	r1, r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b088      	sub	sp, #32
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_SPI_Transmit+0x22>
 8007974:	2302      	movs	r3, #2
 8007976:	e158      	b.n	8007c2a <HAL_SPI_Transmit+0x2d4>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007980:	f7fb febe 	bl	8003700 <HAL_GetTick>
 8007984:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	d002      	beq.n	800799c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007996:	2302      	movs	r3, #2
 8007998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800799a:	e13d      	b.n	8007c18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_SPI_Transmit+0x52>
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079ac:	e134      	b.n	8007c18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2203      	movs	r2, #3
 80079b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f8:	d10f      	bne.n	8007a1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d007      	beq.n	8007a38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a40:	d94b      	bls.n	8007ada <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_SPI_Transmit+0xfa>
 8007a4a:	8afb      	ldrh	r3, [r7, #22]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d13e      	bne.n	8007ace <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	881a      	ldrh	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	1c9a      	adds	r2, r3, #2
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a74:	e02b      	b.n	8007ace <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d112      	bne.n	8007aaa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	881a      	ldrh	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa8:	e011      	b.n	8007ace <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aaa:	f7fb fe29 	bl	8003700 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d803      	bhi.n	8007ac2 <HAL_SPI_Transmit+0x16c>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d102      	bne.n	8007ac8 <HAL_SPI_Transmit+0x172>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d102      	bne.n	8007ace <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007acc:	e0a4      	b.n	8007c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ce      	bne.n	8007a76 <HAL_SPI_Transmit+0x120>
 8007ad8:	e07c      	b.n	8007bd4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_Transmit+0x192>
 8007ae2:	8afb      	ldrh	r3, [r7, #22]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d170      	bne.n	8007bca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d912      	bls.n	8007b18 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	881a      	ldrh	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b02      	subs	r3, #2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b16:	e058      	b.n	8007bca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b3e:	e044      	b.n	8007bca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d12b      	bne.n	8007ba6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d912      	bls.n	8007b7e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	881a      	ldrh	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b02      	subs	r3, #2
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b7c:	e025      	b.n	8007bca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba4:	e011      	b.n	8007bca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ba6:	f7fb fdab 	bl	8003700 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d803      	bhi.n	8007bbe <HAL_SPI_Transmit+0x268>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d102      	bne.n	8007bc4 <HAL_SPI_Transmit+0x26e>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bc8:	e026      	b.n	8007c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1b5      	bne.n	8007b40 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fb5b 	bl	8008294 <SPI_EndRxTxTransaction>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e000      	b.n	8007c18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b08a      	sub	sp, #40	; 0x28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c40:	2301      	movs	r3, #1
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_SPI_TransmitReceive+0x26>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e1fb      	b.n	8008050 <HAL_SPI_TransmitReceive+0x41e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c60:	f7fb fd4e 	bl	8003700 <HAL_GetTick>
 8007c64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c78:	887b      	ldrh	r3, [r7, #2]
 8007c7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c7c:	7efb      	ldrb	r3, [r7, #27]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d00e      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0x6e>
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c88:	d106      	bne.n	8007c98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <HAL_SPI_TransmitReceive+0x66>
 8007c92:	7efb      	ldrb	r3, [r7, #27]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d003      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c9e:	e1cd      	b.n	800803c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_SPI_TransmitReceive+0x80>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SPI_TransmitReceive+0x80>
 8007cac:	887b      	ldrh	r3, [r7, #2]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cb8:	e1c0      	b.n	800803c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d003      	beq.n	8007cce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2205      	movs	r2, #5
 8007cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	887a      	ldrh	r2, [r7, #2]
 8007cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	887a      	ldrh	r2, [r7, #2]
 8007ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	887a      	ldrh	r2, [r7, #2]
 8007cfa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d10:	d802      	bhi.n	8007d18 <HAL_SPI_TransmitReceive+0xe6>
 8007d12:	8a3b      	ldrh	r3, [r7, #16]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d908      	bls.n	8007d2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	e007      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d007      	beq.n	8007d58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d60:	d97c      	bls.n	8007e5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_SPI_TransmitReceive+0x13e>
 8007d6a:	8a7b      	ldrh	r3, [r7, #18]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d169      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	881a      	ldrh	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	1c9a      	adds	r2, r3, #2
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d94:	e056      	b.n	8007e44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d11b      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1aa>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d016      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0x1aa>
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d113      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	881a      	ldrh	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	1c9a      	adds	r2, r3, #2
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d11c      	bne.n	8007e24 <HAL_SPI_TransmitReceive+0x1f2>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d016      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	b292      	uxth	r2, r2
 8007e02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	1c9a      	adds	r2, r3, #2
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e20:	2301      	movs	r3, #1
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e24:	f7fb fc6c 	bl	8003700 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d807      	bhi.n	8007e44 <HAL_SPI_TransmitReceive+0x212>
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d003      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e42:	e0fb      	b.n	800803c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1a3      	bne.n	8007d96 <HAL_SPI_TransmitReceive+0x164>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d19d      	bne.n	8007d96 <HAL_SPI_TransmitReceive+0x164>
 8007e5a:	e0df      	b.n	800801c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_SPI_TransmitReceive+0x23a>
 8007e64:	8a7b      	ldrh	r3, [r7, #18]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	f040 80cb 	bne.w	8008002 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d912      	bls.n	8007e9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	881a      	ldrh	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b02      	subs	r3, #2
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e9a:	e0b2      	b.n	8008002 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec2:	e09e      	b.n	8008002 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d134      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x30a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d02f      	beq.n	8007f3c <HAL_SPI_TransmitReceive+0x30a>
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d12c      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d912      	bls.n	8007f12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef0:	881a      	ldrh	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	1c9a      	adds	r2, r3, #2
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3b02      	subs	r3, #2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f10:	e012      	b.n	8007f38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d148      	bne.n	8007fdc <HAL_SPI_TransmitReceive+0x3aa>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d042      	beq.n	8007fdc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d923      	bls.n	8007faa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	b292      	uxth	r2, r2
 8007f6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	1c9a      	adds	r2, r3, #2
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b02      	subs	r3, #2
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d81f      	bhi.n	8007fd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	e016      	b.n	8007fd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f103 020c 	add.w	r2, r3, #12
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fdc:	f7fb fb90 	bl	8003700 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d803      	bhi.n	8007ff4 <HAL_SPI_TransmitReceive+0x3c2>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d102      	bne.n	8007ffa <HAL_SPI_TransmitReceive+0x3c8>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008000:	e01c      	b.n	800803c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	f47f af5b 	bne.w	8007ec4 <HAL_SPI_TransmitReceive+0x292>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	f47f af54 	bne.w	8007ec4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f937 	bl	8008294 <SPI_EndRxTxTransaction>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	661a      	str	r2, [r3, #96]	; 0x60
 8008038:	e000      	b.n	800803c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800803a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800804c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008050:	4618      	mov	r0, r3
 8008052:	3728      	adds	r7, #40	; 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008068:	f7fb fb4a 	bl	8003700 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4413      	add	r3, r2
 8008076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008078:	f7fb fb42 	bl	8003700 <HAL_GetTick>
 800807c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800807e:	4b39      	ldr	r3, [pc, #228]	; (8008164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	015b      	lsls	r3, r3, #5
 8008084:	0d1b      	lsrs	r3, r3, #20
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800808e:	e054      	b.n	800813a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d050      	beq.n	800813a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008098:	f7fb fb32 	bl	8003700 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d902      	bls.n	80080ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d13d      	bne.n	800812a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080c6:	d111      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d0:	d004      	beq.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080da:	d107      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f4:	d10f      	bne.n	8008116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e017      	b.n	800815a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	3b01      	subs	r3, #1
 8008138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	429a      	cmp	r2, r3
 8008156:	d19b      	bne.n	8008090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000004 	.word	0x20000004

08008168 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800817a:	f7fb fac1 	bl	8003700 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	4413      	add	r3, r2
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800818a:	f7fb fab9 	bl	8003700 <HAL_GetTick>
 800818e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008198:	4b3d      	ldr	r3, [pc, #244]	; (8008290 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	00da      	lsls	r2, r3, #3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	0d1b      	lsrs	r3, r3, #20
 80081a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
 80081ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081b0:	e060      	b.n	8008274 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081b8:	d107      	bne.n	80081ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d050      	beq.n	8008274 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081d2:	f7fb fa95 	bl	8003700 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d13d      	bne.n	8008264 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008200:	d111      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820a:	d004      	beq.n	8008216 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008214:	d107      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	d10f      	bne.n	8008250 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800824e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e010      	b.n	8008286 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	3b01      	subs	r3, #1
 8008272:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4013      	ands	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d196      	bne.n	80081b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3728      	adds	r7, #40	; 0x28
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000004 	.word	0x20000004

08008294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ff5b 	bl	8008168 <SPI_WaitFifoStateUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e027      	b.n	8008318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fec0 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e2:	f043 0220 	orr.w	r2, r3, #32
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e014      	b.n	8008318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff ff34 	bl	8008168 <SPI_WaitFifoStateUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830a:	f043 0220 	orr.w	r2, r3, #32
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e000      	b.n	8008318 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e049      	b.n	80083c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fb f8b2 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f000 fd50 	bl	8008e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d001      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e03b      	b.n	8008460 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a19      	ldr	r2, [pc, #100]	; (800846c <HAL_TIM_Base_Start_IT+0x9c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_TIM_Base_Start_IT+0x4e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008412:	d004      	beq.n	800841e <HAL_TIM_Base_Start_IT+0x4e>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a15      	ldr	r2, [pc, #84]	; (8008470 <HAL_TIM_Base_Start_IT+0xa0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d115      	bne.n	800844a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <HAL_TIM_Base_Start_IT+0xa4>)
 8008426:	4013      	ands	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b06      	cmp	r3, #6
 800842e:	d015      	beq.n	800845c <HAL_TIM_Base_Start_IT+0x8c>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008436:	d011      	beq.n	800845c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	e008      	b.n	800845c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0201 	orr.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e000      	b.n	800845e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	40012c00 	.word	0x40012c00
 8008470:	40014000 	.word	0x40014000
 8008474:	00010007 	.word	0x00010007

08008478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e049      	b.n	800851e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fa ffe8 	bl	8003474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f000 fca4 	bl	8008e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <HAL_TIM_PWM_Start+0x24>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	bf14      	ite	ne
 8008544:	2301      	movne	r3, #1
 8008546:	2300      	moveq	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	e03c      	b.n	80085c6 <HAL_TIM_PWM_Start+0x9e>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d109      	bne.n	8008566 <HAL_TIM_PWM_Start+0x3e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	bf14      	ite	ne
 800855e:	2301      	movne	r3, #1
 8008560:	2300      	moveq	r3, #0
 8008562:	b2db      	uxtb	r3, r3
 8008564:	e02f      	b.n	80085c6 <HAL_TIM_PWM_Start+0x9e>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b08      	cmp	r3, #8
 800856a:	d109      	bne.n	8008580 <HAL_TIM_PWM_Start+0x58>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	e022      	b.n	80085c6 <HAL_TIM_PWM_Start+0x9e>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b0c      	cmp	r3, #12
 8008584:	d109      	bne.n	800859a <HAL_TIM_PWM_Start+0x72>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b01      	cmp	r3, #1
 8008590:	bf14      	ite	ne
 8008592:	2301      	movne	r3, #1
 8008594:	2300      	moveq	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	e015      	b.n	80085c6 <HAL_TIM_PWM_Start+0x9e>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b10      	cmp	r3, #16
 800859e:	d109      	bne.n	80085b4 <HAL_TIM_PWM_Start+0x8c>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	bf14      	ite	ne
 80085ac:	2301      	movne	r3, #1
 80085ae:	2300      	moveq	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	e008      	b.n	80085c6 <HAL_TIM_PWM_Start+0x9e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e07e      	b.n	80086cc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <HAL_TIM_PWM_Start+0xb6>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085dc:	e023      	b.n	8008626 <HAL_TIM_PWM_Start+0xfe>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d104      	bne.n	80085ee <HAL_TIM_PWM_Start+0xc6>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ec:	e01b      	b.n	8008626 <HAL_TIM_PWM_Start+0xfe>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d104      	bne.n	80085fe <HAL_TIM_PWM_Start+0xd6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fc:	e013      	b.n	8008626 <HAL_TIM_PWM_Start+0xfe>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b0c      	cmp	r3, #12
 8008602:	d104      	bne.n	800860e <HAL_TIM_PWM_Start+0xe6>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800860c:	e00b      	b.n	8008626 <HAL_TIM_PWM_Start+0xfe>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b10      	cmp	r3, #16
 8008612:	d104      	bne.n	800861e <HAL_TIM_PWM_Start+0xf6>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800861c:	e003      	b.n	8008626 <HAL_TIM_PWM_Start+0xfe>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2201      	movs	r2, #1
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 feca 	bl	80093c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a26      	ldr	r2, [pc, #152]	; (80086d4 <HAL_TIM_PWM_Start+0x1ac>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <HAL_TIM_PWM_Start+0x12a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a25      	ldr	r2, [pc, #148]	; (80086d8 <HAL_TIM_PWM_Start+0x1b0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <HAL_TIM_PWM_Start+0x12a>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a23      	ldr	r2, [pc, #140]	; (80086dc <HAL_TIM_PWM_Start+0x1b4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <HAL_TIM_PWM_Start+0x12e>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <HAL_TIM_PWM_Start+0x130>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800866a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a18      	ldr	r2, [pc, #96]	; (80086d4 <HAL_TIM_PWM_Start+0x1ac>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_TIM_PWM_Start+0x162>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867e:	d004      	beq.n	800868a <HAL_TIM_PWM_Start+0x162>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <HAL_TIM_PWM_Start+0x1b0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d115      	bne.n	80086b6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <HAL_TIM_PWM_Start+0x1b8>)
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b06      	cmp	r3, #6
 800869a:	d015      	beq.n	80086c8 <HAL_TIM_PWM_Start+0x1a0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a2:	d011      	beq.n	80086c8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b4:	e008      	b.n	80086c8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0201 	orr.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	e000      	b.n	80086ca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40014000 	.word	0x40014000
 80086dc:	40014400 	.word	0x40014400
 80086e0:	00010007 	.word	0x00010007

080086e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e097      	b.n	8008828 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fa fe65 	bl	80033dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008728:	f023 0307 	bic.w	r3, r3, #7
 800872c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f000 fb63 	bl	8008e04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	4313      	orrs	r3, r2
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008784:	f023 030c 	bic.w	r3, r3, #12
 8008788:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	4313      	orrs	r3, r2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	011a      	lsls	r2, r3, #4
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	031b      	lsls	r3, r3, #12
 80087b4:	4313      	orrs	r3, r2
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80087ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	4313      	orrs	r3, r2
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008840:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008848:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008850:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008858:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d110      	bne.n	8008882 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d102      	bne.n	800886c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008866:	7b7b      	ldrb	r3, [r7, #13]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d001      	beq.n	8008870 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e069      	b.n	8008944 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008880:	e031      	b.n	80088e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b04      	cmp	r3, #4
 8008886:	d110      	bne.n	80088aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d102      	bne.n	8008894 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800888e:	7b3b      	ldrb	r3, [r7, #12]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d001      	beq.n	8008898 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e055      	b.n	8008944 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a8:	e01d      	b.n	80088e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d108      	bne.n	80088c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d105      	bne.n	80088c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088b6:	7b7b      	ldrb	r3, [r7, #13]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d102      	bne.n	80088c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088bc:	7b3b      	ldrb	r3, [r7, #12]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d001      	beq.n	80088c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e03e      	b.n	8008944 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_TIM_Encoder_Start+0xc4>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d008      	beq.n	8008904 <HAL_TIM_Encoder_Start+0xd4>
 80088f2:	e00f      	b.n	8008914 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2201      	movs	r2, #1
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fd63 	bl	80093c8 <TIM_CCxChannelCmd>
      break;
 8008902:	e016      	b.n	8008932 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2201      	movs	r2, #1
 800890a:	2104      	movs	r1, #4
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fd5b 	bl	80093c8 <TIM_CCxChannelCmd>
      break;
 8008912:	e00e      	b.n	8008932 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2201      	movs	r2, #1
 800891a:	2100      	movs	r1, #0
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fd53 	bl	80093c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	2104      	movs	r1, #4
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fd4c 	bl	80093c8 <TIM_CCxChannelCmd>
      break;
 8008930:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0201 	orr.w	r2, r2, #1
 8008940:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b02      	cmp	r3, #2
 8008960:	d122      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b02      	cmp	r3, #2
 800896e:	d11b      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0202 	mvn.w	r2, #2
 8008978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa1a 	bl	8008dc8 <HAL_TIM_IC_CaptureCallback>
 8008994:	e005      	b.n	80089a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa0c 	bl	8008db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fa1d 	bl	8008ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d122      	bne.n	80089fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d11b      	bne.n	80089fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0204 	mvn.w	r2, #4
 80089cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9f0 	bl	8008dc8 <HAL_TIM_IC_CaptureCallback>
 80089e8:	e005      	b.n	80089f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f9e2 	bl	8008db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f9f3 	bl	8008ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d122      	bne.n	8008a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d11b      	bne.n	8008a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0208 	mvn.w	r2, #8
 8008a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2204      	movs	r2, #4
 8008a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9c6 	bl	8008dc8 <HAL_TIM_IC_CaptureCallback>
 8008a3c:	e005      	b.n	8008a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f9b8 	bl	8008db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f9c9 	bl	8008ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d122      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d11b      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0210 	mvn.w	r2, #16
 8008a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f99c 	bl	8008dc8 <HAL_TIM_IC_CaptureCallback>
 8008a90:	e005      	b.n	8008a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f98e 	bl	8008db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f99f 	bl	8008ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d10e      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d107      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f06f 0201 	mvn.w	r2, #1
 8008ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7fa f9d8 	bl	8002e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ada:	2b80      	cmp	r3, #128	; 0x80
 8008adc:	d10e      	bne.n	8008afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae8:	2b80      	cmp	r3, #128	; 0x80
 8008aea:	d107      	bne.n	8008afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fcfc 	bl	80094f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0a:	d10e      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b16:	2b80      	cmp	r3, #128	; 0x80
 8008b18:	d107      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcef 	bl	8009508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d10e      	bne.n	8008b56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d107      	bne.n	8008b56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f94d 	bl	8008df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d10e      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	d107      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f06f 0220 	mvn.w	r2, #32
 8008b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fcaf 	bl	80094e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0ff      	b.n	8008daa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b14      	cmp	r3, #20
 8008bb6:	f200 80f0 	bhi.w	8008d9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008d9b 	.word	0x08008d9b
 8008bc8:	08008d9b 	.word	0x08008d9b
 8008bcc:	08008d9b 	.word	0x08008d9b
 8008bd0:	08008c55 	.word	0x08008c55
 8008bd4:	08008d9b 	.word	0x08008d9b
 8008bd8:	08008d9b 	.word	0x08008d9b
 8008bdc:	08008d9b 	.word	0x08008d9b
 8008be0:	08008c97 	.word	0x08008c97
 8008be4:	08008d9b 	.word	0x08008d9b
 8008be8:	08008d9b 	.word	0x08008d9b
 8008bec:	08008d9b 	.word	0x08008d9b
 8008bf0:	08008cd7 	.word	0x08008cd7
 8008bf4:	08008d9b 	.word	0x08008d9b
 8008bf8:	08008d9b 	.word	0x08008d9b
 8008bfc:	08008d9b 	.word	0x08008d9b
 8008c00:	08008d19 	.word	0x08008d19
 8008c04:	08008d9b 	.word	0x08008d9b
 8008c08:	08008d9b 	.word	0x08008d9b
 8008c0c:	08008d9b 	.word	0x08008d9b
 8008c10:	08008d59 	.word	0x08008d59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f956 	bl	8008ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0208 	orr.w	r2, r2, #8
 8008c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0204 	bic.w	r2, r2, #4
 8008c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6999      	ldr	r1, [r3, #24]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	691a      	ldr	r2, [r3, #16]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	619a      	str	r2, [r3, #24]
      break;
 8008c52:	e0a5      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f9b2 	bl	8008fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699a      	ldr	r2, [r3, #24]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6999      	ldr	r1, [r3, #24]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	021a      	lsls	r2, r3, #8
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	619a      	str	r2, [r3, #24]
      break;
 8008c94:	e084      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fa0b 	bl	80090b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69da      	ldr	r2, [r3, #28]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0208 	orr.w	r2, r2, #8
 8008cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69da      	ldr	r2, [r3, #28]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0204 	bic.w	r2, r2, #4
 8008cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69d9      	ldr	r1, [r3, #28]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	61da      	str	r2, [r3, #28]
      break;
 8008cd4:	e064      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fa63 	bl	80091a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69da      	ldr	r2, [r3, #28]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69da      	ldr	r2, [r3, #28]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69d9      	ldr	r1, [r3, #28]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	021a      	lsls	r2, r3, #8
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	61da      	str	r2, [r3, #28]
      break;
 8008d16:	e043      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 faa0 	bl	8009264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0208 	orr.w	r2, r2, #8
 8008d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0204 	bic.w	r2, r2, #4
 8008d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d56:	e023      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fad8 	bl	8009314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	021a      	lsls	r2, r3, #8
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d98:	e002      	b.n	8008da0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop

08008db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <TIM_Base_SetConfig+0xbc>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_Base_SetConfig+0x20>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e22:	d108      	bne.n	8008e36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a21      	ldr	r2, [pc, #132]	; (8008ec0 <TIM_Base_SetConfig+0xbc>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00b      	beq.n	8008e56 <TIM_Base_SetConfig+0x52>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e44:	d007      	beq.n	8008e56 <TIM_Base_SetConfig+0x52>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <TIM_Base_SetConfig+0xc0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d003      	beq.n	8008e56 <TIM_Base_SetConfig+0x52>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <TIM_Base_SetConfig+0xc4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d108      	bne.n	8008e68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <TIM_Base_SetConfig+0xbc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_Base_SetConfig+0xa0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a0b      	ldr	r2, [pc, #44]	; (8008ec4 <TIM_Base_SetConfig+0xc0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_Base_SetConfig+0xa0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <TIM_Base_SetConfig+0xc4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d103      	bne.n	8008eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	691a      	ldr	r2, [r3, #16]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	615a      	str	r2, [r3, #20]
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40014400 	.word	0x40014400

08008ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f023 0201 	bic.w	r2, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0303 	bic.w	r3, r3, #3
 8008f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f023 0302 	bic.w	r3, r3, #2
 8008f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a24      	ldr	r2, [pc, #144]	; (8008fb8 <TIM_OC1_SetConfig+0xec>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d007      	beq.n	8008f3c <TIM_OC1_SetConfig+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a23      	ldr	r2, [pc, #140]	; (8008fbc <TIM_OC1_SetConfig+0xf0>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_OC1_SetConfig+0x70>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <TIM_OC1_SetConfig+0xf4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d10c      	bne.n	8008f56 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f023 0308 	bic.w	r3, r3, #8
 8008f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f023 0304 	bic.w	r3, r3, #4
 8008f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <TIM_OC1_SetConfig+0xec>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <TIM_OC1_SetConfig+0xa2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a16      	ldr	r2, [pc, #88]	; (8008fbc <TIM_OC1_SetConfig+0xf0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_OC1_SetConfig+0xa2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <TIM_OC1_SetConfig+0xf4>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d111      	bne.n	8008f92 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	40012c00 	.word	0x40012c00
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40014400 	.word	0x40014400

08008fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f023 0210 	bic.w	r2, r3, #16
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f023 0320 	bic.w	r3, r3, #32
 8009012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a22      	ldr	r2, [pc, #136]	; (80090ac <TIM_OC2_SetConfig+0xe8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d10d      	bne.n	8009044 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a19      	ldr	r2, [pc, #100]	; (80090ac <TIM_OC2_SetConfig+0xe8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_OC2_SetConfig+0x98>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <TIM_OC2_SetConfig+0xec>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_OC2_SetConfig+0x98>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <TIM_OC2_SetConfig+0xf0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d113      	bne.n	8009084 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800906a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40012c00 	.word	0x40012c00
 80090b0:	40014000 	.word	0x40014000
 80090b4:	40014400 	.word	0x40014400

080090b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a21      	ldr	r2, [pc, #132]	; (800919c <TIM_OC3_SetConfig+0xe4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d10d      	bne.n	8009136 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a18      	ldr	r2, [pc, #96]	; (800919c <TIM_OC3_SetConfig+0xe4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d007      	beq.n	800914e <TIM_OC3_SetConfig+0x96>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <TIM_OC3_SetConfig+0xe8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_OC3_SetConfig+0x96>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a16      	ldr	r2, [pc, #88]	; (80091a4 <TIM_OC3_SetConfig+0xec>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d113      	bne.n	8009176 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800915c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	621a      	str	r2, [r3, #32]
}
 8009190:	bf00      	nop
 8009192:	371c      	adds	r7, #28
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	40012c00 	.word	0x40012c00
 80091a0:	40014000 	.word	0x40014000
 80091a4:	40014400 	.word	0x40014400

080091a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	031b      	lsls	r3, r3, #12
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	4313      	orrs	r3, r2
 8009202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a14      	ldr	r2, [pc, #80]	; (8009258 <TIM_OC4_SetConfig+0xb0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d007      	beq.n	800921c <TIM_OC4_SetConfig+0x74>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a13      	ldr	r2, [pc, #76]	; (800925c <TIM_OC4_SetConfig+0xb4>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_OC4_SetConfig+0x74>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a12      	ldr	r2, [pc, #72]	; (8009260 <TIM_OC4_SetConfig+0xb8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d109      	bne.n	8009230 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	019b      	lsls	r3, r3, #6
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	621a      	str	r2, [r3, #32]
}
 800924a:	bf00      	nop
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40012c00 	.word	0x40012c00
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400

08009264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a13      	ldr	r2, [pc, #76]	; (8009308 <TIM_OC5_SetConfig+0xa4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d007      	beq.n	80092ce <TIM_OC5_SetConfig+0x6a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a12      	ldr	r2, [pc, #72]	; (800930c <TIM_OC5_SetConfig+0xa8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d003      	beq.n	80092ce <TIM_OC5_SetConfig+0x6a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a11      	ldr	r2, [pc, #68]	; (8009310 <TIM_OC5_SetConfig+0xac>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d109      	bne.n	80092e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	4313      	orrs	r3, r2
 80092e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	621a      	str	r2, [r3, #32]
}
 80092fc:	bf00      	nop
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	40012c00 	.word	0x40012c00
 800930c:	40014000 	.word	0x40014000
 8009310:	40014400 	.word	0x40014400

08009314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800935a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	051b      	lsls	r3, r3, #20
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a14      	ldr	r2, [pc, #80]	; (80093bc <TIM_OC6_SetConfig+0xa8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_OC6_SetConfig+0x6c>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <TIM_OC6_SetConfig+0xac>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_OC6_SetConfig+0x6c>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a12      	ldr	r2, [pc, #72]	; (80093c4 <TIM_OC6_SetConfig+0xb0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d109      	bne.n	8009394 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	029b      	lsls	r3, r3, #10
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	621a      	str	r2, [r3, #32]
}
 80093ae:	bf00      	nop
 80093b0:	371c      	adds	r7, #28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40012c00 	.word	0x40012c00
 80093c0:	40014000 	.word	0x40014000
 80093c4:	40014400 	.word	0x40014400

080093c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2201      	movs	r2, #1
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a1a      	ldr	r2, [r3, #32]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	43db      	mvns	r3, r3
 80093ea:	401a      	ands	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1a      	ldr	r2, [r3, #32]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f003 031f 	and.w	r3, r3, #31
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009400:	431a      	orrs	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	621a      	str	r2, [r3, #32]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
	...

08009414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009428:	2302      	movs	r3, #2
 800942a:	e04f      	b.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a21      	ldr	r2, [pc, #132]	; (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d108      	bne.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800945c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4313      	orrs	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a14      	ldr	r2, [pc, #80]	; (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009494:	d004      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a10      	ldr	r2, [pc, #64]	; (80094dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	40012c00 	.word	0x40012c00
 80094dc:	40014000 	.word	0x40014000

080094e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800951c:	b084      	sub	sp, #16
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	f107 0014 	add.w	r0, r7, #20
 800952a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	b004      	add	sp, #16
 800953c:	4770      	bx	lr

0800953e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800954e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009574:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	b29b      	uxth	r3, r3
 8009586:	43db      	mvns	r3, r3
 8009588:	b29b      	uxth	r3, r3
 800958a:	4013      	ands	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095bc:	b084      	sub	sp, #16
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	f107 0014 	add.w	r0, r7, #20
 80095ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	b004      	add	sp, #16
 80095fc:	4770      	bx	lr
	...

08009600 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009600:	b480      	push	{r7}
 8009602:	b09d      	sub	sp, #116	; 0x74
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	78db      	ldrb	r3, [r3, #3]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d81f      	bhi.n	8009672 <USB_ActivateEndpoint+0x72>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <USB_ActivateEndpoint+0x38>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	08009649 	.word	0x08009649
 800963c:	08009665 	.word	0x08009665
 8009640:	0800967b 	.word	0x0800967b
 8009644:	08009657 	.word	0x08009657
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009648:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800964c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009650:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009654:	e012      	b.n	800967c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009656:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800965a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800965e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009662:	e00b      	b.n	800967c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009664:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800966c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009670:	e004      	b.n	800967c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009678:	e000      	b.n	800967c <USB_ActivateEndpoint+0x7c>
      break;
 800967a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	441a      	add	r2, r3
 8009686:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800968a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800968e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800969a:	b29b      	uxth	r3, r3
 800969c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	b21b      	sxth	r3, r3
 80096ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	b21b      	sxth	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	b21b      	sxth	r3, r3
 80096c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	441a      	add	r2, r3
 80096d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80096d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	7b1b      	ldrb	r3, [r3, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f040 816e 	bne.w	80099ce <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	785b      	ldrb	r3, [r3, #1]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8084 	beq.w	8009804 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	61bb      	str	r3, [r7, #24]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009706:	b29b      	uxth	r3, r3
 8009708:	461a      	mov	r2, r3
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	4413      	add	r3, r2
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	00da      	lsls	r2, r3, #3
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800971e:	617b      	str	r3, [r7, #20]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	88db      	ldrh	r3, [r3, #6]
 8009724:	085b      	lsrs	r3, r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	827b      	strh	r3, [r7, #18]
 800973e:	8a7b      	ldrh	r3, [r7, #18]
 8009740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01b      	beq.n	8009780 <USB_ActivateEndpoint+0x180>
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800975a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975e:	823b      	strh	r3, [r7, #16]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	441a      	add	r2, r3
 800976a:	8a3b      	ldrh	r3, [r7, #16]
 800976c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800977c:	b29b      	uxth	r3, r3
 800977e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	78db      	ldrb	r3, [r3, #3]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d020      	beq.n	80097ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800979a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800979e:	81bb      	strh	r3, [r7, #12]
 80097a0:	89bb      	ldrh	r3, [r7, #12]
 80097a2:	f083 0320 	eor.w	r3, r3, #32
 80097a6:	81bb      	strh	r3, [r7, #12]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	89bb      	ldrh	r3, [r7, #12]
 80097b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	8013      	strh	r3, [r2, #0]
 80097c8:	e2cb      	b.n	8009d62 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097e0:	81fb      	strh	r3, [r7, #14]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	441a      	add	r2, r3
 80097ec:	89fb      	ldrh	r3, [r7, #14]
 80097ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fe:	b29b      	uxth	r3, r3
 8009800:	8013      	strh	r3, [r2, #0]
 8009802:	e2ae      	b.n	8009d62 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	633b      	str	r3, [r7, #48]	; 0x30
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	4413      	add	r3, r2
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	00da      	lsls	r2, r3, #3
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	4413      	add	r3, r2
 8009822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	88db      	ldrh	r3, [r3, #6]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	b29b      	uxth	r3, r3
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009842:	b29b      	uxth	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	4413      	add	r3, r2
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	00da      	lsls	r2, r3, #3
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	4413      	add	r3, r2
 8009856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b3e      	cmp	r3, #62	; 0x3e
 8009862:	d918      	bls.n	8009896 <USB_ActivateEndpoint+0x296>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	66bb      	str	r3, [r7, #104]	; 0x68
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	f003 031f 	and.w	r3, r3, #31
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <USB_ActivateEndpoint+0x27e>
 8009878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800987a:	3b01      	subs	r3, #1
 800987c:	66bb      	str	r3, [r7, #104]	; 0x68
 800987e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009880:	b29b      	uxth	r3, r3
 8009882:	029b      	lsls	r3, r3, #10
 8009884:	b29b      	uxth	r3, r3
 8009886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988e:	b29a      	uxth	r2, r3
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	801a      	strh	r2, [r3, #0]
 8009894:	e029      	b.n	80098ea <USB_ActivateEndpoint+0x2ea>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d112      	bne.n	80098c4 <USB_ActivateEndpoint+0x2c4>
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098bc:	b29a      	uxth	r2, r3
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	801a      	strh	r2, [r3, #0]
 80098c2:	e012      	b.n	80098ea <USB_ActivateEndpoint+0x2ea>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <USB_ActivateEndpoint+0x2de>
 80098d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098da:	3301      	adds	r3, #1
 80098dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80098de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80098f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01b      	beq.n	800993a <USB_ActivateEndpoint+0x33a>
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	b29b      	uxth	r3, r3
 8009910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009918:	843b      	strh	r3, [r7, #32]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	441a      	add	r2, r3
 8009924:	8c3b      	ldrh	r3, [r7, #32]
 8009926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800992a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009936:	b29b      	uxth	r3, r3
 8009938:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d124      	bne.n	800998c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	83bb      	strh	r3, [r7, #28]
 800995a:	8bbb      	ldrh	r3, [r7, #28]
 800995c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009960:	83bb      	strh	r3, [r7, #28]
 8009962:	8bbb      	ldrh	r3, [r7, #28]
 8009964:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009968:	83bb      	strh	r3, [r7, #28]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	441a      	add	r2, r3
 8009974:	8bbb      	ldrh	r3, [r7, #28]
 8009976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009986:	b29b      	uxth	r3, r3
 8009988:	8013      	strh	r3, [r2, #0]
 800998a:	e1ea      	b.n	8009d62 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800999e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a2:	83fb      	strh	r3, [r7, #30]
 80099a4:	8bfb      	ldrh	r3, [r7, #30]
 80099a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099aa:	83fb      	strh	r3, [r7, #30]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	441a      	add	r2, r3
 80099b6:	8bfb      	ldrh	r3, [r7, #30]
 80099b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	8013      	strh	r3, [r2, #0]
 80099cc:	e1c9      	b.n	8009d62 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	78db      	ldrb	r3, [r3, #3]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d11e      	bne.n	8009a14 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	441a      	add	r2, r3
 80099fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80099fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	8013      	strh	r3, [r2, #0]
 8009a12:	e01d      	b.n	8009a50 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	441a      	add	r2, r3
 8009a38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a60:	4413      	add	r3, r2
 8009a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	00da      	lsls	r2, r3, #3
 8009a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	891b      	ldrh	r3, [r3, #8]
 8009a78:	085b      	lsrs	r3, r3, #1
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	657b      	str	r3, [r7, #84]	; 0x54
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a94:	4413      	add	r3, r2
 8009a96:	657b      	str	r3, [r7, #84]	; 0x54
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	00da      	lsls	r2, r3, #3
 8009a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	895b      	ldrh	r3, [r3, #10]
 8009aac:	085b      	lsrs	r3, r3, #1
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8093 	bne.w	8009be8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ad2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01b      	beq.n	8009b16 <USB_ActivateEndpoint+0x516>
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	441a      	add	r2, r3
 8009b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01b      	beq.n	8009b66 <USB_ActivateEndpoint+0x566>
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b44:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	441a      	add	r2, r3
 8009b50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b84:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b8c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	441a      	add	r2, r3
 8009b98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	441a      	add	r2, r3
 8009bd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	8013      	strh	r3, [r2, #0]
 8009be6:	e0bc      	b.n	8009d62 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01d      	beq.n	8009c40 <USB_ActivateEndpoint+0x640>
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	441a      	add	r2, r3
 8009c28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01d      	beq.n	8009c98 <USB_ActivateEndpoint+0x698>
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	441a      	add	r2, r3
 8009c80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	78db      	ldrb	r3, [r3, #3]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d024      	beq.n	8009cea <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cbe:	f083 0320 	eor.w	r3, r3, #32
 8009cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	441a      	add	r2, r3
 8009cd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	8013      	strh	r3, [r2, #0]
 8009ce8:	e01d      	b.n	8009d26 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	441a      	add	r2, r3
 8009d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	441a      	add	r2, r3
 8009d4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3774      	adds	r7, #116	; 0x74
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop

08009d74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b08d      	sub	sp, #52	; 0x34
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	7b1b      	ldrb	r3, [r3, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 808e 	bne.w	8009ea4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d044      	beq.n	8009e1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	81bb      	strh	r3, [r7, #12]
 8009d9e:	89bb      	ldrh	r3, [r7, #12]
 8009da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01b      	beq.n	8009de0 <USB_DeactivateEndpoint+0x6c>
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	817b      	strh	r3, [r7, #10]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	441a      	add	r2, r3
 8009dca:	897b      	ldrh	r3, [r7, #10]
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df6:	813b      	strh	r3, [r7, #8]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	441a      	add	r2, r3
 8009e02:	893b      	ldrh	r3, [r7, #8]
 8009e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	8013      	strh	r3, [r2, #0]
 8009e18:	e192      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	827b      	strh	r3, [r7, #18]
 8009e28:	8a7b      	ldrh	r3, [r7, #18]
 8009e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01b      	beq.n	8009e6a <USB_DeactivateEndpoint+0xf6>
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e48:	823b      	strh	r3, [r7, #16]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	441a      	add	r2, r3
 8009e54:	8a3b      	ldrh	r3, [r7, #16]
 8009e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e80:	81fb      	strh	r3, [r7, #14]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8013      	strh	r3, [r2, #0]
 8009ea2:	e14d      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 80a5 	bne.w	8009ff8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	843b      	strh	r3, [r7, #32]
 8009ebc:	8c3b      	ldrh	r3, [r7, #32]
 8009ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01b      	beq.n	8009efe <USB_DeactivateEndpoint+0x18a>
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009edc:	83fb      	strh	r3, [r7, #30]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	441a      	add	r2, r3
 8009ee8:	8bfb      	ldrh	r3, [r7, #30]
 8009eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	83bb      	strh	r3, [r7, #28]
 8009f0c:	8bbb      	ldrh	r3, [r7, #28]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01b      	beq.n	8009f4e <USB_DeactivateEndpoint+0x1da>
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2c:	837b      	strh	r3, [r7, #26]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	441a      	add	r2, r3
 8009f38:	8b7b      	ldrh	r3, [r7, #26]
 8009f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f64:	833b      	strh	r3, [r7, #24]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	441a      	add	r2, r3
 8009f70:	8b3b      	ldrh	r3, [r7, #24]
 8009f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9c:	82fb      	strh	r3, [r7, #22]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	8afb      	ldrh	r3, [r7, #22]
 8009faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd4:	82bb      	strh	r3, [r7, #20]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	441a      	add	r2, r3
 8009fe0:	8abb      	ldrh	r3, [r7, #20]
 8009fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	8013      	strh	r3, [r2, #0]
 8009ff6:	e0a3      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01b      	beq.n	800a048 <USB_DeactivateEndpoint+0x2d4>
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	441a      	add	r2, r3
 800a032:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a03c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a044:	b29b      	uxth	r3, r3
 800a046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01b      	beq.n	800a098 <USB_DeactivateEndpoint+0x324>
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a076:	853b      	strh	r3, [r7, #40]	; 0x28
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	441a      	add	r2, r3
 800a082:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a094:	b29b      	uxth	r3, r3
 800a096:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	441a      	add	r2, r3
 800a0ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	441a      	add	r2, r3
 800a0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	441a      	add	r2, r3
 800a12a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3734      	adds	r7, #52	; 0x34
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b0c2      	sub	sp, #264	; 0x108
 800a152:	af00      	add	r7, sp, #0
 800a154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a15c:	6018      	str	r0, [r3, #0]
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	f040 867b 	bne.w	800ae70 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	429a      	cmp	r2, r3
 800a194:	d908      	bls.n	800a1a8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1a6:	e007      	b.n	800a1b8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	7b1b      	ldrb	r3, [r3, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d13a      	bne.n	800a23e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6959      	ldr	r1, [r3, #20]
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	88da      	ldrh	r2, [r3, #6]
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a1ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	f001 fc3e 	bl	800ba70 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a20e:	b29b      	uxth	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	4413      	add	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	00da      	lsls	r2, r3, #3
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	f000 bde3 	b.w	800ae04 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	78db      	ldrb	r3, [r3, #3]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	f040 843a 	bne.w	800aac4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	429a      	cmp	r2, r3
 800a26a:	f240 83b7 	bls.w	800a9dc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a294:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	441a      	add	r2, r3
 800a2b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6a1a      	ldr	r2, [r3, #32]
 800a2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 81b3 	beq.w	800a676 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	633b      	str	r3, [r7, #48]	; 0x30
 800a31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d16d      	bne.n	800a408 <USB_EPStartXfer+0x2ba>
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
 800a338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a346:	b29b      	uxth	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	4413      	add	r3, r2
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	00da      	lsls	r2, r3, #3
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	4413      	add	r3, r2
 800a362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36c:	2b3e      	cmp	r3, #62	; 0x3e
 800a36e:	d91c      	bls.n	800a3aa <USB_EPStartXfer+0x25c>
 800a370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2b00      	cmp	r3, #0
 800a384:	d104      	bne.n	800a390 <USB_EPStartXfer+0x242>
 800a386:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a38a:	3b01      	subs	r3, #1
 800a38c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a390:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a394:	b29b      	uxth	r3, r3
 800a396:	029b      	lsls	r3, r3, #10
 800a398:	b29b      	uxth	r3, r3
 800a39a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	e053      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d112      	bne.n	800a3d8 <USB_EPStartXfer+0x28a>
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	801a      	strh	r2, [r3, #0]
 800a3d6:	e03c      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <USB_EPStartXfer+0x2aa>
 800a3ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	029b      	lsls	r3, r3, #10
 800a400:	b29a      	uxth	r2, r3
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e024      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d11c      	bne.n	800a452 <USB_EPStartXfer+0x304>
 800a418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a426:	b29b      	uxth	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	4413      	add	r3, r2
 800a42e:	633b      	str	r3, [r7, #48]	; 0x30
 800a430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	00da      	lsls	r2, r3, #3
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	4413      	add	r3, r2
 800a442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	895b      	ldrh	r3, [r3, #10]
 800a45e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6959      	ldr	r1, [r3, #20]
 800a46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a472:	b29b      	uxth	r3, r3
 800a474:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a478:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a47c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	f001 faf5 	bl	800ba70 <USB_WritePMA>
            ep->xfer_buff += len;
 800a486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	695a      	ldr	r2, [r3, #20]
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a496:	441a      	add	r2, r3
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6a1a      	ldr	r2, [r3, #32]
 800a4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d90f      	bls.n	800a4e0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a1a      	ldr	r2, [r3, #32]
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	1ad2      	subs	r2, r2, r3
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	621a      	str	r2, [r3, #32]
 800a4de:	e00e      	b.n	800a4fe <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d16d      	bne.n	800a5ea <USB_EPStartXfer+0x49c>
 800a50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a528:	b29b      	uxth	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	4413      	add	r3, r2
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	00da      	lsls	r2, r3, #3
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	4413      	add	r3, r2
 800a544:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a548:	617b      	str	r3, [r7, #20]
 800a54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54e:	2b3e      	cmp	r3, #62	; 0x3e
 800a550:	d91c      	bls.n	800a58c <USB_EPStartXfer+0x43e>
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a560:	f003 031f 	and.w	r3, r3, #31
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <USB_EPStartXfer+0x424>
 800a568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56c:	3b01      	subs	r3, #1
 800a56e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a576:	b29b      	uxth	r3, r3
 800a578:	029b      	lsls	r3, r3, #10
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a584:	b29a      	uxth	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	801a      	strh	r2, [r3, #0]
 800a58a:	e059      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a590:	2b00      	cmp	r3, #0
 800a592:	d112      	bne.n	800a5ba <USB_EPStartXfer+0x46c>
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	801a      	strh	r2, [r3, #0]
 800a5b8:	e042      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <USB_EPStartXfer+0x48c>
 800a5d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	029b      	lsls	r3, r3, #10
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e02a      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d122      	bne.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a614:	b29b      	uxth	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	4413      	add	r3, r2
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	00da      	lsls	r2, r3, #3
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	4413      	add	r3, r2
 800a630:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	891b      	ldrh	r3, [r3, #8]
 800a64c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6959      	ldr	r1, [r3, #20]
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a660:	b29b      	uxth	r3, r3
 800a662:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a666:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a66a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	f001 f9fe 	bl	800ba70 <USB_WritePMA>
 800a674:	e3c6      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d16d      	bne.n	800a762 <USB_EPStartXfer+0x614>
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	64bb      	str	r3, [r7, #72]	; 0x48
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a6:	4413      	add	r3, r2
 800a6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	00da      	lsls	r2, r3, #3
 800a6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6c8:	d91c      	bls.n	800a704 <USB_EPStartXfer+0x5b6>
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d8:	f003 031f 	and.w	r3, r3, #31
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <USB_EPStartXfer+0x59c>
 800a6e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	029b      	lsls	r3, r3, #10
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a700:	801a      	strh	r2, [r3, #0]
 800a702:	e059      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d112      	bne.n	800a732 <USB_EPStartXfer+0x5e4>
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	b29b      	uxth	r3, r3
 800a712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a716:	b29a      	uxth	r2, r3
 800a718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71a:	801a      	strh	r2, [r3, #0]
 800a71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e042      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <USB_EPStartXfer+0x604>
 800a748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a74c:	3301      	adds	r3, #1
 800a74e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e02a      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d122      	bne.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	653b      	str	r3, [r7, #80]	; 0x50
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a792:	4413      	add	r3, r2
 800a794:	653b      	str	r3, [r7, #80]	; 0x50
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	00da      	lsls	r2, r3, #3
 800a7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	891b      	ldrh	r3, [r3, #8]
 800a7c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6959      	ldr	r1, [r3, #20]
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	f001 f942 	bl	800ba70 <USB_WritePMA>
            ep->xfer_buff += len;
 800a7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695a      	ldr	r2, [r3, #20]
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	441a      	add	r2, r3
 800a7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6a1a      	ldr	r2, [r3, #32]
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90f      	bls.n	800a846 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a1a      	ldr	r2, [r3, #32]
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	621a      	str	r2, [r3, #32]
 800a844:	e00e      	b.n	800a864 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	643b      	str	r3, [r7, #64]	; 0x40
 800a870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d16d      	bne.n	800a95c <USB_EPStartXfer+0x80e>
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	4413      	add	r3, r2
 800a8a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	00da      	lsls	r2, r3, #3
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c0:	2b3e      	cmp	r3, #62	; 0x3e
 800a8c2:	d91c      	bls.n	800a8fe <USB_EPStartXfer+0x7b0>
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <USB_EPStartXfer+0x796>
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	029b      	lsls	r3, r3, #10
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	801a      	strh	r2, [r3, #0]
 800a8fc:	e053      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	2b00      	cmp	r3, #0
 800a904:	d112      	bne.n	800a92c <USB_EPStartXfer+0x7de>
 800a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a910:	b29a      	uxth	r2, r3
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a924:	b29a      	uxth	r2, r3
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	e03c      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a930:	085b      	lsrs	r3, r3, #1
 800a932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d004      	beq.n	800a94c <USB_EPStartXfer+0x7fe>
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a946:	3301      	adds	r3, #1
 800a948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a950:	b29b      	uxth	r3, r3
 800a952:	029b      	lsls	r3, r3, #10
 800a954:	b29a      	uxth	r2, r3
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e024      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d11c      	bne.n	800a9a6 <USB_EPStartXfer+0x858>
 800a96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a980:	4413      	add	r3, r2
 800a982:	643b      	str	r3, [r7, #64]	; 0x40
 800a984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	00da      	lsls	r2, r3, #3
 800a992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a994:	4413      	add	r3, r2
 800a996:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	895b      	ldrh	r3, [r3, #10]
 800a9b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9d4:	6800      	ldr	r0, [r0, #0]
 800a9d6:	f001 f84b 	bl	800ba70 <USB_WritePMA>
 800a9da:	e213      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	441a      	add	r2, r3
 800aa30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa68:	4413      	add	r3, r2
 800aa6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	00da      	lsls	r2, r3, #3
 800aa7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa82:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	891b      	ldrh	r3, [r3, #8]
 800aa9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6959      	ldr	r1, [r3, #20]
 800aaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aab4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aab8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aabc:	6800      	ldr	r0, [r0, #0]
 800aabe:	f000 ffd7 	bl	800ba70 <USB_WritePMA>
 800aac2:	e19f      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6a1a      	ldr	r2, [r3, #32]
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad4:	1ad2      	subs	r2, r2, r3
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80bc 	beq.w	800ac82 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	673b      	str	r3, [r7, #112]	; 0x70
 800ab16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	785b      	ldrb	r3, [r3, #1]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d16d      	bne.n	800ac02 <USB_EPStartXfer+0xab4>
 800ab26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	461a      	mov	r2, r3
 800ab44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab46:	4413      	add	r3, r2
 800ab48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	00da      	lsls	r2, r3, #3
 800ab58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab60:	667b      	str	r3, [r7, #100]	; 0x64
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab66:	2b3e      	cmp	r3, #62	; 0x3e
 800ab68:	d91c      	bls.n	800aba4 <USB_EPStartXfer+0xa56>
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	095b      	lsrs	r3, r3, #5
 800ab70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	f003 031f 	and.w	r3, r3, #31
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <USB_EPStartXfer+0xa3c>
 800ab80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab84:	3b01      	subs	r3, #1
 800ab86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	029b      	lsls	r3, r3, #10
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba0:	801a      	strh	r2, [r3, #0]
 800aba2:	e053      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d112      	bne.n	800abd2 <USB_EPStartXfer+0xa84>
 800abac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abba:	801a      	strh	r2, [r3, #0]
 800abbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	e03c      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <USB_EPStartXfer+0xaa4>
 800abe8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abec:	3301      	adds	r3, #1
 800abee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	029b      	lsls	r3, r3, #10
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e024      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800ac02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d11c      	bne.n	800ac4c <USB_EPStartXfer+0xafe>
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac26:	4413      	add	r3, r2
 800ac28:	673b      	str	r3, [r7, #112]	; 0x70
 800ac2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	00da      	lsls	r2, r3, #3
 800ac38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6959      	ldr	r1, [r3, #20]
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	f000 fef8 	bl	800ba70 <USB_WritePMA>
 800ac80:	e0c0      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d16d      	bne.n	800ad6e <USB_EPStartXfer+0xc20>
 800ac92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acac:	b29b      	uxth	r3, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acb2:	4413      	add	r3, r2
 800acb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	00da      	lsls	r2, r3, #3
 800acc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acc6:	4413      	add	r3, r2
 800acc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800accc:	67bb      	str	r3, [r7, #120]	; 0x78
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd2:	2b3e      	cmp	r3, #62	; 0x3e
 800acd4:	d91c      	bls.n	800ad10 <USB_EPStartXfer+0xbc2>
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <USB_EPStartXfer+0xba8>
 800acec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	029b      	lsls	r3, r3, #10
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad0c:	801a      	strh	r2, [r3, #0]
 800ad0e:	e05f      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d112      	bne.n	800ad3e <USB_EPStartXfer+0xbf0>
 800ad18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad26:	801a      	strh	r2, [r3, #0]
 800ad28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad3a:	801a      	strh	r2, [r3, #0]
 800ad3c:	e048      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <USB_EPStartXfer+0xc10>
 800ad54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad58:	3301      	adds	r3, #1
 800ad5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	029b      	lsls	r3, r3, #10
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6a:	801a      	strh	r2, [r3, #0]
 800ad6c:	e030      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d128      	bne.n	800add0 <USB_EPStartXfer+0xc82>
 800ad7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ada2:	4413      	add	r3, r2
 800ada4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	00da      	lsls	r2, r3, #3
 800adb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adba:	4413      	add	r3, r2
 800adbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc8:	b29a      	uxth	r2, r3
 800adca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800add0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	891b      	ldrh	r3, [r3, #8]
 800addc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ade0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6959      	ldr	r1, [r3, #20]
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adf6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adfa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adfe:	6800      	ldr	r0, [r0, #0]
 800ae00:	f000 fe36 	bl	800ba70 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae2a:	817b      	strh	r3, [r7, #10]
 800ae2c:	897b      	ldrh	r3, [r7, #10]
 800ae2e:	f083 0310 	eor.w	r3, r3, #16
 800ae32:	817b      	strh	r3, [r7, #10]
 800ae34:	897b      	ldrh	r3, [r7, #10]
 800ae36:	f083 0320 	eor.w	r3, r3, #32
 800ae3a:	817b      	strh	r3, [r7, #10]
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	441a      	add	r2, r3
 800ae56:	897b      	ldrh	r3, [r7, #10]
 800ae58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	8013      	strh	r3, [r2, #0]
 800ae6c:	f000 bc9f 	b.w	800b7ae <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	7b1b      	ldrb	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f040 80ae 	bne.w	800afde <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d917      	bls.n	800aece <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	619a      	str	r2, [r3, #24]
 800aecc:	e00e      	b.n	800aeec <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2200      	movs	r2, #0
 800aeea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aeec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af08:	b29b      	uxth	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af10:	4413      	add	r3, r2
 800af12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	00da      	lsls	r2, r3, #3
 800af24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af28:	4413      	add	r3, r2
 800af2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	2b3e      	cmp	r3, #62	; 0x3e
 800af38:	d91d      	bls.n	800af76 <USB_EPStartXfer+0xe28>
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <USB_EPStartXfer+0xe0c>
 800af50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af54:	3b01      	subs	r3, #1
 800af56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af5e:	b29b      	uxth	r3, r3
 800af60:	029b      	lsls	r3, r3, #10
 800af62:	b29b      	uxth	r3, r3
 800af64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	e3e1      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d116      	bne.n	800afac <USB_EPStartXfer+0xe5e>
 800af7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af90:	801a      	strh	r2, [r3, #0]
 800af92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	e3c6      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	085b      	lsrs	r3, r3, #1
 800afb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <USB_EPStartXfer+0xe7e>
 800afc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afc6:	3301      	adds	r3, #1
 800afc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	029b      	lsls	r3, r3, #10
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afda:	801a      	strh	r2, [r3, #0]
 800afdc:	e3ad      	b.n	800b73a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	78db      	ldrb	r3, [r3, #3]
 800afea:	2b02      	cmp	r3, #2
 800afec:	f040 8200 	bne.w	800b3f0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8091 	bne.w	800b124 <USB_EPStartXfer+0xfd6>
 800b002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01e:	b29b      	uxth	r3, r3
 800b020:	461a      	mov	r2, r3
 800b022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b026:	4413      	add	r3, r2
 800b028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	00da      	lsls	r2, r3, #3
 800b03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b03e:	4413      	add	r3, r2
 800b040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b3e      	cmp	r3, #62	; 0x3e
 800b056:	d925      	bls.n	800b0a4 <USB_EPStartXfer+0xf56>
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	095b      	lsrs	r3, r3, #5
 800b066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <USB_EPStartXfer+0xf3a>
 800b07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b082:	3b01      	subs	r3, #1
 800b084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	029b      	lsls	r3, r3, #10
 800b090:	b29b      	uxth	r3, r3
 800b092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0a0:	801a      	strh	r2, [r3, #0]
 800b0a2:	e074      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d116      	bne.n	800b0e2 <USB_EPStartXfer+0xf94>
 800b0b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0c6:	801a      	strh	r2, [r3, #0]
 800b0c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0de:	801a      	strh	r2, [r3, #0]
 800b0e0:	e055      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <USB_EPStartXfer+0xfc4>
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10c:	3301      	adds	r3, #1
 800b10e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b116:	b29b      	uxth	r3, r3
 800b118:	029b      	lsls	r3, r3, #10
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b120:	801a      	strh	r2, [r3, #0]
 800b122:	e034      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d12c      	bne.n	800b18e <USB_EPStartXfer+0x1040>
 800b134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b150:	b29b      	uxth	r3, r3
 800b152:	461a      	mov	r2, r3
 800b154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b158:	4413      	add	r3, r2
 800b15a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	00da      	lsls	r2, r3, #3
 800b16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b170:	4413      	add	r3, r2
 800b172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	b29a      	uxth	r2, r3
 800b188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 8091 	bne.w	800b2d0 <USB_EPStartXfer+0x1182>
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	00da      	lsls	r2, r3, #3
 800b1e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	2b3e      	cmp	r3, #62	; 0x3e
 800b202:	d925      	bls.n	800b250 <USB_EPStartXfer+0x1102>
 800b204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f003 031f 	and.w	r3, r3, #31
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <USB_EPStartXfer+0x10e6>
 800b22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22e:	3b01      	subs	r3, #1
 800b230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b238:	b29b      	uxth	r3, r3
 800b23a:	029b      	lsls	r3, r3, #10
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b246:	b29a      	uxth	r2, r3
 800b248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	e06d      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d116      	bne.n	800b28e <USB_EPStartXfer+0x1140>
 800b260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	b29b      	uxth	r3, r3
 800b268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b272:	801a      	strh	r2, [r3, #0]
 800b274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b284:	b29a      	uxth	r2, r3
 800b286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e04e      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	085b      	lsrs	r3, r3, #1
 800b29c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d004      	beq.n	800b2be <USB_EPStartXfer+0x1170>
 800b2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	029b      	lsls	r3, r3, #10
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	e02d      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d125      	bne.n	800b32c <USB_EPStartXfer+0x11de>
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	00da      	lsls	r2, r3, #3
 800b30a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b30e:	4413      	add	r3, r2
 800b310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	b29a      	uxth	r2, r3
 800b326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 81fe 	beq.w	800b73a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b35e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <USB_EPStartXfer+0x1228>
 800b36a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10d      	bne.n	800b392 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b376:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b37a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f040 81db 	bne.w	800b73a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 81d4 	bne.w	800b73a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	441a      	add	r2, r3
 800b3d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8013      	strh	r3, [r2, #0]
 800b3ee:	e1a4      	b.n	800b73a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	78db      	ldrb	r3, [r3, #3]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	f040 819a 	bne.w	800b736 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d917      	bls.n	800b44e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	619a      	str	r2, [r3, #24]
 800b44c:	e00e      	b.n	800b46c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2200      	movs	r2, #0
 800b46a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d178      	bne.n	800b56e <USB_EPStartXfer+0x1420>
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b498:	b29b      	uxth	r3, r3
 800b49a:	461a      	mov	r2, r3
 800b49c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	00da      	lsls	r2, r3, #3
 800b4b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b4c8:	d91d      	bls.n	800b506 <USB_EPStartXfer+0x13b8>
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	095b      	lsrs	r3, r3, #5
 800b4d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	f003 031f 	and.w	r3, r3, #31
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d104      	bne.n	800b4ea <USB_EPStartXfer+0x139c>
 800b4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	029b      	lsls	r3, r3, #10
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	e064      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d116      	bne.n	800b53c <USB_EPStartXfer+0x13ee>
 800b50e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b532:	b29a      	uxth	r2, r3
 800b534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e049      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b540:	085b      	lsrs	r3, r3, #1
 800b542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <USB_EPStartXfer+0x140e>
 800b552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b556:	3301      	adds	r3, #1
 800b558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b55c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b560:	b29b      	uxth	r3, r3
 800b562:	029b      	lsls	r3, r3, #10
 800b564:	b29a      	uxth	r2, r3
 800b566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e030      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d128      	bne.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	461a      	mov	r2, r3
 800b59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	00da      	lsls	r2, r3, #3
 800b5b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5ce:	801a      	strh	r2, [r3, #0]
 800b5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d178      	bne.n	800b6e0 <USB_EPStartXfer+0x1592>
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b612:	4413      	add	r3, r2
 800b614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	00da      	lsls	r2, r3, #3
 800b626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b62a:	4413      	add	r3, r2
 800b62c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	2b3e      	cmp	r3, #62	; 0x3e
 800b63a:	d91d      	bls.n	800b678 <USB_EPStartXfer+0x152a>
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b640:	095b      	lsrs	r3, r3, #5
 800b642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	f003 031f 	and.w	r3, r3, #31
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d104      	bne.n	800b65c <USB_EPStartXfer+0x150e>
 800b652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b656:	3b01      	subs	r3, #1
 800b658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b65c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b660:	b29b      	uxth	r3, r3
 800b662:	029b      	lsls	r3, r3, #10
 800b664:	b29b      	uxth	r3, r3
 800b666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66e:	b29a      	uxth	r2, r3
 800b670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	e060      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d116      	bne.n	800b6ae <USB_EPStartXfer+0x1560>
 800b680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b692:	801a      	strh	r2, [r3, #0]
 800b694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6aa:	801a      	strh	r2, [r3, #0]
 800b6ac:	e045      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <USB_EPStartXfer+0x1580>
 800b6c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	029b      	lsls	r3, r3, #10
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e02c      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d124      	bne.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	461a      	mov	r2, r3
 800b702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b706:	4413      	add	r3, r2
 800b708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	00da      	lsls	r2, r3, #3
 800b71a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b71e:	4413      	add	r3, r2
 800b720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e001      	b.n	800b73a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e03a      	b.n	800b7b0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b760:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b764:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b76c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b770:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b778:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	441a      	add	r2, r3
 800b796:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b085      	sub	sp, #20
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	785b      	ldrb	r3, [r3, #1]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d020      	beq.n	800b80e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e2:	81bb      	strh	r3, [r7, #12]
 800b7e4:	89bb      	ldrh	r3, [r7, #12]
 800b7e6:	f083 0310 	eor.w	r3, r3, #16
 800b7ea:	81bb      	strh	r3, [r7, #12]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	441a      	add	r2, r3
 800b7f6:	89bb      	ldrh	r3, [r7, #12]
 800b7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b808:	b29b      	uxth	r3, r3
 800b80a:	8013      	strh	r3, [r2, #0]
 800b80c:	e01f      	b.n	800b84e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b824:	81fb      	strh	r3, [r7, #14]
 800b826:	89fb      	ldrh	r3, [r7, #14]
 800b828:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b82c:	81fb      	strh	r3, [r7, #14]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	441a      	add	r2, r3
 800b838:	89fb      	ldrh	r3, [r7, #14]
 800b83a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b83e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	7b1b      	ldrb	r3, [r3, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f040 809d 	bne.w	800b9aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	785b      	ldrb	r3, [r3, #1]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d04c      	beq.n	800b912 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	823b      	strh	r3, [r7, #16]
 800b886:	8a3b      	ldrh	r3, [r7, #16]
 800b888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01b      	beq.n	800b8c8 <USB_EPClearStall+0x6c>
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a6:	81fb      	strh	r3, [r7, #14]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
 800b8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d06c      	beq.n	800b9aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	81bb      	strh	r3, [r7, #12]
 800b8e8:	89bb      	ldrh	r3, [r7, #12]
 800b8ea:	f083 0320 	eor.w	r3, r3, #32
 800b8ee:	81bb      	strh	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	441a      	add	r2, r3
 800b8fa:	89bb      	ldrh	r3, [r7, #12]
 800b8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	8013      	strh	r3, [r2, #0]
 800b910:	e04b      	b.n	800b9aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	82fb      	strh	r3, [r7, #22]
 800b920:	8afb      	ldrh	r3, [r7, #22]
 800b922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d01b      	beq.n	800b962 <USB_EPClearStall+0x106>
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b940:	82bb      	strh	r3, [r7, #20]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	441a      	add	r2, r3
 800b94c:	8abb      	ldrh	r3, [r7, #20]
 800b94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95e:	b29b      	uxth	r3, r3
 800b960:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b978:	827b      	strh	r3, [r7, #18]
 800b97a:	8a7b      	ldrh	r3, [r7, #18]
 800b97c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b980:	827b      	strh	r3, [r7, #18]
 800b982:	8a7b      	ldrh	r3, [r7, #18]
 800b984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b988:	827b      	strh	r3, [r7, #18]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	441a      	add	r2, r3
 800b994:	8a7b      	ldrh	r3, [r7, #18]
 800b996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b99a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b99e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d103      	bne.n	800b9d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2280      	movs	r2, #128	; 0x80
 800b9ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b08b      	sub	sp, #44	; 0x2c
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	460b      	mov	r3, r1
 800ba80:	80fb      	strh	r3, [r7, #6]
 800ba82:	4613      	mov	r3, r2
 800ba84:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba86:	88bb      	ldrh	r3, [r7, #4]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba96:	88fa      	ldrh	r2, [r7, #6]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baa0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
 800baa6:	e01b      	b.n	800bae0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	3301      	adds	r3, #1
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	021b      	lsls	r3, r3, #8
 800bab6:	b21a      	sxth	r2, r3
 800bab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800babc:	4313      	orrs	r3, r2
 800babe:	b21b      	sxth	r3, r3
 800bac0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	8a7a      	ldrh	r2, [r7, #18]
 800bac6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	3302      	adds	r3, #2
 800bacc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	3301      	adds	r3, #1
 800bad2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	3301      	adds	r3, #1
 800bad8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	3b01      	subs	r3, #1
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e0      	bne.n	800baa8 <USB_WritePMA+0x38>
  }
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	372c      	adds	r7, #44	; 0x2c
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b08b      	sub	sp, #44	; 0x2c
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4611      	mov	r1, r2
 800bb00:	461a      	mov	r2, r3
 800bb02:	460b      	mov	r3, r1
 800bb04:	80fb      	strh	r3, [r7, #6]
 800bb06:	4613      	mov	r3, r2
 800bb08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb0a:	88bb      	ldrh	r3, [r7, #4]
 800bb0c:	085b      	lsrs	r3, r3, #1
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb1a:	88fa      	ldrh	r2, [r7, #6]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2a:	e018      	b.n	800bb5e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	881b      	ldrh	r3, [r3, #0]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	3302      	adds	r3, #2
 800bb38:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	3301      	adds	r3, #1
 800bb46:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	0a1b      	lsrs	r3, r3, #8
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3301      	adds	r3, #1
 800bb56:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e3      	bne.n	800bb2c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb64:	88bb      	ldrh	r3, [r7, #4]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	701a      	strb	r2, [r3, #0]
  }
}
 800bb80:	bf00      	nop
 800bb82:	372c      	adds	r7, #44	; 0x2c
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb9c:	f002 f99c 	bl	800ded8 <USBD_static_malloc>
 800bba0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d105      	bne.n	800bbb4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	e066      	b.n	800bc82 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7c1b      	ldrb	r3, [r3, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d119      	bne.n	800bbf8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbc8:	2202      	movs	r2, #2
 800bbca:	2181      	movs	r1, #129	; 0x81
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 ff85 	bl	800dadc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbdc:	2202      	movs	r2, #2
 800bbde:	2101      	movs	r1, #1
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 ff7b 	bl	800dadc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2210      	movs	r2, #16
 800bbf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbf6:	e016      	b.n	800bc26 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbf8:	2340      	movs	r3, #64	; 0x40
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	2181      	movs	r1, #129	; 0x81
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 ff6c 	bl	800dadc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc0a:	2340      	movs	r3, #64	; 0x40
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	2101      	movs	r1, #1
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 ff63 	bl	800dadc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2210      	movs	r2, #16
 800bc22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc26:	2308      	movs	r3, #8
 800bc28:	2203      	movs	r2, #3
 800bc2a:	2182      	movs	r1, #130	; 0x82
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 ff55 	bl	800dadc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7c1b      	ldrb	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d109      	bne.n	800bc70 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc66:	2101      	movs	r1, #1
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f002 f8b3 	bl	800ddd4 <USBD_LL_PrepareReceive>
 800bc6e:	e007      	b.n	800bc80 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	2101      	movs	r1, #1
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f002 f8aa 	bl	800ddd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc96:	2181      	movs	r1, #129	; 0x81
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 ff5d 	bl	800db58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bca4:	2101      	movs	r1, #1
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 ff56 	bl	800db58 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bcb4:	2182      	movs	r1, #130	; 0x82
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 ff4e 	bl	800db58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00e      	beq.n	800bcf4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce6:	4618      	mov	r0, r3
 800bce8:	f002 f904 	bl	800def4 <USBD_static_free>
    pdev->pClassData = NULL;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bd16:	2300      	movs	r3, #0
 800bd18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e0af      	b.n	800be88 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d03f      	beq.n	800bdb4 <USBD_CDC_Setup+0xb4>
 800bd34:	2b20      	cmp	r3, #32
 800bd36:	f040 809f 	bne.w	800be78 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	88db      	ldrh	r3, [r3, #6]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d02e      	beq.n	800bda0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	b25b      	sxtb	r3, r3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	da16      	bge.n	800bd7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	88d2      	ldrh	r2, [r2, #6]
 800bd5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	2b07      	cmp	r3, #7
 800bd66:	bf28      	it	cs
 800bd68:	2307      	movcs	r3, #7
 800bd6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	89fa      	ldrh	r2, [r7, #14]
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 fa9f 	bl	800d2b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd78:	e085      	b.n	800be86 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	785a      	ldrb	r2, [r3, #1]
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	88db      	ldrh	r3, [r3, #6]
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd90:	6939      	ldr	r1, [r7, #16]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	88db      	ldrh	r3, [r3, #6]
 800bd96:	461a      	mov	r2, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 fab8 	bl	800d30e <USBD_CtlPrepareRx>
      break;
 800bd9e:	e072      	b.n	800be86 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	7850      	ldrb	r0, [r2, #1]
 800bdac:	2200      	movs	r2, #0
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	4798      	blx	r3
      break;
 800bdb2:	e068      	b.n	800be86 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	785b      	ldrb	r3, [r3, #1]
 800bdb8:	2b0b      	cmp	r3, #11
 800bdba:	d852      	bhi.n	800be62 <USBD_CDC_Setup+0x162>
 800bdbc:	a201      	add	r2, pc, #4	; (adr r2, 800bdc4 <USBD_CDC_Setup+0xc4>)
 800bdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc2:	bf00      	nop
 800bdc4:	0800bdf5 	.word	0x0800bdf5
 800bdc8:	0800be71 	.word	0x0800be71
 800bdcc:	0800be63 	.word	0x0800be63
 800bdd0:	0800be63 	.word	0x0800be63
 800bdd4:	0800be63 	.word	0x0800be63
 800bdd8:	0800be63 	.word	0x0800be63
 800bddc:	0800be63 	.word	0x0800be63
 800bde0:	0800be63 	.word	0x0800be63
 800bde4:	0800be63 	.word	0x0800be63
 800bde8:	0800be63 	.word	0x0800be63
 800bdec:	0800be1f 	.word	0x0800be1f
 800bdf0:	0800be49 	.word	0x0800be49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d107      	bne.n	800be10 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be00:	f107 030a 	add.w	r3, r7, #10
 800be04:	2202      	movs	r2, #2
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f001 fa54 	bl	800d2b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be0e:	e032      	b.n	800be76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 f9de 	bl	800d1d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	75fb      	strb	r3, [r7, #23]
          break;
 800be1c:	e02b      	b.n	800be76 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d107      	bne.n	800be3a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be2a:	f107 030d 	add.w	r3, r7, #13
 800be2e:	2201      	movs	r2, #1
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f001 fa3f 	bl	800d2b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be38:	e01d      	b.n	800be76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 f9c9 	bl	800d1d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800be42:	2303      	movs	r3, #3
 800be44:	75fb      	strb	r3, [r7, #23]
          break;
 800be46:	e016      	b.n	800be76 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b03      	cmp	r3, #3
 800be52:	d00f      	beq.n	800be74 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 f9bc 	bl	800d1d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800be5c:	2303      	movs	r3, #3
 800be5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be60:	e008      	b.n	800be74 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 f9b5 	bl	800d1d4 <USBD_CtlError>
          ret = USBD_FAIL;
 800be6a:	2303      	movs	r3, #3
 800be6c:	75fb      	strb	r3, [r7, #23]
          break;
 800be6e:	e002      	b.n	800be76 <USBD_CDC_Setup+0x176>
          break;
 800be70:	bf00      	nop
 800be72:	e008      	b.n	800be86 <USBD_CDC_Setup+0x186>
          break;
 800be74:	bf00      	nop
      }
      break;
 800be76:	e006      	b.n	800be86 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f001 f9aa 	bl	800d1d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800be80:	2303      	movs	r3, #3
 800be82:	75fb      	strb	r3, [r7, #23]
      break;
 800be84:	bf00      	nop
  }

  return (uint8_t)ret;
 800be86:	7dfb      	ldrb	r3, [r7, #23]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3718      	adds	r7, #24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	e04f      	b.n	800bf52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800beba:	78fa      	ldrb	r2, [r7, #3]
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	440b      	add	r3, r1
 800bec8:	3318      	adds	r3, #24
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d029      	beq.n	800bf24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	440b      	add	r3, r1
 800bede:	3318      	adds	r3, #24
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	78f9      	ldrb	r1, [r7, #3]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	460b      	mov	r3, r1
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	440b      	add	r3, r1
 800beec:	00db      	lsls	r3, r3, #3
 800beee:	4403      	add	r3, r0
 800bef0:	333c      	adds	r3, #60	; 0x3c
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bef8:	fb01 f303 	mul.w	r3, r1, r3
 800befc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d110      	bne.n	800bf24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	3318      	adds	r3, #24
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf16:	78f9      	ldrb	r1, [r7, #3]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f001 ff21 	bl	800dd64 <USBD_LL_Transmit>
 800bf22:	e015      	b.n	800bf50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00b      	beq.n	800bf50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf4c:	78fa      	ldrb	r2, [r7, #3]
 800bf4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	460b      	mov	r3, r1
 800bf64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e015      	b.n	800bfa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f001 ff5f 	bl	800de44 <USBD_LL_GetRxDataSize>
 800bf86:	4602      	mov	r2, r0
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e01b      	b.n	800c002 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d015      	beq.n	800c000 <USBD_CDC_EP0_RxReady+0x50>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfda:	2bff      	cmp	r3, #255	; 0xff
 800bfdc:	d010      	beq.n	800c000 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bff4:	b292      	uxth	r2, r2
 800bff6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	22ff      	movs	r2, #255	; 0xff
 800bffc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2243      	movs	r2, #67	; 0x43
 800c018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c01a:	4b03      	ldr	r3, [pc, #12]	; (800c028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20000098 	.word	0x20000098

0800c02c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2243      	movs	r2, #67	; 0x43
 800c038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c03a:	4b03      	ldr	r3, [pc, #12]	; (800c048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	20000054 	.word	0x20000054

0800c04c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2243      	movs	r2, #67	; 0x43
 800c058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c05a:	4b03      	ldr	r3, [pc, #12]	; (800c068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	200000dc 	.word	0x200000dc

0800c06c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	220a      	movs	r2, #10
 800c078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c07a:	4b03      	ldr	r3, [pc, #12]	; (800c088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	20000010 	.word	0x20000010

0800c08c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e004      	b.n	800c0aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b087      	sub	sp, #28
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e008      	b.n	800c0e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	371c      	adds	r7, #28
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c102:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e004      	b.n	800c118 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c13e:	2303      	movs	r3, #3
 800c140:	e016      	b.n	800c170 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7c1b      	ldrb	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c150:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c154:	2101      	movs	r1, #1
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f001 fe3c 	bl	800ddd4 <USBD_LL_PrepareReceive>
 800c15c:	e007      	b.n	800c16e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c164:	2340      	movs	r3, #64	; 0x40
 800c166:	2101      	movs	r1, #1
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 fe33 	bl	800ddd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e01f      	b.n	800c1d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f001 fbf5 	bl	800d9b4 <USBD_LL_Init>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e016      	b.n	800c21e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	f107 020e 	add.w	r2, r7, #14
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	4602      	mov	r2, r0
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 fc22 	bl	800da78 <USBD_LL_Start>
 800c234:	4603      	mov	r3, r0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c23e:	b480      	push	{r7}
 800c240:	b083      	sub	sp, #12
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c260:	2303      	movs	r3, #3
 800c262:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d009      	beq.n	800c282 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	78fa      	ldrb	r2, [r7, #3]
 800c278:	4611      	mov	r1, r2
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	4798      	blx	r3
 800c27e:	4603      	mov	r3, r0
 800c280:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c282:	7bfb      	ldrb	r3, [r7, #15]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d007      	beq.n	800c2b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	4798      	blx	r3
  }

  return USBD_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 ff46 	bl	800d160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2f0:	f003 031f 	and.w	r3, r3, #31
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d01a      	beq.n	800c32e <USBD_LL_SetupStage+0x72>
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d822      	bhi.n	800c342 <USBD_LL_SetupStage+0x86>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <USBD_LL_SetupStage+0x4a>
 800c300:	2b01      	cmp	r3, #1
 800c302:	d00a      	beq.n	800c31a <USBD_LL_SetupStage+0x5e>
 800c304:	e01d      	b.n	800c342 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f9ee 	bl	800c6f0 <USBD_StdDevReq>
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]
      break;
 800c318:	e020      	b.n	800c35c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa52 	bl	800c7cc <USBD_StdItfReq>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]
      break;
 800c32c:	e016      	b.n	800c35c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c334:	4619      	mov	r1, r3
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fa91 	bl	800c85e <USBD_StdEPReq>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]
      break;
 800c340:	e00c      	b.n	800c35c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 fc37 	bl	800dbc4 <USBD_LL_StallEP>
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
      break;
 800c35a:	bf00      	nop
  }

  return ret;
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	460b      	mov	r3, r1
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d138      	bne.n	800c3ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c380:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d14a      	bne.n	800c422 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	689a      	ldr	r2, [r3, #8]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	429a      	cmp	r2, r3
 800c396:	d913      	bls.n	800c3c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	689a      	ldr	r2, [r3, #8]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	bf28      	it	cs
 800c3b2:	4613      	movcs	r3, r2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 ffc5 	bl	800d348 <USBD_CtlContinueRx>
 800c3be:	e030      	b.n	800c422 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d10b      	bne.n	800c3e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 ffc0 	bl	800d36a <USBD_CtlSendStatus>
 800c3ea:	e01a      	b.n	800c422 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d114      	bne.n	800c422 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	7afa      	ldrb	r2, [r7, #11]
 800c40e:	4611      	mov	r1, r2
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	4798      	blx	r3
 800c414:	4603      	mov	r3, r0
 800c416:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	e000      	b.n	800c424 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	460b      	mov	r3, r1
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c43a:	7afb      	ldrb	r3, [r7, #11]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d16b      	bne.n	800c518 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3314      	adds	r3, #20
 800c444:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d156      	bne.n	800c4fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	689a      	ldr	r2, [r3, #8]
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d914      	bls.n	800c486 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	1ad2      	subs	r2, r2, r3
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	461a      	mov	r2, r3
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f000 ff3a 	bl	800d2ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c478:	2300      	movs	r3, #0
 800c47a:	2200      	movs	r2, #0
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f001 fca8 	bl	800ddd4 <USBD_LL_PrepareReceive>
 800c484:	e03b      	b.n	800c4fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	68da      	ldr	r2, [r3, #12]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d11c      	bne.n	800c4cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d316      	bcc.n	800c4cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d20f      	bcs.n	800c4cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 ff1b 	bl	800d2ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f001 fc85 	bl	800ddd4 <USBD_LL_PrepareReceive>
 800c4ca:	e018      	b.n	800c4fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d10b      	bne.n	800c4f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d005      	beq.n	800c4f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4f0:	2180      	movs	r1, #128	; 0x80
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f001 fb66 	bl	800dbc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 ff49 	bl	800d390 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c504:	2b01      	cmp	r3, #1
 800c506:	d122      	bne.n	800c54e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff fe98 	bl	800c23e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c516:	e01a      	b.n	800c54e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	2b03      	cmp	r3, #3
 800c522:	d114      	bne.n	800c54e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00e      	beq.n	800c54e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	7afa      	ldrb	r2, [r7, #11]
 800c53a:	4611      	mov	r1, r2
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	4798      	blx	r3
 800c540:	4603      	mov	r3, r0
 800c542:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	e000      	b.n	800c550 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c588:	2303      	movs	r3, #3
 800c58a:	e02f      	b.n	800c5ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00f      	beq.n	800c5b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	6852      	ldr	r2, [r2, #4]
 800c5ae:	b2d2      	uxtb	r2, r2
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5b6:	2340      	movs	r3, #64	; 0x40
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f001 fa8d 	bl	800dadc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2240      	movs	r2, #64	; 0x40
 800c5ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5d2:	2340      	movs	r3, #64	; 0x40
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2180      	movs	r1, #128	; 0x80
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 fa7f 	bl	800dadc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2240      	movs	r2, #64	; 0x40
 800c5e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	78fa      	ldrb	r2, [r7, #3]
 800c604:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c622:	b2da      	uxtb	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2204      	movs	r2, #4
 800c62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b04      	cmp	r3, #4
 800c652:	d106      	bne.n	800c662 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	e012      	b.n	800c6ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d10b      	bne.n	800c6aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6d2:	8a3b      	ldrh	r3, [r7, #16]
 800c6d4:	021b      	lsls	r3, r3, #8
 800c6d6:	b21a      	sxth	r2, r3
 800c6d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	b21b      	sxth	r3, r3
 800c6e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c706:	2b40      	cmp	r3, #64	; 0x40
 800c708:	d005      	beq.n	800c716 <USBD_StdDevReq+0x26>
 800c70a:	2b40      	cmp	r3, #64	; 0x40
 800c70c:	d853      	bhi.n	800c7b6 <USBD_StdDevReq+0xc6>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00b      	beq.n	800c72a <USBD_StdDevReq+0x3a>
 800c712:	2b20      	cmp	r3, #32
 800c714:	d14f      	bne.n	800c7b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
      break;
 800c728:	e04a      	b.n	800c7c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d83b      	bhi.n	800c7aa <USBD_StdDevReq+0xba>
 800c732:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <USBD_StdDevReq+0x48>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c78d 	.word	0x0800c78d
 800c73c:	0800c7a1 	.word	0x0800c7a1
 800c740:	0800c7ab 	.word	0x0800c7ab
 800c744:	0800c797 	.word	0x0800c797
 800c748:	0800c7ab 	.word	0x0800c7ab
 800c74c:	0800c76b 	.word	0x0800c76b
 800c750:	0800c761 	.word	0x0800c761
 800c754:	0800c7ab 	.word	0x0800c7ab
 800c758:	0800c783 	.word	0x0800c783
 800c75c:	0800c775 	.word	0x0800c775
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9de 	bl	800cb24 <USBD_GetDescriptor>
          break;
 800c768:	e024      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fb6d 	bl	800ce4c <USBD_SetAddress>
          break;
 800c772:	e01f      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fbac 	bl	800ced4 <USBD_SetConfig>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
          break;
 800c780:	e018      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fc4b 	bl	800d020 <USBD_GetConfig>
          break;
 800c78a:	e013      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fc7c 	bl	800d08c <USBD_GetStatus>
          break;
 800c794:	e00e      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fcab 	bl	800d0f4 <USBD_SetFeature>
          break;
 800c79e:	e009      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fcba 	bl	800d11c <USBD_ClrFeature>
          break;
 800c7a8:	e004      	b.n	800c7b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fd11 	bl	800d1d4 <USBD_CtlError>
          break;
 800c7b2:	bf00      	nop
      }
      break;
 800c7b4:	e004      	b.n	800c7c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fd0b 	bl	800d1d4 <USBD_CtlError>
      break;
 800c7be:	bf00      	nop
  }

  return ret;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop

0800c7cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7e2:	2b40      	cmp	r3, #64	; 0x40
 800c7e4:	d005      	beq.n	800c7f2 <USBD_StdItfReq+0x26>
 800c7e6:	2b40      	cmp	r3, #64	; 0x40
 800c7e8:	d82f      	bhi.n	800c84a <USBD_StdItfReq+0x7e>
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <USBD_StdItfReq+0x26>
 800c7ee:	2b20      	cmp	r3, #32
 800c7f0:	d12b      	bne.n	800c84a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d81d      	bhi.n	800c83c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	889b      	ldrh	r3, [r3, #4]
 800c804:	b2db      	uxtb	r3, r3
 800c806:	2b01      	cmp	r3, #1
 800c808:	d813      	bhi.n	800c832 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	88db      	ldrh	r3, [r3, #6]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d110      	bne.n	800c846 <USBD_StdItfReq+0x7a>
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10d      	bne.n	800c846 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fd9d 	bl	800d36a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c830:	e009      	b.n	800c846 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fccd 	bl	800d1d4 <USBD_CtlError>
          break;
 800c83a:	e004      	b.n	800c846 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fcc8 	bl	800d1d4 <USBD_CtlError>
          break;
 800c844:	e000      	b.n	800c848 <USBD_StdItfReq+0x7c>
          break;
 800c846:	bf00      	nop
      }
      break;
 800c848:	e004      	b.n	800c854 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fcc1 	bl	800d1d4 <USBD_CtlError>
      break;
 800c852:	bf00      	nop
  }

  return ret;
 800c854:	7bfb      	ldrb	r3, [r7, #15]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	889b      	ldrh	r3, [r3, #4]
 800c870:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c87a:	2b40      	cmp	r3, #64	; 0x40
 800c87c:	d007      	beq.n	800c88e <USBD_StdEPReq+0x30>
 800c87e:	2b40      	cmp	r3, #64	; 0x40
 800c880:	f200 8145 	bhi.w	800cb0e <USBD_StdEPReq+0x2b0>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00c      	beq.n	800c8a2 <USBD_StdEPReq+0x44>
 800c888:	2b20      	cmp	r3, #32
 800c88a:	f040 8140 	bne.w	800cb0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	4798      	blx	r3
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]
      break;
 800c8a0:	e13a      	b.n	800cb18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	785b      	ldrb	r3, [r3, #1]
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d007      	beq.n	800c8ba <USBD_StdEPReq+0x5c>
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	f300 8129 	bgt.w	800cb02 <USBD_StdEPReq+0x2a4>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d07f      	beq.n	800c9b4 <USBD_StdEPReq+0x156>
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d03c      	beq.n	800c932 <USBD_StdEPReq+0xd4>
 800c8b8:	e123      	b.n	800cb02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d002      	beq.n	800c8cc <USBD_StdEPReq+0x6e>
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d016      	beq.n	800c8f8 <USBD_StdEPReq+0x9a>
 800c8ca:	e02c      	b.n	800c926 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00d      	beq.n	800c8ee <USBD_StdEPReq+0x90>
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	2b80      	cmp	r3, #128	; 0x80
 800c8d6:	d00a      	beq.n	800c8ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f001 f971 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8e2:	2180      	movs	r1, #128	; 0x80
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 f96d 	bl	800dbc4 <USBD_LL_StallEP>
 800c8ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8ec:	e020      	b.n	800c930 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fc6f 	bl	800d1d4 <USBD_CtlError>
              break;
 800c8f6:	e01b      	b.n	800c930 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	885b      	ldrh	r3, [r3, #2]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10e      	bne.n	800c91e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00b      	beq.n	800c91e <USBD_StdEPReq+0xc0>
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	2b80      	cmp	r3, #128	; 0x80
 800c90a:	d008      	beq.n	800c91e <USBD_StdEPReq+0xc0>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	88db      	ldrh	r3, [r3, #6]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d104      	bne.n	800c91e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f001 f953 	bl	800dbc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fd23 	bl	800d36a <USBD_CtlSendStatus>

              break;
 800c924:	e004      	b.n	800c930 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fc53 	bl	800d1d4 <USBD_CtlError>
              break;
 800c92e:	bf00      	nop
          }
          break;
 800c930:	e0ec      	b.n	800cb0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d002      	beq.n	800c944 <USBD_StdEPReq+0xe6>
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d016      	beq.n	800c970 <USBD_StdEPReq+0x112>
 800c942:	e030      	b.n	800c9a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c944:	7bbb      	ldrb	r3, [r7, #14]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00d      	beq.n	800c966 <USBD_StdEPReq+0x108>
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	2b80      	cmp	r3, #128	; 0x80
 800c94e:	d00a      	beq.n	800c966 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f001 f935 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c95a:	2180      	movs	r1, #128	; 0x80
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 f931 	bl	800dbc4 <USBD_LL_StallEP>
 800c962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c964:	e025      	b.n	800c9b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fc33 	bl	800d1d4 <USBD_CtlError>
              break;
 800c96e:	e020      	b.n	800c9b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	885b      	ldrh	r3, [r3, #2]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d11b      	bne.n	800c9b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d004      	beq.n	800c98c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 f952 	bl	800dc30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fcec 	bl	800d36a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	4798      	blx	r3
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c9a4:	e004      	b.n	800c9b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fc13 	bl	800d1d4 <USBD_CtlError>
              break;
 800c9ae:	e000      	b.n	800c9b2 <USBD_StdEPReq+0x154>
              break;
 800c9b0:	bf00      	nop
          }
          break;
 800c9b2:	e0ab      	b.n	800cb0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d002      	beq.n	800c9c6 <USBD_StdEPReq+0x168>
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d032      	beq.n	800ca2a <USBD_StdEPReq+0x1cc>
 800c9c4:	e097      	b.n	800caf6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d007      	beq.n	800c9dc <USBD_StdEPReq+0x17e>
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	2b80      	cmp	r3, #128	; 0x80
 800c9d0:	d004      	beq.n	800c9dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fbfd 	bl	800d1d4 <USBD_CtlError>
                break;
 800c9da:	e091      	b.n	800cb00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	da0b      	bge.n	800c9fc <USBD_StdEPReq+0x19e>
 800c9e4:	7bbb      	ldrb	r3, [r7, #14]
 800c9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	3310      	adds	r3, #16
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	e00b      	b.n	800ca14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4413      	add	r3, r2
 800ca12:	3304      	adds	r3, #4
 800ca14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fc47 	bl	800d2b6 <USBD_CtlSendData>
              break;
 800ca28:	e06a      	b.n	800cb00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	da11      	bge.n	800ca56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca32:	7bbb      	ldrb	r3, [r7, #14]
 800ca34:	f003 020f 	and.w	r2, r3, #15
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	440b      	add	r3, r1
 800ca44:	3324      	adds	r3, #36	; 0x24
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d117      	bne.n	800ca7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fbc0 	bl	800d1d4 <USBD_CtlError>
                  break;
 800ca54:	e054      	b.n	800cb00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
 800ca58:	f003 020f 	and.w	r2, r3, #15
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	440b      	add	r3, r1
 800ca68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d104      	bne.n	800ca7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fbad 	bl	800d1d4 <USBD_CtlError>
                  break;
 800ca7a:	e041      	b.n	800cb00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da0b      	bge.n	800ca9c <USBD_StdEPReq+0x23e>
 800ca84:	7bbb      	ldrb	r3, [r7, #14]
 800ca86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	3310      	adds	r3, #16
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	4413      	add	r3, r2
 800ca98:	3304      	adds	r3, #4
 800ca9a:	e00b      	b.n	800cab4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
 800ca9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	4413      	add	r3, r2
 800cab2:	3304      	adds	r3, #4
 800cab4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <USBD_StdEPReq+0x264>
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b80      	cmp	r3, #128	; 0x80
 800cac0:	d103      	bne.n	800caca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2200      	movs	r2, #0
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e00e      	b.n	800cae8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f001 f8e4 	bl	800dc9c <USBD_LL_IsStallEP>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2201      	movs	r2, #1
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	e002      	b.n	800cae8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2202      	movs	r2, #2
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fbe1 	bl	800d2b6 <USBD_CtlSendData>
              break;
 800caf4:	e004      	b.n	800cb00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fb6b 	bl	800d1d4 <USBD_CtlError>
              break;
 800cafe:	bf00      	nop
          }
          break;
 800cb00:	e004      	b.n	800cb0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fb65 	bl	800d1d4 <USBD_CtlError>
          break;
 800cb0a:	bf00      	nop
      }
      break;
 800cb0c:	e004      	b.n	800cb18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fb5f 	bl	800d1d4 <USBD_CtlError>
      break;
 800cb16:	bf00      	nop
  }

  return ret;
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb36:	2300      	movs	r3, #0
 800cb38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	885b      	ldrh	r3, [r3, #2]
 800cb3e:	0a1b      	lsrs	r3, r3, #8
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	3b01      	subs	r3, #1
 800cb44:	2b0e      	cmp	r3, #14
 800cb46:	f200 8152 	bhi.w	800cdee <USBD_GetDescriptor+0x2ca>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <USBD_GetDescriptor+0x2c>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cbc1 	.word	0x0800cbc1
 800cb54:	0800cbd9 	.word	0x0800cbd9
 800cb58:	0800cc19 	.word	0x0800cc19
 800cb5c:	0800cdef 	.word	0x0800cdef
 800cb60:	0800cdef 	.word	0x0800cdef
 800cb64:	0800cd8f 	.word	0x0800cd8f
 800cb68:	0800cdbb 	.word	0x0800cdbb
 800cb6c:	0800cdef 	.word	0x0800cdef
 800cb70:	0800cdef 	.word	0x0800cdef
 800cb74:	0800cdef 	.word	0x0800cdef
 800cb78:	0800cdef 	.word	0x0800cdef
 800cb7c:	0800cdef 	.word	0x0800cdef
 800cb80:	0800cdef 	.word	0x0800cdef
 800cb84:	0800cdef 	.word	0x0800cdef
 800cb88:	0800cb8d 	.word	0x0800cb8d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb92:	69db      	ldr	r3, [r3, #28]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00b      	beq.n	800cbb0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	7c12      	ldrb	r2, [r2, #16]
 800cba4:	f107 0108 	add.w	r1, r7, #8
 800cba8:	4610      	mov	r0, r2
 800cbaa:	4798      	blx	r3
 800cbac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbae:	e126      	b.n	800cdfe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fb0e 	bl	800d1d4 <USBD_CtlError>
        err++;
 800cbb8:	7afb      	ldrb	r3, [r7, #11]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	72fb      	strb	r3, [r7, #11]
      break;
 800cbbe:	e11e      	b.n	800cdfe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	7c12      	ldrb	r2, [r2, #16]
 800cbcc:	f107 0108 	add.w	r1, r7, #8
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	60f8      	str	r0, [r7, #12]
      break;
 800cbd6:	e112      	b.n	800cdfe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	7c1b      	ldrb	r3, [r3, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10d      	bne.n	800cbfc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe8:	f107 0208 	add.w	r2, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cbfa:	e100      	b.n	800cdfe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	f107 0208 	add.w	r2, r7, #8
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3301      	adds	r3, #1
 800cc12:	2202      	movs	r2, #2
 800cc14:	701a      	strb	r2, [r3, #0]
      break;
 800cc16:	e0f2      	b.n	800cdfe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	885b      	ldrh	r3, [r3, #2]
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b05      	cmp	r3, #5
 800cc20:	f200 80ac 	bhi.w	800cd7c <USBD_GetDescriptor+0x258>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <USBD_GetDescriptor+0x108>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800cc45 	.word	0x0800cc45
 800cc30:	0800cc79 	.word	0x0800cc79
 800cc34:	0800ccad 	.word	0x0800ccad
 800cc38:	0800cce1 	.word	0x0800cce1
 800cc3c:	0800cd15 	.word	0x0800cd15
 800cc40:	0800cd49 	.word	0x0800cd49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	7c12      	ldrb	r2, [r2, #16]
 800cc5c:	f107 0108 	add.w	r1, r7, #8
 800cc60:	4610      	mov	r0, r2
 800cc62:	4798      	blx	r3
 800cc64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc66:	e091      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fab2 	bl	800d1d4 <USBD_CtlError>
            err++;
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	3301      	adds	r3, #1
 800cc74:	72fb      	strb	r3, [r7, #11]
          break;
 800cc76:	e089      	b.n	800cd8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00b      	beq.n	800cc9c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	7c12      	ldrb	r2, [r2, #16]
 800cc90:	f107 0108 	add.w	r1, r7, #8
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc9a:	e077      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fa98 	bl	800d1d4 <USBD_CtlError>
            err++;
 800cca4:	7afb      	ldrb	r3, [r7, #11]
 800cca6:	3301      	adds	r3, #1
 800cca8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccaa:	e06f      	b.n	800cd8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00b      	beq.n	800ccd0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	7c12      	ldrb	r2, [r2, #16]
 800ccc4:	f107 0108 	add.w	r1, r7, #8
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4798      	blx	r3
 800cccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccce:	e05d      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa7e 	bl	800d1d4 <USBD_CtlError>
            err++;
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	72fb      	strb	r3, [r7, #11]
          break;
 800ccde:	e055      	b.n	800cd8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	7c12      	ldrb	r2, [r2, #16]
 800ccf8:	f107 0108 	add.w	r1, r7, #8
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd02:	e043      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa64 	bl	800d1d4 <USBD_CtlError>
            err++;
 800cd0c:	7afb      	ldrb	r3, [r7, #11]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	72fb      	strb	r3, [r7, #11]
          break;
 800cd12:	e03b      	b.n	800cd8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	7c12      	ldrb	r2, [r2, #16]
 800cd2c:	f107 0108 	add.w	r1, r7, #8
 800cd30:	4610      	mov	r0, r2
 800cd32:	4798      	blx	r3
 800cd34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd36:	e029      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fa4a 	bl	800d1d4 <USBD_CtlError>
            err++;
 800cd40:	7afb      	ldrb	r3, [r7, #11]
 800cd42:	3301      	adds	r3, #1
 800cd44:	72fb      	strb	r3, [r7, #11]
          break;
 800cd46:	e021      	b.n	800cd8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00b      	beq.n	800cd6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	7c12      	ldrb	r2, [r2, #16]
 800cd60:	f107 0108 	add.w	r1, r7, #8
 800cd64:	4610      	mov	r0, r2
 800cd66:	4798      	blx	r3
 800cd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd6a:	e00f      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd6c:	6839      	ldr	r1, [r7, #0]
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fa30 	bl	800d1d4 <USBD_CtlError>
            err++;
 800cd74:	7afb      	ldrb	r3, [r7, #11]
 800cd76:	3301      	adds	r3, #1
 800cd78:	72fb      	strb	r3, [r7, #11]
          break;
 800cd7a:	e007      	b.n	800cd8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa28 	bl	800d1d4 <USBD_CtlError>
          err++;
 800cd84:	7afb      	ldrb	r3, [r7, #11]
 800cd86:	3301      	adds	r3, #1
 800cd88:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cd8a:	bf00      	nop
      }
      break;
 800cd8c:	e037      	b.n	800cdfe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	7c1b      	ldrb	r3, [r3, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d109      	bne.n	800cdaa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9e:	f107 0208 	add.w	r2, r7, #8
 800cda2:	4610      	mov	r0, r2
 800cda4:	4798      	blx	r3
 800cda6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cda8:	e029      	b.n	800cdfe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fa11 	bl	800d1d4 <USBD_CtlError>
        err++;
 800cdb2:	7afb      	ldrb	r3, [r7, #11]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	72fb      	strb	r3, [r7, #11]
      break;
 800cdb8:	e021      	b.n	800cdfe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	7c1b      	ldrb	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10d      	bne.n	800cdde <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdca:	f107 0208 	add.w	r2, r7, #8
 800cdce:	4610      	mov	r0, r2
 800cdd0:	4798      	blx	r3
 800cdd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	2207      	movs	r2, #7
 800cdda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cddc:	e00f      	b.n	800cdfe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f9f7 	bl	800d1d4 <USBD_CtlError>
        err++;
 800cde6:	7afb      	ldrb	r3, [r7, #11]
 800cde8:	3301      	adds	r3, #1
 800cdea:	72fb      	strb	r3, [r7, #11]
      break;
 800cdec:	e007      	b.n	800cdfe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f9ef 	bl	800d1d4 <USBD_CtlError>
      err++;
 800cdf6:	7afb      	ldrb	r3, [r7, #11]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	72fb      	strb	r3, [r7, #11]
      break;
 800cdfc:	bf00      	nop
  }

  if (err != 0U)
 800cdfe:	7afb      	ldrb	r3, [r7, #11]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d11e      	bne.n	800ce42 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	88db      	ldrh	r3, [r3, #6]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d016      	beq.n	800ce3a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce0c:	893b      	ldrh	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00e      	beq.n	800ce30 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	88da      	ldrh	r2, [r3, #6]
 800ce16:	893b      	ldrh	r3, [r7, #8]
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	bf28      	it	cs
 800ce1c:	4613      	movcs	r3, r2
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce22:	893b      	ldrh	r3, [r7, #8]
 800ce24:	461a      	mov	r2, r3
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fa44 	bl	800d2b6 <USBD_CtlSendData>
 800ce2e:	e009      	b.n	800ce44 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f9ce 	bl	800d1d4 <USBD_CtlError>
 800ce38:	e004      	b.n	800ce44 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fa95 	bl	800d36a <USBD_CtlSendStatus>
 800ce40:	e000      	b.n	800ce44 <USBD_GetDescriptor+0x320>
    return;
 800ce42:	bf00      	nop
  }
}
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop

0800ce4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	889b      	ldrh	r3, [r3, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d131      	bne.n	800cec2 <USBD_SetAddress+0x76>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	88db      	ldrh	r3, [r3, #6]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d12d      	bne.n	800cec2 <USBD_SetAddress+0x76>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	885b      	ldrh	r3, [r3, #2]
 800ce6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce6c:	d829      	bhi.n	800cec2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	885b      	ldrh	r3, [r3, #2]
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d104      	bne.n	800ce90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f9a3 	bl	800d1d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8e:	e01d      	b.n	800cecc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7bfa      	ldrb	r2, [r7, #15]
 800ce94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 ff2b 	bl	800dcf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fa61 	bl	800d36a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d004      	beq.n	800ceb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb6:	e009      	b.n	800cecc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec0:	e004      	b.n	800cecc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cec2:	6839      	ldr	r1, [r7, #0]
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f985 	bl	800d1d4 <USBD_CtlError>
  }
}
 800ceca:	bf00      	nop
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	885b      	ldrh	r3, [r3, #2]
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b4c      	ldr	r3, [pc, #304]	; (800d01c <USBD_SetConfig+0x148>)
 800ceea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ceec:	4b4b      	ldr	r3, [pc, #300]	; (800d01c <USBD_SetConfig+0x148>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d905      	bls.n	800cf00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f96c 	bl	800d1d4 <USBD_CtlError>
    return USBD_FAIL;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e088      	b.n	800d012 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d002      	beq.n	800cf12 <USBD_SetConfig+0x3e>
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d025      	beq.n	800cf5c <USBD_SetConfig+0x88>
 800cf10:	e071      	b.n	800cff6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf12:	4b42      	ldr	r3, [pc, #264]	; (800d01c <USBD_SetConfig+0x148>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d01c      	beq.n	800cf54 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf1a:	4b40      	ldr	r3, [pc, #256]	; (800d01c <USBD_SetConfig+0x148>)
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf24:	4b3d      	ldr	r3, [pc, #244]	; (800d01c <USBD_SetConfig+0x148>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff f992 	bl	800c254 <USBD_SetClassConfig>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f949 	bl	800d1d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf42:	e065      	b.n	800d010 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fa10 	bl	800d36a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2203      	movs	r2, #3
 800cf4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf52:	e05d      	b.n	800d010 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa08 	bl	800d36a <USBD_CtlSendStatus>
      break;
 800cf5a:	e059      	b.n	800d010 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf5c:	4b2f      	ldr	r3, [pc, #188]	; (800d01c <USBD_SetConfig+0x148>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d112      	bne.n	800cf8a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cf6c:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <USBD_SetConfig+0x148>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	461a      	mov	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf76:	4b29      	ldr	r3, [pc, #164]	; (800d01c <USBD_SetConfig+0x148>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff f985 	bl	800c28c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f9f1 	bl	800d36a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf88:	e042      	b.n	800d010 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <USBD_SetConfig+0x148>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d02a      	beq.n	800cfee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff f973 	bl	800c28c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <USBD_SetConfig+0x148>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <USBD_SetConfig+0x148>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff f94c 	bl	800c254 <USBD_SetClassConfig>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00f      	beq.n	800cfe6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f903 	bl	800d1d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7ff f958 	bl	800c28c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2202      	movs	r2, #2
 800cfe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cfe4:	e014      	b.n	800d010 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f9bf 	bl	800d36a <USBD_CtlSendStatus>
      break;
 800cfec:	e010      	b.n	800d010 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 f9bb 	bl	800d36a <USBD_CtlSendStatus>
      break;
 800cff4:	e00c      	b.n	800d010 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f8eb 	bl	800d1d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <USBD_SetConfig+0x148>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff f941 	bl	800c28c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d00a:	2303      	movs	r3, #3
 800d00c:	73fb      	strb	r3, [r7, #15]
      break;
 800d00e:	bf00      	nop
  }

  return ret;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	200004b4 	.word	0x200004b4

0800d020 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	88db      	ldrh	r3, [r3, #6]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d004      	beq.n	800d03c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f8cd 	bl	800d1d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d03a:	e023      	b.n	800d084 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b02      	cmp	r3, #2
 800d046:	dc02      	bgt.n	800d04e <USBD_GetConfig+0x2e>
 800d048:	2b00      	cmp	r3, #0
 800d04a:	dc03      	bgt.n	800d054 <USBD_GetConfig+0x34>
 800d04c:	e015      	b.n	800d07a <USBD_GetConfig+0x5a>
 800d04e:	2b03      	cmp	r3, #3
 800d050:	d00b      	beq.n	800d06a <USBD_GetConfig+0x4a>
 800d052:	e012      	b.n	800d07a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3308      	adds	r3, #8
 800d05e:	2201      	movs	r2, #1
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f927 	bl	800d2b6 <USBD_CtlSendData>
        break;
 800d068:	e00c      	b.n	800d084 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3304      	adds	r3, #4
 800d06e:	2201      	movs	r2, #1
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f91f 	bl	800d2b6 <USBD_CtlSendData>
        break;
 800d078:	e004      	b.n	800d084 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f8a9 	bl	800d1d4 <USBD_CtlError>
        break;
 800d082:	bf00      	nop
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d81e      	bhi.n	800d0e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	88db      	ldrh	r3, [r3, #6]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d004      	beq.n	800d0b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f890 	bl	800d1d4 <USBD_CtlError>
        break;
 800d0b4:	e01a      	b.n	800d0ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f043 0202 	orr.w	r2, r3, #2
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f8eb 	bl	800d2b6 <USBD_CtlSendData>
      break;
 800d0e0:	e004      	b.n	800d0ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f875 	bl	800d1d4 <USBD_CtlError>
      break;
 800d0ea:	bf00      	nop
  }
}
 800d0ec:	bf00      	nop
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	885b      	ldrh	r3, [r3, #2]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d106      	bne.n	800d114 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f92b 	bl	800d36a <USBD_CtlSendStatus>
  }
}
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	3b01      	subs	r3, #1
 800d130:	2b02      	cmp	r3, #2
 800d132:	d80b      	bhi.n	800d14c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	885b      	ldrh	r3, [r3, #2]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d10c      	bne.n	800d156 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f910 	bl	800d36a <USBD_CtlSendStatus>
      }
      break;
 800d14a:	e004      	b.n	800d156 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f840 	bl	800d1d4 <USBD_CtlError>
      break;
 800d154:	e000      	b.n	800d158 <USBD_ClrFeature+0x3c>
      break;
 800d156:	bf00      	nop
  }
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3301      	adds	r3, #1
 800d17a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	781a      	ldrb	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	3301      	adds	r3, #1
 800d188:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fa92 	bl	800c6b4 <SWAPBYTE>
 800d190:	4603      	mov	r3, r0
 800d192:	461a      	mov	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3301      	adds	r3, #1
 800d19c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f7ff fa85 	bl	800c6b4 <SWAPBYTE>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff fa78 	bl	800c6b4 <SWAPBYTE>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	80da      	strh	r2, [r3, #6]
}
 800d1cc:	bf00      	nop
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1de:	2180      	movs	r1, #128	; 0x80
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fcef 	bl	800dbc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fceb 	bl	800dbc4 <USBD_LL_StallEP>
}
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b086      	sub	sp, #24
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d202:	2300      	movs	r3, #0
 800d204:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d036      	beq.n	800d27a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d210:	6938      	ldr	r0, [r7, #16]
 800d212:	f000 f836 	bl	800d282 <USBD_GetLen>
 800d216:	4603      	mov	r3, r0
 800d218:	3301      	adds	r3, #1
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	005b      	lsls	r3, r3, #1
 800d21e:	b29a      	uxth	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	4413      	add	r3, r2
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	7812      	ldrb	r2, [r2, #0]
 800d22e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	3301      	adds	r3, #1
 800d234:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	4413      	add	r3, r2
 800d23c:	2203      	movs	r2, #3
 800d23e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	3301      	adds	r3, #1
 800d244:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d246:	e013      	b.n	800d270 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	4413      	add	r3, r2
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	7812      	ldrb	r2, [r2, #0]
 800d252:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	3301      	adds	r3, #1
 800d258:	613b      	str	r3, [r7, #16]
    idx++;
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	3301      	adds	r3, #1
 800d25e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d260:	7dfb      	ldrb	r3, [r7, #23]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	4413      	add	r3, r2
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
    idx++;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	3301      	adds	r3, #1
 800d26e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e7      	bne.n	800d248 <USBD_GetString+0x52>
 800d278:	e000      	b.n	800d27c <USBD_GetString+0x86>
    return;
 800d27a:	bf00      	nop
  }
}
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d282:	b480      	push	{r7}
 800d284:	b085      	sub	sp, #20
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d28a:	2300      	movs	r3, #0
 800d28c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d292:	e005      	b.n	800d2a0 <USBD_GetLen+0x1e>
  {
    len++;
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	3301      	adds	r3, #1
 800d298:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	3301      	adds	r3, #1
 800d29e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1f5      	bne.n	800d294 <USBD_GetLen+0x12>
  }

  return len;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3714      	adds	r7, #20
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	60b9      	str	r1, [r7, #8]
 800d2c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	2100      	movs	r1, #0
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 fd41 	bl	800dd64 <USBD_LL_Transmit>

  return USBD_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 fd30 	bl	800dd64 <USBD_LL_Transmit>

  return USBD_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2203      	movs	r2, #3
 800d31e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	2100      	movs	r1, #0
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 fd4b 	bl	800ddd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	2100      	movs	r1, #0
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 fd3a 	bl	800ddd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d360:	2300      	movs	r3, #0
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2204      	movs	r2, #4
 800d376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d37a:	2300      	movs	r3, #0
 800d37c:	2200      	movs	r2, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fcef 	bl	800dd64 <USBD_LL_Transmit>

  return USBD_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2205      	movs	r2, #5
 800d39c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fd14 	bl	800ddd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4912      	ldr	r1, [pc, #72]	; (800d408 <MX_USB_DEVICE_Init+0x50>)
 800d3c0:	4812      	ldr	r0, [pc, #72]	; (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3c2:	f7fe fed9 	bl	800c178 <USBD_Init>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d3cc:	f7f5 fd6c 	bl	8002ea8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d3d0:	490f      	ldr	r1, [pc, #60]	; (800d410 <MX_USB_DEVICE_Init+0x58>)
 800d3d2:	480e      	ldr	r0, [pc, #56]	; (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3d4:	f7fe ff00 	bl	800c1d8 <USBD_RegisterClass>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d3de:	f7f5 fd63 	bl	8002ea8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d3e2:	490c      	ldr	r1, [pc, #48]	; (800d414 <MX_USB_DEVICE_Init+0x5c>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3e6:	f7fe fe51 	bl	800c08c <USBD_CDC_RegisterInterface>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d3f0:	f7f5 fd5a 	bl	8002ea8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d3f4:	4805      	ldr	r0, [pc, #20]	; (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3f6:	f7fe ff16 	bl	800c226 <USBD_Start>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d400:	f7f5 fd52 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d404:	bf00      	nop
 800d406:	bd80      	pop	{r7, pc}
 800d408:	20000134 	.word	0x20000134
 800d40c:	200004b8 	.word	0x200004b8
 800d410:	2000001c 	.word	0x2000001c
 800d414:	20000120 	.word	0x20000120

0800d418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d41c:	2200      	movs	r2, #0
 800d41e:	4905      	ldr	r1, [pc, #20]	; (800d434 <CDC_Init_FS+0x1c>)
 800d420:	4805      	ldr	r0, [pc, #20]	; (800d438 <CDC_Init_FS+0x20>)
 800d422:	f7fe fe48 	bl	800c0b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d426:	4905      	ldr	r1, [pc, #20]	; (800d43c <CDC_Init_FS+0x24>)
 800d428:	4803      	ldr	r0, [pc, #12]	; (800d438 <CDC_Init_FS+0x20>)
 800d42a:	f7fe fe62 	bl	800c0f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d42e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d430:	4618      	mov	r0, r3
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20000b70 	.word	0x20000b70
 800d438:	200004b8 	.word	0x200004b8
 800d43c:	20000788 	.word	0x20000788

0800d440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d446:	4618      	mov	r0, r3
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	6039      	str	r1, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
 800d45c:	4613      	mov	r3, r2
 800d45e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	2b23      	cmp	r3, #35	; 0x23
 800d464:	d84a      	bhi.n	800d4fc <CDC_Control_FS+0xac>
 800d466:	a201      	add	r2, pc, #4	; (adr r2, 800d46c <CDC_Control_FS+0x1c>)
 800d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46c:	0800d4fd 	.word	0x0800d4fd
 800d470:	0800d4fd 	.word	0x0800d4fd
 800d474:	0800d4fd 	.word	0x0800d4fd
 800d478:	0800d4fd 	.word	0x0800d4fd
 800d47c:	0800d4fd 	.word	0x0800d4fd
 800d480:	0800d4fd 	.word	0x0800d4fd
 800d484:	0800d4fd 	.word	0x0800d4fd
 800d488:	0800d4fd 	.word	0x0800d4fd
 800d48c:	0800d4fd 	.word	0x0800d4fd
 800d490:	0800d4fd 	.word	0x0800d4fd
 800d494:	0800d4fd 	.word	0x0800d4fd
 800d498:	0800d4fd 	.word	0x0800d4fd
 800d49c:	0800d4fd 	.word	0x0800d4fd
 800d4a0:	0800d4fd 	.word	0x0800d4fd
 800d4a4:	0800d4fd 	.word	0x0800d4fd
 800d4a8:	0800d4fd 	.word	0x0800d4fd
 800d4ac:	0800d4fd 	.word	0x0800d4fd
 800d4b0:	0800d4fd 	.word	0x0800d4fd
 800d4b4:	0800d4fd 	.word	0x0800d4fd
 800d4b8:	0800d4fd 	.word	0x0800d4fd
 800d4bc:	0800d4fd 	.word	0x0800d4fd
 800d4c0:	0800d4fd 	.word	0x0800d4fd
 800d4c4:	0800d4fd 	.word	0x0800d4fd
 800d4c8:	0800d4fd 	.word	0x0800d4fd
 800d4cc:	0800d4fd 	.word	0x0800d4fd
 800d4d0:	0800d4fd 	.word	0x0800d4fd
 800d4d4:	0800d4fd 	.word	0x0800d4fd
 800d4d8:	0800d4fd 	.word	0x0800d4fd
 800d4dc:	0800d4fd 	.word	0x0800d4fd
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d4fd 	.word	0x0800d4fd
 800d4e8:	0800d4fd 	.word	0x0800d4fd
 800d4ec:	0800d4fd 	.word	0x0800d4fd
 800d4f0:	0800d4fd 	.word	0x0800d4fd
 800d4f4:	0800d4fd 	.word	0x0800d4fd
 800d4f8:	0800d4fd 	.word	0x0800d4fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4fc:	bf00      	nop
  }

  return (USBD_OK);
 800d4fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	4805      	ldr	r0, [pc, #20]	; (800d530 <CDC_Receive_FS+0x24>)
 800d51a:	f7fe fdea 	bl	800c0f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d51e:	4804      	ldr	r0, [pc, #16]	; (800d530 <CDC_Receive_FS+0x24>)
 800d520:	f7fe fe00 	bl	800c124 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	200004b8 	.word	0x200004b8

0800d534 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d534:	b480      	push	{r7}
 800d536:	b087      	sub	sp, #28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4613      	mov	r3, r2
 800d540:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	6039      	str	r1, [r7, #0]
 800d562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2212      	movs	r2, #18
 800d568:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d56a:	4b03      	ldr	r3, [pc, #12]	; (800d578 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	20000154 	.word	0x20000154

0800d57c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	4603      	mov	r3, r0
 800d584:	6039      	str	r1, [r7, #0]
 800d586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2204      	movs	r2, #4
 800d58c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d58e:	4b03      	ldr	r3, [pc, #12]	; (800d59c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20000174 	.word	0x20000174

0800d5a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4907      	ldr	r1, [pc, #28]	; (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5b6:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5b8:	f7ff fe1d 	bl	800d1f6 <USBD_GetString>
 800d5bc:	e004      	b.n	800d5c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4904      	ldr	r1, [pc, #16]	; (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5c2:	4805      	ldr	r0, [pc, #20]	; (800d5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5c4:	f7ff fe17 	bl	800d1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c8:	4b02      	ldr	r3, [pc, #8]	; (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000f58 	.word	0x20000f58
 800d5d8:	0800e1fc 	.word	0x0800e1fc

0800d5dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6039      	str	r1, [r7, #0]
 800d5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	4904      	ldr	r1, [pc, #16]	; (800d5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5ec:	4804      	ldr	r0, [pc, #16]	; (800d600 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5ee:	f7ff fe02 	bl	800d1f6 <USBD_GetString>
  return USBD_StrDesc;
 800d5f2:	4b02      	ldr	r3, [pc, #8]	; (800d5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20000f58 	.word	0x20000f58
 800d600:	0800e214 	.word	0x0800e214

0800d604 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	6039      	str	r1, [r7, #0]
 800d60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	221a      	movs	r2, #26
 800d614:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d616:	f000 f855 	bl	800d6c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d61a:	4b02      	ldr	r3, [pc, #8]	; (800d624 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000178 	.word	0x20000178

0800d628 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	4603      	mov	r3, r0
 800d630:	6039      	str	r1, [r7, #0]
 800d632:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d105      	bne.n	800d646 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	4907      	ldr	r1, [pc, #28]	; (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d63e:	4808      	ldr	r0, [pc, #32]	; (800d660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d640:	f7ff fdd9 	bl	800d1f6 <USBD_GetString>
 800d644:	e004      	b.n	800d650 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	4904      	ldr	r1, [pc, #16]	; (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d64a:	4805      	ldr	r0, [pc, #20]	; (800d660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d64c:	f7ff fdd3 	bl	800d1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d650:	4b02      	ldr	r3, [pc, #8]	; (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000f58 	.word	0x20000f58
 800d660:	0800e228 	.word	0x0800e228

0800d664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	6039      	str	r1, [r7, #0]
 800d66e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d105      	bne.n	800d682 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	4907      	ldr	r1, [pc, #28]	; (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d67a:	4808      	ldr	r0, [pc, #32]	; (800d69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d67c:	f7ff fdbb 	bl	800d1f6 <USBD_GetString>
 800d680:	e004      	b.n	800d68c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	4904      	ldr	r1, [pc, #16]	; (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d686:	4805      	ldr	r0, [pc, #20]	; (800d69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d688:	f7ff fdb5 	bl	800d1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d68c:	4b02      	ldr	r3, [pc, #8]	; (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000f58 	.word	0x20000f58
 800d69c:	0800e234 	.word	0x0800e234

0800d6a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	220c      	movs	r2, #12
 800d6b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d6b2:	4b03      	ldr	r3, [pc, #12]	; (800d6c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	20000168 	.word	0x20000168

0800d6c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d6ca:	4b0f      	ldr	r3, [pc, #60]	; (800d708 <Get_SerialNum+0x44>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6d0:	4b0e      	ldr	r3, [pc, #56]	; (800d70c <Get_SerialNum+0x48>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d6d6:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <Get_SerialNum+0x4c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d009      	beq.n	800d6fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6ea:	2208      	movs	r2, #8
 800d6ec:	4909      	ldr	r1, [pc, #36]	; (800d714 <Get_SerialNum+0x50>)
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f814 	bl	800d71c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6f4:	2204      	movs	r2, #4
 800d6f6:	4908      	ldr	r1, [pc, #32]	; (800d718 <Get_SerialNum+0x54>)
 800d6f8:	68b8      	ldr	r0, [r7, #8]
 800d6fa:	f000 f80f 	bl	800d71c <IntToUnicode>
  }
}
 800d6fe:	bf00      	nop
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	1fff7590 	.word	0x1fff7590
 800d70c:	1fff7594 	.word	0x1fff7594
 800d710:	1fff7598 	.word	0x1fff7598
 800d714:	2000017a 	.word	0x2000017a
 800d718:	2000018a 	.word	0x2000018a

0800d71c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	4613      	mov	r3, r2
 800d728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d72e:	2300      	movs	r3, #0
 800d730:	75fb      	strb	r3, [r7, #23]
 800d732:	e027      	b.n	800d784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	0f1b      	lsrs	r3, r3, #28
 800d738:	2b09      	cmp	r3, #9
 800d73a:	d80b      	bhi.n	800d754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	0f1b      	lsrs	r3, r3, #28
 800d740:	b2da      	uxtb	r2, r3
 800d742:	7dfb      	ldrb	r3, [r7, #23]
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4619      	mov	r1, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	440b      	add	r3, r1
 800d74c:	3230      	adds	r2, #48	; 0x30
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	701a      	strb	r2, [r3, #0]
 800d752:	e00a      	b.n	800d76a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	0f1b      	lsrs	r3, r3, #28
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	4619      	mov	r1, r3
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	440b      	add	r3, r1
 800d764:	3237      	adds	r2, #55	; 0x37
 800d766:	b2d2      	uxtb	r2, r2
 800d768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	3301      	adds	r3, #1
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	4413      	add	r3, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
 800d780:	3301      	adds	r3, #1
 800d782:	75fb      	strb	r3, [r7, #23]
 800d784:	7dfa      	ldrb	r2, [r7, #23]
 800d786:	79fb      	ldrb	r3, [r7, #7]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d3d3      	bcc.n	800d734 <IntToUnicode+0x18>
  }
}
 800d78c:	bf00      	nop
 800d78e:	bf00      	nop
 800d790:	371c      	adds	r7, #28
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b096      	sub	sp, #88	; 0x58
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	605a      	str	r2, [r3, #4]
 800d7ae:	609a      	str	r2, [r3, #8]
 800d7b0:	60da      	str	r2, [r3, #12]
 800d7b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d7b4:	f107 0310 	add.w	r3, r7, #16
 800d7b8:	2234      	movs	r2, #52	; 0x34
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f000 fc13 	bl	800dfe8 <memset>
  if(pcdHandle->Instance==USB)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a24      	ldr	r2, [pc, #144]	; (800d858 <HAL_PCD_MspInit+0xbc>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d141      	bne.n	800d850 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d7cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800d7d2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800d7d6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d7d8:	f107 0310 	add.w	r3, r7, #16
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f9 fe91 	bl	8007504 <HAL_RCCEx_PeriphCLKConfig>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d7e8:	f7f5 fb5e 	bl	8002ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7ec:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7f0:	4a1a      	ldr	r2, [pc, #104]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d7f2:	f043 0301 	orr.w	r3, r3, #1
 800d7f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7f8:	4b18      	ldr	r3, [pc, #96]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d804:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d808:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d80a:	2302      	movs	r3, #2
 800d80c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d812:	2303      	movs	r3, #3
 800d814:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800d816:	230a      	movs	r3, #10
 800d818:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d81a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d81e:	4619      	mov	r1, r3
 800d820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d824:	f7f7 f864 	bl	80048f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d828:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d82c:	4a0b      	ldr	r2, [pc, #44]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d82e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d832:	6593      	str	r3, [r2, #88]	; 0x58
 800d834:	4b09      	ldr	r3, [pc, #36]	; (800d85c <HAL_PCD_MspInit+0xc0>)
 800d836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d83c:	60bb      	str	r3, [r7, #8]
 800d83e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d840:	2200      	movs	r2, #0
 800d842:	2100      	movs	r1, #0
 800d844:	2043      	movs	r0, #67	; 0x43
 800d846:	f7f7 f81c 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d84a:	2043      	movs	r0, #67	; 0x43
 800d84c:	f7f7 f835 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d850:	bf00      	nop
 800d852:	3758      	adds	r7, #88	; 0x58
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	40006800 	.word	0x40006800
 800d85c:	40021000 	.word	0x40021000

0800d860 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7fe fd20 	bl	800c2bc <USBD_LL_SetupStage>
}
 800d87c:	bf00      	nop
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	460b      	mov	r3, r1
 800d88e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d896:	78fa      	ldrb	r2, [r7, #3]
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	440b      	add	r3, r1
 800d8a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	f7fe fd5a 	bl	800c366 <USBD_LL_DataOutStage>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d8cc:	78fa      	ldrb	r2, [r7, #3]
 800d8ce:	6879      	ldr	r1, [r7, #4]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	440b      	add	r3, r1
 800d8da:	3340      	adds	r3, #64	; 0x40
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	78fb      	ldrb	r3, [r7, #3]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f7fe fda3 	bl	800c42c <USBD_LL_DataInStage>
}
 800d8e6:	bf00      	nop
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe feb7 	bl	800c670 <USBD_LL_SOF>
}
 800d902:	bf00      	nop
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d912:	2301      	movs	r3, #1
 800d914:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d001      	beq.n	800d922 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d91e:	f7f5 fac3 	bl	8002ea8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d928:	7bfa      	ldrb	r2, [r7, #15]
 800d92a:	4611      	mov	r1, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fe61 	bl	800c5f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe fe0d 	bl	800c558 <USBD_LL_Reset>
}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fe5c 	bl	800c614 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d005      	beq.n	800d970 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d964:	4b04      	ldr	r3, [pc, #16]	; (800d978 <HAL_PCD_SuspendCallback+0x30>)
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	4a03      	ldr	r2, [pc, #12]	; (800d978 <HAL_PCD_SuspendCallback+0x30>)
 800d96a:	f043 0306 	orr.w	r3, r3, #6
 800d96e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	e000ed00 	.word	0xe000ed00

0800d97c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d007      	beq.n	800d99c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d98c:	4b08      	ldr	r3, [pc, #32]	; (800d9b0 <HAL_PCD_ResumeCallback+0x34>)
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	4a07      	ldr	r2, [pc, #28]	; (800d9b0 <HAL_PCD_ResumeCallback+0x34>)
 800d992:	f023 0306 	bic.w	r3, r3, #6
 800d996:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d998:	f000 fab6 	bl	800df08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fe fe4c 	bl	800c640 <USBD_LL_Resume>
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	e000ed00 	.word	0xe000ed00

0800d9b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d9bc:	f7f8 ff44 	bl	8006848 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d9c0:	4a2b      	ldr	r2, [pc, #172]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a29      	ldr	r2, [pc, #164]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d9d0:	4b27      	ldr	r3, [pc, #156]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9d2:	4a28      	ldr	r2, [pc, #160]	; (800da74 <USBD_LL_Init+0xc0>)
 800d9d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9d6:	4b26      	ldr	r3, [pc, #152]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9d8:	2208      	movs	r2, #8
 800d9da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d9dc:	4b24      	ldr	r3, [pc, #144]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9de:	2202      	movs	r2, #2
 800d9e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9e2:	4b23      	ldr	r3, [pc, #140]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d9e8:	4b21      	ldr	r3, [pc, #132]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d9ee:	4b20      	ldr	r3, [pc, #128]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d9f4:	4b1e      	ldr	r3, [pc, #120]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d9fa:	4b1d      	ldr	r3, [pc, #116]	; (800da70 <USBD_LL_Init+0xbc>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da00:	481b      	ldr	r0, [pc, #108]	; (800da70 <USBD_LL_Init+0xbc>)
 800da02:	f7f7 f931 	bl	8004c68 <HAL_PCD_Init>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800da0c:	f7f5 fa4c 	bl	8002ea8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da16:	2318      	movs	r3, #24
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	f7f8 fe41 	bl	80066a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da26:	2358      	movs	r3, #88	; 0x58
 800da28:	2200      	movs	r2, #0
 800da2a:	2180      	movs	r1, #128	; 0x80
 800da2c:	f7f8 fe39 	bl	80066a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da36:	23c0      	movs	r3, #192	; 0xc0
 800da38:	2200      	movs	r2, #0
 800da3a:	2181      	movs	r1, #129	; 0x81
 800da3c:	f7f8 fe31 	bl	80066a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da46:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da4a:	2200      	movs	r2, #0
 800da4c:	2101      	movs	r1, #1
 800da4e:	f7f8 fe28 	bl	80066a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da5c:	2200      	movs	r2, #0
 800da5e:	2182      	movs	r1, #130	; 0x82
 800da60:	f7f8 fe1f 	bl	80066a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20001158 	.word	0x20001158
 800da74:	40006800 	.word	0x40006800

0800da78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da8e:	4618      	mov	r0, r3
 800da90:	f7f7 fa01 	bl	8004e96 <HAL_PCD_Start>
 800da94:	4603      	mov	r3, r0
 800da96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da98:	7bbb      	ldrb	r3, [r7, #14]
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d816      	bhi.n	800dacc <USBD_LL_Start+0x54>
 800da9e:	a201      	add	r2, pc, #4	; (adr r2, 800daa4 <USBD_LL_Start+0x2c>)
 800daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa4:	0800dab5 	.word	0x0800dab5
 800daa8:	0800dabb 	.word	0x0800dabb
 800daac:	0800dac1 	.word	0x0800dac1
 800dab0:	0800dac7 	.word	0x0800dac7
    case HAL_OK :
      usb_status = USBD_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
    break;
 800dab8:	e00b      	b.n	800dad2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daba:	2303      	movs	r3, #3
 800dabc:	73fb      	strb	r3, [r7, #15]
    break;
 800dabe:	e008      	b.n	800dad2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dac0:	2301      	movs	r3, #1
 800dac2:	73fb      	strb	r3, [r7, #15]
    break;
 800dac4:	e005      	b.n	800dad2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dac6:	2303      	movs	r3, #3
 800dac8:	73fb      	strb	r3, [r7, #15]
    break;
 800daca:	e002      	b.n	800dad2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800dacc:	2303      	movs	r3, #3
 800dace:	73fb      	strb	r3, [r7, #15]
    break;
 800dad0:	bf00      	nop
  }
  return usb_status;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	4608      	mov	r0, r1
 800dae6:	4611      	mov	r1, r2
 800dae8:	461a      	mov	r2, r3
 800daea:	4603      	mov	r3, r0
 800daec:	70fb      	strb	r3, [r7, #3]
 800daee:	460b      	mov	r3, r1
 800daf0:	70bb      	strb	r3, [r7, #2]
 800daf2:	4613      	mov	r3, r2
 800daf4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db04:	78bb      	ldrb	r3, [r7, #2]
 800db06:	883a      	ldrh	r2, [r7, #0]
 800db08:	78f9      	ldrb	r1, [r7, #3]
 800db0a:	f7f7 fb32 	bl	8005172 <HAL_PCD_EP_Open>
 800db0e:	4603      	mov	r3, r0
 800db10:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db12:	7bbb      	ldrb	r3, [r7, #14]
 800db14:	2b03      	cmp	r3, #3
 800db16:	d817      	bhi.n	800db48 <USBD_LL_OpenEP+0x6c>
 800db18:	a201      	add	r2, pc, #4	; (adr r2, 800db20 <USBD_LL_OpenEP+0x44>)
 800db1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1e:	bf00      	nop
 800db20:	0800db31 	.word	0x0800db31
 800db24:	0800db37 	.word	0x0800db37
 800db28:	0800db3d 	.word	0x0800db3d
 800db2c:	0800db43 	.word	0x0800db43
    case HAL_OK :
      usb_status = USBD_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
    break;
 800db34:	e00b      	b.n	800db4e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db36:	2303      	movs	r3, #3
 800db38:	73fb      	strb	r3, [r7, #15]
    break;
 800db3a:	e008      	b.n	800db4e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db3c:	2301      	movs	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
    break;
 800db40:	e005      	b.n	800db4e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	73fb      	strb	r3, [r7, #15]
    break;
 800db46:	e002      	b.n	800db4e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800db48:	2303      	movs	r3, #3
 800db4a:	73fb      	strb	r3, [r7, #15]
    break;
 800db4c:	bf00      	nop
  }
  return usb_status;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db72:	78fa      	ldrb	r2, [r7, #3]
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f7f7 fb63 	bl	8005242 <HAL_PCD_EP_Close>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2b03      	cmp	r3, #3
 800db84:	d816      	bhi.n	800dbb4 <USBD_LL_CloseEP+0x5c>
 800db86:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <USBD_LL_CloseEP+0x34>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800db9d 	.word	0x0800db9d
 800db90:	0800dba3 	.word	0x0800dba3
 800db94:	0800dba9 	.word	0x0800dba9
 800db98:	0800dbaf 	.word	0x0800dbaf
    case HAL_OK :
      usb_status = USBD_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dba0:	e00b      	b.n	800dbba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dba2:	2303      	movs	r3, #3
 800dba4:	73fb      	strb	r3, [r7, #15]
    break;
 800dba6:	e008      	b.n	800dbba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800dbac:	e005      	b.n	800dbba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbae:	2303      	movs	r3, #3
 800dbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb2:	e002      	b.n	800dbba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb8:	bf00      	nop
  }
  return usb_status;
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbde:	78fa      	ldrb	r2, [r7, #3]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f7 fc11 	bl	800540a <HAL_PCD_EP_SetStall>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d816      	bhi.n	800dc20 <USBD_LL_StallEP+0x5c>
 800dbf2:	a201      	add	r2, pc, #4	; (adr r2, 800dbf8 <USBD_LL_StallEP+0x34>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc09 	.word	0x0800dc09
 800dbfc:	0800dc0f 	.word	0x0800dc0f
 800dc00:	0800dc15 	.word	0x0800dc15
 800dc04:	0800dc1b 	.word	0x0800dc1b
    case HAL_OK :
      usb_status = USBD_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc0c:	e00b      	b.n	800dc26 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	73fb      	strb	r3, [r7, #15]
    break;
 800dc12:	e008      	b.n	800dc26 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc14:	2301      	movs	r3, #1
 800dc16:	73fb      	strb	r3, [r7, #15]
    break;
 800dc18:	e005      	b.n	800dc26 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc1e:	e002      	b.n	800dc26 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc20:	2303      	movs	r3, #3
 800dc22:	73fb      	strb	r3, [r7, #15]
    break;
 800dc24:	bf00      	nop
  }
  return usb_status;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc4a:	78fa      	ldrb	r2, [r7, #3]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7f7 fc3d 	bl	80054ce <HAL_PCD_EP_ClrStall>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dc58:	7bbb      	ldrb	r3, [r7, #14]
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d816      	bhi.n	800dc8c <USBD_LL_ClearStallEP+0x5c>
 800dc5e:	a201      	add	r2, pc, #4	; (adr r2, 800dc64 <USBD_LL_ClearStallEP+0x34>)
 800dc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc64:	0800dc75 	.word	0x0800dc75
 800dc68:	0800dc7b 	.word	0x0800dc7b
 800dc6c:	0800dc81 	.word	0x0800dc81
 800dc70:	0800dc87 	.word	0x0800dc87
    case HAL_OK :
      usb_status = USBD_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	73fb      	strb	r3, [r7, #15]
    break;
 800dc78:	e00b      	b.n	800dc92 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc7e:	e008      	b.n	800dc92 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc80:	2301      	movs	r3, #1
 800dc82:	73fb      	strb	r3, [r7, #15]
    break;
 800dc84:	e005      	b.n	800dc92 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc86:	2303      	movs	r3, #3
 800dc88:	73fb      	strb	r3, [r7, #15]
    break;
 800dc8a:	e002      	b.n	800dc92 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc90:	bf00      	nop
  }
  return usb_status;
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	460b      	mov	r3, r1
 800dca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dcb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	da0c      	bge.n	800dcd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dcb8:	78fb      	ldrb	r3, [r7, #3]
 800dcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbe:	68f9      	ldr	r1, [r7, #12]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	440b      	add	r3, r1
 800dccc:	3306      	adds	r3, #6
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	e00b      	b.n	800dcea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dcd2:	78fb      	ldrb	r3, [r7, #3]
 800dcd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dcd8:	68f9      	ldr	r1, [r7, #12]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	00db      	lsls	r3, r3, #3
 800dce2:	440b      	add	r3, r1
 800dce4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800dce8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd12:	78fa      	ldrb	r2, [r7, #3]
 800dd14:	4611      	mov	r1, r2
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f7 fa06 	bl	8005128 <HAL_PCD_SetAddress>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	2b03      	cmp	r3, #3
 800dd24:	d816      	bhi.n	800dd54 <USBD_LL_SetUSBAddress+0x5c>
 800dd26:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <USBD_LL_SetUSBAddress+0x34>)
 800dd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2c:	0800dd3d 	.word	0x0800dd3d
 800dd30:	0800dd43 	.word	0x0800dd43
 800dd34:	0800dd49 	.word	0x0800dd49
 800dd38:	0800dd4f 	.word	0x0800dd4f
    case HAL_OK :
      usb_status = USBD_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd40:	e00b      	b.n	800dd5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd42:	2303      	movs	r3, #3
 800dd44:	73fb      	strb	r3, [r7, #15]
    break;
 800dd46:	e008      	b.n	800dd5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4c:	e005      	b.n	800dd5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	73fb      	strb	r3, [r7, #15]
    break;
 800dd52:	e002      	b.n	800dd5a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dd54:	2303      	movs	r3, #3
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	bf00      	nop
  }
  return usb_status;
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	607a      	str	r2, [r7, #4]
 800dd6e:	603b      	str	r3, [r7, #0]
 800dd70:	460b      	mov	r3, r1
 800dd72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd82:	7af9      	ldrb	r1, [r7, #11]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	f7f7 fafb 	bl	8005382 <HAL_PCD_EP_Transmit>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dd90:	7dbb      	ldrb	r3, [r7, #22]
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d816      	bhi.n	800ddc4 <USBD_LL_Transmit+0x60>
 800dd96:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <USBD_LL_Transmit+0x38>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddb3 	.word	0x0800ddb3
 800dda4:	0800ddb9 	.word	0x0800ddb9
 800dda8:	0800ddbf 	.word	0x0800ddbf
    case HAL_OK :
      usb_status = USBD_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	75fb      	strb	r3, [r7, #23]
    break;
 800ddb0:	e00b      	b.n	800ddca <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddb2:	2303      	movs	r3, #3
 800ddb4:	75fb      	strb	r3, [r7, #23]
    break;
 800ddb6:	e008      	b.n	800ddca <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	75fb      	strb	r3, [r7, #23]
    break;
 800ddbc:	e005      	b.n	800ddca <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	75fb      	strb	r3, [r7, #23]
    break;
 800ddc2:	e002      	b.n	800ddca <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	75fb      	strb	r3, [r7, #23]
    break;
 800ddc8:	bf00      	nop
  }
  return usb_status;
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	607a      	str	r2, [r7, #4]
 800ddde:	603b      	str	r3, [r7, #0]
 800dde0:	460b      	mov	r3, r1
 800dde2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ddf2:	7af9      	ldrb	r1, [r7, #11]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	f7f7 fa6d 	bl	80052d6 <HAL_PCD_EP_Receive>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800de00:	7dbb      	ldrb	r3, [r7, #22]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d816      	bhi.n	800de34 <USBD_LL_PrepareReceive+0x60>
 800de06:	a201      	add	r2, pc, #4	; (adr r2, 800de0c <USBD_LL_PrepareReceive+0x38>)
 800de08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0c:	0800de1d 	.word	0x0800de1d
 800de10:	0800de23 	.word	0x0800de23
 800de14:	0800de29 	.word	0x0800de29
 800de18:	0800de2f 	.word	0x0800de2f
    case HAL_OK :
      usb_status = USBD_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	75fb      	strb	r3, [r7, #23]
    break;
 800de20:	e00b      	b.n	800de3a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de22:	2303      	movs	r3, #3
 800de24:	75fb      	strb	r3, [r7, #23]
    break;
 800de26:	e008      	b.n	800de3a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de28:	2301      	movs	r3, #1
 800de2a:	75fb      	strb	r3, [r7, #23]
    break;
 800de2c:	e005      	b.n	800de3a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de2e:	2303      	movs	r3, #3
 800de30:	75fb      	strb	r3, [r7, #23]
    break;
 800de32:	e002      	b.n	800de3a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800de34:	2303      	movs	r3, #3
 800de36:	75fb      	strb	r3, [r7, #23]
    break;
 800de38:	bf00      	nop
  }
  return usb_status;
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f7 fa79 	bl	8005352 <HAL_PCD_EP_GetRxCount>
 800de60:	4603      	mov	r3, r0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800de78:	78fb      	ldrb	r3, [r7, #3]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d002      	beq.n	800de84 <HAL_PCDEx_LPM_Callback+0x18>
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d013      	beq.n	800deaa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800de82:	e023      	b.n	800decc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d007      	beq.n	800de9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800de8c:	f000 f83c 	bl	800df08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de90:	4b10      	ldr	r3, [pc, #64]	; (800ded4 <HAL_PCDEx_LPM_Callback+0x68>)
 800de92:	691b      	ldr	r3, [r3, #16]
 800de94:	4a0f      	ldr	r2, [pc, #60]	; (800ded4 <HAL_PCDEx_LPM_Callback+0x68>)
 800de96:	f023 0306 	bic.w	r3, r3, #6
 800de9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fe fbcc 	bl	800c640 <USBD_LL_Resume>
    break;
 800dea8:	e010      	b.n	800decc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fe fbaf 	bl	800c614 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	699b      	ldr	r3, [r3, #24]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d005      	beq.n	800deca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	4a04      	ldr	r2, [pc, #16]	; (800ded4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dec4:	f043 0306 	orr.w	r3, r3, #6
 800dec8:	6113      	str	r3, [r2, #16]
    break;
 800deca:	bf00      	nop
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	e000ed00 	.word	0xe000ed00

0800ded8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dee0:	4b03      	ldr	r3, [pc, #12]	; (800def0 <USBD_static_malloc+0x18>)
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	20001454 	.word	0x20001454

0800def4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]

}
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df08:	b480      	push	{r7}
 800df0a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800df0c:	bf00      	nop
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <_Znwj>:
 800df16:	2801      	cmp	r0, #1
 800df18:	bf38      	it	cc
 800df1a:	2001      	movcc	r0, #1
 800df1c:	b510      	push	{r4, lr}
 800df1e:	4604      	mov	r4, r0
 800df20:	4620      	mov	r0, r4
 800df22:	f000 f859 	bl	800dfd8 <malloc>
 800df26:	b930      	cbnz	r0, 800df36 <_Znwj+0x20>
 800df28:	f000 f81c 	bl	800df64 <_ZSt15get_new_handlerv>
 800df2c:	b908      	cbnz	r0, 800df32 <_Znwj+0x1c>
 800df2e:	f000 f821 	bl	800df74 <abort>
 800df32:	4780      	blx	r0
 800df34:	e7f4      	b.n	800df20 <_Znwj+0xa>
 800df36:	bd10      	pop	{r4, pc}

0800df38 <__cxa_pure_virtual>:
 800df38:	b508      	push	{r3, lr}
 800df3a:	f000 f80d 	bl	800df58 <_ZSt9terminatev>

0800df3e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800df3e:	b508      	push	{r3, lr}
 800df40:	4780      	blx	r0
 800df42:	f000 f817 	bl	800df74 <abort>
	...

0800df48 <_ZSt13get_terminatev>:
 800df48:	4b02      	ldr	r3, [pc, #8]	; (800df54 <_ZSt13get_terminatev+0xc>)
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	f3bf 8f5b 	dmb	ish
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	20000194 	.word	0x20000194

0800df58 <_ZSt9terminatev>:
 800df58:	b508      	push	{r3, lr}
 800df5a:	f7ff fff5 	bl	800df48 <_ZSt13get_terminatev>
 800df5e:	f7ff ffee 	bl	800df3e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800df64 <_ZSt15get_new_handlerv>:
 800df64:	4b02      	ldr	r3, [pc, #8]	; (800df70 <_ZSt15get_new_handlerv+0xc>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	f3bf 8f5b 	dmb	ish
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20001674 	.word	0x20001674

0800df74 <abort>:
 800df74:	b508      	push	{r3, lr}
 800df76:	2006      	movs	r0, #6
 800df78:	f000 f90a 	bl	800e190 <raise>
 800df7c:	2001      	movs	r0, #1
 800df7e:	f7f5 f8bf 	bl	8003100 <_exit>
	...

0800df84 <__errno>:
 800df84:	4b01      	ldr	r3, [pc, #4]	; (800df8c <__errno+0x8>)
 800df86:	6818      	ldr	r0, [r3, #0]
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	20000198 	.word	0x20000198

0800df90 <__libc_init_array>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	4d0d      	ldr	r5, [pc, #52]	; (800dfc8 <__libc_init_array+0x38>)
 800df94:	4c0d      	ldr	r4, [pc, #52]	; (800dfcc <__libc_init_array+0x3c>)
 800df96:	1b64      	subs	r4, r4, r5
 800df98:	10a4      	asrs	r4, r4, #2
 800df9a:	2600      	movs	r6, #0
 800df9c:	42a6      	cmp	r6, r4
 800df9e:	d109      	bne.n	800dfb4 <__libc_init_array+0x24>
 800dfa0:	4d0b      	ldr	r5, [pc, #44]	; (800dfd0 <__libc_init_array+0x40>)
 800dfa2:	4c0c      	ldr	r4, [pc, #48]	; (800dfd4 <__libc_init_array+0x44>)
 800dfa4:	f000 f91e 	bl	800e1e4 <_init>
 800dfa8:	1b64      	subs	r4, r4, r5
 800dfaa:	10a4      	asrs	r4, r4, #2
 800dfac:	2600      	movs	r6, #0
 800dfae:	42a6      	cmp	r6, r4
 800dfb0:	d105      	bne.n	800dfbe <__libc_init_array+0x2e>
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
 800dfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb8:	4798      	blx	r3
 800dfba:	3601      	adds	r6, #1
 800dfbc:	e7ee      	b.n	800df9c <__libc_init_array+0xc>
 800dfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc2:	4798      	blx	r3
 800dfc4:	3601      	adds	r6, #1
 800dfc6:	e7f2      	b.n	800dfae <__libc_init_array+0x1e>
 800dfc8:	0800e2c8 	.word	0x0800e2c8
 800dfcc:	0800e2c8 	.word	0x0800e2c8
 800dfd0:	0800e2c8 	.word	0x0800e2c8
 800dfd4:	0800e2d0 	.word	0x0800e2d0

0800dfd8 <malloc>:
 800dfd8:	4b02      	ldr	r3, [pc, #8]	; (800dfe4 <malloc+0xc>)
 800dfda:	4601      	mov	r1, r0
 800dfdc:	6818      	ldr	r0, [r3, #0]
 800dfde:	f000 b82b 	b.w	800e038 <_malloc_r>
 800dfe2:	bf00      	nop
 800dfe4:	20000198 	.word	0x20000198

0800dfe8 <memset>:
 800dfe8:	4402      	add	r2, r0
 800dfea:	4603      	mov	r3, r0
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d100      	bne.n	800dff2 <memset+0xa>
 800dff0:	4770      	bx	lr
 800dff2:	f803 1b01 	strb.w	r1, [r3], #1
 800dff6:	e7f9      	b.n	800dfec <memset+0x4>

0800dff8 <sbrk_aligned>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4e0e      	ldr	r6, [pc, #56]	; (800e034 <sbrk_aligned+0x3c>)
 800dffc:	460c      	mov	r4, r1
 800dffe:	6831      	ldr	r1, [r6, #0]
 800e000:	4605      	mov	r5, r0
 800e002:	b911      	cbnz	r1, 800e00a <sbrk_aligned+0x12>
 800e004:	f000 f88c 	bl	800e120 <_sbrk_r>
 800e008:	6030      	str	r0, [r6, #0]
 800e00a:	4621      	mov	r1, r4
 800e00c:	4628      	mov	r0, r5
 800e00e:	f000 f887 	bl	800e120 <_sbrk_r>
 800e012:	1c43      	adds	r3, r0, #1
 800e014:	d00a      	beq.n	800e02c <sbrk_aligned+0x34>
 800e016:	1cc4      	adds	r4, r0, #3
 800e018:	f024 0403 	bic.w	r4, r4, #3
 800e01c:	42a0      	cmp	r0, r4
 800e01e:	d007      	beq.n	800e030 <sbrk_aligned+0x38>
 800e020:	1a21      	subs	r1, r4, r0
 800e022:	4628      	mov	r0, r5
 800e024:	f000 f87c 	bl	800e120 <_sbrk_r>
 800e028:	3001      	adds	r0, #1
 800e02a:	d101      	bne.n	800e030 <sbrk_aligned+0x38>
 800e02c:	f04f 34ff 	mov.w	r4, #4294967295
 800e030:	4620      	mov	r0, r4
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	2000167c 	.word	0x2000167c

0800e038 <_malloc_r>:
 800e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03c:	1ccd      	adds	r5, r1, #3
 800e03e:	f025 0503 	bic.w	r5, r5, #3
 800e042:	3508      	adds	r5, #8
 800e044:	2d0c      	cmp	r5, #12
 800e046:	bf38      	it	cc
 800e048:	250c      	movcc	r5, #12
 800e04a:	2d00      	cmp	r5, #0
 800e04c:	4607      	mov	r7, r0
 800e04e:	db01      	blt.n	800e054 <_malloc_r+0x1c>
 800e050:	42a9      	cmp	r1, r5
 800e052:	d905      	bls.n	800e060 <_malloc_r+0x28>
 800e054:	230c      	movs	r3, #12
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	2600      	movs	r6, #0
 800e05a:	4630      	mov	r0, r6
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	4e2e      	ldr	r6, [pc, #184]	; (800e11c <_malloc_r+0xe4>)
 800e062:	f000 f8b1 	bl	800e1c8 <__malloc_lock>
 800e066:	6833      	ldr	r3, [r6, #0]
 800e068:	461c      	mov	r4, r3
 800e06a:	bb34      	cbnz	r4, 800e0ba <_malloc_r+0x82>
 800e06c:	4629      	mov	r1, r5
 800e06e:	4638      	mov	r0, r7
 800e070:	f7ff ffc2 	bl	800dff8 <sbrk_aligned>
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	4604      	mov	r4, r0
 800e078:	d14d      	bne.n	800e116 <_malloc_r+0xde>
 800e07a:	6834      	ldr	r4, [r6, #0]
 800e07c:	4626      	mov	r6, r4
 800e07e:	2e00      	cmp	r6, #0
 800e080:	d140      	bne.n	800e104 <_malloc_r+0xcc>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	4631      	mov	r1, r6
 800e086:	4638      	mov	r0, r7
 800e088:	eb04 0803 	add.w	r8, r4, r3
 800e08c:	f000 f848 	bl	800e120 <_sbrk_r>
 800e090:	4580      	cmp	r8, r0
 800e092:	d13a      	bne.n	800e10a <_malloc_r+0xd2>
 800e094:	6821      	ldr	r1, [r4, #0]
 800e096:	3503      	adds	r5, #3
 800e098:	1a6d      	subs	r5, r5, r1
 800e09a:	f025 0503 	bic.w	r5, r5, #3
 800e09e:	3508      	adds	r5, #8
 800e0a0:	2d0c      	cmp	r5, #12
 800e0a2:	bf38      	it	cc
 800e0a4:	250c      	movcc	r5, #12
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	f7ff ffa5 	bl	800dff8 <sbrk_aligned>
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	d02b      	beq.n	800e10a <_malloc_r+0xd2>
 800e0b2:	6823      	ldr	r3, [r4, #0]
 800e0b4:	442b      	add	r3, r5
 800e0b6:	6023      	str	r3, [r4, #0]
 800e0b8:	e00e      	b.n	800e0d8 <_malloc_r+0xa0>
 800e0ba:	6822      	ldr	r2, [r4, #0]
 800e0bc:	1b52      	subs	r2, r2, r5
 800e0be:	d41e      	bmi.n	800e0fe <_malloc_r+0xc6>
 800e0c0:	2a0b      	cmp	r2, #11
 800e0c2:	d916      	bls.n	800e0f2 <_malloc_r+0xba>
 800e0c4:	1961      	adds	r1, r4, r5
 800e0c6:	42a3      	cmp	r3, r4
 800e0c8:	6025      	str	r5, [r4, #0]
 800e0ca:	bf18      	it	ne
 800e0cc:	6059      	strne	r1, [r3, #4]
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	bf08      	it	eq
 800e0d2:	6031      	streq	r1, [r6, #0]
 800e0d4:	5162      	str	r2, [r4, r5]
 800e0d6:	604b      	str	r3, [r1, #4]
 800e0d8:	4638      	mov	r0, r7
 800e0da:	f104 060b 	add.w	r6, r4, #11
 800e0de:	f000 f879 	bl	800e1d4 <__malloc_unlock>
 800e0e2:	f026 0607 	bic.w	r6, r6, #7
 800e0e6:	1d23      	adds	r3, r4, #4
 800e0e8:	1af2      	subs	r2, r6, r3
 800e0ea:	d0b6      	beq.n	800e05a <_malloc_r+0x22>
 800e0ec:	1b9b      	subs	r3, r3, r6
 800e0ee:	50a3      	str	r3, [r4, r2]
 800e0f0:	e7b3      	b.n	800e05a <_malloc_r+0x22>
 800e0f2:	6862      	ldr	r2, [r4, #4]
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	bf0c      	ite	eq
 800e0f8:	6032      	streq	r2, [r6, #0]
 800e0fa:	605a      	strne	r2, [r3, #4]
 800e0fc:	e7ec      	b.n	800e0d8 <_malloc_r+0xa0>
 800e0fe:	4623      	mov	r3, r4
 800e100:	6864      	ldr	r4, [r4, #4]
 800e102:	e7b2      	b.n	800e06a <_malloc_r+0x32>
 800e104:	4634      	mov	r4, r6
 800e106:	6876      	ldr	r6, [r6, #4]
 800e108:	e7b9      	b.n	800e07e <_malloc_r+0x46>
 800e10a:	230c      	movs	r3, #12
 800e10c:	603b      	str	r3, [r7, #0]
 800e10e:	4638      	mov	r0, r7
 800e110:	f000 f860 	bl	800e1d4 <__malloc_unlock>
 800e114:	e7a1      	b.n	800e05a <_malloc_r+0x22>
 800e116:	6025      	str	r5, [r4, #0]
 800e118:	e7de      	b.n	800e0d8 <_malloc_r+0xa0>
 800e11a:	bf00      	nop
 800e11c:	20001678 	.word	0x20001678

0800e120 <_sbrk_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d06      	ldr	r5, [pc, #24]	; (800e13c <_sbrk_r+0x1c>)
 800e124:	2300      	movs	r3, #0
 800e126:	4604      	mov	r4, r0
 800e128:	4608      	mov	r0, r1
 800e12a:	602b      	str	r3, [r5, #0]
 800e12c:	f7f4 fff2 	bl	8003114 <_sbrk>
 800e130:	1c43      	adds	r3, r0, #1
 800e132:	d102      	bne.n	800e13a <_sbrk_r+0x1a>
 800e134:	682b      	ldr	r3, [r5, #0]
 800e136:	b103      	cbz	r3, 800e13a <_sbrk_r+0x1a>
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
 800e13c:	20001680 	.word	0x20001680

0800e140 <_raise_r>:
 800e140:	291f      	cmp	r1, #31
 800e142:	b538      	push	{r3, r4, r5, lr}
 800e144:	4604      	mov	r4, r0
 800e146:	460d      	mov	r5, r1
 800e148:	d904      	bls.n	800e154 <_raise_r+0x14>
 800e14a:	2316      	movs	r3, #22
 800e14c:	6003      	str	r3, [r0, #0]
 800e14e:	f04f 30ff 	mov.w	r0, #4294967295
 800e152:	bd38      	pop	{r3, r4, r5, pc}
 800e154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e156:	b112      	cbz	r2, 800e15e <_raise_r+0x1e>
 800e158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e15c:	b94b      	cbnz	r3, 800e172 <_raise_r+0x32>
 800e15e:	4620      	mov	r0, r4
 800e160:	f000 f830 	bl	800e1c4 <_getpid_r>
 800e164:	462a      	mov	r2, r5
 800e166:	4601      	mov	r1, r0
 800e168:	4620      	mov	r0, r4
 800e16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e16e:	f000 b817 	b.w	800e1a0 <_kill_r>
 800e172:	2b01      	cmp	r3, #1
 800e174:	d00a      	beq.n	800e18c <_raise_r+0x4c>
 800e176:	1c59      	adds	r1, r3, #1
 800e178:	d103      	bne.n	800e182 <_raise_r+0x42>
 800e17a:	2316      	movs	r3, #22
 800e17c:	6003      	str	r3, [r0, #0]
 800e17e:	2001      	movs	r0, #1
 800e180:	e7e7      	b.n	800e152 <_raise_r+0x12>
 800e182:	2400      	movs	r4, #0
 800e184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e188:	4628      	mov	r0, r5
 800e18a:	4798      	blx	r3
 800e18c:	2000      	movs	r0, #0
 800e18e:	e7e0      	b.n	800e152 <_raise_r+0x12>

0800e190 <raise>:
 800e190:	4b02      	ldr	r3, [pc, #8]	; (800e19c <raise+0xc>)
 800e192:	4601      	mov	r1, r0
 800e194:	6818      	ldr	r0, [r3, #0]
 800e196:	f7ff bfd3 	b.w	800e140 <_raise_r>
 800e19a:	bf00      	nop
 800e19c:	20000198 	.word	0x20000198

0800e1a0 <_kill_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	; (800e1c0 <_kill_r+0x20>)
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	f7f4 ff97 	bl	80030e0 <_kill>
 800e1b2:	1c43      	adds	r3, r0, #1
 800e1b4:	d102      	bne.n	800e1bc <_kill_r+0x1c>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b103      	cbz	r3, 800e1bc <_kill_r+0x1c>
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	20001680 	.word	0x20001680

0800e1c4 <_getpid_r>:
 800e1c4:	f7f4 bf84 	b.w	80030d0 <_getpid>

0800e1c8 <__malloc_lock>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__malloc_lock+0x8>)
 800e1ca:	f000 b809 	b.w	800e1e0 <__retarget_lock_acquire_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	20001684 	.word	0x20001684

0800e1d4 <__malloc_unlock>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	; (800e1dc <__malloc_unlock+0x8>)
 800e1d6:	f000 b804 	b.w	800e1e2 <__retarget_lock_release_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20001684 	.word	0x20001684

0800e1e0 <__retarget_lock_acquire_recursive>:
 800e1e0:	4770      	bx	lr

0800e1e2 <__retarget_lock_release_recursive>:
 800e1e2:	4770      	bx	lr

0800e1e4 <_init>:
 800e1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e6:	bf00      	nop
 800e1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ea:	bc08      	pop	{r3}
 800e1ec:	469e      	mov	lr, r3
 800e1ee:	4770      	bx	lr

0800e1f0 <_fini>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr
